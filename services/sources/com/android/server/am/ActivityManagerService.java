package com.android.server.am;

import android.R;
import android.app.ActivityClient;
import android.app.ActivityManager;
import android.app.ActivityManagerInternal;
import android.app.ActivityOptions;
import android.app.ActivityTaskManager;
import android.app.ActivityThread;
import android.app.AlarmManager;
import android.app.AnrController;
import android.app.AppGlobals;
import android.app.AppOpsManager;
import android.app.AppOpsManagerInternal;
import android.app.ApplicationErrorReport;
import android.app.ApplicationStartInfo;
import android.app.BackgroundStartPrivileges;
import android.app.BroadcastOptions;
import android.app.ContentProviderHolder;
import android.app.ForegroundServiceDelegationOptions;
import android.app.ForegroundServiceTypePolicy;
import android.app.IActivityController;
import android.app.IActivityManager;
import android.app.IApplicationStartInfoCompleteListener;
import android.app.IApplicationThread;
import android.app.IForegroundServiceObserver;
import android.app.IInstrumentationWatcher;
import android.app.IProcessObserver;
import android.app.IServiceConnection;
import android.app.IStopUserCallback;
import android.app.ITaskStackListener;
import android.app.IUiAutomationConnection;
import android.app.IUidFrozenStateChangedCallback;
import android.app.IUidObserver;
import android.app.IUnsafeIntentStrictModeCallback;
import android.app.IUserSwitchObserver;
import android.app.KeyguardManager;
import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.PendingIntentStats;
import android.app.ProcessMemoryState;
import android.app.ProfilerInfo;
import android.app.RemoteServiceException;
import android.app.ServiceStartNotAllowedException;
import android.app.StatsManager;
import android.app.UidObserver;
import android.app.assist.ActivityId;
import android.app.backup.IBackupManager;
import android.app.compat.CompatChanges;
import android.app.usage.NetworkStatsManager;
import android.app.usage.UsageEvents;
import android.app.usage.UsageStatsManagerInternal;
import android.appwidget.AppWidgetManagerInternal;
import android.bluetooth.BluetoothAdapter;
import android.content.AttributionSource;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.ContentProvider;
import android.content.ContentResolver;
import android.content.Context;
import android.content.IContentProvider;
import android.content.IIntentReceiver;
import android.content.IIntentSender;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.LocusId;
import android.content.ServiceConnection;
import android.content.pm.ActivityInfo;
import android.content.pm.ActivityPresentationInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.IPackageDataObserver;
import android.content.pm.IPackageManager;
import android.content.pm.IShortcutService;
import android.content.pm.InstrumentationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.PackageManagerInternal;
import android.content.pm.ParceledListSlice;
import android.content.pm.ProcessInfo;
import android.content.pm.ProviderInfo;
import android.content.pm.ResolveInfo;
import android.content.pm.SharedLibraryInfo;
import android.content.pm.TestUtilityService;
import android.content.pm.UserInfo;
import android.content.pm.UserProperties;
import android.content.pm.VersionedPackage;
import android.content.res.CompatibilityInfo;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.database.ContentObserver;
import android.frameworks.vibrator.VibrationParam$1$$ExternalSyntheticOutline0;
import android.graphics.Rect;
import android.hardware.audio.common.V2_0.AudioOffloadInfo$$ExternalSyntheticOutline0;
import android.hardware.broadcastradio.V2_0.AmFmBandRange$$ExternalSyntheticOutline0;
import android.hardware.camera2.CameraManager;
import android.hardware.display.DisplayManager;
import android.hardware.display.DisplayManagerInternal;
import android.hardware.power.stats.EnergyConsumerResult;
import android.hardware.usb.V1_1.PortStatus_1_1$$ExternalSyntheticOutline0;
import android.net.ConnectivityManager;
import android.net.ConnectivityModuleConnector$$ExternalSyntheticOutline0;
import android.net.INetd;
import android.net.ProxyInfo;
import android.net.ProxyInfoWrapper;
import android.net.Uri;
import android.net.shared.InitialConfiguration$$ExternalSyntheticOutline0;
import android.net.wifi.WifiManager;
import android.os.AppZygote;
import android.os.BatteryManagerInternal;
import android.os.BatteryStatsInternal;
import android.os.Binder;
import android.os.BinderProxy;
import android.os.Build;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.CustomFrequencyManagerInternal;
import android.os.Debug;
import android.os.DropBoxManager;
import android.os.FileUtils;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.IBinder;
import android.os.ICancellationSignal;
import android.os.ICustomFrequencyManager;
import android.os.IDeviceIdentifiersPolicyService;
import android.os.INetworkManagementService;
import android.os.IPermissionController;
import android.os.IProcessInfoService;
import android.os.IProgressListener;
import android.os.InputConstants;
import android.os.LocaleList;
import android.os.Looper;
import android.os.Message;
import android.os.Parcel;
import android.os.ParcelFileDescriptor;
import android.os.PowerExemptionManager;
import android.os.PowerManager;
import android.os.PowerManagerInternal;
import android.os.Process;
import android.os.RemoteCallback;
import android.os.RemoteCallbackList;
import android.os.RemoteException;
import android.os.ResultReceiver;
import android.os.ServiceManager;
import android.os.ShellCallback;
import android.os.StrictMode;
import android.os.SystemClock;
import android.os.SystemProperties;
import android.os.Trace;
import android.os.UserHandle;
import android.os.UserManager;
import android.os.WorkSource;
import android.os.incremental.IncrementalMetrics;
import android.os.storage.StorageManager;
import android.provider.DeviceConfig;
import android.provider.Settings;
import android.sysprop.InitProperties;
import android.system.Os;
import android.system.OsConstants;
import android.telephony.TelephonyManager;
import android.text.TextUtils;
import android.util.ArrayMap;
import android.util.ArraySet;
import android.util.EventLog;
import android.util.FeatureFlagUtils;
import android.util.IndentingPrintWriter;
import android.util.IntArray;
import android.util.Log;
import android.util.MathUtils;
import android.util.Pair;
import android.util.PerfLog;
import android.util.Slog;
import android.util.SparseArray;
import android.util.SparseIntArray;
import android.util.StatsEvent;
import android.util.TimeUtils;
import android.util.proto.ProtoOutputStream;
import android.view.Display;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import com.android.internal.app.ProcessMap;
import com.android.internal.app.SystemUserHomeActivity;
import com.android.internal.app.procstats.ProcessState;
import com.android.internal.app.procstats.ProcessStatsInternal;
import com.android.internal.content.InstallLocationUtils;
import com.android.internal.notification.SystemNotificationChannels;
import com.android.internal.os.BackgroundThread;
import com.android.internal.os.BinderCallHeavyHitterWatcher;
import com.android.internal.os.BinderInternal;
import com.android.internal.os.BinderTransactionNameResolver;
import com.android.internal.os.IResultReceiver;
import com.android.internal.os.ProcessCpuTracker;
import com.android.internal.os.SomeArgs;
import com.android.internal.os.TimeoutRecord;
import com.android.internal.os.TransferPipe;
import com.android.internal.os.Zygote;
import com.android.internal.pm.parsing.pkg.AndroidPackageInternal;
import com.android.internal.pm.pkg.parsing.ParsingPackageUtils;
import com.android.internal.util.ArrayUtils;
import com.android.internal.util.ConcurrentUtils;
import com.android.internal.util.DumpUtils;
import com.android.internal.util.FastPrintWriter;
import com.android.internal.util.FrameworkStatsLog;
import com.android.internal.util.MemInfoReader;
import com.android.internal.util.Preconditions;
import com.android.internal.util.function.pooled.PooledLambda;
import com.android.internal.util.jobs.DumpUtils$$ExternalSyntheticOutline0;
import com.android.internal.util.jobs.Preconditions$$ExternalSyntheticOutline0;
import com.android.internal.util.jobs.XmlUtils$$ExternalSyntheticOutline0;
import com.android.modules.utils.build.SdkLevel;
import com.android.server.AnyMotionDetector$$ExternalSyntheticOutline0;
import com.android.server.AppStateTracker;
import com.android.server.AppStateTrackerImpl$MyHandler$$ExternalSyntheticOutline0;
import com.android.server.BatteryService$$ExternalSyntheticOutline0;
import com.android.server.BinaryTransparencyService$$ExternalSyntheticOutline0;
import com.android.server.BinderCallsStatsService;
import com.android.server.BootReceiver$$ExternalSyntheticOutline0;
import com.android.server.CustomizedBinderCallsStatsInternal$$ExternalSyntheticOutline0;
import com.android.server.DeviceIdleController$$ExternalSyntheticOutline0;
import com.android.server.DeviceIdleInternal;
import com.android.server.DirEncryptServiceHelper$$ExternalSyntheticOutline0;
import com.android.server.DssController;
import com.android.server.ExplicitHealthCheckController$$ExternalSyntheticOutline0;
import com.android.server.FgThread;
import com.android.server.HeimdAllFsService$$ExternalSyntheticOutline0;
import com.android.server.HermesService$3$$ExternalSyntheticOutline0;
import com.android.server.IntentResolver;
import com.android.server.IoThread;
import com.android.server.LocalManagerRegistry;
import com.android.server.LocalServices;
import com.android.server.NandswapManager$$ExternalSyntheticOutline0;
import com.android.server.PackageWatchdog;
import com.android.server.RCPManagerService$$ExternalSyntheticOutline0;
import com.android.server.ServiceKeeper$$ExternalSyntheticOutline0;
import com.android.server.ServiceThread;
import com.android.server.StorageManagerService$$ExternalSyntheticOutline0;
import com.android.server.SystemConfig;
import com.android.server.SystemServer$$ExternalSyntheticLambda7;
import com.android.server.SystemService;
import com.android.server.SystemServiceManager;
import com.android.server.SystemServiceManager$$ExternalSyntheticOutline0;
import com.android.server.ThreadPriorityBooster;
import com.android.server.UiThread;
import com.android.server.VcnManagementService$$ExternalSyntheticOutline0;
import com.android.server.VpnManagerService$$ExternalSyntheticOutline0;
import com.android.server.Watchdog;
import com.android.server.accessibility.AbstractAccessibilityServiceConnection$$ExternalSyntheticOutline0;
import com.android.server.accessibility.AccessibilityManagerService$$ExternalSyntheticOutline0;
import com.android.server.accessibility.BrailleDisplayConnection$$ExternalSyntheticOutline0;
import com.android.server.accessibility.ProxyManager$$ExternalSyntheticOutline0;
import com.android.server.accessibility.magnification.FullScreenMagnificationGestureHandler;
import com.android.server.alarm.GmsAlarmManager$$ExternalSyntheticOutline0;
import com.android.server.am.ActiveServices;
import com.android.server.am.ActiveServices.BackgroundRestrictedListener;
import com.android.server.am.ActivityManagerService;
import com.android.server.am.ActivityManagerServiceExt;
import com.android.server.am.ActivityManagerShellCommand;
import com.android.server.am.AppNotRespondingDialog;
import com.android.server.am.AppProfiler;
import com.android.server.am.AppRestrictionController;
import com.android.server.am.AppStartInfoTracker.ApplicationStartInfoCompleteCallback;
import com.android.server.am.BaseRestrictionMgr;
import com.android.server.am.BatteryStatsService;
import com.android.server.am.BatteryStatsService.LocalService;
import com.android.server.am.BatteryStatsService.StatsPullAtomCallbackImpl;
import com.android.server.am.BroadcastStats;
import com.android.server.am.BugReportHandlerUtil;
import com.android.server.am.DropboxRateLimiter;
import com.android.server.am.FreecessController;
import com.android.server.am.FreecessHandler;
import com.android.server.am.InstrumentationReporter;
import com.android.server.am.KillPolicyManager;
import com.android.server.am.MARsPolicyManager;
import com.android.server.am.PDSController;
import com.android.server.am.PendingIntentRecord;
import com.android.server.am.PlatformCompatCache;
import com.android.server.am.ProcessList;
import com.android.server.am.ProcessStatsService.LocalService;
import com.android.server.am.UidObserverController;
import com.android.server.am.UserController.AnonymousClass4;
import com.android.server.am.mars.HistoryBuffer;
import com.android.server.am.mars.MARsDebugConfig;
import com.android.server.am.mars.database.FASTableContract;
import com.android.server.am.mars.database.MARsComponentTracker;
import com.android.server.am.mars.filter.filter.ActiveMusicRecordFilter;
import com.android.server.am.mars.filter.filter.DefaultAppFilter;
import com.android.server.am.mars.filter.filter.LockScreenFilter;
import com.android.server.am.mars.filter.filter.TopPackageFilter;
import com.android.server.am.pds.PDSTrigger;
import com.android.server.appop.AppOpsManagerLocal;
import com.android.server.appop.AppOpsService;
import com.android.server.appop.AppOpsService.AnonymousClass6;
import com.android.server.appop.AppOpsUidStateTrackerImpl;
import com.android.server.backup.BackupManagerConstants;
import com.android.server.bgslotmanager.BGSlotManager;
import com.android.server.bgslotmanager.BgAppPropManager;
import com.android.server.bgslotmanager.CameraKillModeManager;
import com.android.server.bgslotmanager.CustomEFKManager;
import com.android.server.chimera.ChimeraManagerService;
import com.android.server.chimera.ppn.PerProcessNandswap;
import com.android.server.chimera.umr.KernelMemoryProxy$ReclaimerLog;
import com.android.server.chimera.umr.UnifiedMemoryReclaimer;
import com.android.server.compat.PlatformCompat;
import com.android.server.contentcapture.ContentCaptureManagerService;
import com.android.server.criticalevents.CriticalEventLog;
import com.android.server.criticalevents.nano.CriticalEventProto;
import com.android.server.firewall.IntentFirewall;
import com.android.server.job.JobSchedulerInternal;
import com.android.server.knox.zt.devicetrust.AppMonitor;
import com.android.server.location.gnss.hal.GnssNative;
import com.android.server.net.NetworkManagementService;
import com.android.server.net.NetworkPolicyManagerService;
import com.android.server.os.NativeTombstoneManager;
import com.android.server.pm.Computer;
import com.android.server.pm.ContentDispatcher;
import com.android.server.pm.PackageManagerService;
import com.android.server.pm.PackageSetting;
import com.android.server.pm.SaferIntentUtils;
import com.android.server.pm.UserManagerInternal;
import com.android.server.pm.permission.AccessCheckDelegate$AccessCheckDelegateImpl;
import com.android.server.pm.permission.PermissionManagerService;
import com.android.server.pm.pkg.AndroidPackage;
import com.android.server.power.ShutdownThread;
import com.android.server.power.stats.BatteryExternalStatsWorker;
import com.android.server.power.stats.BatteryStatsImpl;
import com.android.server.power.stats.EnergyConsumerSnapshot;
import com.android.server.power.stats.PowerStatsScheduler;
import com.android.server.powerstats.PowerStatsService;
import com.android.server.sdksandbox.SdkSandboxManagerLocal;
import com.android.server.selinux.RateLimiter;
import com.android.server.stats.pull.AggregatedMobileDataStatsPuller;
import com.android.server.stats.pull.StatsPullAtomService;
import com.android.server.uri.GrantUri;
import com.android.server.uri.UriGrantsManagerInternal;
import com.android.server.uri.UriGrantsManagerService;
import com.android.server.uri.UriPermission;
import com.android.server.usage.IntervalStats;
import com.android.server.usage.UsageStatsService;
import com.android.server.usage.UserUsageStatsService;
import com.android.server.utils.AnrTimer;
import com.android.server.utils.PriorityDump;
import com.android.server.utils.Slogf;
import com.android.server.utils.TimingsTraceAndSlog;
import com.android.server.vr.VrManagerService;
import com.android.server.wm.ActivityManagerPerformance;
import com.android.server.wm.ActivityMetricsLaunchObserver;
import com.android.server.wm.ActivityRecord;
import com.android.server.wm.ActivityServiceConnectionsHolder;
import com.android.server.wm.ActivityTaskManagerInternal;
import com.android.server.wm.ActivityTaskManagerService;
import com.android.server.wm.ActivityTaskManagerService$$ExternalSyntheticLambda14;
import com.android.server.wm.ActivityTaskManagerService$$ExternalSyntheticLambda5;
import com.android.server.wm.ActivityTaskManagerService$LocalService$$ExternalSyntheticLambda0;
import com.android.server.wm.ActivityTaskSupervisor;
import com.android.server.wm.DisplayContent;
import com.android.server.wm.LaunchObserverRegistryImpl;
import com.android.server.wm.LaunchObserverRegistryImpl$$ExternalSyntheticLambda0;
import com.android.server.wm.RootWindowContainer;
import com.android.server.wm.RootWindowContainer$$ExternalSyntheticLambda16;
import com.android.server.wm.RootWindowContainer$$ExternalSyntheticLambda44;
import com.android.server.wm.Task;
import com.android.server.wm.TaskSnapshotCache;
import com.android.server.wm.TaskSnapshotController;
import com.android.server.wm.WindowManagerGlobalLock;
import com.android.server.wm.WindowManagerInternal;
import com.android.server.wm.WindowManagerService;
import com.android.server.wm.WindowProcessController;
import com.android.server.wm.WindowProcessControllerMap;
import com.att.iqi.lib.BuildConfig;
import com.samsung.android.app.SemDualAppManager;
import com.samsung.android.fontutil.FlipFontOptimizer;
import com.samsung.android.knox.EnterpriseDeviceManager;
import com.samsung.android.knox.PersonaManagerInternal;
import com.samsung.android.knox.SemPersonaManager;
import com.samsung.android.knox.application.IApplicationPolicy;
import com.samsung.android.knox.custom.KnoxCustomManagerService;
import com.samsung.android.knox.dar.ddar.DualDarManager;
import com.samsung.android.knox.dar.ddar.proxy.KnoxProxyManagerInternal;
import com.samsung.android.knox.multiuser.MultiUserManager;
import com.samsung.android.knox.restriction.RestrictionPolicy;
import com.samsung.android.knox.zt.devicetrust.EndpointMonitorConst;
import com.samsung.android.knoxguard.service.utils.Constants;
import com.samsung.android.localeoverlaymanager.LocaleOverlayManagerWrapper;
import com.samsung.android.localeoverlaymanager.OverlayChangeObserver;
import com.samsung.android.os.SemDvfsManager;
import com.samsung.android.rune.CoreRune;
import com.samsung.android.sdhms.SemAppRestrictionManager;
import com.samsung.android.server.battery.BluetoothDeviceBatteryManager;
import com.samsung.android.server.battery.DeviceBatteryInfoService;
import com.samsung.android.server.battery.WatchBatteryManager;
import com.samsung.android.server.battery.WatchBatteryManager.ScreenOffAlarmListener;
import com.samsung.android.service.EngineeringMode.EngineeringModeManager;
import com.sec.tmodiagnostics.DeviceReportingSecurityChecker;
import dalvik.annotation.optimization.NeverCompile;
import dalvik.system.VMRuntime;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.Thread;
import java.lang.ref.WeakReference;
import java.nio.ByteBuffer;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAmount;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.BiFunction;
import java.util.function.BooleanSupplier;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;

/* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
/* loaded from: classes.dex */
public final class ActivityManagerService extends IActivityManager.Stub implements Watchdog.Monitor, BatteryStatsImpl.BatteryCallback, ActivityManagerGlobalLock {
    public static final int BIND_APPLICATION_TIMEOUT;
    public static final int BROADCAST_BG_TIMEOUT;
    public static final int BROADCAST_FG_TIMEOUT;
    public static final boolean DEBUG_LEVEL_LOW;
    public static final DateTimeFormatter DROPBOX_TIME_FORMATTER;
    public static final long[] DUMP_MEM_BUCKETS;
    public static final int[] DUMP_MEM_OOM_ADJ;
    public static final String[] DUMP_MEM_OOM_COMPACT_LABEL;
    public static final String[] DUMP_MEM_OOM_LABEL;
    public static final String[] EMPTY_STRING_ARRAY;
    public static final FgsTempAllowListItem FAKE_TEMP_ALLOW_LIST_ITEM;
    public static final int MY_PID;
    public static final int PROC_START_TIMEOUT;
    public static final boolean SHIP_BUILD;
    public static final boolean USER_BUILD;
    public static final SparseArray sActiveProcessInfoSelfLocked;
    public static final HostingRecord sNullHostingRecord;
    public static final ThreadPriorityBooster sProcThreadPriorityBooster;
    public static String sTheRealBuildSerial;
    public static final ThreadPriorityBooster sThreadPriorityBooster;
    public String currentLauncherName;
    public final AtomicBoolean isNowAppLaunching;
    public final AbnormalUsageService mAbnormalUsageService;
    public AccessCheckDelegateHelper mAccessCheckDelegateHelper;
    public final IntArray mActiveCameraUids;
    public final ArrayList mActiveInstrumentation;
    public final AnonymousClass2 mActivityLaunchObserver;
    public ActivityTaskManagerService mActivityTaskManager;
    public boolean mAllowSpecifiedFifoScheduling;
    public ArrayMap mAllowedAssociations;
    public final HashSet mAlreadyLoggedViolatedStacks;
    public boolean mAlwaysFinishActivities;
    public final AnrHelper mAnrHelper;
    public ArrayMap mAppBindArgs;
    public final AppErrors mAppErrors;
    public AppOpsManager mAppOpsManager;
    public final AppOpsService mAppOpsService;
    public final AppProfiler mAppProfiler;
    public final AppRestrictionController mAppRestrictionController;
    public IApplicationPolicy mApplicationPolicy;
    public final SparseArray mAssociations;
    public ActivityTaskManagerInternal mAtmInternal;
    public int[] mBackgroundAppIdAllowlist;
    public ArraySet mBackgroundLaunchBroadcasts;
    public final SparseArray mBackupTargets;
    public final BatteryStatsService mBatteryStatsService;
    public final CopyOnWriteArrayList mBindServiceEventListeners;
    public BinderCallsStatsService.Internal mBinderStatsService;
    public volatile boolean mBinderTransactionTrackingEnabled;
    public boolean mBootAnimationComplete;
    public volatile long mBootCompletedTimestamp;
    public int mBootPhase;
    public volatile boolean mBooted;
    public volatile boolean mBooting;
    public final CopyOnWriteArrayList mBroadcastEventListeners;
    public final BroadcastQueueModernImpl mBroadcastQueue;
    public boolean mCallFinishBooting;
    public CustomFrequencyManagerInternal mCfmsManagerInt;
    public final Map mCompanionAppUidsMap;
    public final ComponentAliasResolver mComponentAliasResolver;
    public final ActivityManagerConstants mConstants;
    public volatile ContentCaptureManagerService.LocalService mContentCaptureService;
    public final Context mContext;
    public CoreSettingsObserver mCoreSettingsObserver;
    public final ContentProviderHelper mCpHelper;
    public BroadcastStats mCurBroadcastStats;
    public OomAdjObserver mCurOomAdjObserver;
    public int mCurOomAdjUid;
    public final Object mCurResumedAppLock;
    public String mCurResumedPackage;
    public int mCurResumedUid;
    public String mCurrentPackage;
    public String mDebugApp;
    public boolean mDebugTransient;
    public final ArraySet mDeliveryGroupPolicyIgnoredActions;
    public boolean mDeterministicUidIdle;
    public int[] mDeviceIdleAllowlist;
    public int[] mDeviceIdleExceptIdleAllowlist;
    public int[] mDeviceIdleTempAllowlist;
    public volatile int mDeviceOwnerUid;
    public final DropboxRateLimiter mDropboxRateLimiter;
    public final DssController mDssController;
    public SemDvfsManager mDvfsMgr;
    public final DynamicHiddenApp mDynamicHiddenApp;
    public final ActivityManagerServiceExt mExt;
    public final int mFactoryTest;
    public final FgsTempAllowList mFgsStartTempAllowList;
    public final FgsTempAllowList mFgsWhileInUseTempAllowList;
    public boolean mForceBackgroundCheck;
    public final ProcessMap mForegroundPackages;
    public final ArrayList mForegroundServiceStateListeners;
    public final GetBackgroundStartPrivilegesFunctor mGetBackgroundStartPrivilegesFunctor;
    public final UiHandler mHandler;
    public final ServiceThread mHandlerThread;
    public final HiddenApiSettings mHiddenApiBlacklist;
    public final SparseArray mImportantProcesses;
    public final Injector mInjector;
    public final InstrumentationReporter mInstrumentationReporter;
    public final IntentFirewall mIntentFirewall;
    public final ActivityManagerInternal mInternal;
    public ArrayMap mIsolatedAppBindArgs;
    public final KillPolicyManager mKillPolicyManager;
    public long mLastBinderHeavyHitterAutoSamplerStart;
    public BroadcastStats mLastBroadcastStats;
    public long mLastIdleTime;
    public long mLastPowerCheckUptime;
    public ParcelFileDescriptor[] mLifeMonitorFds;
    public DeviceIdleInternal mLocalDeviceIdleController;
    public PowerManagerInternal mLocalPowerManager;
    public final SparseArray mMediaProjectionTokenMap;
    public String mNativeDebuggingApp;
    public volatile IUidObserver mNetworkPolicyUidObserver;
    public volatile boolean mOnBattery;
    public final Object mOomAdjObserverLock;
    public final OomAdjuster mOomAdjuster;
    public String mOrigDebugApp;
    public boolean mOrigWaitForDebugger;
    public PackageManagerInternal mPackageManagerInt;
    public final PackageWatchdog mPackageWatchdog;
    public final ArrayList mPendingCmdBR;
    public final PendingIntentController mPendingIntentController;
    public final Map mPendingSches;
    public final PendingStartActivityUids mPendingStartActivityUids;
    public final PendingTempAllowlists mPendingTempAllowlist;
    public PermissionManagerService.PermissionManagerServiceInternalImpl mPermissionManagerInt;
    public final ArrayList mPersistentStartingProcesses;
    public final PhantomProcessList mPhantomProcessList;
    public final PidMap mPidsSelfLocked;
    public final PlatformCompat mPlatformCompat;
    public String mPreviousPackage;
    public int mPreviousUserId;
    public final AnonymousClass1 mPriorityDumper;
    public final ArraySet mPrivateSpaceBootCompletedPackages;
    public final ActivityManagerProcLock mProcLock;
    public final ProcessList.ProcStartHandler mProcStartHandler;
    public final ProcessCpuTracker mProcessCpuTracker;
    public ProcessCpusetController mProcessCpusetController;
    public final ProcessList mProcessList;
    public final ProcessStatsService mProcessStats;
    public final ArrayList mProcessesOnHold;
    public volatile boolean mProcessesReady;
    public ArraySet mProfileOwnerUids;
    public final AnonymousClass3 mReceiverResolver;
    public final HashMap mRegisteredReceivers;
    public RestrictionPolicy mRestrictionPolicy;
    public boolean mSafeMode;
    public final ActiveServices mServices;
    public final ArrayList mSpecifiedFifoProcesses;
    public StatsPullAtomService.StatsPullAtomServiceInternalImpl mStatsPullAtomServiceInternal;
    public final SparseArray mStickyBroadcasts;
    public final SparseArray mStrictModeCallbacks;
    public boolean mSuspendUponWait;
    public volatile boolean mSystemReady;
    public SystemServiceManager mSystemServiceManager;
    public final ActivityThread mSystemThread;
    public TestUtilityService mTestUtilityService;
    public final TraceErrorLogger mTraceErrorLogger;
    public String mTrackAllocationApp;
    public boolean mTrackingAssociations;
    public final UriGrantsManagerInternal mUgmInternal;
    public final Context mUiContext;
    public final UiHandler mUiHandler;
    public final RemoteCallbackList mUidFrozenStateChangedCallbackList;
    public final SparseIntArray mUidNetworkBlockedReasons;
    public final UidObserverController mUidObserverController;
    public volatile UsageStatsManagerInternal mUsageStatsService;
    public final boolean mUseFifoUiScheduling;
    public final UserController mUserController;
    public volatile boolean mUserIsMonkey;
    public volatile ActivityManagerInternal.VoiceInteractionManagerProvider mVoiceInteractionManagerProvider;
    public boolean mWaitForDebugger;
    public final AtomicInteger mWakefulness;
    public WindowManagerService mWindowManager;
    public WindowManagerInternal mWmInternal;

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    /* renamed from: com.android.server.am.ActivityManagerService$11, reason: invalid class name */
    public final class AnonymousClass11 extends BroadcastReceiver {
        public final /* synthetic */ int $r8$classId;
        public final /* synthetic */ ActivityManagerService this$0;

        public /* synthetic */ AnonymousClass11(ActivityManagerService activityManagerService, int i) {
            this.$r8$classId = i;
            this.this$0 = activityManagerService;
        }

        @Override // android.content.BroadcastReceiver
        public final void onReceive(Context context, Intent intent) {
            switch (this.$r8$classId) {
                case 0:
                    String[] stringArrayExtra = intent.getStringArrayExtra("android.intent.extra.PACKAGES");
                    if (stringArrayExtra != null) {
                        for (String str : stringArrayExtra) {
                            ActivityManagerService activityManagerService = this.this$0;
                            ActivityManagerService.boostPriorityForLockedSection();
                            synchronized (activityManagerService) {
                                try {
                                    if (this.this$0.forceStopPackageLocked(str, -1, false, false, false, false, false, 0, "query restart")) {
                                        setResultCode(-1);
                                        ActivityManagerService.resetPriorityAfterLockedSection();
                                        return;
                                    }
                                } catch (Throwable th) {
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                    throw th;
                                }
                            }
                            ActivityManagerService.resetPriorityAfterLockedSection();
                        }
                        return;
                    }
                    return;
                default:
                    Log.i("ActivityManager", "Shutting down activity manager...");
                    this.this$0.shutdown(10000);
                    Log.i("ActivityManager", "Shutdown complete, restarting!");
                    Process.killProcess(Process.myPid());
                    System.exit(10);
                    return;
            }
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    /* renamed from: com.android.server.am.ActivityManagerService$12, reason: invalid class name */
    public final class AnonymousClass12 extends IIntentReceiver.Stub {
        public AnonymousClass12() {
        }

        public final void performReceive(Intent intent, int i, String str, Bundle bundle, boolean z, boolean z2, int i2) {
            ActivityManagerService.this.mBootCompletedTimestamp = SystemClock.uptimeMillis();
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            activityManagerService.mHandler.postDelayed(new ActivityManagerService$$ExternalSyntheticLambda9(3, this), activityManagerService.mConstants.FULL_PSS_MIN_INTERVAL);
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    /* renamed from: com.android.server.am.ActivityManagerService$14, reason: invalid class name */
    public final class AnonymousClass14 implements IBinder.DeathRecipient {
        public final int pid;
        public final String reason;
        public final /* synthetic */ ActivityManagerService this$0;
        public IBinder toastToken;
        public IBinder token;

        public AnonymousClass14(int i, ActivityManagerService activityManagerService, String str) {
            this.this$0 = activityManagerService;
            this.pid = i;
            this.reason = str;
        }

        @Override // android.os.IBinder.DeathRecipient
        public final void binderDied() {
            ActivityManagerService activityManagerService = this.this$0;
            activityManagerService.getClass();
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    synchronized (activityManagerService.mPidsSelfLocked) {
                        if (((AnonymousClass14) activityManagerService.mImportantProcesses.get(this.pid)) != this) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            return;
                        }
                        activityManagerService.mImportantProcesses.remove(this.pid);
                        ProcessRecord processRecord = activityManagerService.mPidsSelfLocked.get(this.pid);
                        if (processRecord == null) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            return;
                        }
                        processRecord.mState.mForcingToImportant = null;
                        activityManagerService.updateProcessForegroundLocked(0, processRecord, false, false, false);
                        activityManagerService.updateOomAdjLocked(9, processRecord);
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }

        public final String toString() {
            return "ImportanceToken { " + Integer.toHexString(System.identityHashCode(this)) + " " + this.reason + " " + this.pid + " " + this.token + " }";
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    /* renamed from: com.android.server.am.ActivityManagerService$16, reason: invalid class name */
    public final class AnonymousClass16 implements IBinder.DeathRecipient {
        @Override // android.os.IBinder.DeathRecipient
        public final void binderDied() {
            synchronized (this) {
                notifyAll();
            }
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    /* renamed from: com.android.server.am.ActivityManagerService$18, reason: invalid class name */
    public final class AnonymousClass18 extends ContentObserver {
        public final /* synthetic */ int $r8$classId = 1;
        public final Object val$context;

        public AnonymousClass18() {
            super(ActivityManagerService.this.mHandler);
            Uri uriFor = Settings.Global.getUriFor("display_size_forced");
            this.val$context = uriFor;
            ActivityManagerService.this.mContext.getContentResolver().registerContentObserver(uriFor, false, this, -1);
        }

        /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
        public AnonymousClass18(Handler handler, Context context) {
            super(handler);
            this.val$context = context;
        }

        @Override // android.database.ContentObserver
        public void onChange(boolean z) {
            switch (this.$r8$classId) {
                case 0:
                    ActivityManagerService activityManagerService = ActivityManagerService.this;
                    Context context = (Context) this.val$context;
                    activityManagerService.getClass();
                    if (ActivityManagerService.isDeviceProvisioned(context)) {
                        SystemProperties.set("persist.sys.device_provisioned", "1");
                        ((Context) this.val$context).getContentResolver().unregisterContentObserver(this);
                        break;
                    }
                    break;
                default:
                    super.onChange(z);
                    break;
            }
        }

        @Override // android.database.ContentObserver
        public void onChange(boolean z, Uri uri) {
            switch (this.$r8$classId) {
                case 1:
                    Slog.d("ActivityManager", "Changes ExtraFreeKbytes ..");
                    if (((Uri) this.val$context).equals(uri)) {
                        ActivityManagerService.this.updateExtraFreeKbytes();
                        break;
                    }
                    break;
                default:
                    super.onChange(z, uri);
                    break;
            }
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    /* renamed from: com.android.server.am.ActivityManagerService$21, reason: invalid class name */
    public final class AnonymousClass21 implements Comparator {
        public final /* synthetic */ boolean val$pss;

        public AnonymousClass21(boolean z) {
            this.val$pss = z;
        }

        @Override // java.util.Comparator
        public final int compare(Object obj, Object obj2) {
            MemItem memItem = (MemItem) obj;
            MemItem memItem2 = (MemItem) obj2;
            boolean z = this.val$pss;
            long j = z ? memItem.pss : memItem.mRss;
            long j2 = z ? memItem2.pss : memItem2.mRss;
            if (j < j2) {
                return 1;
            }
            return j > j2 ? -1 : 0;
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    /* renamed from: com.android.server.am.ActivityManagerService$22, reason: invalid class name */
    public final class AnonymousClass22 implements Runnable {
        public final /* synthetic */ int $r8$classId;
        public final Object val$app;

        public /* synthetic */ AnonymousClass22(int i, Object obj) {
            this.$r8$classId = i;
            this.val$app = obj;
        }

        @Override // java.lang.Runnable
        public final void run() {
            switch (this.$r8$classId) {
                case 0:
                    try {
                        IBackupManager asInterface = IBackupManager.Stub.asInterface(ServiceManager.getService("backup"));
                        ProcessRecord processRecord = (ProcessRecord) this.val$app;
                        asInterface.agentDisconnectedForUser(processRecord.userId, processRecord.info.packageName);
                        return;
                    } catch (RemoteException unused) {
                        return;
                    }
                default:
                    ProcessStatsService processStatsService = (ProcessStatsService) this.val$app;
                    synchronized (processStatsService.mLock) {
                        processStatsService.writeStateLocked(false);
                    }
                    return;
            }
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    /* renamed from: com.android.server.am.ActivityManagerService$3, reason: invalid class name */
    public final class AnonymousClass3 extends IntentResolver {
        @Override // com.android.server.IntentResolver
        public final boolean allowFilterResult(List list, Object obj) {
            IBinder asBinder = ((BroadcastFilter) obj).receiverList.receiver.asBinder();
            ArrayList arrayList = (ArrayList) list;
            for (int size = arrayList.size() - 1; size >= 0; size--) {
                if (((BroadcastFilter) arrayList.get(size)).receiverList.receiver.asBinder() == asBinder) {
                    return false;
                }
            }
            return true;
        }

        @Override // com.android.server.IntentResolver
        public final IntentFilter getIntentFilter(Object obj) {
            return (BroadcastFilter) obj;
        }

        @Override // com.android.server.IntentResolver
        public final boolean isPackageForFilter(String str, Object obj) {
            return str.equals(((BroadcastFilter) obj).packageName);
        }

        @Override // com.android.server.IntentResolver
        public final Object[] newArray(int i) {
            return new BroadcastFilter[i];
        }

        @Override // com.android.server.IntentResolver
        public final Object newResult(Computer computer, Object obj, int i, int i2, long j) {
            int i3;
            BroadcastFilter broadcastFilter = (BroadcastFilter) obj;
            if (i2 == -1 || (i3 = broadcastFilter.owningUserId) == -1 || i2 == i3) {
                return broadcastFilter;
            }
            return null;
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    /* renamed from: com.android.server.am.ActivityManagerService$7, reason: invalid class name */
    public final class AnonymousClass7 implements Runnable {
        public final /* synthetic */ int $r8$classId = 0;
        public final /* synthetic */ ProcessRecord val$app;
        public final /* synthetic */ int val$pid;

        public AnonymousClass7(int i, ProcessRecord processRecord) {
            this.val$pid = i;
            this.val$app = processRecord;
        }

        public AnonymousClass7(ProcessRecord processRecord, int i) {
            this.val$app = processRecord;
            this.val$pid = i;
        }

        @Override // java.lang.Runnable
        public final void run() {
            IBinder service;
            ICustomFrequencyManager asInterface;
            switch (this.$r8$classId) {
                case 0:
                    ActivityManagerService activityManagerService = ActivityManagerService.this;
                    if (activityManagerService.mBinderStatsService == null) {
                        activityManagerService.mBinderStatsService = (BinderCallsStatsService.Internal) LocalServices.getService(BinderCallsStatsService.Internal.class);
                    }
                    BinderCallsStatsService.Internal internal = activityManagerService.mBinderStatsService;
                    int i = this.val$pid;
                    ProcessRecord processRecord = this.val$app;
                    internal.reportProcessDied(i, processRecord.uid, processRecord.processName);
                    break;
                default:
                    ActivityManagerService activityManagerService2 = ActivityManagerService.this;
                    ProcessRecord processRecord2 = this.val$app;
                    int i2 = this.val$pid;
                    activityManagerService2.getClass();
                    boolean z = FreecessController.IS_MINIMIZE_OLAF_LOCK;
                    FreecessController freecessController = FreecessController.FreecessControllerHolder.INSTANCE;
                    if (freecessController != null && freecessController.mIsFreecessEnable) {
                        freecessController.releaseFreezedAppPid(i2);
                    }
                    if (processRecord2.mState.mSlowAbnormal && (service = ServiceManager.getService("CustomFrequencyManagerService")) != null && (asInterface = ICustomFrequencyManager.Stub.asInterface(service)) != null) {
                        try {
                            asInterface.requestFreezeSlowdown(i2, false, BuildConfig.BUILD_TYPE);
                            break;
                        } catch (RemoteException e) {
                            e.printStackTrace();
                        }
                    }
                    break;
            }
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class AppDeathRecipient implements IBinder.DeathRecipient {
        public final ProcessRecord mApp;
        public final IApplicationThread mAppThread;
        public final int mPid;

        public AppDeathRecipient(ProcessRecord processRecord, int i, IApplicationThread iApplicationThread) {
            this.mApp = processRecord;
            this.mPid = i;
            this.mAppThread = iApplicationThread;
        }

        @Override // android.os.IBinder.DeathRecipient
        public final void binderDied() {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.appDiedLocked(this.mApp, this.mPid, this.mAppThread, true, null);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class Association {
        public int mCount;
        public long mLastStateUptime;
        public int mNesting;
        public final String mSourceProcess;
        public final int mSourceUid;
        public long mStartTime;
        public final ComponentName mTargetComponent;
        public final String mTargetProcess;
        public final int mTargetUid;
        public long mTime;
        public int mLastState = 21;
        public final long[] mStateTimes = new long[21];

        public Association(int i, int i2, String str, String str2, ComponentName componentName) {
            this.mSourceUid = i;
            this.mSourceProcess = str;
            this.mTargetUid = i2;
            this.mTargetComponent = componentName;
            this.mTargetProcess = str2;
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class DbBinder extends Binder {
        public final /* synthetic */ int $r8$classId;
        public ActivityManagerService mActivityManagerService;

        public /* synthetic */ DbBinder(int i) {
            this.$r8$classId = i;
        }

        @Override // android.os.Binder
        public final void dump(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr) {
            switch (this.$r8$classId) {
                case 0:
                    try {
                        this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                        if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "dbinfo", printWriter)) {
                            this.mActivityManagerService.dumpDbInfo(fileDescriptor, printWriter, strArr);
                        }
                        return;
                    } finally {
                        this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
                    }
                case 1:
                    try {
                        this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                        if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "cacheinfo", printWriter)) {
                            this.mActivityManagerService.dumpBinderCacheContents(fileDescriptor, printWriter, strArr);
                        }
                        return;
                    } finally {
                        this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
                    }
                default:
                    try {
                        this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                        if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "gfxinfo", printWriter)) {
                            this.mActivityManagerService.dumpGraphicsHardwareUsage(fileDescriptor, printWriter, strArr);
                        }
                        return;
                    } finally {
                        this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
                    }
            }
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class FgsTempAllowListItem {
        public final int mCallingUid;
        public final long mDuration;
        public final String mReason;
        public final int mReasonCode;

        public FgsTempAllowListItem(int i, int i2, long j, String str) {
            this.mDuration = j;
            this.mReasonCode = i;
            this.mReason = str;
            this.mCallingUid = i2;
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class GetBackgroundStartPrivilegesFunctor implements Consumer {
        public BackgroundStartPrivileges mBackgroundStartPrivileges = BackgroundStartPrivileges.NONE;
        public int mUid;

        @Override // java.util.function.Consumer
        public final void accept(Object obj) {
            ProcessRecord processRecord = (ProcessRecord) obj;
            if (processRecord.uid == this.mUid) {
                this.mBackgroundStartPrivileges = this.mBackgroundStartPrivileges.merge(processRecord.getBackgroundStartPrivileges());
            }
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class HiddenApiSettings extends ContentObserver implements DeviceConfig.OnPropertiesChangedListener {
        public boolean mBlacklistDisabled;
        public final Context mContext;
        public List mExemptions;
        public String mExemptionsStr;
        public int mLogSampleRate;
        public int mPolicy;
        public int mStatslogSampleRate;

        public HiddenApiSettings(Context context, Handler handler) {
            super(handler);
            this.mExemptions = Collections.emptyList();
            this.mLogSampleRate = -1;
            this.mStatslogSampleRate = -1;
            this.mPolicy = -1;
            this.mContext = context;
        }

        @Override // android.database.ContentObserver
        public final void onChange(boolean z) {
            update();
        }

        public final void onPropertiesChanged(DeviceConfig.Properties properties) {
            int i = properties.getInt("hidden_api_access_log_sampling_rate", 0);
            if (i < 0 || i > 65536) {
                i = -1;
            }
            if (i != -1 && i != this.mLogSampleRate) {
                this.mLogSampleRate = i;
                Process.ZYGOTE_PROCESS.setHiddenApiAccessLogSampleRate(i);
            }
            int i2 = properties.getInt("hidden_api_access_statslog_sampling_rate", 0);
            if (i2 < 0 || i2 > 65536) {
                i2 = -1;
            }
            if (i2 == -1 || i2 == this.mStatslogSampleRate) {
                return;
            }
            this.mStatslogSampleRate = i2;
            Process.ZYGOTE_PROCESS.setHiddenApiAccessStatslogSampleRate(i2);
        }

        public final void update() {
            String string = Settings.Global.getString(this.mContext.getContentResolver(), "hidden_api_blacklist_exemptions");
            if (!TextUtils.equals(string, this.mExemptionsStr)) {
                this.mExemptionsStr = string;
                if ("*".equals(string)) {
                    this.mBlacklistDisabled = true;
                    this.mExemptions = Collections.emptyList();
                } else {
                    this.mBlacklistDisabled = false;
                    this.mExemptions = TextUtils.isEmpty(string) ? Collections.emptyList() : Arrays.asList(string.split(","));
                }
                if (!Process.ZYGOTE_PROCESS.setApiDenylistExemptions(this.mExemptions)) {
                    Slog.e("ActivityManager", "Failed to set API blacklist exemptions!");
                    this.mExemptions = Collections.emptyList();
                }
            }
            int i = Settings.Global.getInt(this.mContext.getContentResolver(), "hidden_api_policy", -1);
            this.mPolicy = ApplicationInfo.isValidHiddenApiEnforcementPolicy(i) ? i : -1;
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public class Injector {
        public final Context mContext;
        public NetworkManagementService.LocalService mNmi;
        public UserController mUserController;

        public Injector(Context context) {
            this.mContext = context;
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class ItemMatcher {
        public boolean all = true;
        public ArrayList components;
        public ArrayList objects;
        public ArrayList strings;

        public final void build(String str) {
            ComponentName unflattenFromString = ComponentName.unflattenFromString(str);
            if (unflattenFromString != null) {
                if (this.components == null) {
                    this.components = new ArrayList();
                }
                this.components.add(unflattenFromString);
                this.all = false;
                return;
            }
            try {
                int parseInt = Integer.parseInt(str, 16);
                if (this.objects == null) {
                    this.objects = new ArrayList();
                }
                this.objects.add(Integer.valueOf(parseInt));
                this.all = false;
            } catch (RuntimeException unused) {
                if (this.strings == null) {
                    this.strings = new ArrayList();
                }
                this.strings.add(str);
                this.all = false;
            }
        }

        public final boolean match(ComponentName componentName, Object obj) {
            if (this.all) {
                return true;
            }
            if (this.components != null) {
                for (int i = 0; i < this.components.size(); i++) {
                    if (((ComponentName) this.components.get(i)).equals(componentName)) {
                        return true;
                    }
                }
            }
            if (this.objects != null) {
                for (int i2 = 0; i2 < this.objects.size(); i2++) {
                    if (System.identityHashCode(obj) == ((Integer) this.objects.get(i2)).intValue()) {
                        return true;
                    }
                }
            }
            if (this.strings != null) {
                String flattenToString = componentName.flattenToString();
                for (int i3 = 0; i3 < this.strings.size(); i3++) {
                    if (flattenToString.contains((CharSequence) this.strings.get(i3))) {
                        return true;
                    }
                }
            }
            return false;
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class Lifecycle extends SystemService {
        public static ActivityTaskManagerService sAtm;
        public final ActivityManagerService mService;

        public Lifecycle(Context context) {
            super(context);
            this.mService = new ActivityManagerService(context, sAtm);
        }

        /* JADX WARN: Type inference failed for: r1v50, types: [com.samsung.android.server.battery.DeviceBatteryInfoService$3] */
        /* JADX WARN: Type inference failed for: r1v57, types: [com.samsung.android.server.battery.DeviceBatteryInfoService$3] */
        @Override // com.android.server.SystemService
        public final void onBootPhase(int i) {
            int i2;
            String[] strArr;
            boolean[] zArr;
            SparseArray populateEnergyConsumerSubsystemMapsLocked;
            ActivityManagerService activityManagerService = this.mService;
            activityManagerService.mBootPhase = i;
            if (i != 500) {
                if (i != 550) {
                    if (i == 600) {
                        activityManagerService.mPackageWatchdog.onPackagesReady();
                        this.mService.getClass();
                        com.android.systemui.shared.Flags.enableHomeDelay();
                        Slog.d("ActivityManager", "ThemeHomeDelay: Home launch is not delayable, skipping timeout creation");
                        return;
                    }
                    return;
                }
                final BroadcastQueueModernImpl broadcastQueueModernImpl = activityManagerService.mBroadcastQueue;
                ContentResolver contentResolver = activityManagerService.mContext.getContentResolver();
                BroadcastConstants broadcastConstants = broadcastQueueModernImpl.mFgConstants;
                Handler handler = broadcastQueueModernImpl.mHandler;
                broadcastConstants.startObserving(handler, contentResolver);
                broadcastQueueModernImpl.mBgConstants.startObserving(handler, contentResolver);
                broadcastQueueModernImpl.mService.registerUidObserverForUids(new UidObserver() { // from class: com.android.server.am.BroadcastQueueModernImpl.1
                    public AnonymousClass1() {
                    }

                    public final void onUidStateChanged(int i3, int i4, long j, int i5) {
                        BroadcastQueueModernImpl.this.mLocalHandler.removeMessages(7, Integer.valueOf(i3));
                        BroadcastQueueModernImpl.this.mLocalHandler.obtainMessage(7, i4, 0, Integer.valueOf(i3)).sendToTarget();
                    }
                }, 1, 2, "android", null);
                broadcastQueueModernImpl.mLocalHandler.sendEmptyMessage(4);
                return;
            }
            BatteryStatsService batteryStatsService = activityManagerService.mBatteryStatsService;
            batteryStatsService.mStats.setPowerStatsCollectorEnabled(1, com.android.internal.hidden_from_bootclasspath.com.android.server.power.optimization.Flags.streamlinedBatteryStats());
            batteryStatsService.mBatteryUsageStatsProvider.setPowerStatsExporterEnabled(1, com.android.internal.hidden_from_bootclasspath.com.android.server.power.optimization.Flags.streamlinedBatteryStats());
            batteryStatsService.mStats.setPowerStatsCollectorEnabled(8, com.android.internal.hidden_from_bootclasspath.com.android.server.power.optimization.Flags.streamlinedConnectivityBatteryStats());
            batteryStatsService.mBatteryUsageStatsProvider.setPowerStatsExporterEnabled(8, com.android.internal.hidden_from_bootclasspath.com.android.server.power.optimization.Flags.streamlinedConnectivityBatteryStats());
            batteryStatsService.mStats.setPowerStatsCollectorEnabled(11, com.android.internal.hidden_from_bootclasspath.com.android.server.power.optimization.Flags.streamlinedConnectivityBatteryStats());
            batteryStatsService.mBatteryUsageStatsProvider.setPowerStatsExporterEnabled(11, com.android.internal.hidden_from_bootclasspath.com.android.server.power.optimization.Flags.streamlinedConnectivityBatteryStats());
            batteryStatsService.mStats.setPowerStatsCollectorEnabled(2, com.android.internal.hidden_from_bootclasspath.com.android.server.power.optimization.Flags.streamlinedConnectivityBatteryStats());
            batteryStatsService.mBatteryUsageStatsProvider.setPowerStatsExporterEnabled(2, com.android.internal.hidden_from_bootclasspath.com.android.server.power.optimization.Flags.streamlinedConnectivityBatteryStats());
            batteryStatsService.mStats.setPowerStatsCollectorEnabled(4, com.android.internal.hidden_from_bootclasspath.com.android.server.power.optimization.Flags.streamlinedMiscBatteryStats());
            batteryStatsService.mBatteryUsageStatsProvider.setPowerStatsExporterEnabled(4, com.android.internal.hidden_from_bootclasspath.com.android.server.power.optimization.Flags.streamlinedMiscBatteryStats());
            batteryStatsService.mStats.setPowerStatsCollectorEnabled(5, com.android.internal.hidden_from_bootclasspath.com.android.server.power.optimization.Flags.streamlinedMiscBatteryStats());
            batteryStatsService.mBatteryUsageStatsProvider.setPowerStatsExporterEnabled(5, com.android.internal.hidden_from_bootclasspath.com.android.server.power.optimization.Flags.streamlinedMiscBatteryStats());
            batteryStatsService.mStats.setPowerStatsCollectorEnabled(6, com.android.internal.hidden_from_bootclasspath.com.android.server.power.optimization.Flags.streamlinedMiscBatteryStats());
            batteryStatsService.mBatteryUsageStatsProvider.setPowerStatsExporterEnabled(6, com.android.internal.hidden_from_bootclasspath.com.android.server.power.optimization.Flags.streamlinedMiscBatteryStats());
            batteryStatsService.mStats.setPowerStatsCollectorEnabled(3, com.android.internal.hidden_from_bootclasspath.com.android.server.power.optimization.Flags.streamlinedMiscBatteryStats());
            batteryStatsService.mBatteryUsageStatsProvider.setPowerStatsExporterEnabled(3, com.android.internal.hidden_from_bootclasspath.com.android.server.power.optimization.Flags.streamlinedMiscBatteryStats());
            batteryStatsService.mStats.setPowerStatsCollectorEnabled(-1, com.android.internal.hidden_from_bootclasspath.com.android.server.power.optimization.Flags.streamlinedMiscBatteryStats());
            BatteryExternalStatsWorker batteryExternalStatsWorker = batteryStatsService.mWorker;
            WifiManager wifiManager = (WifiManager) batteryExternalStatsWorker.mInjector.mContext.getSystemService(WifiManager.class);
            TelephonyManager telephonyManager = (TelephonyManager) batteryExternalStatsWorker.mInjector.mContext.getSystemService(TelephonyManager.class);
            batteryExternalStatsWorker.mInjector.getClass();
            PowerStatsService.LocalService localService = (PowerStatsService.LocalService) LocalServices.getService(PowerStatsService.LocalService.class);
            synchronized (batteryExternalStatsWorker.mStats) {
                i2 = batteryExternalStatsWorker.mStats.mBatteryVoltageMv;
            }
            synchronized (batteryExternalStatsWorker.mWorkerLock) {
                batteryExternalStatsWorker.mWifiManager = wifiManager;
                batteryExternalStatsWorker.mTelephony = telephonyManager;
                batteryExternalStatsWorker.mPowerStatsInternal = localService;
                if (localService == null || (populateEnergyConsumerSubsystemMapsLocked = batteryExternalStatsWorker.populateEnergyConsumerSubsystemMapsLocked()) == null) {
                    strArr = null;
                    zArr = null;
                } else {
                    batteryExternalStatsWorker.mEnergyConsumerSnapshot = new EnergyConsumerSnapshot(populateEnergyConsumerSubsystemMapsLocked);
                    try {
                        batteryExternalStatsWorker.mEnergyConsumerSnapshot.updateAndGetDelta((EnergyConsumerResult[]) batteryExternalStatsWorker.mPowerStatsInternal.getEnergyConsumedAsync(new int[0]).get(2000L, TimeUnit.MILLISECONDS), i2);
                    } catch (InterruptedException | TimeoutException e) {
                        Slog.w("BatteryExternalStatsWorker", "timeout or interrupt reading initial getEnergyConsumedAsync: " + e);
                    } catch (ExecutionException e2) {
                        Slog.wtf("BatteryExternalStatsWorker", "exception reading initial getEnergyConsumedAsync: " + e2.getCause());
                    }
                    strArr = batteryExternalStatsWorker.mEnergyConsumerSnapshot.getOtherOrdinalNames();
                    zArr = BatteryExternalStatsWorker.getSupportedEnergyBuckets(populateEnergyConsumerSubsystemMapsLocked);
                }
                synchronized (batteryExternalStatsWorker.mStats) {
                    batteryExternalStatsWorker.mStats.initEnergyConsumerStatsLocked(zArr, strArr);
                    batteryExternalStatsWorker.mPerDisplayScreenStates = new int[batteryExternalStatsWorker.mStats.mPerDisplayBatteryStats.length];
                }
            }
            batteryStatsService.mSystemServicesReady = true;
            batteryStatsService.mStats.systemServicesReady(batteryStatsService.mContext);
            batteryStatsService.mCpuWakeupStats.systemServicesReady();
            INetworkManagementService asInterface = INetworkManagementService.Stub.asInterface(ServiceManager.getService("network_management"));
            ConnectivityManager connectivityManager = (ConnectivityManager) batteryStatsService.mContext.getSystemService(ConnectivityManager.class);
            try {
                if (!SdkLevel.isAtLeastV()) {
                    asInterface.registerObserver(batteryStatsService.mActivityChangeObserver);
                }
                connectivityManager.registerDefaultNetworkCallback(batteryStatsService.mNetworkCallback);
            } catch (RemoteException e3) {
                Slog.e("BatteryStatsService", "Could not register INetworkManagement event observer " + e3);
            }
            synchronized (batteryStatsService.mPowerStatsLock) {
                try {
                    PowerStatsService.LocalService localService2 = (PowerStatsService.LocalService) LocalServices.getService(PowerStatsService.LocalService.class);
                    batteryStatsService.mPowerStatsInternal = localService2;
                    if (localService2 != null) {
                        batteryStatsService.populatePowerEntityMaps();
                    } else {
                        Slog.e("BatteryStatsService", "Could not register PowerStatsInternal");
                    }
                } finally {
                }
            }
            batteryStatsService.mBatteryManagerInternal = (BatteryManagerInternal) LocalServices.getService(BatteryManagerInternal.class);
            final DeviceBatteryInfoService deviceBatteryInfoService = (DeviceBatteryInfoService) LocalServices.getService(DeviceBatteryInfoService.class);
            batteryStatsService.mDeviceBatteryInfoServiceInternal = deviceBatteryInfoService;
            deviceBatteryInfoService.mContext = batteryStatsService.mContext;
            Slog.e("DeviceBatteryInfoService", "systemServicesReady()");
            HandlerThread handlerThread = new HandlerThread("sembatteryservice-handler");
            deviceBatteryInfoService.mHandlerThread = handlerThread;
            handlerThread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() { // from class: com.samsung.android.server.battery.DeviceBatteryInfoService$$ExternalSyntheticLambda3
                @Override // java.lang.Thread.UncaughtExceptionHandler
                public final void uncaughtException(Thread thread, Throwable th) {
                    DeviceBatteryInfoService deviceBatteryInfoService2 = DeviceBatteryInfoService.this;
                    deviceBatteryInfoService2.getClass();
                    Slog.e("DeviceBatteryInfoService", "Exception occurred in Battery Manager thread");
                    Slog.e("DeviceBatteryInfoService", "Exception : " + th);
                    deviceBatteryInfoService2.mUncaughtExceptionOccurred = true;
                }
            });
            deviceBatteryInfoService.mHandlerThread.start();
            Handler handler2 = new Handler(deviceBatteryInfoService.mHandlerThread.getLooper());
            deviceBatteryInfoService.mHandler = handler2;
            Context context = deviceBatteryInfoService.mContext;
            BluetoothDeviceBatteryManager bluetoothDeviceBatteryManager = new BluetoothDeviceBatteryManager();
            bluetoothDeviceBatteryManager.mContext = context;
            bluetoothDeviceBatteryManager.mHandler = handler2;
            deviceBatteryInfoService.mBluetoothDeviceBatteryManager = bluetoothDeviceBatteryManager;
            WatchBatteryManager watchBatteryManager = new WatchBatteryManager();
            watchBatteryManager.mRegistered = false;
            watchBatteryManager.mScreenOn = false;
            watchBatteryManager.mSyncState = 0;
            watchBatteryManager.mConnected = false;
            watchBatteryManager.mAodShowState = 0;
            watchBatteryManager.mWatchPackageMap = new HashMap();
            watchBatteryManager.mProviderUriMap = new HashMap();
            watchBatteryManager.mAlarmListener = null;
            watchBatteryManager.mAlarmRegistered = false;
            watchBatteryManager.mContext = context;
            watchBatteryManager.mHandler = handler2;
            deviceBatteryInfoService.mWatchBatteryManager = watchBatteryManager;
            deviceBatteryInfoService.mActivityManagerInternal = (ActivityManagerInternal) LocalServices.getService(ActivityManagerInternal.class);
            deviceBatteryInfoService.mContext.registerReceiver(new DeviceBatteryInfoService.AnonymousClass1(deviceBatteryInfoService, 0), DirEncryptServiceHelper$$ExternalSyntheticOutline0.m("android.intent.action.BATTERY_CHANGED", "android.intent.action.USER_UNLOCKED"), null, deviceBatteryInfoService.mHandler);
            final BluetoothDeviceBatteryManager bluetoothDeviceBatteryManager2 = deviceBatteryInfoService.mBluetoothDeviceBatteryManager;
            bluetoothDeviceBatteryManager2.getClass();
            bluetoothDeviceBatteryManager2.mBatteryInfoServiceInternal = (DeviceBatteryInfoService) LocalServices.getService(DeviceBatteryInfoService.class);
            IntentFilter m = VcnManagementService$$ExternalSyntheticOutline0.m("android.bluetooth.device.action.BATTERY_LEVEL_CHANGED", "com.samsung.bluetooth.device.action.META_DATA_CHANGED", "com.samsung.bluetooth.device.action.SMEP_CONNECTION_STATE_CHANGED", "android.bluetooth.device.action.ALIAS_CHANGED", "android.bluetooth.device.action.ACL_CONNECTED");
            m.addAction("android.bluetooth.device.action.ACL_DISCONNECTED");
            bluetoothDeviceBatteryManager2.mContext.registerReceiver(new BroadcastReceiver() { // from class: com.samsung.android.server.battery.BluetoothDeviceBatteryManager.1
                public AnonymousClass1() {
                }

                /* JADX WARN: Removed duplicated region for block: B:50:0x00da A[Catch: Exception -> 0x0037, TryCatch #1 {Exception -> 0x0037, blocks: (B:3:0x000c, B:6:0x002b, B:8:0x0033, B:11:0x003a, B:13:0x0044, B:15:0x004c, B:17:0x0054, B:19:0x0058, B:21:0x006b, B:24:0x0070, B:48:0x00c9, B:50:0x00da, B:59:0x00ad, B:61:0x00c3, B:62:0x00e1, B:64:0x00ea, B:66:0x00f4, B:68:0x00fc, B:70:0x0100, B:72:0x0107, B:74:0x0118, B:76:0x0120, B:78:0x0128, B:80:0x012c, B:82:0x0133, B:84:0x013b, B:86:0x0143, B:88:0x0147, B:90:0x014c, B:92:0x0154, B:94:0x015c, B:96:0x0160, B:98:0x0171, B:100:0x0180, B:103:0x0189, B:105:0x018f, B:107:0x01a9, B:111:0x01b1, B:29:0x0088, B:31:0x008b), top: B:2:0x000c, inners: #0 }] */
                /* JADX WARN: Removed duplicated region for block: B:52:? A[RETURN, SYNTHETIC] */
                @Override // android.content.BroadcastReceiver
                /*
                    Code decompiled incorrectly, please refer to instructions dump.
                    To view partially-correct code enable 'Show inconsistent code' option in preferences
                */
                public final void onReceive(android.content.Context r13, android.content.Intent r14) {
                    /*
                        Method dump skipped, instructions count: 472
                        To view this dump change 'Code comments level' option to 'DEBUG'
                    */
                    throw new UnsupportedOperationException("Method not decompiled: com.samsung.android.server.battery.BluetoothDeviceBatteryManager.AnonymousClass1.onReceive(android.content.Context, android.content.Intent):void");
                }
            }, m, null, bluetoothDeviceBatteryManager2.mHandler);
            WatchBatteryManager watchBatteryManager2 = deviceBatteryInfoService.mWatchBatteryManager;
            watchBatteryManager2.mAlarmManager = (AlarmManager) watchBatteryManager2.mContext.getSystemService(AlarmManager.class);
            watchBatteryManager2.mAlarmListener = watchBatteryManager2.new ScreenOffAlarmListener();
            final Handler handler3 = deviceBatteryInfoService.mHandler;
            final int i3 = 0;
            deviceBatteryInfoService.mDeviceNameObserver = new ContentObserver(handler3) { // from class: com.samsung.android.server.battery.DeviceBatteryInfoService.3
                public final /* synthetic */ int $r8$classId;
                public final /* synthetic */ DeviceBatteryInfoService this$0;

                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                public /* synthetic */ AnonymousClass3(final DeviceBatteryInfoService deviceBatteryInfoService2, final Handler handler32, final int i32) {
                    super(handler32);
                    r3 = i32;
                    r1 = deviceBatteryInfoService2;
                }

                @Override // android.database.ContentObserver
                public final void onChange(boolean z, Uri uri) {
                    switch (r3) {
                        case 0:
                            super.onChange(z, uri);
                            Slog.i("DeviceBatteryInfoService", "onChange : " + uri);
                            String string = Settings.Global.getString(r1.mContext.getContentResolver(), "device_name");
                            Slog.i("DeviceBatteryInfoService", "device name : " + string);
                            r1.mPhoneBatteryInfo.setDeviceName(string);
                            DeviceBatteryInfoService deviceBatteryInfoService2 = r1;
                            deviceBatteryInfoService2.sendBroadcast("com.samsung.battery.ACTION_BATTERY_INFO_CHANGED", deviceBatteryInfoService2.mPhoneBatteryInfo);
                            return;
                        default:
                            super.onChange(z, uri);
                            Slog.i("DeviceBatteryInfoService", "onChange : " + uri);
                            try {
                                int i4 = Settings.System.getInt(r1.mContext.getContentResolver(), "aod_show_state");
                                r1.mWatchBatteryManager.aodShowStateChanged(i4);
                                Slog.i("DeviceBatteryInfoService", "aod_show_state : " + i4);
                                return;
                            } catch (Settings.SettingNotFoundException e4) {
                                throw new RuntimeException(e4);
                            }
                    }
                }
            };
            deviceBatteryInfoService2.mContext.getContentResolver().registerContentObserver(Settings.Global.getUriFor("device_name"), false, deviceBatteryInfoService2.mDeviceNameObserver);
            HandlerThread handlerThread2 = new HandlerThread("broadcastreceiver-handler");
            deviceBatteryInfoService2.mBroadcastHandlerThread = handlerThread2;
            handlerThread2.start();
            deviceBatteryInfoService2.mBroadcastHandler = new Handler(deviceBatteryInfoService2.mBroadcastHandlerThread.getLooper());
            deviceBatteryInfoService2.mContext.registerReceiver(new DeviceBatteryInfoService.AnonymousClass1(deviceBatteryInfoService2, 2), DirEncryptServiceHelper$$ExternalSyntheticOutline0.m("android.intent.action.SCREEN_ON", "android.intent.action.SCREEN_OFF"), null, deviceBatteryInfoService2.mBroadcastHandler);
            final Handler handler4 = deviceBatteryInfoService2.mHandler;
            final int i4 = 1;
            deviceBatteryInfoService2.mAodObserver = new ContentObserver(handler4) { // from class: com.samsung.android.server.battery.DeviceBatteryInfoService.3
                public final /* synthetic */ int $r8$classId;
                public final /* synthetic */ DeviceBatteryInfoService this$0;

                /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
                public /* synthetic */ AnonymousClass3(final DeviceBatteryInfoService deviceBatteryInfoService2, final Handler handler42, final int i42) {
                    super(handler42);
                    r3 = i42;
                    r1 = deviceBatteryInfoService2;
                }

                @Override // android.database.ContentObserver
                public final void onChange(boolean z, Uri uri) {
                    switch (r3) {
                        case 0:
                            super.onChange(z, uri);
                            Slog.i("DeviceBatteryInfoService", "onChange : " + uri);
                            String string = Settings.Global.getString(r1.mContext.getContentResolver(), "device_name");
                            Slog.i("DeviceBatteryInfoService", "device name : " + string);
                            r1.mPhoneBatteryInfo.setDeviceName(string);
                            DeviceBatteryInfoService deviceBatteryInfoService2 = r1;
                            deviceBatteryInfoService2.sendBroadcast("com.samsung.battery.ACTION_BATTERY_INFO_CHANGED", deviceBatteryInfoService2.mPhoneBatteryInfo);
                            return;
                        default:
                            super.onChange(z, uri);
                            Slog.i("DeviceBatteryInfoService", "onChange : " + uri);
                            try {
                                int i42 = Settings.System.getInt(r1.mContext.getContentResolver(), "aod_show_state");
                                r1.mWatchBatteryManager.aodShowStateChanged(i42);
                                Slog.i("DeviceBatteryInfoService", "aod_show_state : " + i42);
                                return;
                            } catch (Settings.SettingNotFoundException e4) {
                                throw new RuntimeException(e4);
                            }
                    }
                }
            };
            deviceBatteryInfoService2.mContext.getContentResolver().registerContentObserver(Settings.System.getUriFor("aod_show_state"), false, deviceBatteryInfoService2.mAodObserver);
            Watchdog.getInstance().addMonitor(batteryStatsService);
            DataConnectionStats dataConnectionStats = new DataConnectionStats(batteryStatsService.mContext, batteryStatsService.mHandler);
            ((TelephonyManager) dataConnectionStats.mContext.getSystemService(TelephonyManager.class)).listen(dataConnectionStats.mPhoneStateListener, FrameworkStatsLog.DREAM_UI_EVENT_REPORTED);
            IntentFilter intentFilter = new IntentFilter();
            intentFilter.addAction(Constants.SIM_STATE_CHANGED);
            dataConnectionStats.mContext.registerReceiver(dataConnectionStats, intentFilter, null, dataConnectionStats.mListenerHandler);
            StatsManager statsManager = (StatsManager) batteryStatsService.mContext.getSystemService(StatsManager.class);
            BatteryStatsService.StatsPullAtomCallbackImpl statsPullAtomCallbackImpl = batteryStatsService.new StatsPullAtomCallbackImpl();
            Executor executor = ConcurrentUtils.DIRECT_EXECUTOR;
            statsManager.setPullAtomCallback(FrameworkStatsLog.BATTERY_USAGE_STATS_SINCE_RESET, (StatsManager.PullAtomMetadata) null, executor, statsPullAtomCallbackImpl);
            statsManager.setPullAtomCallback(FrameworkStatsLog.BATTERY_USAGE_STATS_SINCE_RESET_USING_POWER_PROFILE_MODEL, (StatsManager.PullAtomMetadata) null, executor, statsPullAtomCallbackImpl);
            statsManager.setPullAtomCallback(FrameworkStatsLog.BATTERY_USAGE_STATS_BEFORE_RESET, (StatsManager.PullAtomMetadata) null, executor, statsPullAtomCallbackImpl);
            ActiveServices activeServices = this.mService.mServices;
            if (activeServices.mAppStateTracker == null) {
                activeServices.mAppStateTracker = (AppStateTracker) LocalServices.getService(AppStateTracker.class);
            }
            activeServices.mAppStateTracker.addBackgroundRestrictedAppListener(activeServices.new BackgroundRestrictedListener());
            ActivityManagerService activityManagerService2 = activeServices.mAm;
            String attentionServicePackageName = activityManagerService2.mContext.getPackageManager().getAttentionServicePackageName();
            if (!TextUtils.isEmpty(attentionServicePackageName)) {
                activeServices.mAllowListWhileInUsePermissionInFgs.add(attentionServicePackageName);
            }
            String systemCaptionsServicePackageName = activityManagerService2.mContext.getPackageManager().getSystemCaptionsServicePackageName();
            if (!TextUtils.isEmpty(systemCaptionsServicePackageName)) {
                activeServices.mAllowListWhileInUsePermissionInFgs.add(systemCaptionsServicePackageName);
            }
            ForegroundServiceTypePolicy.ForegroundServiceTypePolicyInfo foregroundServiceTypePolicyInfo = ForegroundServiceTypePolicy.getDefaultPolicy().getForegroundServiceTypePolicyInfo(1024, 0);
            if (foregroundServiceTypePolicyInfo != null) {
                foregroundServiceTypePolicyInfo.setCustomPermission(new ActiveServices.SystemExemptedFgsTypePermission(activeServices, 0));
            }
            ForegroundServiceTypePolicy.ForegroundServiceTypePolicyInfo foregroundServiceTypePolicyInfo2 = ForegroundServiceTypePolicy.getDefaultPolicy().getForegroundServiceTypePolicyInfo(32, 0);
            if (foregroundServiceTypePolicyInfo2 != null) {
                foregroundServiceTypePolicyInfo2.setCustomPermission(new ActiveServices.SystemExemptedFgsTypePermission(activeServices, 1));
            }
        }

        @Override // com.android.server.SystemService
        public final void onStart() {
            ActivityManagerService activityManagerService = this.mService;
            BatteryStatsService batteryStatsService = activityManagerService.mBatteryStatsService;
            batteryStatsService.getClass();
            LocalServices.addService(BatteryStatsInternal.class, batteryStatsService.new LocalService());
            ServiceManager.addService("batterystats", batteryStatsService.asBinder());
            LocalServices.addService(DeviceBatteryInfoService.class, new DeviceBatteryInfoService());
            AppOpsService appOpsService = activityManagerService.mAppOpsService;
            ServiceManager.addService("appops", appOpsService.asBinder());
            LocalServices.addService(AppOpsManagerInternal.class, appOpsService.mAppOpsManagerInternal);
            LocalManagerRegistry.addManager(AppOpsManagerLocal.class, appOpsService.new AnonymousClass6());
            ProcessStatsService processStatsService = activityManagerService.mProcessStats;
            processStatsService.getClass();
            LocalServices.addService(ProcessStatsInternal.class, processStatsService.new LocalService());
            Slog.d("AppOps", "AppOpsService published");
            LocalServices.addService(ActivityManagerInternal.class, activityManagerService.mInternal);
            LocalManagerRegistry.addManager(ActivityManagerLocal.class, activityManagerService.mInternal);
            ActivityTaskManagerService activityTaskManagerService = activityManagerService.mActivityTaskManager;
            WindowManagerGlobalLock windowManagerGlobalLock = activityTaskManagerService.mGlobalLock;
            WindowManagerService.boostPriorityForLockedSection();
            synchronized (windowManagerGlobalLock) {
                try {
                    activityTaskManagerService.mAmInternal = (ActivityManagerInternal) LocalServices.getService(ActivityManagerInternal.class);
                    activityTaskManagerService.mUgmInternal = (UriGrantsManagerInternal) LocalServices.getService(UriGrantsManagerInternal.class);
                } catch (Throwable th) {
                    WindowManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            WindowManagerService.resetPriorityAfterLockedSection();
            PendingIntentController pendingIntentController = activityManagerService.mPendingIntentController;
            synchronized (pendingIntentController.mLock) {
                pendingIntentController.mAmInternal = (ActivityManagerInternal) LocalServices.getService(ActivityManagerInternal.class);
            }
            AppProfiler appProfiler = activityManagerService.mAppProfiler;
            appProfiler.mProcessCpuThread.start();
            try {
                appProfiler.mProcessCpuInitLatch.await();
                CriticalEventLog.getInstance();
            } catch (InterruptedException e) {
                Slog.wtf("ActivityManager", "Interrupted wait during start", e);
                Thread.currentThread().interrupt();
                throw new IllegalStateException("Interrupted wait during start");
            }
        }

        @Override // com.android.server.SystemService
        public final void onUserStopped(SystemService.TargetUser targetUser) {
            UserInfo userInfo;
            BatteryStatsService batteryStatsService = this.mService.mBatteryStatsService;
            int userIdentifier = targetUser.getUserIdentifier();
            synchronized (batteryStatsService.mLock) {
                batteryStatsService.mHandler.post(new BatteryStatsService$$ExternalSyntheticLambda43(batteryStatsService, userIdentifier, SystemClock.elapsedRealtime(), 1));
            }
            if (com.android.internal.hidden_from_bootclasspath.android.os.Flags.allowPrivateProfile() && android.multiuser.Flags.enablePrivateSpaceFeatures() && (userInfo = ((UserManagerInternal) LocalServices.getService(UserManagerInternal.class)).getUserInfo(targetUser.getUserIdentifier())) != null && userInfo.isPrivateProfile()) {
                ActivityManagerService activityManagerService = this.mService;
                ActivityManagerService.boostPriorityForLockedSection();
                synchronized (activityManagerService) {
                    try {
                        this.mService.mPrivateSpaceBootCompletedPackages.clear();
                    } catch (Throwable th) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
            }
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class LocalService extends ActivityManagerInternal implements ActivityManagerLocal {
        public static final /* synthetic */ int $r8$clinit = 0;

        public LocalService() {
        }

        public static void validateSdkSandboxParams(Intent intent, int i, String str, String str2) {
            if (intent == null) {
                throw new IllegalArgumentException("intent is null");
            }
            if (str == null) {
                throw new IllegalArgumentException("clientAppPackage is null");
            }
            if (str2 == null) {
                throw new IllegalArgumentException("processName is null");
            }
            if (intent.getComponent() == null) {
                throw new IllegalArgumentException("service must specify explicit component");
            }
            if (!UserHandle.isApp(i)) {
                throw new IllegalArgumentException("uid is not within application range");
            }
        }

        public final void addAppBackgroundRestrictionListener(ActivityManagerInternal.AppBackgroundRestrictionListener appBackgroundRestrictionListener) {
            ActivityManagerService.this.mAppRestrictionController.mRestrictionListeners.add(appBackgroundRestrictionListener);
        }

        public final void addBindServiceEventListener(ActivityManagerInternal.BindServiceEventListener bindServiceEventListener) {
            ActivityManagerService.this.mBindServiceEventListeners.add(bindServiceEventListener);
        }

        public final void addBroadcastEventListener(ActivityManagerInternal.BroadcastEventListener broadcastEventListener) {
            ActivityManagerService.this.mBroadcastEventListeners.add(broadcastEventListener);
        }

        public final void addForegroundServiceStateListener(ActivityManagerInternal.ForegroundServiceStateListener foregroundServiceStateListener) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.mForegroundServiceStateListeners.add(foregroundServiceStateListener);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void addPendingTopUid(int i, int i2, IApplicationThread iApplicationThread) {
            boolean z;
            boolean z2;
            PendingStartActivityUids pendingStartActivityUids = ActivityManagerService.this.mPendingStartActivityUids;
            synchronized (pendingStartActivityUids) {
                z = false;
                if (pendingStartActivityUids.mPendingUids.get(i) == null) {
                    pendingStartActivityUids.mPendingUids.put(i, new Pair(Integer.valueOf(i2), Long.valueOf(SystemClock.elapsedRealtime())));
                    z2 = true;
                } else {
                    z2 = false;
                }
            }
            if (z2) {
                ActivityManagerService.this.mOomAdjuster.mCachedAppOptimizer.unfreezeProcess(i2, 1);
            }
            if (!z2 || ActivityManagerService.this.mNetworkPolicyUidObserver == null) {
                return;
            }
            try {
                ProcessList processList = ActivityManagerService.this.mProcessList;
                long j = processList.mProcStateSeqCounter + 1;
                processList.mProcStateSeqCounter = j;
                ActivityManagerService.this.mNetworkPolicyUidObserver.onUidStateChanged(i, 2, j, 127);
                if (iApplicationThread != null) {
                    synchronized (ActivityManagerService.this.mUidNetworkBlockedReasons) {
                        try {
                            int i3 = ActivityManagerService.this.mUidNetworkBlockedReasons.get(i, 0);
                            if (i3 != 0 && NetworkPolicyManagerService.NetworkPolicyManagerInternalImpl.updateBlockedReasonsWithProcState(i3) == 0) {
                                z = true;
                            }
                        } catch (Throwable th) {
                            throw th;
                        }
                    }
                    if (z) {
                        iApplicationThread.setNetworkBlockSeq(j);
                    }
                }
            } catch (RemoteException e) {
                Slog.d("ActivityManager", "Error calling setNetworkBlockSeq", e);
            }
        }

        public final void addStartInfoTimestamp(int i, long j, int i2, int i3, int i4) {
            if (i4 == -1 || i4 == -2) {
                throw new IllegalArgumentException("Unsupported userId");
            }
            ActivityManagerService.this.mUserController.handleIncomingUser(i3, i2, i4, true, 0, "addStartInfoTimestampSystem", null);
            ActivityManagerService.this.addStartInfoTimestampInternal(i, i4, i2, j);
        }

        public final void appNotResponding(String str, int i, TimeoutRecord timeoutRecord) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            int i2 = ActivityManagerService.PROC_START_TIMEOUT;
            activityManagerService.getClass();
            Objects.requireNonNull(str);
            Objects.requireNonNull(timeoutRecord);
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ProcessRecord processRecordLocked = activityManagerService.mProcessList.getProcessRecordLocked(i, str);
                    if (processRecordLocked == null) {
                        Slog.e("ActivityManager", "Unknown process: ".concat(str));
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    } else {
                        activityManagerService.mAnrHelper.appNotResponding(processRecordLocked, timeoutRecord);
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }

        public final ActivityManagerInternal.ServiceNotificationPolicy applyForegroundServiceNotification(Notification notification, String str, int i, String str2, int i2) {
            ActivityManagerInternal.ServiceNotificationPolicy applyForegroundServiceNotificationLocked;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    applyForegroundServiceNotificationLocked = ActivityManagerService.this.mServices.applyForegroundServiceNotificationLocked(notification, str, i, str2, i2);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return applyForegroundServiceNotificationLocked;
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public final boolean bindSdkSandboxService(Intent intent, ServiceConnection serviceConnection, int i, IBinder iBinder, String str, String str2, int i2) {
            return bindSdkSandboxServiceInternal(intent, serviceConnection, i, iBinder, str, str2, Integer.toUnsignedLong(i2));
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public final boolean bindSdkSandboxService(Intent intent, ServiceConnection serviceConnection, int i, IBinder iBinder, String str, String str2, Context.BindServiceFlags bindServiceFlags) {
            return bindSdkSandboxServiceInternal(intent, serviceConnection, i, iBinder, str, str2, bindServiceFlags.getValue());
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public final boolean bindSdkSandboxService(Intent intent, ServiceConnection serviceConnection, int i, String str, String str2, int i2) {
            return bindSdkSandboxService(intent, serviceConnection, i, (IBinder) null, str, str2, i2);
        }

        public final boolean bindSdkSandboxServiceInternal(Intent intent, ServiceConnection serviceConnection, int i, IBinder iBinder, String str, String str2, long j) {
            IApplicationThread iApplicationThread;
            validateSdkSandboxParams(intent, i, str, str2);
            if (ActivityManagerService.this.mAppOpsService.checkPackage(i, str) != 0) {
                throw new IllegalArgumentException("uid does not belong to provided package");
            }
            if (serviceConnection == null) {
                throw new IllegalArgumentException("connection is null");
            }
            Handler mainThreadHandler = ActivityManagerService.this.mContext.getMainThreadHandler();
            if (iBinder != null) {
                synchronized (this) {
                    try {
                        ProcessRecord recordForAppLOSP = ActivityManagerService.this.getRecordForAppLOSP(iBinder);
                        if (recordForAppLOSP == null) {
                            Slog.i("ActivityManager", "clientApplicationThread process not found.");
                            return false;
                        }
                        if (recordForAppLOSP.info.uid != i) {
                            throw new IllegalArgumentException("clientApplicationThread does not match  client uid");
                        }
                        iApplicationThread = recordForAppLOSP.mThread;
                    } finally {
                    }
                }
            } else {
                iApplicationThread = null;
            }
            IApplicationThread iApplicationThread2 = iApplicationThread;
            IServiceConnection serviceDispatcher = ActivityManagerService.this.mContext.getServiceDispatcher(serviceConnection, mainThreadHandler, j);
            intent.prepareToLeaveProcess(ActivityManagerService.this.mContext);
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            return activityManagerService.bindServiceInstance(activityManagerService.mContext.getIApplicationThread(), ActivityManagerService.this.mContext.getActivityToken(), intent, intent.resolveTypeIfNeeded(ActivityManagerService.this.mContext.getContentResolver()), serviceDispatcher, j, str2, true, i, str, iApplicationThread2, ActivityManagerService.this.mContext.getOpPackageName(), UserHandle.getUserId(i)) != 0;
        }

        public final void broadcastCloseSystemDialogs(String str) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    Intent intent = new Intent("android.intent.action.CLOSE_SYSTEM_DIALOGS");
                    intent.addFlags(1342177280);
                    if (str != null) {
                        intent.putExtra("reason", str);
                    }
                    BroadcastOptions deferralPolicy = new BroadcastOptions().setDeliveryGroupPolicy(1).setDeferralPolicy(2);
                    if (str != null) {
                        deferralPolicy.setDeliveryGroupMatchingKey("android.intent.action.CLOSE_SYSTEM_DIALOGS", str);
                    }
                    ActivityManagerService.this.broadcastIntentLocked(intent, null, null, deferralPolicy.toBundle(), false, -1, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void broadcastCloseSystemDialogs(String str, int i) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    Intent intent = new Intent("android.intent.action.CLOSE_SYSTEM_DIALOGS");
                    intent.addFlags(1342177280);
                    if (str != null) {
                        intent.putExtra("reason", str);
                    }
                    if (i != -1) {
                        intent.putExtra("displayId", i);
                    }
                    ActivityManagerService.this.broadcastIntentLocked(intent, null, null, null, false, -1, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void broadcastGlobalConfigurationChanged(int i, boolean z) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    Intent intent = new Intent("android.intent.action.CONFIGURATION_CHANGED");
                    intent.addFlags(1881145344);
                    Bundle bundle = new BroadcastOptions().setDeliveryGroupPolicy(1).setDeferralPolicy(2).toBundle();
                    ActivityManagerService activityManagerService2 = ActivityManagerService.this;
                    int i2 = ActivityManagerService.MY_PID;
                    activityManagerService2.broadcastIntentLocked(intent, null, null, bundle, false, i2, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                    if ((i & 4) != 0) {
                        Intent intent2 = new Intent("android.intent.action.LOCALE_CHANGED");
                        intent2.addFlags(18876416);
                        if (!z) {
                            if (!ActivityManagerService.this.mProcessesReady) {
                            }
                            BroadcastOptions makeBasic = BroadcastOptions.makeBasic();
                            makeBasic.setTemporaryAppAllowlist(ActivityManagerService.this.mInternal.getBootTimeTempAllowListDuration(), 0, 206, "");
                            makeBasic.setDeliveryGroupPolicy(1);
                            makeBasic.setDeferralPolicy(2);
                            ActivityManagerService.this.broadcastIntentLocked(intent2, null, null, makeBasic.toBundle(), false, i2, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                        }
                        intent2.addFlags(1073741824);
                        BroadcastOptions makeBasic2 = BroadcastOptions.makeBasic();
                        makeBasic2.setTemporaryAppAllowlist(ActivityManagerService.this.mInternal.getBootTimeTempAllowListDuration(), 0, 206, "");
                        makeBasic2.setDeliveryGroupPolicy(1);
                        makeBasic2.setDeferralPolicy(2);
                        ActivityManagerService.this.broadcastIntentLocked(intent2, null, null, makeBasic2.toBundle(), false, i2, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                    }
                    if (!z && (i & 4100) != 0) {
                        Intent intent3 = new Intent("android.intent.action.SPLIT_CONFIGURATION_CHANGED");
                        intent3.addFlags(553648128);
                        ActivityManagerService.this.broadcastIntentLocked(intent3, null, new String[]{"android.permission.INSTALL_PACKAGES"}, null, false, i2, Binder.getCallingUid(), Binder.getCallingPid(), -1);
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final int broadcastIntent(Intent intent, IIntentReceiver iIntentReceiver, String[] strArr, boolean z, int i, int[] iArr, BiFunction biFunction, Bundle bundle) {
            int broadcastIntentLocked;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.verifyBroadcastLocked(intent);
                    int callingPid = Binder.getCallingPid();
                    int callingUid = Binder.getCallingUid();
                    long clearCallingIdentity = Binder.clearCallingIdentity();
                    try {
                        broadcastIntentLocked = ActivityManagerService.this.broadcastIntentLocked(null, null, null, intent, null, null, iIntentReceiver, 0, null, null, strArr, null, null, -1, bundle, z, false, callingPid, callingUid, callingUid, callingPid, i, BackgroundStartPrivileges.NONE, iArr, biFunction);
                    } finally {
                        Binder.restoreCallingIdentity(clearCallingIdentity);
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return broadcastIntentLocked;
        }

        public final int broadcastIntentInPackage(IApplicationThread iApplicationThread, String str, String str2, int i, int i2, int i3, Intent intent, String str3, IApplicationThread iApplicationThread2, IIntentReceiver iIntentReceiver, int i4, String str4, Bundle bundle, String str5, Bundle bundle2, boolean z, boolean z2, int i5, BackgroundStartPrivileges backgroundStartPrivileges, int[] iArr) {
            int broadcastIntentInPackage;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    broadcastIntentInPackage = ActivityManagerService.this.broadcastIntentInPackage(iApplicationThread, str, str2, i, i2, i3, intent, str3, ActivityManagerService.this.getRecordForAppLOSP(iApplicationThread2), iIntentReceiver, i4, str4, bundle, str5, bundle2, z, z2, i5, backgroundStartPrivileges, iArr);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return broadcastIntentInPackage;
        }

        public final int broadcastIntentWithCallback(Intent intent, IIntentReceiver iIntentReceiver, String[] strArr, int i, int[] iArr, BiFunction biFunction, Bundle bundle) {
            return broadcastIntent(intent, iIntentReceiver, strArr, false, i, iArr, biFunction, bundle);
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public final boolean canAllowWhileInUsePermissionInFgs(int i, int i2, String str) {
            boolean z;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActiveServices activeServices = ActivityManagerService.this.mServices;
                    activeServices.getClass();
                    z = activeServices.shouldAllowFgsWhileInUsePermissionLocked(str, i, i2, null, BackgroundStartPrivileges.NONE) != -1;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return z;
        }

        public final boolean canScheduleUserInitiatedJobs(int i, int i2, String str) {
            return ActivityManagerService.this.canScheduleUserInitiatedJobs(i, i2, str);
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public final boolean canStartForegroundService(int i, int i2, String str) {
            boolean canStartForegroundServiceLocked;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    canStartForegroundServiceLocked = ActivityManagerService.this.mServices.canStartForegroundServiceLocked(i, i2, str);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return canStartForegroundServiceLocked;
        }

        public final boolean canStartMoreUsers() {
            boolean z;
            UserController userController = ActivityManagerService.this.mUserController;
            synchronized (userController.mLock) {
                z = userController.getRunningUsersLU().size() < userController.mMaxRunningUsers;
            }
            return z;
        }

        public final boolean cancelDisablePolicy(String str, int i, int i2) {
            if (MARsPolicyManager.MARs_ENABLE) {
                return MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE.cancelDisablePolicy(str, i, i2);
            }
            return false;
        }

        public final void cancelKillProcessWhenDexExit() {
            ActivityManagerServiceExt activityManagerServiceExt = ActivityManagerService.this.mExt;
            ActivityManagerService activityManagerService = activityManagerServiceExt.mService;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    activityManagerServiceExt.mDeXHandler.removeCallbacks(activityManagerServiceExt.mForceKillForDeXRunnable);
                    activityManagerServiceExt.mDeXKillProcesses = null;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final String checkContentProviderAccess(String str, int i) {
            boolean z;
            ProviderInfo providerInfo;
            String checkContentProviderPermission;
            UserManagerInternal userManagerInternal;
            UserInfo userInfo;
            ContentProviderHelper contentProviderHelper = ActivityManagerService.this.mCpHelper;
            if (i == -1) {
                contentProviderHelper.mService.mContext.enforceCallingOrSelfPermission("android.permission.INTERACT_ACROSS_USERS_FULL", "ContentProviderHelper");
                i = UserHandle.getCallingUserId();
            }
            if (contentProviderHelper.isAuthorityRedirectedForCloneProfileCached(str) && (userInfo = (userManagerInternal = (UserManagerInternal) LocalServices.getService(UserManagerInternal.class)).getUserInfo(i)) != null && userInfo.isCloneProfile()) {
                i = userManagerInternal.getProfileParentId(i);
                z = false;
            } else {
                z = true;
            }
            int i2 = i;
            boolean z2 = z;
            try {
                providerInfo = AppGlobals.getPackageManager().resolveContentProvider(str, 790016L, i2);
            } catch (RemoteException unused) {
                providerInfo = null;
            }
            ProviderInfo providerInfo2 = providerInfo;
            if (providerInfo2 == null) {
                return AppStateTrackerImpl$MyHandler$$ExternalSyntheticOutline0.m(i2, "Failed to find provider ", str, " for user ", "; expected to find a valid ContentProvider for this authority");
            }
            int callingPid = Binder.getCallingPid();
            synchronized (contentProviderHelper.mService.mPidsSelfLocked) {
                try {
                    ProcessRecord processRecord = contentProviderHelper.mService.mPidsSelfLocked.get(callingPid);
                    if (processRecord == null) {
                        checkContentProviderPermission = "Failed to find PID " + callingPid;
                    } else {
                        checkContentProviderPermission = contentProviderHelper.checkContentProviderPermission(providerInfo2, callingPid, Binder.getCallingUid(), i2, z2, processRecord.toString());
                    }
                } finally {
                }
            }
            return checkContentProviderPermission;
        }

        /* JADX WARN: Unreachable blocks removed: 2, instructions: 3 */
        /* JADX WARN: Unreachable blocks removed: 2, instructions: 4 */
        public final int checkContentProviderUriPermission(Uri uri, int i, int i2, int i3) {
            IBinder iBinder;
            String str;
            AndroidPackage androidPackage;
            ContentProviderHelper contentProviderHelper = ActivityManagerService.this.mCpHelper;
            ActivityManagerService activityManagerService = contentProviderHelper.mService;
            int i4 = -1;
            if (Thread.holdsLock(activityManagerService.mActivityTaskManager.mGlobalLock)) {
                Slog.wtf("ContentProviderHelper", new IllegalStateException("Unable to check Uri permission because caller is holding WM lock; assuming permission denied"));
            } else {
                String authority = uri.getAuthority();
                long clearCallingIdentity = Binder.clearCallingIdentity();
                ContentProviderHolder contentProviderHolder = null;
                try {
                    try {
                        contentProviderHolder = contentProviderHelper.getContentProviderImpl(null, authority, null, i2, null, "*checkContentProviderUriPermission*", true, i, -1);
                    } catch (RemoteException e) {
                        e = e;
                        str = authority;
                        iBinder = null;
                        contentProviderHolder = null;
                    } catch (Exception e2) {
                        e = e2;
                        str = authority;
                        iBinder = null;
                        contentProviderHolder = null;
                    } catch (Throwable th) {
                        th = th;
                        str = authority;
                        iBinder = null;
                        contentProviderHolder = null;
                    }
                    if (contentProviderHolder != null) {
                        try {
                            androidPackage = activityManagerService.getPackageManagerInternal().getPackage(Binder.getCallingUid());
                        } catch (RemoteException e3) {
                            e = e3;
                            str = authority;
                            iBinder = null;
                        } catch (Exception e4) {
                            e = e4;
                            str = authority;
                            iBinder = null;
                        } catch (Throwable th2) {
                            th = th2;
                            str = authority;
                            iBinder = null;
                            if (contentProviderHolder != null) {
                                try {
                                    contentProviderHelper.removeContentProviderExternalUnchecked(i, iBinder, str);
                                } finally {
                                }
                            }
                            throw th;
                        }
                        if (androidPackage == null) {
                            try {
                                contentProviderHelper.removeContentProviderExternalUnchecked(i, null, authority);
                            } finally {
                            }
                        } else {
                            str = authority;
                            iBinder = null;
                            try {
                                i4 = contentProviderHolder.provider.checkUriPermission(new AttributionSource(i2, androidPackage.getPackageName(), null), uri, i2, i3);
                            } catch (RemoteException e5) {
                                e = e5;
                                Log.w("ContentProviderHelper", "Content provider dead retrieving " + uri, e);
                                if (contentProviderHolder != null) {
                                    try {
                                        contentProviderHelper.removeContentProviderExternalUnchecked(i, iBinder, str);
                                    } finally {
                                    }
                                }
                                return i4;
                            } catch (Exception e6) {
                                e = e6;
                                Log.w("ContentProviderHelper", "Exception while determining type of " + uri, e);
                                if (contentProviderHolder != null) {
                                    try {
                                        contentProviderHelper.removeContentProviderExternalUnchecked(i, iBinder, str);
                                    } finally {
                                    }
                                }
                                return i4;
                            }
                            try {
                                contentProviderHelper.removeContentProviderExternalUnchecked(i, null, str);
                            } finally {
                            }
                        }
                    } else if (contentProviderHolder != null) {
                        try {
                            contentProviderHelper.removeContentProviderExternalUnchecked(i, null, authority);
                        } finally {
                        }
                    }
                } catch (Throwable th3) {
                    th = th3;
                }
            }
            return i4;
        }

        public final void cleanUpServices(int i, ComponentName componentName, Intent intent) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.mServices.cleanUpServices(i, componentName, intent);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final boolean clearApplicationUserData(String str, boolean z, boolean z2, IPackageDataObserver iPackageDataObserver, int i) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            int i2 = ActivityManagerService.PROC_START_TIMEOUT;
            return activityManagerService.clearApplicationUserData(str, z, z2, iPackageDataObserver, i);
        }

        public final void clearPendingBackup(int i) {
            ProcessRecord processRecord;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            int i2 = ActivityManagerService.PROC_START_TIMEOUT;
            activityManagerService.getClass();
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    int indexOfKey = activityManagerService.mBackupTargets.indexOfKey(i);
                    if (indexOfKey >= 0) {
                        BackupRecord backupRecord = (BackupRecord) activityManagerService.mBackupTargets.valueAt(indexOfKey);
                        if (backupRecord != null && (processRecord = backupRecord.app) != null) {
                            processRecord.mProfile.clearHostingComponentType(4);
                        }
                        activityManagerService.mBackupTargets.removeAt(indexOfKey);
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            ((JobSchedulerInternal) LocalServices.getService(JobSchedulerInternal.class)).clearAllBackingUpUids();
        }

        public final void clearPendingIntentAllowBgActivityStarts(IIntentSender iIntentSender, IBinder iBinder) {
            if (!(iIntentSender instanceof PendingIntentRecord)) {
                Slog.w("ActivityManager", "clearPendingIntentAllowBgActivityStarts(): not a PendingIntentRecord: " + iIntentSender);
                return;
            }
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    PendingIntentRecord pendingIntentRecord = (PendingIntentRecord) iIntentSender;
                    if (iBinder == null) {
                        pendingIntentRecord.getClass();
                    } else {
                        pendingIntentRecord.mAllowBgActivityStartsForActivitySender.remove(iBinder);
                        pendingIntentRecord.mAllowBgActivityStartsForBroadcastSender.remove(iBinder);
                        pendingIntentRecord.mAllowBgActivityStartsForServiceSender.remove(iBinder);
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void deletePendingTopUid(int i, long j) {
            PendingStartActivityUids pendingStartActivityUids = ActivityManagerService.this.mPendingStartActivityUids;
            synchronized (pendingStartActivityUids) {
                Pair pair = (Pair) pendingStartActivityUids.mPendingUids.get(i);
                if (pair != null) {
                    if (j < ((Long) pair.second).longValue()) {
                        Slog.i("ActivityManager", "updateOomAdj start time is before than pendingPid added, don't delete it");
                        return;
                    }
                    long elapsedRealtime = SystemClock.elapsedRealtime() - ((Long) pair.second).longValue();
                    if (elapsedRealtime >= 1000) {
                        Slog.i("ActivityManager", "PendingStartActivityUids startActivity to updateOomAdj delay:" + elapsedRealtime + "ms, uid:" + i);
                    }
                    pendingStartActivityUids.mPendingUids.delete(i);
                }
            }
        }

        public final void disconnectActivityFromServices(Object obj) {
            ActivityServiceConnectionsHolder activityServiceConnectionsHolder = (ActivityServiceConnectionsHolder) obj;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerProcLock activityManagerProcLock = ActivityManagerService.this.mProcLock;
                    ActivityManagerService.boostPriorityForProcLockedSection();
                    synchronized (activityManagerProcLock) {
                        try {
                            synchronized (activityServiceConnectionsHolder.mActivity) {
                                ArraySet arraySet = activityServiceConnectionsHolder.mConnections;
                                if (arraySet != null && !arraySet.isEmpty()) {
                                    ArraySet arraySet2 = new ArraySet(activityServiceConnectionsHolder.mConnections);
                                    for (int size = arraySet2.size() - 1; size >= 0; size--) {
                                        ActivityManagerService.this.mServices.removeConnectionLocked((ConnectionRecord) arraySet2.valueAt(size), null, activityServiceConnectionsHolder, false);
                                    }
                                }
                            }
                        } catch (Throwable th) {
                            ActivityManagerService.resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                } catch (Throwable th2) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void enforceBroadcastOptionsPermissions(Bundle bundle, int i) {
            ActivityManagerService.this.enforceBroadcastOptionPermissionsInternal(i, bundle);
        }

        public final void enforceCallingPermission(String str, String str2) {
            ActivityManagerService.this.enforceCallingPermission(str, str2);
        }

        public final void ensureBootCompleted() {
            ActivityManagerService.this.ensureBootCompleted();
        }

        public final void ensureNotSpecialUser(int i) {
            ActivityManagerService.this.mUserController.getClass();
            if (i < 0) {
                throw new IllegalArgumentException(VibrationParam$1$$ExternalSyntheticOutline0.m(i, "Call does not support special user #"));
            }
        }

        public final void finishBooting() {
            ActivityManagerService.this.finishBooting();
        }

        public final void finishUserSwitch(Object obj) {
            UserController userController = ActivityManagerService.this.mUserController;
            userController.mHandler.post(new UserController$$ExternalSyntheticLambda3(userController, (UserState) obj, 0));
        }

        public final ActivityInfo getActivityInfoForUser(ActivityInfo activityInfo, int i) {
            ApplicationInfo applicationInfo;
            ActivityManagerService.this.getClass();
            if (activityInfo == null) {
                return activityInfo;
            }
            if (i < 1 && activityInfo.applicationInfo.uid < 100000) {
                return activityInfo;
            }
            ActivityInfo activityInfo2 = new ActivityInfo(activityInfo);
            ApplicationInfo applicationInfo2 = activityInfo2.applicationInfo;
            if (applicationInfo2 == null) {
                applicationInfo = null;
            } else {
                ApplicationInfo applicationInfo3 = new ApplicationInfo(applicationInfo2);
                applicationInfo3.initForUser(i);
                applicationInfo = applicationInfo3;
            }
            activityInfo2.applicationInfo = applicationInfo;
            return activityInfo2;
        }

        public final ActivityPresentationInfo getActivityPresentationInfo(IBinder iBinder) {
            ActivityClient activityClient = ActivityClient.getInstance();
            return new ActivityPresentationInfo(activityClient.getTaskForActivity(iBinder, false), activityClient.getDisplayId(iBinder), ActivityManagerService.this.mAtmInternal.getActivityName(iBinder));
        }

        public final Pair getAppProfileStatsForDebugging(long j, int i) {
            String printCurrentLoad;
            String printCurrentState;
            AppProfiler appProfiler = ActivityManagerService.this.mAppProfiler;
            synchronized (appProfiler.mProcessCpuTracker) {
                appProfiler.updateCpuStatsNow();
                printCurrentLoad = appProfiler.mProcessCpuTracker.printCurrentLoad();
                printCurrentState = appProfiler.mProcessCpuTracker.printCurrentState(j);
            }
            int i2 = 0;
            int i3 = 0;
            while (true) {
                if (i2 > i) {
                    break;
                }
                int indexOf = printCurrentState.indexOf(10, i3);
                if (indexOf == -1) {
                    i3 = printCurrentState.length();
                    break;
                }
                i3 = indexOf + 1;
                i2++;
            }
            return new Pair(printCurrentLoad, printCurrentState.substring(0, i3));
        }

        public final BackgroundStartPrivileges getBackgroundStartPrivileges(int i) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            int i2 = ActivityManagerService.PROC_START_TIMEOUT;
            return activityManagerService.getBackgroundStartPrivileges(i);
        }

        public final long getBootTimeTempAllowListDuration() {
            return ActivityManagerService.this.mConstants.mBootTimeTempAllowlistDuration;
        }

        public final Object getCachedAppsHighWatermarkStats(int i, boolean z) {
            StatsEvent buildStatsEvent;
            AppProfiler.CachedAppsWatermarkData cachedAppsWatermarkData = ActivityManagerService.this.mAppProfiler.mCachedAppsWatermarkData;
            ActivityManagerGlobalLock activityManagerGlobalLock = AppProfiler.this.mProcLock;
            ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    buildStatsEvent = FrameworkStatsLog.buildStatsEvent(i, cachedAppsWatermarkData.mCachedAppHighWatermark, cachedAppsWatermarkData.mUptimeInSeconds, cachedAppsWatermarkData.mBinderProxySnapshot, cachedAppsWatermarkData.mFreeInKb, cachedAppsWatermarkData.mCachedInKb, cachedAppsWatermarkData.mZramInKb, cachedAppsWatermarkData.mKernelInKb, cachedAppsWatermarkData.mNumOfFrozenApps, cachedAppsWatermarkData.mLongestFrozenTimeInSeconds, cachedAppsWatermarkData.mShortestFrozenTimeInSeconds, cachedAppsWatermarkData.mMeanFrozenTimeInSeconds, cachedAppsWatermarkData.mAverageFrozenTimeInSeconds);
                    if (z) {
                        cachedAppsWatermarkData.mCachedAppHighWatermark = 0;
                        cachedAppsWatermarkData.mUptimeInSeconds = 0;
                        cachedAppsWatermarkData.mBinderProxySnapshot = 0;
                        cachedAppsWatermarkData.mFreeInKb = 0;
                        cachedAppsWatermarkData.mCachedInKb = 0;
                        cachedAppsWatermarkData.mZramInKb = 0;
                        cachedAppsWatermarkData.mKernelInKb = 0;
                        cachedAppsWatermarkData.mNumOfFrozenApps = 0;
                        cachedAppsWatermarkData.mLongestFrozenTimeInSeconds = 0;
                        cachedAppsWatermarkData.mShortestFrozenTimeInSeconds = 0;
                        cachedAppsWatermarkData.mMeanFrozenTimeInSeconds = 0;
                        cachedAppsWatermarkData.mAverageFrozenTimeInSeconds = 0;
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterProcLockedSection();
            return buildStatsEvent;
        }

        public final ArraySet getClientPackages(String str) {
            ArraySet clientPackagesLocked;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    clientPackagesLocked = ActivityManagerService.this.mServices.getClientPackagesLocked(str);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return clientPackagesLocked;
        }

        public final Pair getCurrentAndTargetUserIds() {
            Pair pair;
            UserController userController = ActivityManagerService.this.mUserController;
            synchronized (userController.mLock) {
                pair = new Pair(Integer.valueOf(userController.mCurrentUserId), Integer.valueOf(userController.mTargetUserId));
            }
            return pair;
        }

        public final int[] getCurrentProfileIds() {
            return ActivityManagerService.this.mUserController.getCurrentProfileIds();
        }

        public final UserInfo getCurrentUser() {
            return ActivityManagerService.this.mUserController.getCurrentUser();
        }

        public final int getCurrentUserId() {
            return ActivityManagerService.this.mUserController.getCurrentUserId();
        }

        public final int getInstrumentationSourceUid(int i) {
            ApplicationInfo applicationInfo;
            ActivityManagerProcLock activityManagerProcLock = ActivityManagerService.this.mProcLock;
            ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerProcLock) {
                try {
                    for (int size = ActivityManagerService.this.mActiveInstrumentation.size() - 1; size >= 0; size--) {
                        ActiveInstrumentation activeInstrumentation = (ActiveInstrumentation) ActivityManagerService.this.mActiveInstrumentation.get(size);
                        if (!activeInstrumentation.mFinished && (applicationInfo = activeInstrumentation.mTargetInfo) != null && applicationInfo.uid == i) {
                            int i2 = activeInstrumentation.mSourceUid;
                            ActivityManagerService.resetPriorityAfterProcLockedSection();
                            return i2;
                        }
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    return -1;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
        }

        public final Intent getIntentForIntentSender(IIntentSender iIntentSender) {
            return ActivityManagerService.this.getIntentForIntentSender(iIntentSender);
        }

        public final boolean getIsDataClearedInAms(String str, int i) {
            return false;
        }

        public final List getIsolatedProcesses(int i) {
            ArrayList arrayList;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ProcessList processList = ActivityManagerService.this.mProcessList;
                    int size = processList.mIsolatedProcesses.size();
                    arrayList = null;
                    for (int i2 = 0; i2 < size; i2++) {
                        ProcessRecord processRecord = (ProcessRecord) processList.mIsolatedProcesses.valueAt(i2);
                        if (processRecord.info.uid == i) {
                            if (arrayList == null) {
                                arrayList = new ArrayList();
                            }
                            arrayList.add(Integer.valueOf(processRecord.mPid));
                        }
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return arrayList;
        }

        public final Intent getLaunchIntentForPackage(String str, int i) {
            return null;
        }

        public final int getMaxRunningUsers() {
            int i;
            UserController userController = ActivityManagerService.this.mUserController;
            synchronized (userController.mLock) {
                i = userController.mMaxRunningUsers;
            }
            return i;
        }

        public final List getMemoryStateForProcesses() {
            ArrayList arrayList = new ArrayList();
            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                try {
                    int size = ((SparseArray) ActivityManagerService.this.mPidsSelfLocked.mPidMap).size();
                    for (int i = 0; i < size; i++) {
                        ProcessRecord valueAt = ActivityManagerService.this.mPidsSelfLocked.valueAt(i);
                        arrayList.add(new ProcessMemoryState(valueAt.uid, valueAt.mPid, valueAt.processName, valueAt.mState.mCurAdj, valueAt.mServices.mHasForegroundServices, valueAt.mProfile.mCurrentHostingComponentTypes.get(), valueAt.mProfile.mHistoricalHostingComponentTypes.get()));
                    }
                } catch (Throwable th) {
                    throw th;
                }
            }
            return arrayList;
        }

        public final String getPackageNameByPid(int i) {
            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                try {
                    ProcessRecord processRecord = ActivityManagerService.this.mPidsSelfLocked.get(i);
                    if (processRecord == null || processRecord.info == null) {
                        return null;
                    }
                    return processRecord.info.packageName;
                } catch (Throwable th) {
                    throw th;
                }
            }
        }

        public final PendingIntent getPendingIntentActivityAsApp(int i, Intent intent, int i2, Bundle bundle, String str, int i3) {
            return getPendingIntentActivityAsApp(i, new Intent[]{intent}, i2, bundle, str, i3);
        }

        public final PendingIntent getPendingIntentActivityAsApp(int i, Intent[] intentArr, int i2, Bundle bundle, String str, int i3) {
            if (((i2 & 67108864) != 0) == ((i2 & 33554432) != 0)) {
                throw new IllegalArgumentException("Must set exactly one of FLAG_IMMUTABLE or FLAG_MUTABLE");
            }
            Context context = ActivityManagerService.this.mContext;
            ContentResolver contentResolver = context.getContentResolver();
            int length = intentArr.length;
            String[] strArr = new String[length];
            for (int i4 = 0; i4 < length; i4++) {
                Intent intent = intentArr[i4];
                strArr[i4] = intent.resolveTypeIfNeeded(contentResolver);
                intent.migrateExtraStreamToClipData(context);
                intent.prepareToLeaveProcess(context);
            }
            PendingIntentRecord intentSenderWithFeatureAsApp = ActivityManagerService.this.getIntentSenderWithFeatureAsApp(2, i, i2, UserHandle.getUserId(i3), i3, bundle, null, str, context.getAttributionTag(), null, intentArr, strArr);
            if (intentSenderWithFeatureAsApp != null) {
                return new PendingIntent(intentSenderWithFeatureAsApp);
            }
            return null;
        }

        public final int getPendingIntentFlags(IIntentSender iIntentSender) {
            int i;
            PendingIntentController pendingIntentController = ActivityManagerService.this.mPendingIntentController;
            pendingIntentController.getClass();
            if (iIntentSender instanceof PendingIntentRecord) {
                synchronized (pendingIntentController.mLock) {
                    i = ((PendingIntentRecord) iIntentSender).key.flags;
                }
                return i;
            }
            Slog.w("ActivityManager", "markAsSentFromNotification(): not a PendingIntentRecord: " + iIntentSender);
            return 0;
        }

        public final List getPendingIntentStats() {
            PendingIntentController pendingIntentController = ActivityManagerService.this.mPendingIntentController;
            pendingIntentController.getClass();
            ArrayList arrayList = new ArrayList();
            synchronized (pendingIntentController.mLock) {
                try {
                    if (pendingIntentController.mIntentSenderRecords.size() > 0) {
                        SparseIntArray sparseIntArray = new SparseIntArray();
                        SparseIntArray sparseIntArray2 = new SparseIntArray();
                        for (WeakReference weakReference : pendingIntentController.mIntentSenderRecords.values()) {
                            if (weakReference != null && weakReference.get() != null) {
                                PendingIntentRecord pendingIntentRecord = (PendingIntentRecord) weakReference.get();
                                int indexOfKey = sparseIntArray.indexOfKey(pendingIntentRecord.uid);
                                if (indexOfKey < 0) {
                                    sparseIntArray.put(pendingIntentRecord.uid, 1);
                                    sparseIntArray2.put(pendingIntentRecord.uid, pendingIntentRecord.key.requestIntent.getExtrasTotalSize());
                                } else {
                                    sparseIntArray.put(pendingIntentRecord.uid, sparseIntArray.valueAt(indexOfKey) + 1);
                                    sparseIntArray2.put(pendingIntentRecord.uid, sparseIntArray2.valueAt(indexOfKey) + pendingIntentRecord.key.requestIntent.getExtrasTotalSize());
                                }
                            }
                        }
                        int size = sparseIntArray.size();
                        for (int i = 0; i < size; i++) {
                            arrayList.add(new PendingIntentStats(sparseIntArray.keyAt(i), sparseIntArray.valueAt(i), sparseIntArray2.valueAt(i) / 1024));
                        }
                    }
                } catch (Throwable th) {
                    throw th;
                }
            }
            return arrayList;
        }

        public final Map getProcessesWithPendingBindMounts(int i) {
            ProcessList processList = ActivityManagerService.this.mProcessList;
            processList.getClass();
            HashMap hashMap = new HashMap();
            ActivityManagerGlobalLock activityManagerGlobalLock = processList.mProcLock;
            ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerGlobalLock) {
                try {
                    for (int size = processList.mLruProcesses.size() - 1; size >= 0; size--) {
                        ProcessRecord processRecord = (ProcessRecord) processList.mLruProcesses.get(size);
                        if (processRecord.userId == i && processRecord.mBindMountPending) {
                            int i2 = processRecord.mPid;
                            if (i2 == 0) {
                                throw new IllegalStateException("Pending process is not started yet,retry later");
                            }
                            hashMap.put(Integer.valueOf(i2), processRecord.info.packageName);
                        }
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterProcLockedSection();
            return hashMap;
        }

        public final int getPushMessagingOverQuotaBehavior() {
            int i;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    i = ActivityManagerService.this.mConstants.mPushMessagingOverQuotaBehavior;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return i;
        }

        public final int getRestrictionLevel(int i) {
            return ActivityManagerService.this.mAppRestrictionController.mRestrictionSettings.getRestrictionLevel(i);
        }

        public final int getRestrictionLevel(String str, int i) {
            AppRestrictionController.RestrictionSettings restrictionSettings = ActivityManagerService.this.mAppRestrictionController.mRestrictionSettings;
            return restrictionSettings.getRestrictionLevel(AppRestrictionController.this.mInjector.getPackageManagerInternal().getPackageUid(str, 819200L, i), str);
        }

        public final int getServiceStartForegroundTimeout() {
            return ActivityManagerService.this.mConstants.mServiceStartForegroundTimeoutMs;
        }

        public final int[] getStartedUserIds() {
            int[] iArr;
            UserController userController = ActivityManagerService.this.mUserController;
            synchronized (userController.mLock) {
                iArr = userController.mStartedUserArray;
            }
            return iArr;
        }

        public final int getStorageMountMode(int i, int i2) {
            int i3;
            if (i2 == 2000 || i2 == 0) {
                return 1;
            }
            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                ProcessRecord processRecord = ActivityManagerService.this.mPidsSelfLocked.get(i);
                i3 = processRecord == null ? 0 : processRecord.mMountMode;
            }
            return i3;
        }

        public final int getTaskIdForActivity(IBinder iBinder, boolean z) {
            return ActivityManagerService.this.getTaskForActivity(iBinder, z);
        }

        public final int getUidCapability(int i) {
            int i2;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    UidRecord uidRecord = ActivityManagerService.this.mProcessList.mActiveUids.get(i);
                    if (uidRecord == null) {
                        throw new IllegalArgumentException("uid record for " + i + " not found");
                    }
                    i2 = uidRecord.mCurCapability;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return i2;
        }

        public final int getUidProcessState(int i) {
            return ActivityManagerService.this.getUidState(i);
        }

        public final int handleIncomingUser(int i, int i2, int i3, boolean z, int i4, String str, String str2) {
            return ActivityManagerService.this.mUserController.handleIncomingUser(i, i2, i3, z, i4, str, str2);
        }

        public final boolean hasForegroundServiceNotification(String str, int i, String str2) {
            boolean hasForegroundServiceNotificationLocked;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    hasForegroundServiceNotificationLocked = ActivityManagerService.this.mServices.hasForegroundServiceNotificationLocked(i, str, str2);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return hasForegroundServiceNotificationLocked;
        }

        public final boolean hasMetaData(String str, String str2) {
            return ActivityManagerServiceExt.MetaDataCollector.m170$$Nest$mhasBooleanMetaData(ActivityManagerService.this.mExt.mMetaDataCollector, str, str2);
        }

        public final boolean hasRunningActivity(final int i, final String str) {
            boolean z;
            if (str == null) {
                return false;
            }
            ActivityManagerProcLock activityManagerProcLock = ActivityManagerService.this.mProcLock;
            ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerProcLock) {
                try {
                    z = ActivityManagerService.this.mProcessList.searchEachLruProcessesLOSP(new Function() { // from class: com.android.server.am.ActivityManagerService$LocalService$$ExternalSyntheticLambda0
                        @Override // java.util.function.Function
                        public final Object apply(Object obj) {
                            int i2 = i;
                            String str2 = str;
                            ProcessRecord processRecord = (ProcessRecord) obj;
                            int i3 = ActivityManagerService.LocalService.$r8$clinit;
                            if (processRecord.uid == i2) {
                                WindowProcessController windowProcessController = processRecord.mWindowProcessController;
                                WindowManagerGlobalLock windowManagerGlobalLock = windowProcessController.mAtm.mGlobalLock;
                                WindowManagerService.boostPriorityForLockedSection();
                                synchronized (windowManagerGlobalLock) {
                                    try {
                                        for (int size = windowProcessController.mActivities.size() - 1; size >= 0; size--) {
                                            if (str2.equals(((ActivityRecord) windowProcessController.mActivities.get(size)).packageName)) {
                                                WindowManagerService.resetPriorityAfterLockedSection();
                                                return Boolean.TRUE;
                                            }
                                        }
                                        WindowManagerService.resetPriorityAfterLockedSection();
                                    } catch (Throwable th) {
                                        WindowManagerService.resetPriorityAfterLockedSection();
                                        throw th;
                                    }
                                }
                            }
                            return null;
                        }
                    }, true) != null;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterProcLockedSection();
            return z;
        }

        public final boolean hasRunningForegroundService(int i, int i2) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    UidRecord uidRecord = ActivityManagerService.this.mProcessList.mActiveUids.get(i);
                    if (uidRecord == null) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        return false;
                    }
                    for (int size = uidRecord.mProcRecords.size() - 1; size >= 0; size--) {
                        ProcessServiceRecord processServiceRecord = ((ProcessRecord) uidRecord.mProcRecords.valueAt(size)).mServices;
                        if (((processServiceRecord.mHasForegroundServices ? processServiceRecord.mFgServiceTypes : 0) & i2) != 0) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            return true;
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    return false;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }

        public final boolean hasStartedUserState(int i) {
            return ActivityManagerService.this.mUserController.hasStartedUserState(i);
        }

        public final void inputDispatchingResumed(int i) {
            ProcessRecord processRecord;
            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                processRecord = ActivityManagerService.this.mPidsSelfLocked.get(i);
            }
            if (processRecord != null) {
                AppErrors appErrors = ActivityManagerService.this.mAppErrors;
                ActivityManagerGlobalLock activityManagerGlobalLock = appErrors.mProcLock;
                ActivityManagerService.boostPriorityForProcLockedSection();
                synchronized (activityManagerGlobalLock) {
                    try {
                        ProcessErrorStateRecord processErrorStateRecord = processRecord.mErrorState;
                        appErrors.mService.mUiHandler.removeMessages(2, processErrorStateRecord.mAnrData);
                        if (processErrorStateRecord.mDialogController.mAnrDialogs != null) {
                            processErrorStateRecord.setNotResponding(false);
                            processErrorStateRecord.mNotRespondingReport = null;
                            processErrorStateRecord.mDialogController.clearAnrDialogs();
                        }
                        processRecord.mErrorState.mAnrData = null;
                    } catch (Throwable th) {
                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                ActivityManagerService.resetPriorityAfterProcLockedSection();
            }
        }

        public final long inputDispatchingTimedOut(int i, boolean z, TimeoutRecord timeoutRecord) {
            ProcessRecord processRecord;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            if (activityManagerService.checkCallingPermission("android.permission.FILTER_EVENTS") != 0) {
                throw new SecurityException("Requires permission android.permission.FILTER_EVENTS");
            }
            timeoutRecord.mLatencyTracker.waitingOnPidLockStarted();
            synchronized (activityManagerService.mPidsSelfLocked) {
                timeoutRecord.mLatencyTracker.waitingOnPidLockEnded();
                processRecord = activityManagerService.mPidsSelfLocked.get(i);
            }
            long inputDispatchingTimeoutMillis = processRecord != null ? processRecord.mWindowProcessController.getInputDispatchingTimeoutMillis() : InputConstants.DEFAULT_DISPATCHING_TIMEOUT_MILLIS;
            if (activityManagerService.inputDispatchingTimedOut(processRecord, null, null, null, null, z, timeoutRecord)) {
                return 0L;
            }
            return inputDispatchingTimeoutMillis;
        }

        public final boolean inputDispatchingTimedOut(Object obj, String str, ApplicationInfo applicationInfo, String str2, Object obj2, boolean z, TimeoutRecord timeoutRecord) {
            return ActivityManagerService.this.inputDispatchingTimedOut((ProcessRecord) obj, str, applicationInfo, str2, (WindowProcessController) obj2, z, timeoutRecord);
        }

        public final boolean isActivityStartsLoggingEnabled() {
            return ActivityManagerService.this.mConstants.mFlagActivityStartsLoggingEnabled;
        }

        public final boolean isAppBad(String str, int i) {
            return ActivityManagerService.this.mAppErrors.mBadProcesses.get(str, i) != null;
        }

        public final boolean isAppForeground(int i) {
            boolean z;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerProcLock activityManagerProcLock = activityManagerService.mProcLock;
            ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerProcLock) {
                try {
                    UidRecord uidRecord = activityManagerService.mProcessList.mActiveUids.get(i);
                    if (uidRecord != null && !uidRecord.mIdle) {
                        z = uidRecord.mCurProcState <= 6;
                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            return z;
        }

        public final boolean isAppStartModeDisabled(int i, String str) {
            boolean z;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerProcLock activityManagerProcLock = activityManagerService.mProcLock;
            ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerProcLock) {
                try {
                    z = activityManagerService.getAppStartModeLOSP(i, 0, -1, str, false, true, false) == 3;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterProcLockedSection();
            return z;
        }

        public final boolean isAssociatedCompanionApp(int i, int i2) {
            Set set = (Set) ActivityManagerService.this.mCompanionAppUidsMap.get(Integer.valueOf(i));
            if (set == null) {
                return false;
            }
            return set.contains(Integer.valueOf(i2));
        }

        public final boolean isAutoRunBlockedApp(String str, int i) {
            if (MARsPolicyManager.MARs_ENABLE) {
                return MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE.isAutoRunBlockedApp(str, i);
            }
            return false;
        }

        public final boolean isBackgroundActivityStartsEnabled() {
            return ActivityManagerService.this.mConstants.mFlagBackgroundActivityStartsEnabled;
        }

        public final boolean isBgAutoRestrictedBucketFeatureFlagEnabled() {
            return ActivityManagerService.this.mAppRestrictionController.mConstantsObserver.mBgAutoRestrictedBucket;
        }

        public final boolean isBooted() {
            return ActivityManagerService.this.mBooted;
        }

        public final boolean isBooting() {
            return ActivityManagerService.this.mBooting;
        }

        public final boolean isCurrentProfile(int i) {
            boolean contains;
            UserController userController = ActivityManagerService.this.mUserController;
            synchronized (userController.mLock) {
                contains = ArrayUtils.contains(userController.mCurrentProfileIds, i);
            }
            return contains;
        }

        public final boolean isDeviceOwner(int i) {
            return i >= 0 && ActivityManagerService.this.mDeviceOwnerUid == i;
        }

        public final boolean isPendingTopUid(int i) {
            boolean z;
            PendingStartActivityUids pendingStartActivityUids = ActivityManagerService.this.mPendingStartActivityUids;
            synchronized (pendingStartActivityUids) {
                z = pendingStartActivityUids.mPendingUids.get(i) != null;
            }
            return z;
        }

        public final boolean isProfileOwner(int i) {
            boolean z;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ArraySet arraySet = ActivityManagerService.this.mProfileOwnerUids;
                    z = arraySet != null && arraySet.indexOf(Integer.valueOf(i)) >= 0;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return z;
        }

        public final boolean isRestrictedPackage(ComponentName componentName, String str, int i, String str2, Intent intent, int i2) {
            if (MARsPolicyManager.MARs_ENABLE) {
                return BaseRestrictionMgr.BaseRestrictionMgrHolder.INSTANCE.isRestrictedPackage(componentName, str, i, str2, intent, i2, false, null, null, 0, 0);
            }
            return false;
        }

        public final boolean isRuntimeRestarted() {
            return ActivityManagerService.this.mSystemServiceManager.mRuntimeRestarted;
        }

        public final boolean isSystemReady() {
            return ActivityManagerService.this.mSystemReady;
        }

        public final boolean isTempAllowlistedForFgsWhileInUse(int i) {
            return ActivityManagerService.this.mFgsWhileInUseTempAllowList.get(i) != null;
        }

        public final boolean isUidActive(int i) {
            boolean isUidActiveLOSP;
            ActivityManagerProcLock activityManagerProcLock = ActivityManagerService.this.mProcLock;
            ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerProcLock) {
                try {
                    isUidActiveLOSP = ActivityManagerService.this.isUidActiveLOSP(i);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterProcLockedSection();
            return isUidActiveLOSP;
        }

        public final boolean isUserRunning(int i, int i2) {
            return ActivityManagerService.this.mUserController.isUserRunning(i, i2);
        }

        public final void killAllBackgroundProcessesExcept(int i, int i2) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.killAllBackgroundProcessesExcept(i, i2);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void killAllBackgroundProcessesExcept(int i, int i2, Bundle bundle) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.mExt.killAllBackgroundProcessesExcept(i, i2, bundle);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void killApplicationSync(String str, int i, int i2, String str2, int i3) {
            if (str == null) {
                return;
            }
            if (i < 0) {
                Slog.w("ActivityManager", "Invalid appid specified for pkg : ".concat(str));
                return;
            }
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.forceStopPackageLocked(str, i, false, false, true, false, false, false, i2, str2, i3);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void killForegroundAppsForUser(int i) {
            int i2;
            ArrayList arrayList = new ArrayList();
            ActivityManagerProcLock activityManagerProcLock = ActivityManagerService.this.mProcLock;
            ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerProcLock) {
                try {
                    int size = ActivityManagerService.this.mProcessList.mProcessNames.getMap().size();
                    for (int i3 = 0; i3 < size; i3++) {
                        SparseArray sparseArray = (SparseArray) ActivityManagerService.this.mProcessList.mProcessNames.getMap().valueAt(i3);
                        int size2 = sparseArray.size();
                        for (int i4 = 0; i4 < size2; i4++) {
                            ProcessRecord processRecord = (ProcessRecord) sparseArray.valueAt(i4);
                            if (!processRecord.mPersistent) {
                                if (!processRecord.mRemoved) {
                                    if (processRecord.userId == i && processRecord.mState.mHasForegroundActivities) {
                                    }
                                }
                                arrayList.add(processRecord);
                            }
                        }
                    }
                } finally {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                }
            }
            ActivityManagerService.resetPriorityAfterProcLockedSection();
            int size3 = arrayList.size();
            if (size3 > 0) {
                ActivityManagerService activityManagerService = ActivityManagerService.this;
                ActivityManagerService.boostPriorityForLockedSection();
                synchronized (activityManagerService) {
                    for (i2 = 0; i2 < size3; i2++) {
                        try {
                            ActivityManagerService.this.mProcessList.removeProcessLocked((ProcessRecord) arrayList.get(i2), false, true, 13, 9, "kill all fg", true);
                        } finally {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                        }
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
            }
        }

        public final void killProcess(String str, int i, String str2) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ProcessRecord processRecordLocked = ActivityManagerService.this.mProcessList.getProcessRecordLocked(i, str);
                    if (processRecordLocked != null) {
                        ActivityManagerService.this.mProcessList.removeProcessLocked(processRecordLocked, false, true, 13, 0, str2, true);
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void killProcessForDex(int i, int i2, String str) {
            ProcessRecord processRecord;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                        processRecord = ActivityManagerService.this.mPidsSelfLocked.get(i);
                    }
                    if (processRecord != null) {
                        processRecord.mRemoved = true;
                        ActivityManagerService.this.mProcessList.removeProcessLocked(processRecord, false, false, 13, 0, str, true);
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void killProcessWhenDexExit() {
            int i;
            SparseArray sparseArray;
            ActivityManagerServiceExt activityManagerServiceExt = ActivityManagerService.this.mExt;
            activityManagerServiceExt.getClass();
            long clearCallingIdentity = Binder.clearCallingIdentity();
            try {
                ActivityManagerService activityManagerService = activityManagerServiceExt.mService;
                ActivityManagerService.boostPriorityForLockedSection();
                synchronized (activityManagerService) {
                    try {
                        ActivityManagerProcLock activityManagerProcLock = activityManagerServiceExt.mService.mProcLock;
                        ActivityManagerService.boostPriorityForProcLockedSection();
                        synchronized (activityManagerProcLock) {
                            try {
                                ArrayList arrayList = new ArrayList();
                                ArrayList arrayList2 = new ArrayList();
                                int size = activityManagerServiceExt.mService.mProcessList.mProcessNames.getMap().size();
                                int i2 = 0;
                                for (int i3 = 0; i3 < size; i3++) {
                                    SparseArray sparseArray2 = (SparseArray) activityManagerServiceExt.mService.mProcessList.mProcessNames.getMap().valueAt(i3);
                                    int size2 = sparseArray2.size();
                                    int i4 = 0;
                                    while (i4 < size2) {
                                        ProcessRecord processRecord = (ProcessRecord) sparseArray2.valueAt(i4);
                                        if (processRecord.mState.mSetProcState != 20) {
                                            int i5 = processRecord.mKillProcessTimeout;
                                            if (i5 == 0) {
                                                arrayList.add(processRecord);
                                            } else if (i5 > 0) {
                                                i = size;
                                                StringBuilder sb = new StringBuilder();
                                                sparseArray = sparseArray2;
                                                sb.append("kill dex related process - scheduleKillProcessesForDeXExit :");
                                                sb.append(processRecord.processName);
                                                sb.append("(");
                                                sb.append(String.valueOf(processRecord.mKillProcessTimeout));
                                                sb.append(")");
                                                Slog.d("ActivityManagerServiceExt", sb.toString());
                                                arrayList2.add(processRecord);
                                                if (i5 > i2) {
                                                    i2 = i5;
                                                }
                                                i4++;
                                                size = i;
                                                sparseArray2 = sparseArray;
                                            }
                                        }
                                        i = size;
                                        sparseArray = sparseArray2;
                                        i4++;
                                        size = i;
                                        sparseArray2 = sparseArray;
                                    }
                                }
                                int size3 = arrayList.size();
                                for (int i6 = 0; i6 < size3; i6++) {
                                    activityManagerServiceExt.forceKillProcessesForDeXExitLocked((ProcessRecord) arrayList.get(i6));
                                }
                                if (arrayList2.size() > 0) {
                                    Handler handler = activityManagerServiceExt.mDeXHandler;
                                    handler.removeCallbacks(activityManagerServiceExt.mForceKillForDeXRunnable);
                                    activityManagerServiceExt.mDeXKillProcesses = arrayList2;
                                    handler.postDelayed(activityManagerServiceExt.mForceKillForDeXRunnable, i2);
                                }
                            } catch (Throwable th) {
                                ActivityManagerService.resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                        }
                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                    } catch (Throwable th2) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th2;
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
            } finally {
                Binder.restoreCallingIdentity(clearCallingIdentity);
            }
        }

        public final void killProcessesForRemovedTask(ArrayList arrayList) {
            String str;
            String str2;
            boolean z = MARsPolicyManager.MARs_ENABLE;
            MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE.getClass();
            if (MARsPolicyManager.isChinaPolicyEnabled()) {
                ActiveMusicRecordFilter.ActiveMusicRecordFilterHolder.INSTANCE.getUidListUsingAudio();
            }
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ArrayList arrayList2 = new ArrayList();
                    for (int i = 0; i < arrayList.size(); i++) {
                        WindowProcessController windowProcessController = (WindowProcessController) arrayList.get(i);
                        ProcessRecord processRecord = (ProcessRecord) windowProcessController.mOwner;
                        if (processRecord.mInfant) {
                            Slog.v("ActivityManager", "Skipped removedTask " + processRecord.processName);
                        } else if (!ActivityManager.isProcStateBackground(processRecord.mState.mSetProcState) || processRecord.mReceivers.mCurReceiversSize != 0 || processRecord.mState.mHasStartedServices || processRecord.mKeepSEMPrcp) {
                            if (!MARsPolicyManager.MARs_ENABLE) {
                                processRecord.mWaitingToKill = "remove task";
                                processRecord.mClearedWaitingToKill = false;
                            } else if (MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE.isAutoRunBlockedApp(processRecord.info.packageName, processRecord.userId)) {
                                if (!arrayList2.contains(processRecord.info.packageName + "," + processRecord.userId) && (str = windowProcessController.mReason) != null) {
                                    if (str.contains("MultiTaskingAppCompat")) {
                                        processRecord.killLocked(10, 22, "remove task", "remove task", true, true);
                                    } else {
                                        arrayList2.add(processRecord.info.packageName + "," + processRecord.userId);
                                    }
                                    windowProcessController.mReason = null;
                                }
                            } else {
                                processRecord.mWaitingToKill = "remove task";
                                processRecord.mClearedWaitingToKill = false;
                            }
                        } else if (!MARsPolicyManager.MARs_ENABLE) {
                            processRecord.killLocked(10, 22, "remove task", "remove task", true, true);
                        } else if (MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE.isAutoRunBlockedApp(processRecord.info.packageName, processRecord.userId)) {
                            if (!arrayList2.contains(processRecord.info.packageName + "," + processRecord.userId) && (str2 = windowProcessController.mReason) != null) {
                                if (str2.contains("MultiTaskingAppCompat")) {
                                    processRecord.killLocked(10, 22, "remove task", "remove task", true, true);
                                } else {
                                    arrayList2.add(processRecord.info.packageName + "," + processRecord.userId);
                                }
                                windowProcessController.mReason = null;
                            }
                        } else {
                            processRecord.killLocked(10, 22, "remove task", "remove task", true, true);
                        }
                    }
                    for (int i2 = 0; i2 < arrayList2.size(); i2++) {
                        String str3 = (String) arrayList2.get(i2);
                        MARsPolicyManager mARsPolicyManager = MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE;
                        if (!mARsPolicyManager.forceRunPolicyForRecentKill(str3)) {
                            int userId = mARsPolicyManager.mContext.getUserId();
                            if (str3 != null && str3.contains(",")) {
                                String[] split = str3.split(",");
                                if (split == null || split.length != 2) {
                                    str3 = null;
                                } else {
                                    String str4 = split[0];
                                    if (str4 == null) {
                                        str4 = null;
                                    }
                                    try {
                                        String str5 = split[1];
                                        if (str5 != null) {
                                            userId = Integer.parseInt(str5);
                                        }
                                    } catch (NumberFormatException unused) {
                                        Slog.e("MARsPolicyManager", "forceStopForRecentKill parseInt error!");
                                    }
                                    str3 = str4;
                                }
                            }
                            if (str3 != null) {
                                mARsPolicyManager.mAm.forceStopPackage(str3, userId);
                            }
                        }
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public final void killSdkSandboxClientAppProcess(IBinder iBinder) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ProcessRecord recordForAppLOSP = ActivityManagerService.this.getRecordForAppLOSP(iBinder);
                    if (recordForAppLOSP != null) {
                        recordForAppLOSP.killLocked(12, 27, "sdk sandbox died", "sdk sandbox died", true, true);
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void logFgsApiBegin(int i, int i2, int i3) {
            synchronized (this) {
                ActiveServices activeServices = ActivityManagerService.this.mServices;
                synchronized (activeServices.mFGSLogger) {
                    activeServices.mFGSLogger.logForegroundServiceApiEventBegin(i, i2, i3);
                }
            }
        }

        public final void logFgsApiEnd(int i, int i2, int i3) {
            synchronized (this) {
                ActiveServices activeServices = ActivityManagerService.this.mServices;
                synchronized (activeServices.mFGSLogger) {
                    activeServices.mFGSLogger.logForegroundServiceApiEventEnd(i, i2, i3);
                }
            }
        }

        public final void monitor() {
            ActivityManagerService.this.monitor();
        }

        public final void noteAlarmFinish(PendingIntent pendingIntent, WorkSource workSource, int i, String str) {
            ActivityManagerService.this.noteAlarmFinish(pendingIntent != null ? pendingIntent.getTarget() : null, workSource, i, str);
        }

        public final void noteAlarmStart(PendingIntent pendingIntent, WorkSource workSource, int i, String str) {
            ActivityManagerService.this.noteAlarmStart(pendingIntent != null ? pendingIntent.getTarget() : null, workSource, i, str);
        }

        public final void noteWakeupAlarm(PendingIntent pendingIntent, WorkSource workSource, int i, String str, String str2) {
            ActivityManagerService.this.noteWakeupAlarm(pendingIntent != null ? pendingIntent.getTarget() : null, workSource, i, str, str2);
        }

        public final void notifyMediaProjectionEvent(int i, IBinder iBinder, int i2) {
            ArraySet arraySet;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            synchronized (activityManagerService.mMediaProjectionTokenMap) {
                try {
                    int indexOfKey = activityManagerService.mMediaProjectionTokenMap.indexOfKey(i);
                    if (i2 == 0) {
                        if (indexOfKey < 0) {
                            arraySet = new ArraySet();
                            activityManagerService.mMediaProjectionTokenMap.put(i, arraySet);
                        } else {
                            arraySet = (ArraySet) activityManagerService.mMediaProjectionTokenMap.valueAt(indexOfKey);
                        }
                        arraySet.add(iBinder);
                    } else if (i2 == 1 && indexOfKey >= 0) {
                        ArraySet arraySet2 = (ArraySet) activityManagerService.mMediaProjectionTokenMap.valueAt(indexOfKey);
                        arraySet2.remove(iBinder);
                        if (arraySet2.isEmpty()) {
                            activityManagerService.mMediaProjectionTokenMap.removeAt(indexOfKey);
                        }
                    }
                } catch (Throwable th) {
                    throw th;
                }
            }
        }

        public final void notifyNetworkPolicyRulesUpdated(int i, long j) {
            ActivityManagerProcLock activityManagerProcLock = ActivityManagerService.this.mProcLock;
            ActivityManagerService.boostPriorityForProcLockedSection();
            synchronized (activityManagerProcLock) {
                try {
                    UidRecord uidRecord = ActivityManagerService.this.mProcessList.mActiveUids.get(i);
                    if (uidRecord == null) {
                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                        return;
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    synchronized (uidRecord.networkStateLock) {
                        try {
                            if (uidRecord.lastNetworkUpdatedProcStateSeq >= j) {
                                return;
                            }
                            uidRecord.lastNetworkUpdatedProcStateSeq = j;
                            if (uidRecord.procStateSeqWaitingForNetwork != 0 && j >= uidRecord.procStateSeqWaitingForNetwork) {
                                uidRecord.networkStateLock.notifyAll();
                            }
                        } catch (Throwable th) {
                            throw th;
                        }
                    }
                } catch (Throwable th2) {
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                    throw th2;
                }
            }
        }

        public final void onForegroundServiceNotificationUpdate(boolean z, Notification notification, int i, String str, int i2) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.mServices.onForegroundServiceNotificationUpdateLocked(z, notification, i, str, i2);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void onPackagePausedBG(String str, String str2, boolean z, int i) {
            if (MARsPolicyManager.MARs_ENABLE) {
                MARsPolicyManager mARsPolicyManager = MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE;
                mARsPolicyManager.getClass();
                synchronized (MARsPolicyManager.MARsLock) {
                    try {
                        MARsPackageInfo mARsPackageInfo = MARsPolicyManager.getMARsPackageInfo(mARsPolicyManager.mMARsTargetPackages, str, i);
                        if (mARsPolicyManager.mScreenOn && MARsPolicyManager.isChinaPolicyEnabled() && mARsPackageInfo != null) {
                            mARsPackageInfo.lastUsedTime = SystemClock.elapsedRealtime();
                        }
                        if (!str.equals(str2) || z) {
                        }
                    } finally {
                    }
                }
            }
        }

        public final void onPackageResumedFG(List list, String str, String str2, boolean z, Intent intent, int i) {
            String str3;
            if (MARsPolicyManager.MARs_ENABLE) {
                MARsPolicyManager mARsPolicyManager = MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE;
                mARsPolicyManager.getClass();
                if (Constants.SYSTEMUI_PACKAGE_NAME.equals(str)) {
                    return;
                }
                long uptimeMillis = SystemClock.uptimeMillis();
                boolean z2 = uptimeMillis - mARsPolicyManager.mLastUpdateTime >= 100;
                mARsPolicyManager.mLastUpdateTime = uptimeMillis;
                if (z2 || mARsPolicyManager.mLastUid != i || (str3 = mARsPolicyManager.mLastPkgName) == null || !str3.equals(str)) {
                    mARsPolicyManager.mLastPkgName = str;
                    mARsPolicyManager.mLastUid = i;
                    if (MARsDebugConfig.DEBUG_MARs && str != null && !str.contains(".iqi")) {
                        Slog.d("MARsPolicyManager", "onPackageResumedFG pkgName = " + str + ", userId = " + i);
                    }
                    if (mARsPolicyManager.getScreenOnState()) {
                        if (list != null) {
                            TopPackageFilter.TopPackageFilterHolder.INSTANCE.updateTopPkgList((ArrayList) list, i);
                        } else if (str != null) {
                            TopPackageFilter.TopPackageFilterHolder.INSTANCE.updateTopPkgList(PortStatus_1_1$$ExternalSyntheticOutline0.m(str), i);
                        }
                    }
                    if (str != null && str.equals(DefaultAppFilter.DefaultAppFilterHolder.INSTANCE.mDefaultHomePackage)) {
                        boolean z3 = FreecessController.IS_MINIMIZE_OLAF_LOCK;
                        FreecessController.FreecessControllerHolder.INSTANCE.unfreezeWallPaperPackage();
                    } else if (str != null) {
                        boolean z4 = FreecessController.IS_MINIMIZE_OLAF_LOCK;
                        FreecessController freecessController = FreecessController.FreecessControllerHolder.INSTANCE;
                        if (freecessController.mFreecessOlafUpdate.get() && i == freecessController.mOlafTargetUserId && str.equals(freecessController.mOlafTargetPkg)) {
                            return;
                        }
                        mARsPolicyManager.onAppUsed(i, str, true);
                    }
                }
            }
        }

        public final void onUidBlockedReasonsChanged(int i, int i2) {
            synchronized (ActivityManagerService.this.mUidNetworkBlockedReasons) {
                try {
                    if (i2 == 0) {
                        ActivityManagerService.this.mUidNetworkBlockedReasons.delete(i);
                    } else {
                        ActivityManagerService.this.mUidNetworkBlockedReasons.put(i, i2);
                    }
                } catch (Throwable th) {
                    throw th;
                }
            }
        }

        public final void onUserRemoved(final int i) {
            ActivityManagerService.this.mAtmInternal.onUserStopped(i);
            final BatteryStatsService batteryStatsService = ActivityManagerService.this.mBatteryStatsService;
            synchronized (batteryStatsService.mLock) {
                batteryStatsService.mHandler.post(new Runnable() { // from class: com.android.server.am.BatteryStatsService$$ExternalSyntheticLambda113
                    @Override // java.lang.Runnable
                    public final void run() {
                        BatteryStatsService batteryStatsService2 = BatteryStatsService.this;
                        int i2 = i;
                        synchronized (batteryStatsService2.mStats) {
                            batteryStatsService2.mStats.onUserRemovedLocked(i2);
                        }
                    }
                });
            }
            ActivityManagerService.this.getClass();
            com.android.systemui.shared.Flags.enableHomeDelay();
        }

        public final void onWakefulnessChanged(int i) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            activityManagerService.getClass();
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    boolean z = activityManagerService.mWakefulness.getAndSet(i) == 1;
                    boolean z2 = i == 1;
                    if (z != z2) {
                        activityManagerService.mServices.updateScreenStateLocked(z2);
                        activityManagerService.reportGlobalUsageEvent(activityManagerService.mWakefulness.get() == 1 ? 15 : 16);
                        activityManagerService.mActivityTaskManager.onScreenAwakeChanged(z2);
                        activityManagerService.mOomAdjuster.onWakefulnessChanged(i);
                        if (CoreRune.MNO_TMO_DEVICE_REPORTING && DeviceReportingSecurityChecker.getStatus()) {
                            Slog.d("ActivityManager", "TMO onWakefulnessChanged");
                            ActivityTaskManagerService activityTaskManagerService = activityManagerService.mActivityTaskManager;
                            activityTaskManagerService.getClass();
                            Handler handler = AppStateBroadcaster.mObjHandler;
                            if (handler != null) {
                                handler.post(new ActivityTaskManagerService$$ExternalSyntheticLambda14(0, activityTaskManagerService));
                            }
                        }
                        activityManagerService.updateOomAdjLocked(9);
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void prepareForPossibleShutdown() {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            if (activityManagerService.mUsageStatsService != null) {
                UsageStatsService usageStatsService = UsageStatsService.this;
                usageStatsService.getClass();
                UsageEvents.Event event = new UsageEvents.Event(26, SystemClock.elapsedRealtime());
                event.mPackage = "android";
                usageStatsService.mHandler.obtainMessage(4, event).sendToTarget();
                usageStatsService.mHandler.sendEmptyMessage(1);
            }
        }

        public final void registerAnrController(AnrController anrController) {
            ActivityTaskManagerService activityTaskManagerService = ActivityManagerService.this.mActivityTaskManager;
            synchronized (activityTaskManagerService.mAnrController) {
                ((ArrayList) activityTaskManagerService.mAnrController).add(anrController);
            }
        }

        public final void registerNetworkPolicyUidObserver(IUidObserver iUidObserver, int i, int i2, String str) {
            ActivityManagerService.this.mNetworkPolicyUidObserver = iUidObserver;
            ActivityManagerService.this.mUidObserverController.register(iUidObserver, i, i2, str, Binder.getCallingUid(), null);
        }

        public final void registerProcessObserver(IProcessObserver iProcessObserver) {
            ActivityManagerService.this.registerProcessObserver(iProcessObserver);
        }

        public final void reportCurKeyguardUsageEvent(boolean z) {
            ActivityManagerService.this.reportGlobalUsageEvent(z ? 17 : 18);
        }

        public final void requestCustomFullBugreport() {
            ActivityManagerService.this.requestBugReportWithDescription(null, null, 0, 0L, null, true);
        }

        public final void rescheduleAnrDialog(Object obj) {
            Message obtain = Message.obtain();
            obtain.what = 2;
            obtain.obj = (AppNotRespondingDialog.Data) obj;
            ActivityManagerService.this.mUiHandler.sendMessageDelayed(obtain, InputConstants.DEFAULT_DISPATCHING_TIMEOUT_MILLIS);
        }

        public final void restart() {
            ActivityManagerService.this.restart();
        }

        public final void scheduleAppGcs() {
            synchronized (ActivityManagerService.this.mAppProfiler.mProfilerLock) {
                ActivityManagerService.this.mAppProfiler.scheduleAppGcsLPf();
            }
        }

        public final void sendForegroundProfileChanged(int i) {
            UserController userController = ActivityManagerService.this.mUserController;
            userController.mHandler.removeMessages(70);
            userController.mHandler.obtainMessage(70, i, 0).sendToTarget();
        }

        public final int sendIntentSender(IIntentSender iIntentSender, IBinder iBinder, int i, Intent intent, String str, IIntentReceiver iIntentReceiver, String str2, Bundle bundle) {
            ActivityManagerService.this.getClass();
            return ActivityManagerService.sendIntentSender(null, iIntentSender, iBinder, i, intent, str, iIntentReceiver, str2, bundle, -1, -1);
        }

        public final int sendIntentSender(IIntentSender iIntentSender, IBinder iBinder, int i, Intent intent, String str, IIntentReceiver iIntentReceiver, String str2, Bundle bundle, int i2, int i3) {
            ActivityManagerService.this.getClass();
            return ActivityManagerService.sendIntentSender(null, iIntentSender, iBinder, i, intent, str, iIntentReceiver, str2, bundle, i2, i3);
        }

        public final void setBooted(boolean z) {
            ActivityManagerService.this.mBooted = z;
        }

        public final void setBooting(boolean z) {
            ActivityManagerService.this.mBooting = z;
        }

        public final void setCompanionAppUids(int i, Set set) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.mCompanionAppUidsMap.put(Integer.valueOf(i), set);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void setCurrentDexMode(int i) {
            ActivityManagerService.this.mUserController.mCurrentDexMode = i;
        }

        public final void setDebugFlagsForStartingActivity(ActivityInfo activityInfo, int i, ProfilerInfo profilerInfo, Object obj) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    synchronized (obj) {
                        if ((i & 2) != 0) {
                            try {
                                ActivityManagerService.this.setDebugApp(activityInfo.processName, true, false, (i & 16) != 0);
                            } catch (Throwable th) {
                                throw th;
                            }
                        }
                        if ((i & 8) != 0) {
                            ActivityManagerService activityManagerService2 = ActivityManagerService.this;
                            ApplicationInfo applicationInfo = activityInfo.applicationInfo;
                            String str = activityInfo.processName;
                            activityManagerService2.getClass();
                            ActivityManagerService.enforceDebuggable(applicationInfo);
                            activityManagerService2.mNativeDebuggingApp = str;
                        }
                        if ((i & 4) != 0) {
                            ActivityManagerService activityManagerService3 = ActivityManagerService.this;
                            ApplicationInfo applicationInfo2 = activityInfo.applicationInfo;
                            String str2 = activityInfo.processName;
                            activityManagerService3.getClass();
                            ActivityManagerService.enforceDebuggable(applicationInfo2);
                            ActivityManagerProcLock activityManagerProcLock = activityManagerService3.mProcLock;
                            ActivityManagerService.boostPriorityForProcLockedSection();
                            synchronized (activityManagerProcLock) {
                                try {
                                    activityManagerService3.mTrackAllocationApp = str2;
                                } catch (Throwable th2) {
                                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                                    throw th2;
                                }
                            }
                            ActivityManagerService.resetPriorityAfterProcLockedSection();
                        }
                        if (profilerInfo != null) {
                            ActivityManagerService.this.setProfileApp(activityInfo.applicationInfo, activityInfo.processName, profilerInfo, null);
                        }
                        obj.notify();
                    }
                } catch (Throwable th3) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th3;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void setDeviceIdleAllowlist(int[] iArr, int[] iArr2) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerProcLock activityManagerProcLock = ActivityManagerService.this.mProcLock;
                    ActivityManagerService.boostPriorityForProcLockedSection();
                    synchronized (activityManagerProcLock) {
                        try {
                            ActivityManagerService activityManagerService2 = ActivityManagerService.this;
                            activityManagerService2.mDeviceIdleAllowlist = iArr;
                            activityManagerService2.mDeviceIdleExceptIdleAllowlist = iArr2;
                            AppRestrictionController appRestrictionController = activityManagerService2.mAppRestrictionController;
                            appRestrictionController.mDeviceIdleAllowlist = iArr;
                            appRestrictionController.mDeviceIdleExceptIdleAllowlist = iArr2;
                        } catch (Throwable th) {
                            ActivityManagerService.resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                } catch (Throwable th2) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void setDeviceOwnerUid(int i) {
            ActivityManagerService.this.mDeviceOwnerUid = i;
        }

        public final void setHasOverlayUi(int i, boolean z) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                        ProcessRecord processRecord = ActivityManagerService.this.mPidsSelfLocked.get(i);
                        if (processRecord == null) {
                            Slog.w("ActivityManager", "setHasOverlayUi called on unknown pid: " + i);
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            return;
                        }
                        ProcessStateRecord processStateRecord = processRecord.mState;
                        if (processStateRecord.mHasOverlayUi == z) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            return;
                        }
                        processStateRecord.mHasOverlayUi = z;
                        processStateRecord.mApp.mWindowProcessController.mHasOverlayUi = z;
                        ActivityManagerService.this.updateOomAdjLocked(9, processRecord);
                        ActivityManagerService.resetPriorityAfterLockedSection();
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        }

        public final void setKeyguardPkgInfo(String str, int i) {
            if (MARsPolicyManager.MARs_ENABLE) {
                MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE.getClass();
                LockScreenFilter lockScreenFilter = LockScreenFilter.LockScreenFilterHolder.INSTANCE;
                lockScreenFilter.mKeyguardPkg = str;
                lockScreenFilter.mKeyguardPkgUid = i;
                if (str != null) {
                    lockScreenFilter.mKeyguardPkgMap.remove(Integer.valueOf(i));
                    if (lockScreenFilter.mKeyguardPkgMap.size() >= 5) {
                        Map map = lockScreenFilter.mKeyguardPkgMap;
                        map.remove(((Map.Entry) ((LinkedHashMap) map).entrySet().iterator().next()).getKey());
                    }
                    lockScreenFilter.mKeyguardPkgMap.put(Integer.valueOf(i), str);
                }
            }
        }

        public final void setLongLiveProcess(int i) {
            ProcessRecord processRecord;
            ActivityManagerServiceExt activityManagerServiceExt = ActivityManagerService.this.mExt;
            activityManagerServiceExt.getClass();
            Slog.v("ActivityManagerServiceExt", "setLongLiveProcess " + i);
            ActivityManagerService activityManagerService = activityManagerServiceExt.mService;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                if (i != -1) {
                    try {
                        synchronized (activityManagerServiceExt.mService.mPidsSelfLocked) {
                            processRecord = activityManagerServiceExt.mService.mPidsSelfLocked.get(i);
                        }
                        if (processRecord != null && !processRecord.mDedicated) {
                            processRecord.mDedicated = true;
                            activityManagerServiceExt.mCb4Process.ifPresent(new ActivityManagerServiceExt$$ExternalSyntheticLambda0(activityManagerServiceExt, processRecord, 1));
                        }
                    } catch (Throwable th) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void setPendingIntentAllowBgActivityStarts(IIntentSender iIntentSender, IBinder iBinder, int i) {
            if (!(iIntentSender instanceof PendingIntentRecord)) {
                Slog.w("ActivityManager", "setPendingIntentAllowBgActivityStarts(): not a PendingIntentRecord: " + iIntentSender);
                return;
            }
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    PendingIntentRecord pendingIntentRecord = (PendingIntentRecord) iIntentSender;
                    pendingIntentRecord.getClass();
                    if (iBinder != null) {
                        if ((i & 1) != 0) {
                            pendingIntentRecord.mAllowBgActivityStartsForActivitySender.add(iBinder);
                        }
                        if ((i & 2) != 0) {
                            pendingIntentRecord.mAllowBgActivityStartsForBroadcastSender.add(iBinder);
                        }
                        if ((i & 4) != 0) {
                            pendingIntentRecord.mAllowBgActivityStartsForServiceSender.add(iBinder);
                        }
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void setPendingIntentAllowlistDuration(IIntentSender iIntentSender, IBinder iBinder, long j, int i, int i2, String str) {
            PendingIntentController pendingIntentController = ActivityManagerService.this.mPendingIntentController;
            pendingIntentController.getClass();
            if (iIntentSender instanceof PendingIntentRecord) {
                synchronized (pendingIntentController.mLock) {
                    ((PendingIntentRecord) iIntentSender).setAllowlistDurationLocked(iBinder, i, i2, str, j);
                }
            } else {
                Slog.w("ActivityManager", "markAsSentFromNotification(): not a PendingIntentRecord: " + iIntentSender);
            }
        }

        public final void setProfileOwnerUid(ArraySet arraySet) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.mProfileOwnerUids = arraySet;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void setStopUserOnSwitch(int i) {
            ActivityManagerService.this.setStopUserOnSwitch(i);
        }

        public final void setSwitchingFromSystemUserMessage(String str) {
            UserController userController = ActivityManagerService.this.mUserController;
            synchronized (userController.mLock) {
                userController.mSwitchingFromSystemUserMessage = str;
            }
        }

        public final void setSwitchingToSystemUserMessage(String str) {
            UserController userController = ActivityManagerService.this.mUserController;
            synchronized (userController.mLock) {
                userController.mSwitchingToSystemUserMessage = str;
            }
        }

        public final void setVoiceInteractionManagerProvider(ActivityManagerInternal.VoiceInteractionManagerProvider voiceInteractionManagerProvider) {
            ActivityManagerService.this.mVoiceInteractionManagerProvider = voiceInteractionManagerProvider;
        }

        public final boolean shouldConfirmCredentials(int i) {
            UserProperties userProperties;
            UserController userController = ActivityManagerService.this.mUserController;
            if (userController.getStartedUserState(i) == null || (userProperties = userController.mInjector.getUserManagerInternal().getUserProperties(i)) == null || !userProperties.isCredentialShareableWithParent()) {
                return false;
            }
            if (userController.mPersonaManagerInternal == null) {
                userController.mPersonaManagerInternal = (PersonaManagerInternal) LocalServices.getService(PersonaManagerInternal.class);
            }
            if (userController.mPersonaManagerInternal.isKnoxId(i)) {
                if (userController.mPersonaManagerInternal == null) {
                    userController.mPersonaManagerInternal = (PersonaManagerInternal) LocalServices.getService(PersonaManagerInternal.class);
                }
                return userController.mPersonaManagerInternal.shouldConfirmCredentials(i);
            }
            if (!userController.mLockPatternUtils.isSeparateProfileChallengeEnabled(i)) {
                return userController.isUserRunning(i, 2);
            }
            KeyguardManager keyguardManager = (KeyguardManager) userController.mInjector.mService.mContext.getSystemService(KeyguardManager.class);
            return keyguardManager.isDeviceLocked(i) && keyguardManager.isDeviceSecure(i);
        }

        public final boolean shouldDelayHomeLaunch(int i) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            int i2 = ActivityManagerService.PROC_START_TIMEOUT;
            activityManagerService.getClass();
            com.android.systemui.shared.Flags.enableHomeDelay();
            return false;
        }

        public final boolean startForegroundServiceDelegate(ForegroundServiceDelegationOptions foregroundServiceDelegationOptions, ServiceConnection serviceConnection) {
            boolean startForegroundServiceDelegateLocked;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    startForegroundServiceDelegateLocked = ActivityManagerService.this.mServices.startForegroundServiceDelegateLocked(foregroundServiceDelegationOptions, serviceConnection);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return startForegroundServiceDelegateLocked;
        }

        public final boolean startIsolatedProcess(String str, String[] strArr, String str2, String str3, int i, Runnable runnable) {
            boolean z;
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            activityManagerService.getClass();
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ApplicationInfo applicationInfo = new ApplicationInfo();
                    applicationInfo.uid = 1000;
                    applicationInfo.processName = str2;
                    applicationInfo.className = str;
                    applicationInfo.packageName = "android";
                    applicationInfo.seInfoUser = ":complete";
                    applicationInfo.targetSdkVersion = Build.VERSION.SDK_INT;
                    z = activityManagerService.mProcessList.startProcessLocked(str2, applicationInfo, false, 0, ActivityManagerService.sNullHostingRecord, 0, true, true, i, false, 0, null, str3, str, strArr, runnable, false, -1) != null;
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            return z;
        }

        public final void startProcess(String str, ApplicationInfo applicationInfo, boolean z, boolean z2, String str2, ComponentName componentName) {
            try {
                if (Trace.isTagEnabled(64L)) {
                    Trace.traceBegin(64L, "startProcess:" + str);
                }
                ActivityManagerService activityManagerService = ActivityManagerService.this;
                ActivityManagerService.boostPriorityForLockedSection();
                synchronized (activityManagerService) {
                    try {
                        HostingRecord hostingRecord = new HostingRecord(componentName, str2, z2);
                        ActivityManagerService.this.mProcessList.getProcessRecordLocked(applicationInfo.uid, str);
                        ActivityManagerService.this.startProcessLocked(str, applicationInfo, z, 0, hostingRecord, 1, false, false);
                    } catch (Throwable th) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
                Trace.traceEnd(64L);
            } catch (Throwable th2) {
                Trace.traceEnd(64L);
                throw th2;
            }
        }

        public final void startProcess(String str, ApplicationInfo applicationInfo, boolean z, boolean z2, String str2, ComponentName componentName, boolean z3, int i) {
            try {
                if (Trace.isTagEnabled(64L)) {
                    Trace.traceBegin(64L, "startProcess:" + str);
                }
                ActivityManagerService activityManagerService = ActivityManagerService.this;
                ActivityManagerService.boostPriorityForLockedSection();
                synchronized (activityManagerService) {
                    try {
                        ActivityManagerService.this.mProcessList.startProcessLocked(str, applicationInfo, z, 0, new HostingRecord(componentName, str2, z2), 1, false, false, 0, false, 0, null, null, null, null, null, z3, i);
                    } catch (Throwable th) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
                Trace.traceEnd(64L);
            } catch (Throwable th2) {
                Trace.traceEnd(64L);
                throw th2;
            }
        }

        public final boolean startProfileEvenWhenDisabled(int i) {
            return ActivityManagerService.this.mUserController.startProfile(i, true, null);
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public final ComponentName startSdkSandboxService(Intent intent, int i, String str, String str2) {
            validateSdkSandboxParams(intent, i, str, str2);
            if (ActivityManagerService.this.mAppOpsService.checkPackage(i, str) != 0) {
                throw new IllegalArgumentException("uid does not belong to provided package");
            }
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ComponentName startService = activityManagerService.startService(activityManagerService.mContext.getIApplicationThread(), intent, intent.resolveTypeIfNeeded(ActivityManagerService.this.mContext.getContentResolver()), false, ActivityManagerService.this.mContext.getOpPackageName(), ActivityManagerService.this.mContext.getAttributionTag(), UserHandle.getUserId(i), true, i, str, str2);
            if (startService != null) {
                if (startService.getPackageName().equals("!")) {
                    throw new SecurityException("Not allowed to start service " + intent + " without permission " + startService.getClassName());
                }
                if (startService.getPackageName().equals("!!")) {
                    throw new SecurityException("Unable to start service " + intent + ": " + startService.getClassName());
                }
                if (startService.getPackageName().equals("?")) {
                    throw ServiceStartNotAllowedException.newInstance(false, "Not allowed to start service " + intent + ": " + startService.getClassName());
                }
            }
            return startService;
        }

        public final ComponentName startServiceInPackage(IApplicationThread iApplicationThread, int i, Intent intent, String str, boolean z, String str2, String str3, int i2, BackgroundStartPrivileges backgroundStartPrivileges) {
            ComponentName startServiceLocked;
            long clearCallingIdentity = Binder.clearCallingIdentity();
            try {
                if (Trace.isTagEnabled(64L)) {
                    Trace.traceBegin(64L, "startServiceInPackage: intent=" + intent + ", caller=" + str2 + ", fgRequired=" + z);
                }
                ActivityManagerService activityManagerService = ActivityManagerService.this;
                ActivityManagerService.boostPriorityForLockedSection();
                synchronized (activityManagerService) {
                    try {
                        startServiceLocked = ActivityManagerService.this.mServices.startServiceLocked(iApplicationThread, intent, str, -1, i, z, str2, str3, i2, backgroundStartPrivileges, false, -1, null, null);
                    } catch (Throwable th) {
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
                Trace.traceEnd(64L);
                Binder.restoreCallingIdentity(clearCallingIdentity);
                return startServiceLocked;
            } catch (Throwable th2) {
                Trace.traceEnd(64L);
                Binder.restoreCallingIdentity(clearCallingIdentity);
                throw th2;
            }
        }

        public final boolean startUserInBackground(int i) {
            return ActivityManagerService.this.startUserInBackgroundWithListener(i, null);
        }

        public final void stopAppForUser(String str, int i) {
            ActivityManagerService.this.stopAppForUserInternal(i, str);
        }

        public final void stopForegroundServiceDelegate(ForegroundServiceDelegationOptions foregroundServiceDelegationOptions) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.mServices.stopForegroundServiceDelegateLocked(foregroundServiceDelegationOptions);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void stopForegroundServiceDelegate(ServiceConnection serviceConnection) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.mServices.stopForegroundServiceDelegateLocked(serviceConnection);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public final boolean stopSdkSandboxService(Intent intent, int i, String str, String str2) {
            validateSdkSandboxParams(intent, i, str, str2);
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            int stopService = activityManagerService.stopService(activityManagerService.mContext.getIApplicationThread(), intent, intent.resolveTypeIfNeeded(ActivityManagerService.this.mContext.getContentResolver()), UserHandle.getUserId(i), true, i, str, str2);
            if (stopService >= 0) {
                return stopService != 0;
            }
            throw new SecurityException("Not allowed to stop service " + intent);
        }

        @Override // com.android.server.am.ActivityManagerLocal
        public final void tempAllowWhileInUsePermissionInFgs(int i, long j) {
            ActivityManagerService.this.mFgsWhileInUseTempAllowList.add(i, j, "");
        }

        public final void tempAllowlistForPendingIntent(int i, int i2, int i3, long j, int i4, int i5, String str) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.tempAllowlistForPendingIntentLocked(i, i2, i3, j, i4, i5, str);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void triggerUnsafeIntentStrictMode(final int i, final int i2, Intent intent) {
            final IUnsafeIntentStrictModeCallback iUnsafeIntentStrictModeCallback;
            final Intent cloneFilter = intent.cloneFilter();
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    iUnsafeIntentStrictModeCallback = (IUnsafeIntentStrictModeCallback) ActivityManagerService.this.mStrictModeCallbacks.get(i);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
            if (iUnsafeIntentStrictModeCallback != null) {
                BackgroundThread.getExecutor().execute(new Runnable() { // from class: com.android.server.am.ActivityManagerService$LocalService$$ExternalSyntheticLambda1
                    @Override // java.lang.Runnable
                    public final void run() {
                        ActivityManagerService.LocalService localService = ActivityManagerService.LocalService.this;
                        IUnsafeIntentStrictModeCallback iUnsafeIntentStrictModeCallback2 = iUnsafeIntentStrictModeCallback;
                        int i3 = i2;
                        Intent intent2 = cloneFilter;
                        int i4 = i;
                        int i5 = ActivityManagerService.LocalService.$r8$clinit;
                        localService.getClass();
                        try {
                            iUnsafeIntentStrictModeCallback2.onUnsafeIntent(i3, intent2);
                        } catch (RemoteException unused) {
                            ActivityManagerService activityManagerService2 = ActivityManagerService.this;
                            ActivityManagerService.boostPriorityForLockedSection();
                            synchronized (activityManagerService2) {
                                try {
                                    ActivityManagerService.this.mStrictModeCallbacks.remove(i4);
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                } catch (Throwable th2) {
                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                    throw th2;
                                }
                            }
                        }
                    }
                });
            }
        }

        public final void trimApplications() {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            int i = ActivityManagerService.PROC_START_TIMEOUT;
            activityManagerService.getClass();
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    activityManagerService.trimApplicationsLocked(1, true);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void unregisterAnrController(AnrController anrController) {
            ActivityTaskManagerService activityTaskManagerService = ActivityManagerService.this.mActivityTaskManager;
            synchronized (activityTaskManagerService.mAnrController) {
                ((ArrayList) activityTaskManagerService.mAnrController).remove(anrController);
            }
        }

        public final void unregisterProcessObserver(IProcessObserver iProcessObserver) {
            ActivityManagerService.this.unregisterProcessObserver(iProcessObserver);
        }

        public final void updateActivityUsageStats(ComponentName componentName, int i, int i2, IBinder iBinder, ComponentName componentName2, ActivityId activityId) {
            ActivityManagerService.this.updateActivityUsageStats(componentName, i, i2, iBinder, componentName2, activityId, null);
        }

        public final void updateActivityUsageStatsWithIntent(ComponentName componentName, int i, int i2, IBinder iBinder, ComponentName componentName2, ActivityId activityId, Intent intent) {
            ActivityManagerService.this.updateActivityUsageStats(componentName, i, i2, iBinder, componentName2, activityId, intent);
        }

        public final void updateBackupServicePkg(int i, boolean z) {
            boolean z2 = MARsPolicyManager.MARs_ENABLE;
            MARsPolicyManager mARsPolicyManager = MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE;
            synchronized (mARsPolicyManager.mBackupExpirationUptimeMap) {
                try {
                    if (z) {
                        mARsPolicyManager.mBackupExpirationUptimeMap.put(Integer.valueOf(i), Long.valueOf(SystemClock.uptimeMillis() + BackupManagerConstants.DEFAULT_FULL_BACKUP_INTERVAL_MILLISECONDS));
                    } else {
                        mARsPolicyManager.mBackupExpirationUptimeMap.remove(Integer.valueOf(i));
                    }
                } catch (Throwable th) {
                    throw th;
                }
            }
            if (z && MARsPolicyManager.MARs_ENABLE) {
                boolean z3 = FreecessController.IS_MINIMIZE_OLAF_LOCK;
                FreecessController freecessController = FreecessController.FreecessControllerHolder.INSTANCE;
                if (freecessController.mIsFreecessEnable) {
                    freecessController.protectFreezePackage(i, "BackupService", 180000L);
                }
            }
            mARsPolicyManager.addDebugInfoToHistory("DEV", AbstractAccessibilityServiceConnection$$ExternalSyntheticOutline0.m(i, "BackupService uid=", ", isStart=", z));
        }

        public final void updateBatteryStats(ComponentName componentName, final int i, int i2, final boolean z) {
            final BatteryStatsService batteryStatsService = ActivityManagerService.this.mBatteryStatsService;
            String packageName = componentName.getPackageName();
            String shortClassName = componentName.getShortClassName();
            synchronized (batteryStatsService.mLock) {
                final long elapsedRealtime = SystemClock.elapsedRealtime();
                final long uptimeMillis = SystemClock.uptimeMillis();
                batteryStatsService.mHandler.post(new Runnable() { // from class: com.android.server.am.BatteryStatsService$$ExternalSyntheticLambda18
                    @Override // java.lang.Runnable
                    public final void run() {
                        BatteryStatsService batteryStatsService2 = batteryStatsService;
                        boolean z2 = z;
                        int i3 = i;
                        long j = elapsedRealtime;
                        long j2 = uptimeMillis;
                        synchronized (batteryStatsService2.mStats) {
                            try {
                                if (z2) {
                                    BatteryStatsImpl batteryStatsImpl = batteryStatsService2.mStats;
                                    batteryStatsImpl.getUidStatsLocked(batteryStatsImpl.mapUid(i3), j, j2).noteActivityResumedLocked(j);
                                } else {
                                    BatteryStatsImpl batteryStatsImpl2 = batteryStatsService2.mStats;
                                    batteryStatsImpl2.getUidStatsLocked(batteryStatsImpl2.mapUid(i3), j, j2).noteActivityPausedLocked(j);
                                }
                            } catch (Throwable th) {
                                throw th;
                            }
                        }
                    }
                });
            }
            FrameworkStatsLog.write(42, i, packageName, shortClassName, z ? 1 : 0);
        }

        public final void updateCpuStats() {
            ActivityManagerService.this.updateCpuStats();
        }

        public final void updateDeviceIdleTempAllowlist(int[] iArr, int i, boolean z, long j, int i2, int i3, String str, int i4) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerProcLock activityManagerProcLock = ActivityManagerService.this.mProcLock;
                    ActivityManagerService.boostPriorityForProcLockedSection();
                    synchronized (activityManagerProcLock) {
                        if (iArr != null) {
                            try {
                                ActivityManagerService.this.mDeviceIdleTempAllowlist = iArr;
                            } catch (Throwable th) {
                                ActivityManagerService.resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                        }
                        if (!z) {
                            FgsTempAllowList fgsTempAllowList = ActivityManagerService.this.mFgsStartTempAllowList;
                            synchronized (fgsTempAllowList.mLock) {
                                fgsTempAllowList.mTempAllowList.remove(i);
                            }
                        } else if (i2 == 0) {
                            ActivityManagerService.this.mFgsStartTempAllowList.add(i, j, new FgsTempAllowListItem(i3, i4, j, str));
                        }
                        ActivityManagerService.this.setUidTempAllowlistStateLSP(i, z);
                    }
                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                } catch (Throwable th2) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void updateForegroundTimeIfOnBattery(final String str, final int i, final long j) {
            final BatteryStatsService batteryStatsService = ActivityManagerService.this.mBatteryStatsService;
            synchronized (batteryStatsService.mLock) {
                final long elapsedRealtime = SystemClock.elapsedRealtime();
                final long uptimeMillis = SystemClock.uptimeMillis();
                batteryStatsService.mHandler.post(new Runnable() { // from class: com.android.server.am.BatteryStatsService$$ExternalSyntheticLambda78
                    @Override // java.lang.Runnable
                    public final void run() {
                        BatteryStatsService batteryStatsService2 = BatteryStatsService.this;
                        int i2 = i;
                        String str2 = str;
                        long j2 = elapsedRealtime;
                        long j3 = uptimeMillis;
                        long j4 = j;
                        BatteryStatsImpl batteryStatsImpl = batteryStatsService2.mStats;
                        if (batteryStatsImpl.mOnBattery) {
                            synchronized (batteryStatsImpl) {
                                BatteryStatsImpl batteryStatsImpl2 = batteryStatsService2.mStats;
                                batteryStatsImpl2.getUidStatsLocked(batteryStatsImpl2.mapUid(i2), j2, j3).getProcessStatsLocked(str2).mForegroundTimeMs += j4;
                            }
                        }
                    }
                });
            }
        }

        public final void updateOomAdj(int i) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService.this.updateOomAdjLocked(i);
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }

        public final void updateOomLevelsForDisplay(int i) {
            ActivityManagerService activityManagerService = ActivityManagerService.this;
            ActivityManagerService.boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    ActivityManagerService activityManagerService2 = ActivityManagerService.this;
                    WindowManagerService windowManagerService = activityManagerService2.mWindowManager;
                    if (windowManagerService != null) {
                        activityManagerService2.mProcessList.applyDisplaySize(windowManagerService);
                    }
                } catch (Throwable th) {
                    ActivityManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            ActivityManagerService.resetPriorityAfterLockedSection();
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class MemBinder extends Binder {
        public final ActivityManagerService mActivityManagerService;
        public final AnonymousClass1 mPriorityDumper = new PriorityDump.PriorityDumper() { // from class: com.android.server.am.ActivityManagerService.MemBinder.1
            /* JADX WARN: Code restructure failed: missing block: B:197:0x0359, code lost:
            
                if (android.os.Debug.getMemoryInfo(r3, r1) == false) goto L165;
             */
            /* JADX WARN: Removed duplicated region for block: B:131:0x0228 A[EXC_TOP_SPLITTER, SYNTHETIC] */
            /* JADX WARN: Removed duplicated region for block: B:138:? A[SYNTHETIC] */
            /* JADX WARN: Removed duplicated region for block: B:257:0x0503  */
            /* JADX WARN: Removed duplicated region for block: B:262:0x060d  */
            /* JADX WARN: Removed duplicated region for block: B:342:0x05c4 A[Catch: RemoteException -> 0x05ba, IOException -> 0x05bc, TryCatch #19 {RemoteException -> 0x05ba, IOException -> 0x05bc, blocks: (B:330:0x05b0, B:332:0x05b5, B:340:0x05bf, B:342:0x05c4, B:343:0x05cc), top: B:329:0x05b0 }] */
            /* JADX WARN: Removed duplicated region for block: B:358:0x05e9  */
            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            /*
                Code decompiled incorrectly, please refer to instructions dump.
                To view partially-correct code enable 'Show inconsistent code' option in preferences
            */
            public final void dump(java.io.FileDescriptor r78, java.io.PrintWriter r79, java.lang.String[] r80, boolean r81) {
                /*
                    Method dump skipped, instructions count: 2859
                    To view this dump change 'Code comments level' option to 'DEBUG'
                */
                throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.MemBinder.AnonymousClass1.dump(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[], boolean):void");
            }

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public final void dumpHigh(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, boolean z) {
                dump(fileDescriptor, printWriter, new String[]{"-S", "-d"}, z);
                dump(fileDescriptor, printWriter, new String[]{"-a", "--package"}, z);
            }
        };

        /* JADX WARN: Type inference failed for: r0v0, types: [com.android.server.am.ActivityManagerService$MemBinder$1] */
        public MemBinder(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        @Override // android.os.Binder
        public final void dump(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr) {
            try {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
                if (DumpUtils.checkDumpAndUsageStatsPermission(this.mActivityManagerService.mContext, "meminfo", printWriter)) {
                    PriorityDump.dump(this.mPriorityDumper, fileDescriptor, printWriter, strArr);
                }
            } finally {
                this.mActivityManagerService.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
            }
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class MemDumpInfo {
        public String label;
        public String procName;
        public long pss;
        public long rss;
        public long swap_out;
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class MemItem {
        public final boolean hasActivities;
        public final int id;
        public final boolean isProc;
        public final String label;
        public final long mPrivateDirty;
        public final long mRss;
        public final long pss;
        public final String shortLabel;
        public ArrayList subitems;
        public final long swapPss;
        public final int userId;

        public MemItem(String str, String str2, long j, long j2, long j3, long j4, int i) {
            this.isProc = false;
            this.label = str;
            this.shortLabel = str2;
            this.pss = j;
            this.swapPss = j2;
            this.mRss = j3;
            this.mPrivateDirty = j4;
            this.id = i;
            this.userId = 0;
            this.hasActivities = false;
        }

        public MemItem(String str, String str2, long j, long j2, long j3, long j4, int i, int i2, boolean z) {
            this.isProc = true;
            this.label = str;
            this.shortLabel = str2;
            this.pss = j;
            this.swapPss = j2;
            this.mRss = j3;
            this.mPrivateDirty = j4;
            this.id = i;
            this.userId = i2;
            this.hasActivities = z;
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class MemoryUsageDumpOptions {
        public boolean dumpDalvik;
        public boolean dumpDetails;
        public boolean dumpFullDetails;
        public boolean dumpProto;
        public boolean dumpSummaryOnly;
        public boolean dumpSwapPss;
        public boolean dumpUnreachable;
        public boolean isCheckinRequest;
        public boolean isCompact;
        public boolean localOnly;
        public boolean mDumpAllocatorStats;
        public boolean mDumpPrivateDirty;
        public boolean oomOnly;
        public boolean packages;
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class MyBinderProxyCountEventListener implements BinderInternal.BinderProxyCountEventListener {
        public MyBinderProxyCountEventListener() {
        }

        public final void onLimitReached(final int i) {
            new Thread(new Runnable() { // from class: com.android.server.am.ActivityManagerService$MyBinderProxyCountEventListener$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    ActivityManagerService.MyBinderProxyCountEventListener myBinderProxyCountEventListener = ActivityManagerService.MyBinderProxyCountEventListener.this;
                    int i2 = i;
                    myBinderProxyCountEventListener.getClass();
                    Slog.wtf("ActivityManager", "Uid " + i2 + " sent too many Binders to uid " + Process.myUid());
                    BinderProxy.dumpProxyDebugInfo();
                    CriticalEventLog criticalEventLog = CriticalEventLog.getInstance();
                    criticalEventLog.getClass();
                    CriticalEventProto criticalEventProto = new CriticalEventProto();
                    CriticalEventProto.ExcessiveBinderCalls excessiveBinderCalls = new CriticalEventProto.ExcessiveBinderCalls();
                    excessiveBinderCalls.uid = i2;
                    criticalEventProto.setExcessiveBinderCalls(excessiveBinderCalls);
                    criticalEventLog.log(criticalEventProto);
                    if (i2 == 1000) {
                        Slog.i("ActivityManager", "Skipping kill (uid is SYSTEM)");
                    } else {
                        ActivityManagerService.this.killUid(UserHandle.getAppId(i2), UserHandle.getUserId(i2), 9, 29, "Too many Binders sent to SYSTEM");
                        VMRuntime.getRuntime().requestConcurrentGC();
                    }
                }
            }, VibrationParam$1$$ExternalSyntheticOutline0.m(i, "BinderProxy Dump: ")).start();
        }

        public final void onWarningThresholdReached(int i) {
            Flags.logExcessiveBinderProxies();
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public interface OomAdjObserver {
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class PackageAssociationInfo {
        public final ArraySet mAllowedPackageAssociations;
        public boolean mIsDebuggable;

        public PackageAssociationInfo(ArraySet arraySet, boolean z) {
            this.mAllowedPackageAssociations = arraySet;
            this.mIsDebuggable = z;
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class PendingTempAllowlist {
        public final int callingUid;
        public final long duration;
        public final int reasonCode;
        public final String tag;
        public final int targetUid;
        public final int type;

        public PendingTempAllowlist(int i, int i2, String str, int i3, long j, int i4) {
            this.targetUid = i;
            this.duration = j;
            this.tag = str;
            this.type = i3;
            this.reasonCode = i2;
            this.callingUid = i4;
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class PermissionController extends IPermissionController.Stub {
        public ActivityManagerService mActivityManagerService;

        public final boolean checkPermission(String str, int i, int i2) {
            return this.mActivityManagerService.checkPermissionForDevice(str, i, i2, 0) == 0;
        }

        public final int getPackageUid(String str, int i) {
            try {
                return this.mActivityManagerService.mContext.getPackageManager().getPackageUid(str, i);
            } catch (PackageManager.NameNotFoundException unused) {
                return -1;
            }
        }

        public final String[] getPackagesForUid(int i) {
            return this.mActivityManagerService.mContext.getPackageManager().getPackagesForUid(i);
        }

        public final boolean isRuntimePermission(String str) {
            try {
                return (this.mActivityManagerService.mContext.getPackageManager().getPermissionInfo(str, 0).protectionLevel & 15) == 1;
            } catch (PackageManager.NameNotFoundException e) {
                Slog.e("ActivityManager", "No such permission: " + str, e);
                return false;
            }
        }

        public final int noteOp(String str, int i, String str2) {
            return this.mActivityManagerService.mAppOpsService.noteOperation(AppOpsManager.strOpToOp(str), i, str2, null, false, "", false).getOpMode();
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class PidMap {
        public final Object mPidMap;

        public PidMap() {
            this.mPidMap = new SparseArray();
        }

        public PidMap(ActivityManagerService activityManagerService) {
            this.mPidMap = activityManagerService;
        }

        public ProcessRecord get(int i) {
            return (ProcessRecord) ((SparseArray) this.mPidMap).get(i);
        }

        public ProcessRecord valueAt(int i) {
            return (ProcessRecord) ((SparseArray) this.mPidMap).valueAt(i);
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class ProcessChangeItem {
        public int changes;
        public boolean foregroundActivities;
        public int foregroundServiceTypes;
        public int pid;
        public boolean triggered;
        public int uid;
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class ProcessInfoService extends IProcessInfoService.Stub {
        public final ActivityManagerService mActivityManagerService;

        public ProcessInfoService(ActivityManagerService activityManagerService) {
            this.mActivityManagerService = activityManagerService;
        }

        public final void getProcessStatesAndOomScoresFromPids(int[] iArr, int[] iArr2, int[] iArr3) {
            this.mActivityManagerService.getProcessStatesAndOomScoresForPIDs(iArr, iArr2, iArr3);
        }

        public final void getProcessStatesFromPids(int[] iArr, int[] iArr2) {
            this.mActivityManagerService.getProcessStatesAndOomScoresForPIDs(iArr, iArr2, null);
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    final class StickyBroadcast {
        public boolean deferUntilActive;
        public Intent intent;
        public int originalCallingAppProcessState;
        public int originalCallingUid;
        public String resolvedDataType;

        public final String toString() {
            StringBuilder sb = new StringBuilder("{intent=");
            sb.append(this.intent);
            sb.append(", defer=");
            sb.append(this.deferUntilActive);
            sb.append(", originalCallingUid=");
            sb.append(this.originalCallingUid);
            sb.append(", originalCallingAppProcessState=");
            sb.append(this.originalCallingAppProcessState);
            sb.append(", type=");
            return AudioOffloadInfo$$ExternalSyntheticOutline0.m(sb, this.resolvedDataType, "}");
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class UiHandler extends Handler {
        public final /* synthetic */ int $r8$classId = 0;

        public UiHandler() {
            super(UiThread.get().getLooper(), null, true);
        }

        public UiHandler(Looper looper) {
            super(looper, null, true);
        }

        private final void handleMessage$com$android$server$am$ActivityManagerService$UiHandler(Message message) {
            OomAdjObserver oomAdjObserver;
            int i = message.what;
            if (i == 1) {
                if (ActivityManagerService.this.mBooting || ActivityManagerService.this.mBooted) {
                    ActivityManagerService.this.mAppErrors.handleShowAppErrorUi(message);
                    ActivityManagerService.this.ensureBootCompleted();
                    return;
                } else {
                    Slog.v("ActivityManager", "SHOW_ERROR_UI_MSG will deliver again in 5s");
                    sendMessageDelayed(ActivityManagerService.this.mUiHandler.obtainMessage(message.what, message.obj), 5000L);
                    return;
                }
            }
            if (i == 2) {
                ActivityManagerService.this.mAppErrors.handleShowAnrUi(message);
                ActivityManagerService.this.ensureBootCompleted();
                return;
            }
            int i2 = 0;
            if (i == 6) {
                ActivityManagerProcLock activityManagerProcLock = ActivityManagerService.this.mProcLock;
                ActivityManagerService.boostPriorityForProcLockedSection();
                synchronized (activityManagerProcLock) {
                    try {
                        ProcessRecord processRecord = (ProcessRecord) message.obj;
                        if (message.arg1 == 0) {
                            ErrorDialogController errorDialogController = processRecord.mErrorState.mDialogController;
                            AppWaitingForDebuggerDialog appWaitingForDebuggerDialog = errorDialogController.mWaitDialog;
                            if (appWaitingForDebuggerDialog != null) {
                                errorDialogController.mService.mUiHandler.post(new ErrorDialogController$$ExternalSyntheticLambda2(2, appWaitingForDebuggerDialog));
                                errorDialogController.mWaitDialog = null;
                            }
                        } else if (!processRecord.mWaitedForDebugger) {
                            ErrorDialogController errorDialogController2 = processRecord.mErrorState.mDialogController;
                            Context context = (Context) ((ArrayList) errorDialogController2.getDisplayContexts(true)).get(0);
                            ProcessRecord processRecord2 = errorDialogController2.mApp;
                            ActivityManagerService activityManagerService = errorDialogController2.mService;
                            errorDialogController2.mWaitDialog = new AppWaitingForDebuggerDialog(activityManagerService, context, processRecord2);
                            activityManagerService.mUiHandler.post(new ErrorDialogController$$ExternalSyntheticLambda2(0, errorDialogController2));
                            processRecord.mWaitedForDebugger = true;
                        }
                    } catch (Throwable th) {
                        throw th;
                    }
                }
                ActivityManagerService.resetPriorityAfterProcLockedSection();
                return;
            }
            if (i == 26) {
                HashMap hashMap = (HashMap) message.obj;
                ActivityManagerProcLock activityManagerProcLock2 = ActivityManagerService.this.mProcLock;
                ActivityManagerService.boostPriorityForProcLockedSection();
                synchronized (activityManagerProcLock2) {
                    try {
                        ProcessRecord processRecord3 = (ProcessRecord) hashMap.get("app");
                        if (processRecord3 == null) {
                            Slog.e("ActivityManager", "App not found when showing strict mode dialog.");
                            ActivityManagerService.resetPriorityAfterProcLockedSection();
                            return;
                        }
                        if (processRecord3.mErrorState.mDialogController.mViolationDialogs != null) {
                            Slog.e("ActivityManager", "App already has strict mode dialog: " + processRecord3);
                            ActivityManagerService.resetPriorityAfterProcLockedSection();
                            return;
                        }
                        AppErrorResult appErrorResult = (AppErrorResult) hashMap.get(KnoxCustomManagerService.SPCM_KEY_RESULT);
                        if (ActivityManagerService.this.mAtmInternal.showStrictModeViolationDialog()) {
                            processRecord3.mErrorState.mDialogController.showViolationDialogs(appErrorResult);
                        } else {
                            appErrorResult.set(0);
                        }
                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                        ActivityManagerService.this.ensureBootCompleted();
                        return;
                    } finally {
                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                    }
                }
            }
            if (i == 68) {
                ActivityManagerService.this.pushTempAllowlist();
                return;
            }
            if (i == 70) {
                ActivityManagerService activityManagerService2 = ActivityManagerService.this;
                String str = (String) message.obj;
                synchronized (activityManagerService2.mOomAdjObserverLock) {
                    oomAdjObserver = activityManagerService2.mCurOomAdjObserver;
                }
                if (oomAdjObserver != null) {
                    ActivityManagerShellCommand.MyUidObserver myUidObserver = (ActivityManagerShellCommand.MyUidObserver) oomAdjObserver;
                    synchronized (myUidObserver) {
                        try {
                            StrictMode.ThreadPolicy allowThreadDiskWrites = StrictMode.allowThreadDiskWrites();
                            try {
                                myUidObserver.mPw.print("# ");
                                myUidObserver.mPw.println(str);
                                myUidObserver.mPw.flush();
                            } finally {
                                StrictMode.setThreadPolicy(allowThreadDiskWrites);
                            }
                        } finally {
                        }
                    }
                    return;
                }
                return;
            }
            if (i == 31) {
                ActivityManagerService.this.mProcessList.dispatchProcessesChanged();
                return;
            }
            if (i == 32) {
                int i3 = message.arg1;
                int i4 = message.arg2;
                ProcessList processList = ActivityManagerService.this.mProcessList;
                int beginBroadcast = processList.mProcessObservers.beginBroadcast();
                while (beginBroadcast > 0) {
                    beginBroadcast--;
                    IProcessObserver broadcastItem = processList.mProcessObservers.getBroadcastItem(beginBroadcast);
                    if (broadcastItem != null) {
                        try {
                            broadcastItem.onProcessDied(i3, i4);
                        } catch (RemoteException unused) {
                        }
                    }
                }
                processList.mProcessObservers.finishBroadcast();
                return;
            }
            if (i != 80) {
                if (i != 81) {
                    return;
                }
                UidObserverController uidObserverController = ActivityManagerService.this.mUidObserverController;
                IBinder iBinder = (IBinder) message.obj;
                int i5 = message.arg1;
                int beginBroadcast2 = uidObserverController.mUidObservers.beginBroadcast();
                while (true) {
                    int i6 = beginBroadcast2 - 1;
                    if (beginBroadcast2 <= 0) {
                        break;
                    }
                    UidObserverController.UidObserverRegistration uidObserverRegistration = (UidObserverController.UidObserverRegistration) uidObserverController.mUidObservers.getBroadcastCookie(i6);
                    if (uidObserverRegistration.mToken.equals(iBinder)) {
                        int[] iArr = uidObserverRegistration.mUids;
                        if (iArr != null && iArr.length != 0) {
                            uidObserverRegistration.mUids = new int[iArr.length - 1];
                            boolean z = false;
                            while (true) {
                                if (i2 >= iArr.length) {
                                    break;
                                }
                                if (z) {
                                    uidObserverRegistration.mUids[i2 - 1] = iArr[i2];
                                } else {
                                    int i7 = iArr[i2];
                                    if (i7 == i5) {
                                        z = true;
                                    } else {
                                        if (i2 == iArr.length - 1) {
                                            uidObserverRegistration.mUids = iArr;
                                            break;
                                        }
                                        uidObserverRegistration.mUids[i2] = i7;
                                    }
                                }
                                i2++;
                            }
                        }
                    } else {
                        if (i6 == 0) {
                            Slog.e("ActivityManager", "Unable to find UidObserver by token");
                        }
                        beginBroadcast2 = i6;
                    }
                }
                uidObserverController.mUidObservers.finishBroadcast();
                return;
            }
            UidObserverController uidObserverController2 = ActivityManagerService.this.mUidObserverController;
            IBinder iBinder2 = (IBinder) message.obj;
            int i8 = message.arg1;
            int beginBroadcast3 = uidObserverController2.mUidObservers.beginBroadcast();
            while (true) {
                int i9 = beginBroadcast3 - 1;
                if (beginBroadcast3 <= 0) {
                    break;
                }
                UidObserverController.UidObserverRegistration uidObserverRegistration2 = (UidObserverController.UidObserverRegistration) uidObserverController2.mUidObservers.getBroadcastCookie(i9);
                if (uidObserverRegistration2.mToken.equals(iBinder2)) {
                    int[] iArr2 = uidObserverRegistration2.mUids;
                    if (iArr2 != null) {
                        uidObserverRegistration2.mUids = new int[iArr2.length + 1];
                        boolean z2 = false;
                        while (true) {
                            if (i2 < iArr2.length) {
                                if (z2) {
                                    uidObserverRegistration2.mUids[i2 + 1] = iArr2[i2];
                                } else {
                                    int i10 = iArr2[i2];
                                    if (i10 < i8) {
                                        uidObserverRegistration2.mUids[i2] = i10;
                                    } else {
                                        if (i10 == i8) {
                                            uidObserverRegistration2.mUids = iArr2;
                                            break;
                                        }
                                        int[] iArr3 = uidObserverRegistration2.mUids;
                                        iArr3[i2] = i8;
                                        iArr3[i2 + 1] = iArr2[i2];
                                        z2 = true;
                                    }
                                }
                                i2++;
                            } else if (!z2) {
                                uidObserverRegistration2.mUids[iArr2.length] = i8;
                            }
                        }
                    }
                } else {
                    if (i9 == 0) {
                        Slog.e("ActivityManager", "Unable to find UidObserver by token");
                    }
                    beginBroadcast3 = i9;
                }
            }
            uidObserverController2.mUidObservers.finishBroadcast();
        }

        @Override // android.os.Handler
        public final void handleMessage(final Message message) {
            switch (this.$r8$classId) {
                case 0:
                    handleMessage$com$android$server$am$ActivityManagerService$UiHandler(message);
                    return;
                default:
                    int i = message.what;
                    if (i == 5) {
                        ActivityManagerService activityManagerService = ActivityManagerService.this;
                        ActivityManagerService.boostPriorityForLockedSection();
                        synchronized (activityManagerService) {
                            try {
                                ActivityManagerService.this.mAppProfiler.performAppGcsIfAppropriateLocked();
                            } finally {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                            }
                        }
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        return;
                    }
                    if (i == 20) {
                        ProcessRecord processRecord = (ProcessRecord) message.obj;
                        ActivityManagerService activityManagerService2 = ActivityManagerService.this;
                        ActivityManagerService.boostPriorityForLockedSection();
                        synchronized (activityManagerService2) {
                            try {
                                ActivityManagerService.this.handleProcessStartOrKillTimeoutLocked(processRecord, false);
                            } finally {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                            }
                        }
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        return;
                    }
                    if (i == 22) {
                        ActivityManagerService activityManagerService3 = ActivityManagerService.this;
                        ActivityManagerService.boostPriorityForLockedSection();
                        synchronized (activityManagerService3) {
                            try {
                                int i2 = message.arg1;
                                int i3 = message.arg2;
                                SomeArgs someArgs = (SomeArgs) message.obj;
                                String str = (String) someArgs.arg1;
                                String str2 = (String) someArgs.arg2;
                                int intValue = ((Integer) someArgs.arg3).intValue();
                                someArgs.recycle();
                                ActivityManagerService.this.mExt.forceStopPackageLocked(i2, i3, intValue, false, false, str, str2);
                            } finally {
                                ActivityManagerService.resetPriorityAfterLockedSection();
                            }
                        }
                        ActivityManagerService.resetPriorityAfterLockedSection();
                        return;
                    }
                    if (i == 33) {
                        final ArrayList arrayList = (ArrayList) message.obj;
                        new Thread() { // from class: com.android.server.am.ActivityManagerService$MainHandler$1
                            @Override // java.lang.Thread, java.lang.Runnable
                            public final void run() {
                                List stats;
                                int i4;
                                long j;
                                AppProfiler appProfiler = ActivityManagerService.this.mAppProfiler;
                                ArrayList arrayList2 = arrayList;
                                appProfiler.getClass();
                                SparseArray sparseArray = new SparseArray(arrayList2.size());
                                int size = arrayList2.size();
                                for (int i5 = 0; i5 < size; i5++) {
                                    ProcessMemInfo processMemInfo = (ProcessMemInfo) arrayList2.get(i5);
                                    sparseArray.put(processMemInfo.pid, processMemInfo);
                                }
                                appProfiler.updateCpuStatsNow();
                                long[] jArr = new long[4];
                                long[] jArr2 = new long[2];
                                final AppProfiler$$ExternalSyntheticLambda3 appProfiler$$ExternalSyntheticLambda3 = new AppProfiler$$ExternalSyntheticLambda3();
                                synchronized (appProfiler.mProcessCpuTracker) {
                                    stats = appProfiler.mProcessCpuTracker.getStats(new ProcessCpuTracker.FilterStats() { // from class: com.android.server.am.AppProfiler$$ExternalSyntheticLambda6
                                        public final boolean needed(ProcessCpuTracker.Stats stats2) {
                                            return appProfiler$$ExternalSyntheticLambda3.test(stats2);
                                        }
                                    });
                                }
                                int size2 = stats.size();
                                long j2 = 0;
                                long j3 = 0;
                                long j4 = 0;
                                int i6 = 0;
                                while (i6 < size2) {
                                    ProcessCpuTracker.Stats stats2 = (ProcessCpuTracker.Stats) stats.get(i6);
                                    List list = stats;
                                    int i7 = size2;
                                    long pss = Debug.getPss(stats2.pid, jArr2, jArr);
                                    if (pss > j2 && sparseArray.indexOfKey(stats2.pid) < 0) {
                                        ProcessMemInfo processMemInfo2 = new ProcessMemInfo(stats2.pid, -1000, stats2.name, "native", null, -1);
                                        processMemInfo2.pss = pss;
                                        processMemInfo2.swapPss = jArr2[1];
                                        processMemInfo2.memtrack = jArr[0];
                                        j3 += jArr[1];
                                        j4 += jArr[2];
                                        arrayList2.add(processMemInfo2);
                                    }
                                    i6++;
                                    stats = list;
                                    size2 = i7;
                                    j2 = 0;
                                }
                                int size3 = arrayList2.size();
                                int i8 = 0;
                                long j5 = 0;
                                long j6 = 0;
                                long j7 = 0;
                                while (i8 < size3) {
                                    ProcessMemInfo processMemInfo3 = (ProcessMemInfo) arrayList2.get(i8);
                                    AppProfiler appProfiler2 = appProfiler;
                                    int i9 = size3;
                                    if (processMemInfo3.pss == 0) {
                                        processMemInfo3.pss = Debug.getPss(processMemInfo3.pid, jArr2, jArr);
                                        j = j6;
                                        processMemInfo3.swapPss = jArr2[1];
                                        processMemInfo3.memtrack = jArr[0];
                                        j3 += jArr[1];
                                        j4 += jArr[2];
                                    } else {
                                        j = j6;
                                    }
                                    j5 += processMemInfo3.pss;
                                    j7 += processMemInfo3.swapPss;
                                    j6 = j + processMemInfo3.memtrack;
                                    i8++;
                                    appProfiler = appProfiler2;
                                    size3 = i9;
                                }
                                AppProfiler appProfiler3 = appProfiler;
                                long j8 = j6;
                                Collections.sort(arrayList2, new AppProfiler.AnonymousClass2());
                                StringBuilder sb = new StringBuilder(128);
                                StringBuilder sb2 = new StringBuilder(128);
                                sb.append("Low on memory -- ");
                                ActivityManagerService.appendMemBucket(sb, j5, "total", false);
                                ActivityManagerService.appendMemBucket(sb2, j5, "total", true);
                                StringBuilder sb3 = new StringBuilder(1024);
                                StringBuilder sb4 = new StringBuilder(1024);
                                StringBuilder sb5 = new StringBuilder(1024);
                                int size4 = arrayList2.size();
                                int i10 = Integer.MIN_VALUE;
                                int i11 = 0;
                                boolean z = true;
                                long j9 = 0;
                                long j10 = 0;
                                long j11 = 0;
                                while (i11 < size4) {
                                    ProcessMemInfo processMemInfo4 = (ProcessMemInfo) arrayList2.get(i11);
                                    long j12 = j4;
                                    int i12 = processMemInfo4.oomAdj;
                                    long j13 = j3;
                                    if (i12 >= 900) {
                                        j9 += processMemInfo4.pss;
                                    }
                                    if (i12 != -1000 && (i12 < 500 || i12 == 600 || i12 == 700)) {
                                        if (i10 != i12) {
                                            if (i12 <= 0) {
                                                sb.append(" / ");
                                            }
                                            if (processMemInfo4.oomAdj >= 0) {
                                                if (z) {
                                                    sb2.append(":");
                                                    z = false;
                                                }
                                                sb2.append("\n\t at ");
                                            } else {
                                                sb2.append("$");
                                            }
                                            i10 = i12;
                                        } else {
                                            sb.append(" ");
                                            sb2.append("$");
                                        }
                                        if (processMemInfo4.oomAdj <= 0) {
                                            ActivityManagerService.appendMemBucket(sb, processMemInfo4.pss, processMemInfo4.name, false);
                                        }
                                        ActivityManagerService.appendMemBucket(sb2, processMemInfo4.pss, processMemInfo4.name, true);
                                        if (processMemInfo4.oomAdj >= 0 && ((i4 = i11 + 1) >= size4 || ((ProcessMemInfo) arrayList2.get(i4)).oomAdj != i10)) {
                                            sb2.append("(");
                                            int i13 = 0;
                                            while (true) {
                                                int[] iArr = ActivityManagerService.DUMP_MEM_OOM_ADJ;
                                                if (i13 >= iArr.length) {
                                                    break;
                                                }
                                                if (iArr[i13] == processMemInfo4.oomAdj) {
                                                    sb2.append(ActivityManagerService.DUMP_MEM_OOM_LABEL[i13]);
                                                    sb2.append(":");
                                                    sb2.append(iArr[i13]);
                                                }
                                                i13++;
                                            }
                                            sb2.append(")");
                                        }
                                    }
                                    ActivityManagerService.appendMemInfo(sb3, processMemInfo4);
                                    if (processMemInfo4.oomAdj == -1000) {
                                        long j14 = processMemInfo4.pss;
                                        if (j14 >= 512) {
                                            ActivityManagerService.appendMemInfo(sb4, processMemInfo4);
                                        } else {
                                            j10 += j14;
                                            j11 += processMemInfo4.memtrack;
                                        }
                                    } else {
                                        if (j10 > 0) {
                                            ActivityManagerService.appendBasicMemEntry(sb4, -1000, -1, j10, j11, "(Other native)");
                                            sb4.append('\n');
                                            j10 = 0;
                                        }
                                        ActivityManagerService.appendMemInfo(sb5, processMemInfo4);
                                    }
                                    i11++;
                                    j4 = j12;
                                    j3 = j13;
                                }
                                long j15 = j3;
                                long j16 = j4;
                                sb5.append("           ");
                                ProcessList.appendRamKb(sb5, j5);
                                sb5.append(": TOTAL");
                                if (j8 > 0) {
                                    sb5.append(" (");
                                    sb5.append(ActivityManagerService.stringifyKBSize(j8));
                                    sb5.append(" memtrack)");
                                }
                                sb5.append("\n");
                                MemInfoReader memInfoReader = new MemInfoReader();
                                memInfoReader.readMemInfo();
                                long[] rawInfo = memInfoReader.getRawInfo();
                                StringBuilder sb6 = new StringBuilder(1024);
                                Debug.getMemInfo(rawInfo);
                                sb6.append("  MemInfo: ");
                                sb6.append(ActivityManagerService.stringifyKBSize(rawInfo[9]));
                                sb6.append(" slab, ");
                                sb6.append(ActivityManagerService.stringifyKBSize(rawInfo[8]));
                                sb6.append(" shmem, ");
                                sb6.append(ActivityManagerService.stringifyKBSize(rawInfo[16]));
                                sb6.append(" vm alloc, ");
                                sb6.append(ActivityManagerService.stringifyKBSize(rawInfo[17]));
                                sb6.append(" page tables ");
                                sb6.append(ActivityManagerService.stringifyKBSize(rawInfo[18]));
                                sb6.append(" kernel stack\n           ");
                                sb6.append(ActivityManagerService.stringifyKBSize(rawInfo[2]));
                                sb6.append(" buffers, ");
                                sb6.append(ActivityManagerService.stringifyKBSize(rawInfo[3]));
                                sb6.append(" cached, ");
                                sb6.append(ActivityManagerService.stringifyKBSize(rawInfo[15]));
                                sb6.append(" mapped, ");
                                sb6.append(ActivityManagerService.stringifyKBSize(rawInfo[1]));
                                sb6.append(" free\n");
                                if (rawInfo[14] != 0) {
                                    sb6.append("  ZRAM: ");
                                    sb6.append(ActivityManagerService.stringifyKBSize(rawInfo[14]));
                                    sb6.append(" RAM, ");
                                    sb6.append(ActivityManagerService.stringifyKBSize(rawInfo[12]));
                                    sb6.append(" swap total, ");
                                    sb6.append(ActivityManagerService.stringifyKBSize(rawInfo[13]));
                                    sb6.append(" swap free\n");
                                }
                                long[] ksmInfo = ActivityManagerService.getKsmInfo();
                                if (ksmInfo[1] != 0 || ksmInfo[0] != 0 || ksmInfo[2] != 0 || ksmInfo[3] != 0) {
                                    sb6.append("  KSM: ");
                                    sb6.append(ActivityManagerService.stringifyKBSize(ksmInfo[1]));
                                    sb6.append(" saved from shared ");
                                    sb6.append(ActivityManagerService.stringifyKBSize(ksmInfo[0]));
                                    sb6.append("\n       ");
                                    sb6.append(ActivityManagerService.stringifyKBSize(ksmInfo[2]));
                                    sb6.append(" unshared; ");
                                    sb6.append(ActivityManagerService.stringifyKBSize(ksmInfo[3]));
                                    sb6.append(" volatile\n");
                                }
                                sb6.append("  Free RAM: ");
                                sb6.append(ActivityManagerService.stringifyKBSize(memInfoReader.getFreeSizeKb() + memInfoReader.getCachedSizeKb() + j9));
                                sb6.append("\n");
                                long kernelUsedSizeKb = memInfoReader.getKernelUsedSizeKb();
                                long ionHeapsSizeKb = Debug.getIonHeapsSizeKb();
                                long ionPoolsSizeKb = Debug.getIonPoolsSizeKb();
                                long dmabufMappedSizeKb = Debug.getDmabufMappedSizeKb();
                                if (ionHeapsSizeKb < 0 || ionPoolsSizeKb < 0) {
                                    long dmabufTotalExportedKb = Debug.getDmabufTotalExportedKb();
                                    if (dmabufTotalExportedKb >= 0) {
                                        sb6.append("DMA-BUF: ");
                                        sb6.append(ActivityManagerService.stringifyKBSize(dmabufTotalExportedKb));
                                        sb6.append("\n");
                                        kernelUsedSizeKb += dmabufTotalExportedKb - dmabufMappedSizeKb;
                                        j5 = (j5 - j15) + dmabufMappedSizeKb;
                                    }
                                    long dmabufHeapTotalExportedKb = Debug.getDmabufHeapTotalExportedKb();
                                    if (dmabufHeapTotalExportedKb >= 0) {
                                        sb6.append("DMA-BUF Heap: ");
                                        sb6.append(ActivityManagerService.stringifyKBSize(dmabufHeapTotalExportedKb));
                                        sb6.append("\n");
                                    }
                                    long dmabufHeapPoolsSizeKb = Debug.getDmabufHeapPoolsSizeKb();
                                    if (dmabufHeapPoolsSizeKb >= 0) {
                                        sb6.append("DMA-BUF Heaps pool: ");
                                        sb6.append(ActivityManagerService.stringifyKBSize(dmabufHeapPoolsSizeKb));
                                        sb6.append("\n");
                                    }
                                } else {
                                    sb6.append("       ION: ");
                                    sb6.append(ActivityManagerService.stringifyKBSize(ionHeapsSizeKb + ionPoolsSizeKb));
                                    sb6.append("\n");
                                    kernelUsedSizeKb += ionHeapsSizeKb - dmabufMappedSizeKb;
                                    j5 = (j5 - j15) + dmabufMappedSizeKb;
                                }
                                long gpuTotalUsageKb = Debug.getGpuTotalUsageKb();
                                if (gpuTotalUsageKb >= 0) {
                                    long gpuPrivateMemoryKb = Debug.getGpuPrivateMemoryKb();
                                    if (gpuPrivateMemoryKb >= 0) {
                                        sb6.append("      GPU: ");
                                        sb6.append(ActivityManagerService.stringifyKBSize(gpuTotalUsageKb));
                                        sb6.append(" (");
                                        sb6.append(ActivityManagerService.stringifyKBSize(gpuTotalUsageKb - gpuPrivateMemoryKb));
                                        sb6.append(" dmabuf + ");
                                        sb6.append(ActivityManagerService.stringifyKBSize(gpuPrivateMemoryKb));
                                        sb6.append(" private)\n");
                                        j5 -= j16;
                                        kernelUsedSizeKb += gpuPrivateMemoryKb;
                                    } else {
                                        sb6.append("       GPU: ");
                                        sb6.append(ActivityManagerService.stringifyKBSize(gpuTotalUsageKb));
                                        sb6.append("\n");
                                    }
                                }
                                sb6.append("  Used RAM: ");
                                sb6.append(ActivityManagerService.stringifyKBSize((j5 - j9) + kernelUsedSizeKb));
                                sb6.append("\n  Lost RAM: ");
                                sb6.append(ActivityManagerService.stringifyKBSize(((((memInfoReader.getTotalSizeKb() - (j5 - j7)) - memInfoReader.getFreeSizeKb()) - memInfoReader.getCachedSizeKb()) - kernelUsedSizeKb) - memInfoReader.getZramTotalSizeKb()));
                                sb6.append("\n");
                                Slog.i("ActivityManager", "Low on memory:");
                                Slog.i("ActivityManager", sb4.toString());
                                Slog.i("ActivityManager", sb5.toString());
                                Slog.i("ActivityManager", sb6.toString());
                                StringBuilder sb7 = new StringBuilder(1024);
                                sb7.append("Low on memory:");
                                sb7.append((CharSequence) sb2);
                                sb7.append('\n');
                                sb7.append((CharSequence) sb3);
                                sb7.append((CharSequence) sb5);
                                sb7.append('\n');
                                sb7.append((CharSequence) sb6);
                                sb7.append('\n');
                                StringWriter stringWriter = new StringWriter();
                                ActivityManagerService activityManagerService4 = appProfiler3.mService;
                                ActivityManagerService.boostPriorityForLockedSection();
                                synchronized (activityManagerService4) {
                                    try {
                                        PrintWriter fastPrintWriter = new FastPrintWriter(stringWriter, false, 256);
                                        String[] strArr = new String[0];
                                        fastPrintWriter.println();
                                        ActivityManagerGlobalLock activityManagerGlobalLock = appProfiler3.mProcLock;
                                        ActivityManagerService.boostPriorityForProcLockedSection();
                                        synchronized (activityManagerGlobalLock) {
                                            try {
                                                appProfiler3.mService.mProcessList.dumpProcessesLSP(null, fastPrintWriter, strArr, 0, false, null, -1);
                                            } catch (Throwable th) {
                                                ActivityManagerService.resetPriorityAfterProcLockedSection();
                                                throw th;
                                            }
                                        }
                                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                                        fastPrintWriter.println();
                                        ActiveServices activeServices = appProfiler3.mService.mServices;
                                        activeServices.getClass();
                                        new ActiveServices.ServiceDumper(activeServices, null, fastPrintWriter, strArr, 0, false, null).dumpLocked();
                                        fastPrintWriter.println();
                                        appProfiler3.mService.mAtmInternal.dump("activities", null, fastPrintWriter, strArr, 0, false, false, null, -1);
                                        fastPrintWriter.flush();
                                    } finally {
                                        ActivityManagerService.resetPriorityAfterLockedSection();
                                    }
                                }
                                ActivityManagerService.resetPriorityAfterLockedSection();
                                sb7.append(stringWriter.toString());
                                FrameworkStatsLog.write(81);
                                appProfiler3.mService.addErrorToDropBox("lowmem", null, "system_server", null, null, null, sb.toString(), sb7.toString(), null, null, null, null, null, null);
                                ActivityManagerService activityManagerService5 = appProfiler3.mService;
                                ActivityManagerService.boostPriorityForLockedSection();
                                synchronized (activityManagerService5) {
                                    try {
                                        long uptimeMillis = SystemClock.uptimeMillis();
                                        if (appProfiler3.mLastMemUsageReportTime < uptimeMillis) {
                                            appProfiler3.mLastMemUsageReportTime = uptimeMillis;
                                        }
                                    } catch (Throwable th2) {
                                        throw th2;
                                    }
                                }
                                ActivityManagerService.resetPriorityAfterLockedSection();
                            }
                        }.start();
                        return;
                    }
                    if (i == 41) {
                        ActivityManagerProcLock activityManagerProcLock = ActivityManagerService.this.mProcLock;
                        ActivityManagerService.boostPriorityForProcLockedSection();
                        synchronized (activityManagerProcLock) {
                            try {
                                ProcessList processList = ActivityManagerService.this.mProcessList;
                                int i4 = message.arg1;
                                for (int size = processList.mLruProcesses.size() - 1; size >= 0; size--) {
                                    ProcessRecord processRecord2 = (ProcessRecord) processList.mLruProcesses.get(size);
                                    IApplicationThread iApplicationThread = processRecord2.mThread;
                                    if (iApplicationThread != null) {
                                        try {
                                            iApplicationThread.updateTimePrefs(i4);
                                        } catch (RemoteException unused) {
                                            BinaryTransparencyService$$ExternalSyntheticOutline0.m(new StringBuilder("Failed to update preferences for: "), processRecord2.info.processName, "ActivityManager");
                                        }
                                    }
                                }
                            } finally {
                                ActivityManagerService.resetPriorityAfterProcLockedSection();
                            }
                        }
                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                        return;
                    }
                    if (i == 63) {
                        ActivityManagerProcLock activityManagerProcLock2 = ActivityManagerService.this.mProcLock;
                        ActivityManagerService.boostPriorityForProcLockedSection();
                        synchronized (activityManagerProcLock2) {
                            try {
                                ProcessList processList2 = ActivityManagerService.this.mProcessList;
                                for (int size2 = processList2.mLruProcesses.size() - 1; size2 >= 0; size2--) {
                                    ProcessRecord processRecord3 = (ProcessRecord) processList2.mLruProcesses.get(size2);
                                    IApplicationThread iApplicationThread2 = processRecord3.mThread;
                                    if (iApplicationThread2 != null) {
                                        try {
                                            iApplicationThread2.handleTrustStorageUpdate();
                                        } catch (RemoteException unused2) {
                                            BinaryTransparencyService$$ExternalSyntheticOutline0.m(new StringBuilder("Failed to handle trust storage update for: "), processRecord3.info.processName, "ActivityManager");
                                        }
                                    }
                                }
                            } finally {
                                ActivityManagerService.resetPriorityAfterProcLockedSection();
                            }
                        }
                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                        return;
                    }
                    if (i == 69) {
                        SomeArgs someArgs2 = (SomeArgs) message.obj;
                        ActiveServices activeServices = ActivityManagerService.this.mServices;
                        ProcessRecord processRecord4 = (ProcessRecord) someArgs2.arg1;
                        activeServices.mAm.crashApplicationWithTypeWithExtras(processRecord4.uid, processRecord4.mPid, processRecord4.info.packageName, processRecord4.userId, ConnectivityModuleConnector$$ExternalSyntheticOutline0.m("Context.startForegroundService() did not then call Service.startForeground(): ", (String) someArgs2.arg2), false, 1, RemoteServiceException.ForegroundServiceDidNotStartInTimeException.createExtrasForService((ComponentName) someArgs2.arg3));
                        someArgs2.recycle();
                        return;
                    }
                    if (i == 90) {
                        ActivityManagerService activityManagerService4 = ActivityManagerService.this;
                        if (activityManagerService4.mDvfsMgr == null) {
                            activityManagerService4.mDvfsMgr = SemDvfsManager.createInstance(activityManagerService4.mContext, "APP_LAUNCH");
                        }
                        SemDvfsManager semDvfsManager = ActivityManagerService.this.mDvfsMgr;
                        if (semDvfsManager != null) {
                            semDvfsManager.setHint(18);
                            ActivityManagerService.this.mDvfsMgr.acquire();
                            return;
                        }
                        return;
                    }
                    if (i == 12) {
                        ActivityManagerService.this.mServices.serviceTimeout((ProcessRecord) message.obj);
                        return;
                    }
                    if (i == 13) {
                        ActivityManagerProcLock activityManagerProcLock3 = ActivityManagerService.this.mProcLock;
                        ActivityManagerService.boostPriorityForProcLockedSection();
                        synchronized (activityManagerProcLock3) {
                            try {
                                ActivityManagerService.this.mProcessList.forEachLruProcessesLOSP(new ActivityManagerService$MainHandler$$ExternalSyntheticLambda0(), false);
                            } finally {
                                ActivityManagerService.resetPriorityAfterProcLockedSection();
                            }
                        }
                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                        return;
                    }
                    if (i == 66) {
                        ActivityManagerService.this.mServices.serviceForegroundTimeout((ServiceRecord) message.obj);
                        return;
                    }
                    if (i == 67) {
                        SomeArgs someArgs3 = (SomeArgs) message.obj;
                        ActivityManagerService.this.mServices.mAm.mAnrHelper.appNotResponding((ProcessRecord) someArgs3.arg1, (TimeoutRecord) someArgs3.arg2);
                        someArgs3.recycle();
                        return;
                    }
                    switch (i) {
                        case 27:
                            ActivityManagerService.m165$$Nest$mcheckExcessivePowerUsage(ActivityManagerService.this);
                            removeMessages(27);
                            sendMessageDelayed(obtainMessage(27), ActivityManagerService.this.mConstants.POWER_CHECK_INTERVAL);
                            return;
                        case 28:
                            ActivityManagerProcLock activityManagerProcLock4 = ActivityManagerService.this.mProcLock;
                            ActivityManagerService.boostPriorityForProcLockedSection();
                            synchronized (activityManagerProcLock4) {
                                try {
                                    ProcessList processList3 = ActivityManagerService.this.mProcessList;
                                    for (int size3 = processList3.mLruProcesses.size() - 1; size3 >= 0; size3--) {
                                        ProcessRecord processRecord5 = (ProcessRecord) processList3.mLruProcesses.get(size3);
                                        IApplicationThread iApplicationThread3 = processRecord5.mThread;
                                        if (iApplicationThread3 != null) {
                                            try {
                                                iApplicationThread3.clearDnsCache();
                                            } catch (RemoteException unused3) {
                                                BinaryTransparencyService$$ExternalSyntheticOutline0.m(new StringBuilder("Failed to clear dns cache for: "), processRecord5.info.processName, "ActivityManager");
                                            }
                                        }
                                    }
                                } finally {
                                }
                            }
                            ActivityManagerService.resetPriorityAfterProcLockedSection();
                            return;
                        case 29:
                            ActivityManagerService.this.mProcessList.setAllHttpProxy();
                            return;
                        default:
                            switch (i) {
                                case 49:
                                    int i5 = message.arg1;
                                    byte[] bArr = (byte[]) message.obj;
                                    ActivityManagerProcLock activityManagerProcLock5 = ActivityManagerService.this.mProcLock;
                                    ActivityManagerService.boostPriorityForProcLockedSection();
                                    synchronized (activityManagerProcLock5) {
                                        try {
                                            synchronized (ActivityManagerService.this.mPidsSelfLocked) {
                                                for (int i6 = 0; i6 < ((SparseArray) ActivityManagerService.this.mPidsSelfLocked.mPidMap).size(); i6++) {
                                                    ProcessRecord valueAt = ActivityManagerService.this.mPidsSelfLocked.valueAt(i6);
                                                    IApplicationThread iApplicationThread4 = valueAt.mThread;
                                                    if (valueAt.uid == i5 && iApplicationThread4 != null) {
                                                        try {
                                                            iApplicationThread4.notifyCleartextNetwork(bArr);
                                                        } catch (RemoteException unused4) {
                                                        }
                                                    }
                                                }
                                            }
                                        } finally {
                                        }
                                    }
                                    ActivityManagerService.resetPriorityAfterProcLockedSection();
                                    return;
                                case 50:
                                    ActivityManagerService.this.mAppProfiler.handlePostDumpHeapNotification();
                                    return;
                                case 51:
                                    ActivityManagerService.this.mAppProfiler.handleAbortDumpHeap((String) message.obj);
                                    return;
                                default:
                                    switch (i) {
                                        case 56:
                                            try {
                                                ((IUiAutomationConnection) message.obj).shutdown();
                                            } catch (RemoteException unused5) {
                                                Slog.w("ActivityManager", "Error shutting down UiAutomationConnection");
                                            }
                                            ActivityManagerService.this.mUserIsMonkey = false;
                                            return;
                                        case 57:
                                            ProcessRecord processRecord6 = (ProcessRecord) message.obj;
                                            ActivityManagerService activityManagerService5 = ActivityManagerService.this;
                                            ActivityManagerService.boostPriorityForLockedSection();
                                            synchronized (activityManagerService5) {
                                                try {
                                                    ContentProviderHelper contentProviderHelper = ActivityManagerService.this.mCpHelper;
                                                    contentProviderHelper.cleanupAppInLaunchingProvidersLocked(processRecord6, true);
                                                    contentProviderHelper.mService.mProcessList.removeProcessLocked(processRecord6, false, true, 7, 0, "timeout publishing content providers", true);
                                                } finally {
                                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                                }
                                            }
                                            ActivityManagerService.resetPriorityAfterLockedSection();
                                            return;
                                        case 58:
                                            ActivityManagerService.this.idleUids();
                                            return;
                                        default:
                                            switch (i) {
                                                case 71:
                                                    ActivityManagerService activityManagerService6 = ActivityManagerService.this;
                                                    ActivityManagerService.boostPriorityForLockedSection();
                                                    synchronized (activityManagerService6) {
                                                        try {
                                                            ActivityManagerService.this.mProcessList.killAppZygoteIfNeededLocked((AppZygote) message.obj, false);
                                                        } finally {
                                                        }
                                                    }
                                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                                    return;
                                                case 72:
                                                    ActivityManagerService.m167$$Nest$mhandleBinderHeavyHitterAutoSamplerTimeOut(ActivityManagerService.this);
                                                    return;
                                                case 73:
                                                    ActivityManagerService activityManagerService7 = ActivityManagerService.this;
                                                    ActivityManagerService.boostPriorityForLockedSection();
                                                    synchronized (activityManagerService7) {
                                                        try {
                                                            ((ContentProviderRecord) message.obj).onProviderPublishStatusLocked(false);
                                                        } finally {
                                                        }
                                                    }
                                                    ActivityManagerService.resetPriorityAfterLockedSection();
                                                    return;
                                                case 74:
                                                    final int i7 = 0;
                                                    ActivityManagerService.this.mBroadcastEventListeners.forEach(new Consumer() { // from class: com.android.server.am.ActivityManagerService$MainHandler$$ExternalSyntheticLambda1
                                                        @Override // java.util.function.Consumer
                                                        public final void accept(Object obj) {
                                                            int i8 = i7;
                                                            Message message2 = message;
                                                            switch (i8) {
                                                                case 0:
                                                                    ((ActivityManagerInternal.BroadcastEventListener) obj).onSendingBroadcast((String) message2.obj, message2.arg1);
                                                                    break;
                                                                default:
                                                                    ((ActivityManagerInternal.BindServiceEventListener) obj).onBindingService((String) message2.obj, message2.arg1);
                                                                    break;
                                                            }
                                                        }
                                                    });
                                                    return;
                                                case 75:
                                                    final int i8 = 1;
                                                    ActivityManagerService.this.mBindServiceEventListeners.forEach(new Consumer() { // from class: com.android.server.am.ActivityManagerService$MainHandler$$ExternalSyntheticLambda1
                                                        @Override // java.util.function.Consumer
                                                        public final void accept(Object obj) {
                                                            int i82 = i8;
                                                            Message message2 = message;
                                                            switch (i82) {
                                                                case 0:
                                                                    ((ActivityManagerInternal.BroadcastEventListener) obj).onSendingBroadcast((String) message2.obj, message2.arg1);
                                                                    break;
                                                                default:
                                                                    ((ActivityManagerInternal.BindServiceEventListener) obj).onBindingService((String) message2.obj, message2.arg1);
                                                                    break;
                                                            }
                                                        }
                                                    });
                                                    return;
                                                case 76:
                                                    ActivityManagerService.this.mServices.onShortFgsTimeout((ServiceRecord) message.obj);
                                                    return;
                                                case 77:
                                                    ActivityManagerService.this.mServices.onShortFgsProcstateTimeout((ServiceRecord) message.obj);
                                                    return;
                                                case 78:
                                                    ActivityManagerService.this.mServices.onShortFgsAnrTimeout((ServiceRecord) message.obj);
                                                    return;
                                                case 79:
                                                    ActivityManagerService.this.mAppProfiler.mCachedAppsWatermarkData.updateCachedAppsSnapshot(((Long) message.obj).longValue());
                                                    return;
                                                default:
                                                    switch (i) {
                                                        case 82:
                                                            ActivityManagerService activityManagerService8 = ActivityManagerService.this;
                                                            ProcessRecord processRecord7 = (ProcessRecord) message.obj;
                                                            int i9 = message.arg1;
                                                            activityManagerService8.getClass();
                                                            long constrain = MathUtils.constrain(processRecord7.mService.mAppProfiler.mProcessCpuTracker.getCpuDelayTimeForPid(processRecord7.mPid) - processRecord7.mProfile.mLastCpuDelayTime.get(), 0L, i9);
                                                            if (constrain == 0) {
                                                                activityManagerService8.handleBindApplicationTimeoutHard(processRecord7);
                                                                return;
                                                            }
                                                            Slog.i("ActivityManager", "Extending process start timeout by " + constrain + "ms for " + processRecord7);
                                                            Trace.instant(64L, "bindApplicationTimeSoft " + processRecord7.processName + "(" + processRecord7.mPid + ")");
                                                            activityManagerService8.mHandler.sendMessageDelayed(activityManagerService8.mHandler.obtainMessage(83, processRecord7), constrain);
                                                            return;
                                                        case 83:
                                                            ActivityManagerService.this.handleBindApplicationTimeoutHard((ProcessRecord) message.obj);
                                                            return;
                                                        case 84:
                                                            ActivityManagerService.this.mServices.onFgsTimeout((ServiceRecord) message.obj);
                                                            return;
                                                        case 85:
                                                            ActivityManagerService.this.mServices.onFgsCrashTimeout((ServiceRecord) message.obj);
                                                            return;
                                                        case 86:
                                                            ActivityManagerService.m168$$Nest$mhandleFollowUpOomAdjusterUpdate(ActivityManagerService.this);
                                                            return;
                                                        default:
                                                            return;
                                                    }
                                            }
                                    }
                            }
                    }
            }
        }
    }

    /* compiled from: qb/89523975 b19e8d3036bb0bb04c0b123e55579fdc5d41bbd9c06260ba21f1b25f8ce00bef */
    public final class VolatileDropboxEntryStates {
        public final Boolean mIsProcessFrozen;
        public final ZonedDateTime mTimestamp;

        public VolatileDropboxEntryStates(Boolean bool, ZonedDateTime zonedDateTime) {
            this.mIsProcessFrozen = bool;
            this.mTimestamp = zonedDateTime;
        }
    }

    /* renamed from: -$$Nest$mcheckExcessivePowerUsage, reason: not valid java name */
    public static void m165$$Nest$mcheckExcessivePowerUsage(final ActivityManagerService activityManagerService) {
        activityManagerService.updateCpuStatsNow();
        final boolean z = activityManagerService.mSystemReady && FeatureFlagUtils.isEnabled(activityManagerService.mContext, "settings_enable_monitor_phantom_procs");
        ActivityManagerProcLock activityManagerProcLock = activityManagerService.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                final boolean z2 = activityManagerService.mLastPowerCheckUptime != 0;
                final long uptimeMillis = SystemClock.uptimeMillis();
                final long j = uptimeMillis - activityManagerService.mLastPowerCheckUptime;
                activityManagerService.mLastPowerCheckUptime = uptimeMillis;
                activityManagerService.mProcessList.forEachLruProcessesLOSP(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda25
                    /* JADX WARN: Removed duplicated region for block: B:37:0x0139 A[Catch: all -> 0x0140, LOOP:0: B:29:0x00e1->B:37:0x0139, LOOP_END, TryCatch #0 {all -> 0x0140, blocks: (B:26:0x00c7, B:28:0x00d1, B:30:0x00e3, B:32:0x00f0, B:34:0x0109, B:35:0x0132, B:37:0x0139, B:40:0x0128, B:42:0x0142), top: B:25:0x00c7 }] */
                    /* JADX WARN: Removed duplicated region for block: B:38:0x0138 A[SYNTHETIC] */
                    @Override // java.util.function.Consumer
                    /*
                        Code decompiled incorrectly, please refer to instructions dump.
                        To view partially-correct code enable 'Show inconsistent code' option in preferences
                    */
                    public final void accept(java.lang.Object r27) {
                        /*
                            Method dump skipped, instructions count: 329
                            To view this dump change 'Code comments level' option to 'DEBUG'
                        */
                        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda25.accept(java.lang.Object):void");
                    }
                }, false);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    /* JADX WARN: Code restructure failed: missing block: B:100:0x0111, code lost:
    
        r5 = android.os.Binder.clearCallingIdentity();
     */
    /* JADX WARN: Code restructure failed: missing block: B:102:0x0115, code lost:
    
        r35.mContext.getContentResolver().call(android.net.Uri.parse("content://com.samsung.knox.securefolder.externalprovider"), "dumpStart", (java.lang.String) null, (android.os.Bundle) null);
     */
    /* JADX WARN: Code restructure failed: missing block: B:105:0x012e, code lost:
    
        android.util.Log.d("ActivityManager", "No process found for: com.samsung.knox.securefolder");
     */
    /* JADX WARN: Code restructure failed: missing block: B:107:0x012c, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:109:0x0139, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:110:0x013a, code lost:
    
        if (r30 != false) goto L77;
     */
    /* JADX WARN: Code restructure failed: missing block: B:111:0x013c, code lost:
    
        r5 = android.os.Binder.clearCallingIdentity();
     */
    /* JADX WARN: Code restructure failed: missing block: B:113:0x0140, code lost:
    
        r35.mContext.getContentResolver().call(android.net.Uri.parse("content://com.samsung.klmsagent.provider"), "dumpStarted", (java.lang.String) null, (android.os.Bundle) null);
     */
    /* JADX WARN: Code restructure failed: missing block: B:116:0x0159, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:117:0x015a, code lost:
    
        android.util.Log.d("ActivityManager", "No process found for: com.samsung.klmsagent");
        r0.printStackTrace();
     */
    /* JADX WARN: Code restructure failed: missing block: B:119:0x0157, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:121:0x0168, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:122:0x0169, code lost:
    
        if (r30 != false) goto L676;
     */
    /* JADX WARN: Code restructure failed: missing block: B:123:0x0185, code lost:
    
        r33 = android.os.Binder.clearCallingIdentity();
     */
    /* JADX WARN: Code restructure failed: missing block: B:124:0x0189, code lost:
    
        if (r39 == false) goto L206;
     */
    /* JADX WARN: Code restructure failed: missing block: B:125:0x018b, code lost:
    
        r0 = new android.util.proto.ProtoOutputStream(r36);
     */
    /* JADX WARN: Code restructure failed: missing block: B:126:0x0193, code lost:
    
        if (r4 < r11.length) goto L96;
     */
    /* JADX WARN: Code restructure failed: missing block: B:127:0x0195, code lost:
    
        r3 = r11[r4];
     */
    /* JADX WARN: Code restructure failed: missing block: B:128:0x019a, code lost:
    
        r5 = r4 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:129:0x01a2, code lost:
    
        if ("activities".equals(r3) != false) goto L204;
     */
    /* JADX WARN: Code restructure failed: missing block: B:133:0x01b5, code lost:
    
        if ("broadcasts".equals(r3) != false) goto L195;
     */
    /* JADX WARN: Code restructure failed: missing block: B:137:0x01c9, code lost:
    
        if ("provider".equals(r3) != false) goto L110;
     */
    /* JADX WARN: Code restructure failed: missing block: B:139:0x01cc, code lost:
    
        if (r5 >= r11.length) goto L112;
     */
    /* JADX WARN: Code restructure failed: missing block: B:140:0x01ce, code lost:
    
        r1 = com.android.server.am.ActivityManagerService.EMPTY_STRING_ARRAY;
     */
    /* JADX WARN: Code restructure failed: missing block: B:141:0x01e1, code lost:
    
        r2 = r35.mCpHelper.mProviderMap;
        r2.getClass();
        r6 = (java.lang.String[]) java.util.Arrays.copyOf(r1, r1.length + 1);
        r6[r1.length] = "--proto";
        r1 = r2.getProvidersForName(r9);
     */
    /* JADX WARN: Code restructure failed: missing block: B:142:0x01fe, code lost:
    
        if (r1.size() > 0) goto L120;
     */
    /* JADX WARN: Code restructure failed: missing block: B:145:0x0207, code lost:
    
        r4 = (com.android.server.am.ContentProviderRecord) r1.get(r10);
        r2 = r4.proc;
     */
    /* JADX WARN: Code restructure failed: missing block: B:146:0x0210, code lost:
    
        if (r2 == null) goto L712;
     */
    /* JADX WARN: Code restructure failed: missing block: B:150:0x0216, code lost:
    
        com.android.server.am.ProviderMap.dumpToTransferPipe(null, r36, r37, r4, r5, r6);
     */
    /* JADX WARN: Code restructure failed: missing block: B:151:0x034d, code lost:
    
        r0.flush();
        android.os.Binder.restoreCallingIdentity(r33);
     */
    /* JADX WARN: Code restructure failed: missing block: B:152:?, code lost:
    
        return;
     */
    /* JADX WARN: Code restructure failed: missing block: B:154:0x0220, code lost:
    
        r10 = r10 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:157:0x0222, code lost:
    
        r37.println("No providers match: " + r9);
        r37.println("Use -h for help.");
     */
    /* JADX WARN: Code restructure failed: missing block: B:158:0x01d1, code lost:
    
        r9 = r11[r5];
        r4 = r4 + 2;
        r2 = new java.lang.String[r11.length - r4];
     */
    /* JADX WARN: Code restructure failed: missing block: B:159:0x01d9, code lost:
    
        if (r11.length > 2) goto L115;
     */
    /* JADX WARN: Code restructure failed: missing block: B:160:0x01db, code lost:
    
        java.lang.System.arraycopy(r11, r4, r2, 0, r11.length - r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:161:0x01e0, code lost:
    
        r1 = r2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:163:0x0241, code lost:
    
        if ("service".equals(r3) != false) goto L131;
     */
    /* JADX WARN: Code restructure failed: missing block: B:164:0x0243, code lost:
    
        r35.mServices.dumpDebug(r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:166:0x0251, code lost:
    
        if ("processes".equals(r3) != false) goto L174;
     */
    /* JADX WARN: Code restructure failed: missing block: B:170:0x0265, code lost:
    
        if ("app-restrictions".equals(r3) != false) goto L139;
     */
    /* JADX WARN: Code restructure failed: missing block: B:171:0x0267, code lost:
    
        r1 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:173:0x0269, code lost:
    
        if (r1 >= r11.length) goto L715;
     */
    /* JADX WARN: Code restructure failed: missing block: B:175:0x0273, code lost:
    
        if ("--uid".equals(r11[r1]) != false) goto L714;
     */
    /* JADX WARN: Code restructure failed: missing block: B:176:0x0283, code lost:
    
        r1 = r1 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:178:0x0275, code lost:
    
        r1 = r1 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:179:0x0277, code lost:
    
        if (r1 < r11.length) goto L636;
     */
    /* JADX WARN: Code restructure failed: missing block: B:180:0x0281, code lost:
    
        r1 = true;
     */
    /* JADX WARN: Code restructure failed: missing block: B:181:0x0285, code lost:
    
        if (r1 == false) goto L152;
     */
    /* JADX WARN: Code restructure failed: missing block: B:182:0x0287, code lost:
    
        r37.println("Invalid --uid argument");
        r37.println("Use -h for help.");
     */
    /* JADX WARN: Code restructure failed: missing block: B:183:0x0293, code lost:
    
        r1 = r35.mAppRestrictionController;
        r3 = r1.mAppStateTrackers.size();
     */
    /* JADX WARN: Code restructure failed: missing block: B:185:0x029d, code lost:
    
        ((com.android.server.am.BaseAppStateTracker) r1.mAppStateTrackers.get(r10)).dumpAsProto(r2, r0);
        r10 = r10 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:188:0x0279, code lost:
    
        r2 = java.lang.Integer.parseInt(r11[r1]);
     */
    /* JADX WARN: Code restructure failed: missing block: B:189:0x027f, code lost:
    
        r1 = false;
     */
    /* JADX WARN: Code restructure failed: missing block: B:193:0x02aa, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:194:0x02ad, code lost:
    
        monitor-enter(r35);
     */
    /* JADX WARN: Code restructure failed: missing block: B:197:0x02b3, code lost:
    
        r1 = r0.start(1146756268033L);
        r35.mAtmInternal.writeActivitiesToProto(r0);
        r0.end(r1);
        r1 = r0.start(1146756268034L);
        r35.writeBroadcastsToProtoLocked(r0);
        r0.end(r1);
        r1 = r0.start(1146756268035L);
        r35.mServices.dumpDebug(r0);
        r0.end(r1);
        r1 = r0.start(1146756268036L);
        r3 = r35.mProcLock;
        boostPriorityForProcLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:198:0x02ed, code lost:
    
        monitor-enter(r3);
     */
    /* JADX WARN: Code restructure failed: missing block: B:200:0x02ee, code lost:
    
        r35.mProcessList.writeProcessesToProtoLSP(r0, r8);
     */
    /* JADX WARN: Code restructure failed: missing block: B:202:0x02f4, code lost:
    
        resetPriorityAfterProcLockedSection();
        r0.end(r1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:204:0x02fb, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:206:0x0301, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:209:0x0306, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:210:0x02ff, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:213:0x030b, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:215:0x030d, code lost:
    
        if (r5 < r11.length) goto L176;
     */
    /* JADX WARN: Code restructure failed: missing block: B:216:0x030f, code lost:
    
        r8 = r11[r5];
     */
    /* JADX WARN: Code restructure failed: missing block: B:217:0x0311, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:218:0x0314, code lost:
    
        monitor-enter(r35);
     */
    /* JADX WARN: Code restructure failed: missing block: B:220:0x0315, code lost:
    
        r1 = r35.mProcLock;
        boostPriorityForProcLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:221:0x031a, code lost:
    
        monitor-enter(r1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:223:0x031b, code lost:
    
        r35.mProcessList.writeProcessesToProtoLSP(r0, r8);
     */
    /* JADX WARN: Code restructure failed: missing block: B:225:0x0321, code lost:
    
        resetPriorityAfterProcLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:227:0x0325, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:229:0x032b, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:232:0x0330, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:233:0x0329, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:236:0x0335, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:237:0x0336, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:238:0x0339, code lost:
    
        monitor-enter(r35);
     */
    /* JADX WARN: Code restructure failed: missing block: B:240:0x033a, code lost:
    
        r35.writeBroadcastsToProtoLocked(r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:242:0x033e, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:244:0x0342, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:246:0x0344, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:247:0x0347, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:248:0x0348, code lost:
    
        r35.mAtmInternal.writeActivitiesToProto(r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:249:0x0198, code lost:
    
        r3 = "";
     */
    /* JADX WARN: Code restructure failed: missing block: B:250:0x0355, code lost:
    
        r0 = r35.getAppId(r8);
     */
    /* JADX WARN: Code restructure failed: missing block: B:251:0x035c, code lost:
    
        if (r4 < r11.length) goto L208;
     */
    /* JADX WARN: Code restructure failed: missing block: B:252:0x035e, code lost:
    
        r6 = r11[r4];
        r5 = r4 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:253:0x0368, code lost:
    
        if ("activities".equals(r6) == false) goto L210;
     */
    /* JADX WARN: Code restructure failed: missing block: B:272:0x03ba, code lost:
    
        r14 = com.android.server.wm.ActivityTaskManagerService.sIsPip2ExperimentEnabled;
     */
    /* JADX WARN: Code restructure failed: missing block: B:273:0x03c3, code lost:
    
        if ("multitasking".equals(r6) == false) goto L230;
     */
    /* JADX WARN: Code restructure failed: missing block: B:277:0x03d7, code lost:
    
        if ("binder-proxies".equals(r6) != false) goto L235;
     */
    /* JADX WARN: Code restructure failed: missing block: B:279:0x03da, code lost:
    
        if (r5 >= r11.length) goto L237;
     */
    /* JADX WARN: Code restructure failed: missing block: B:280:0x03dc, code lost:
    
        r35.dumpBinderProxies(0, r37);
     */
    /* JADX WARN: Code restructure failed: missing block: B:281:0x03df, code lost:
    
        r15 = r5;
        r16 = r8;
        r14 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:282:0x03e3, code lost:
    
        r17 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:283:0x0980, code lost:
    
        r5 = r15;
        r8 = r16;
        r10 = r17;
     */
    /* JADX WARN: Code restructure failed: missing block: B:284:0x0985, code lost:
    
        if (r10 != 0) goto L586;
     */
    /* JADX WARN: Code restructure failed: missing block: B:286:?, code lost:
    
        return;
     */
    /* JADX WARN: Code restructure failed: missing block: B:287:0x098c, code lost:
    
        r7 = r8;
        r4 = r11;
     */
    /* JADX WARN: Code restructure failed: missing block: B:288:0x0996, code lost:
    
        if (r32 != false) goto L589;
     */
    /* JADX WARN: Code restructure failed: missing block: B:290:0x099a, code lost:
    
        if (r35.mCurBroadcastStats != null) goto L592;
     */
    /* JADX WARN: Code restructure failed: missing block: B:291:0x099e, code lost:
    
        r0 = r35.mLastBroadcastStats;
     */
    /* JADX WARN: Code restructure failed: missing block: B:292:0x09a0, code lost:
    
        if (r0 != null) goto L594;
     */
    /* JADX WARN: Code restructure failed: missing block: B:293:0x09a2, code lost:
    
        r0.dumpCheckinStats(r37, r7);
     */
    /* JADX WARN: Code restructure failed: missing block: B:294:0x09a5, code lost:
    
        if (r31 != false) goto L596;
     */
    /* JADX WARN: Code restructure failed: missing block: B:295:0x09a7, code lost:
    
        r35.mLastBroadcastStats = r14;
     */
    /* JADX WARN: Code restructure failed: missing block: B:296:0x09ab, code lost:
    
        r35.mCurBroadcastStats.dumpCheckinStats(r37, r7);
     */
    /* JADX WARN: Code restructure failed: missing block: B:297:0x09b0, code lost:
    
        if (r31 != false) goto L599;
     */
    /* JADX WARN: Code restructure failed: missing block: B:298:0x09b2, code lost:
    
        r35.mCurBroadcastStats = r14;
     */
    /* JADX WARN: Code restructure failed: missing block: B:300:0x0a11, code lost:
    
        return;
     */
    /* JADX WARN: Code restructure failed: missing block: B:301:0x09b5, code lost:
    
        if (r28 != false) goto L601;
     */
    /* JADX WARN: Code restructure failed: missing block: B:302:0x09b7, code lost:
    
        r15 = r37;
        r35.dumpEverything(r36, r37, r4, r5, r30, r7, r27, r28, r29, r0, true);
     */
    /* JADX WARN: Code restructure failed: missing block: B:303:0x09e9, code lost:
    
        if (r30 != false) goto L609;
     */
    /* JADX WARN: Code restructure failed: missing block: B:304:0x09eb, code lost:
    
        r35.dumpAppRestrictionController(r15);
     */
    /* JADX WARN: Code restructure failed: missing block: B:305:0x09ee, code lost:
    
        r37.println();
     */
    /* JADX WARN: Code restructure failed: missing block: B:306:0x09f1, code lost:
    
        if (r30 != false) goto L612;
     */
    /* JADX WARN: Code restructure failed: missing block: B:307:0x09f3, code lost:
    
        r15.println("-------------------------------------------------------------------------------");
     */
    /* JADX WARN: Code restructure failed: missing block: B:308:0x09f8, code lost:
    
        com.samsung.android.server.packagefeature.core.PackageFeatureManagerService.LazyHolder.sInstance.dump(r15);
        r37.println();
     */
    /* JADX WARN: Code restructure failed: missing block: B:309:0x0a00, code lost:
    
        if (r30 != false) goto L615;
     */
    /* JADX WARN: Code restructure failed: missing block: B:310:0x0a02, code lost:
    
        r15.println("-------------------------------------------------------------------------------");
     */
    /* JADX WARN: Code restructure failed: missing block: B:311:0x0a07, code lost:
    
        r35.mActivityTaskManager.mContentDispatcher.dump(r15);
     */
    /* JADX WARN: Code restructure failed: missing block: B:312:0x09cd, code lost:
    
        r15 = r37;
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:313:0x09d1, code lost:
    
        monitor-enter(r35);
     */
    /* JADX WARN: Code restructure failed: missing block: B:316:0x09e2, code lost:
    
        r35.dumpEverything(r36, r37, r4, r5, r30, r7, r27, r28, r29, r0, false);
     */
    /* JADX WARN: Code restructure failed: missing block: B:318:0x09e6, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:320:0x0a12, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:322:0x0a14, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:323:0x0a17, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:324:0x03e7, code lost:
    
        r2 = r11[r5];
        r5 = r4 + 2;
        java.lang.System.gc();
        java.lang.System.runFinalization();
        java.lang.System.gc();
        r37.println(com.android.internal.os.BinderInternal.nGetBinderProxyCount(java.lang.Integer.parseInt(r2)));
     */
    /* JADX WARN: Code restructure failed: missing block: B:325:0x03ff, code lost:
    
        r14 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:327:0x0408, code lost:
    
        if ("allowed-associations".equals(r6) != false) goto L244;
     */
    /* JADX WARN: Code restructure failed: missing block: B:329:0x040b, code lost:
    
        if (r5 < r11.length) goto L246;
     */
    /* JADX WARN: Code restructure failed: missing block: B:330:0x040d, code lost:
    
        r8 = r11[r5];
        r5 = r4 + 2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:331:0x0411, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:332:0x0414, code lost:
    
        monitor-enter(r35);
     */
    /* JADX WARN: Code restructure failed: missing block: B:334:0x0415, code lost:
    
        r35.dumpAllowedAssociationsLocked(r37, r8);
     */
    /* JADX WARN: Code restructure failed: missing block: B:336:0x0419, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:338:0x041d, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:340:0x041f, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:341:0x0422, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:343:0x042a, code lost:
    
        if ("broadcasts".equals(r6) != false) goto L260;
     */
    /* JADX WARN: Code restructure failed: missing block: B:347:0x0441, code lost:
    
        if ("broadcast-stats".equals(r6) != false) goto L263;
     */
    /* JADX WARN: Code restructure failed: missing block: B:349:0x0444, code lost:
    
        if (r5 < r11.length) goto L265;
     */
    /* JADX WARN: Code restructure failed: missing block: B:350:0x0446, code lost:
    
        r8 = r11[r5];
        r5 = r4 + 2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:351:0x044a, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:352:0x044d, code lost:
    
        monitor-enter(r35);
     */
    /* JADX WARN: Code restructure failed: missing block: B:354:0x044e, code lost:
    
        if (r32 != false) goto L269;
     */
    /* JADX WARN: Code restructure failed: missing block: B:356:0x0452, code lost:
    
        if (r35.mCurBroadcastStats != null) goto L272;
     */
    /* JADX WARN: Code restructure failed: missing block: B:359:0x046f, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:361:0x0455, code lost:
    
        r1 = r35.mLastBroadcastStats;
     */
    /* JADX WARN: Code restructure failed: missing block: B:362:0x0457, code lost:
    
        if (r1 != null) goto L274;
     */
    /* JADX WARN: Code restructure failed: missing block: B:363:0x0459, code lost:
    
        r1.dumpCheckinStats(r37, r8);
     */
    /* JADX WARN: Code restructure failed: missing block: B:364:0x045c, code lost:
    
        if (r31 != false) goto L276;
     */
    /* JADX WARN: Code restructure failed: missing block: B:365:0x045e, code lost:
    
        r35.mLastBroadcastStats = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:366:0x0461, code lost:
    
        r35.mCurBroadcastStats.dumpCheckinStats(r37, r8);
     */
    /* JADX WARN: Code restructure failed: missing block: B:367:0x0466, code lost:
    
        if (r31 != false) goto L279;
     */
    /* JADX WARN: Code restructure failed: missing block: B:368:0x0468, code lost:
    
        r35.mCurBroadcastStats = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:369:0x046b, code lost:
    
        r35.dumpBroadcastStatsLocked(r37, r8);
     */
    /* JADX WARN: Code restructure failed: missing block: B:370:0x0473, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:372:0x0475, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:373:0x0478, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:375:0x0480, code lost:
    
        if ("intents".equals(r6) != false) goto L291;
     */
    /* JADX WARN: Code restructure failed: missing block: B:379:0x0497, code lost:
    
        if ("processes".equals(r6) != false) goto L296;
     */
    /* JADX WARN: Code restructure failed: missing block: B:383:0x04af, code lost:
    
        if ("oom".equals(r6) != false) goto L301;
     */
    /* JADX WARN: Code restructure failed: missing block: B:387:0x04c7, code lost:
    
        if ("lmk".equals(r6) != false) goto L304;
     */
    /* JADX WARN: Code restructure failed: missing block: B:388:0x04c9, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:389:0x04cc, code lost:
    
        monitor-enter(r35);
     */
    /* JADX WARN: Code restructure failed: missing block: B:391:0x04cd, code lost:
    
        dumpLmkLocked(r37);
     */
    /* JADX WARN: Code restructure failed: missing block: B:393:0x04d1, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:395:0x04d6, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:397:0x04d8, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:398:0x04db, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:400:0x04e3, code lost:
    
        if ("lru".equals(r6) != false) goto L315;
     */
    /* JADX WARN: Code restructure failed: missing block: B:401:0x04e5, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:402:0x04e8, code lost:
    
        monitor-enter(r35);
     */
    /* JADX WARN: Code restructure failed: missing block: B:404:0x04e9, code lost:
    
        r35.mProcessList.dumpLruLocked(r37, r8, null);
     */
    /* JADX WARN: Code restructure failed: missing block: B:406:0x04ef, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:408:0x04f4, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:410:0x04f6, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:411:0x04f9, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:413:0x0501, code lost:
    
        if ("permissions".equals(r6) != false) goto L328;
     */
    /* JADX WARN: Code restructure failed: missing block: B:417:0x0519, code lost:
    
        if ("provider".equals(r6) != false) goto L331;
     */
    /* JADX WARN: Code restructure failed: missing block: B:419:0x051c, code lost:
    
        if (r5 >= r11.length) goto L333;
     */
    /* JADX WARN: Code restructure failed: missing block: B:420:0x051e, code lost:
    
        r14 = com.android.server.am.ActivityManagerService.EMPTY_STRING_ARRAY;
        r16 = r5;
        r2 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:421:0x0538, code lost:
    
        r6 = r35.mCpHelper.mProviderMap;
        r5 = r6.mAm;
     */
    /* JADX WARN: Code restructure failed: missing block: B:423:0x053e, code lost:
    
        r5.mOomAdjuster.mCachedAppOptimizer.enableFreezer(false);
        r4 = r6.getProvidersForName(r2);
     */
    /* JADX WARN: Code restructure failed: missing block: B:424:0x054d, code lost:
    
        if (r4.size() <= 0) goto L341;
     */
    /* JADX WARN: Code restructure failed: missing block: B:425:0x054f, code lost:
    
        r5.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
        r37.println("No providers match: " + r2);
        r37.println("Use -h for help.");
     */
    /* JADX WARN: Code restructure failed: missing block: B:426:0x05ae, code lost:
    
        r5 = r16;
     */
    /* JADX WARN: Code restructure failed: missing block: B:427:0x05b0, code lost:
    
        r14 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:428:0x056d, code lost:
    
        r1 = false;
        r3 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:431:0x0575, code lost:
    
        if (r1 != false) goto L346;
     */
    /* JADX WARN: Code restructure failed: missing block: B:432:0x0577, code lost:
    
        r37.println();
     */
    /* JADX WARN: Code restructure failed: missing block: B:434:0x0586, code lost:
    
        r18 = r3;
        r19 = r4;
        r9 = r5;
        r17 = r6;
     */
    /* JADX WARN: Code restructure failed: missing block: B:436:0x0597, code lost:
    
        r6.dumpProvider(r36, r37, (com.android.server.am.ContentProviderRecord) r4.get(r3), r14, r30);
     */
    /* JADX WARN: Code restructure failed: missing block: B:437:0x059a, code lost:
    
        r3 = r18 + 1;
        r1 = true;
        r5 = r9;
        r6 = r17;
        r4 = r19;
     */
    /* JADX WARN: Code restructure failed: missing block: B:439:0x05a4, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:440:0x05b3, code lost:
    
        r9.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
     */
    /* JADX WARN: Code restructure failed: missing block: B:441:0x05ba, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:443:0x05a6, code lost:
    
        r5.mOomAdjuster.mCachedAppOptimizer.enableFreezer(true);
     */
    /* JADX WARN: Code restructure failed: missing block: B:445:0x057b, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:446:0x057c, code lost:
    
        r9 = r5;
     */
    /* JADX WARN: Code restructure failed: missing block: B:447:0x0525, code lost:
    
        r2 = r11[r5];
        r5 = r4 + 2;
        r3 = new java.lang.String[r11.length - r5];
     */
    /* JADX WARN: Code restructure failed: missing block: B:448:0x052e, code lost:
    
        if (r11.length > 2) goto L336;
     */
    /* JADX WARN: Code restructure failed: missing block: B:449:0x0530, code lost:
    
        java.lang.System.arraycopy(r11, r5, r3, 0, r11.length - r5);
     */
    /* JADX WARN: Code restructure failed: missing block: B:450:0x0535, code lost:
    
        r14 = r3;
        r16 = r5;
     */
    /* JADX WARN: Code restructure failed: missing block: B:452:0x05c2, code lost:
    
        if ("providers".equals(r6) != false) goto L364;
     */
    /* JADX WARN: Code restructure failed: missing block: B:456:0x05da, code lost:
    
        if ("service".equals(r6) != false) goto L367;
     */
    /* JADX WARN: Code restructure failed: missing block: B:458:0x05dd, code lost:
    
        if (r5 >= r11.length) goto L369;
     */
    /* JADX WARN: Code restructure failed: missing block: B:459:0x05df, code lost:
    
        r6 = com.android.server.am.ActivityManagerService.EMPTY_STRING_ARRAY;
        r14 = r5;
        r9 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:460:0x05f6, code lost:
    
        if (r3 == (-1)) goto L375;
     */
    /* JADX WARN: Code restructure failed: missing block: B:461:0x05f8, code lost:
    
        r5 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:463:0x060c, code lost:
    
        if (r35.mServices.dumpService(r36, r37, r9, r5, r6, r30) == false) goto L379;
     */
    /* JADX WARN: Code restructure failed: missing block: B:464:0x060e, code lost:
    
        r37.println("No services match: " + r9);
        r37.println("Use -h for help.");
     */
    /* JADX WARN: Code restructure failed: missing block: B:465:0x0624, code lost:
    
        r5 = r14;
     */
    /* JADX WARN: Code restructure failed: missing block: B:466:0x05fa, code lost:
    
        r5 = new int[]{r3};
     */
    /* JADX WARN: Code restructure failed: missing block: B:467:0x05e5, code lost:
    
        r5 = r11[r5];
        r4 = r4 + 2;
        r6 = new java.lang.String[r11.length - r4];
     */
    /* JADX WARN: Code restructure failed: missing block: B:468:0x05ed, code lost:
    
        if (r11.length > 2) goto L372;
     */
    /* JADX WARN: Code restructure failed: missing block: B:469:0x05ef, code lost:
    
        java.lang.System.arraycopy(r11, r4, r6, 0, r11.length - r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:470:0x05f4, code lost:
    
        r14 = r4;
        r9 = r5;
     */
    /* JADX WARN: Code restructure failed: missing block: B:472:0x062d, code lost:
    
        if ("package".equals(r6) != false) goto L383;
     */
    /* JADX WARN: Code restructure failed: missing block: B:474:0x0630, code lost:
    
        if (r5 >= r11.length) goto L385;
     */
    /* JADX WARN: Code restructure failed: missing block: B:475:0x0632, code lost:
    
        r37.println("package: no package name specified");
        r37.println("Use -h for help.");
        r7 = 0;
        r10 = r5;
     */
    /* JADX WARN: Code restructure failed: missing block: B:476:0x0650, code lost:
    
        r5 = r10;
        r14 = null;
        r10 = r7;
     */
    /* JADX WARN: Code restructure failed: missing block: B:477:0x0640, code lost:
    
        r8 = r11[r5];
        r4 = r4 + 2;
        r2 = new java.lang.String[r11.length - r4];
     */
    /* JADX WARN: Code restructure failed: missing block: B:478:0x0648, code lost:
    
        if (r11.length > 2) goto L388;
     */
    /* JADX WARN: Code restructure failed: missing block: B:479:0x064a, code lost:
    
        java.lang.System.arraycopy(r11, r4, r2, 0, r11.length - r4);
     */
    /* JADX WARN: Code restructure failed: missing block: B:480:0x064f, code lost:
    
        r11 = r2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:482:0x065c, code lost:
    
        if ("associations".equals(r6) != false) goto L395;
     */
    /* JADX WARN: Code restructure failed: missing block: B:486:0x0675, code lost:
    
        if ("settings".equals(r6) != false) goto L398;
     */
    /* JADX WARN: Code restructure failed: missing block: B:487:0x0677, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:488:0x067a, code lost:
    
        monitor-enter(r35);
     */
    /* JADX WARN: Code restructure failed: missing block: B:490:0x067b, code lost:
    
        r35.mConstants.dump(r37);
     */
    /* JADX WARN: Code restructure failed: missing block: B:492:0x0681, code lost:
    
        resetPriorityAfterLockedSection();
        r1 = r35.mProcLock;
        boostPriorityForProcLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:493:0x0689, code lost:
    
        monitor-enter(r1);
     */
    /* JADX WARN: Code restructure failed: missing block: B:495:0x068a, code lost:
    
        r35.mOomAdjuster.dumpCachedAppOptimizerSettings(r37);
        r35.mOomAdjuster.dumpCacheOomRankerSettings(r37);
     */
    /* JADX WARN: Code restructure failed: missing block: B:497:0x0695, code lost:
    
        resetPriorityAfterProcLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:498:0x0698, code lost:
    
        r15 = r5;
        r16 = r8;
        r17 = 0;
        r14 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:500:0x06a0, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:502:0x06a2, code lost:
    
        resetPriorityAfterProcLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:503:0x06a5, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:505:0x06a6, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:507:0x06a8, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:508:0x06ab, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:510:0x06b3, code lost:
    
        if ("timers".equals(r6) != false) goto L418;
     */
    /* JADX WARN: Code restructure failed: missing block: B:511:0x06b5, code lost:
    
        com.android.server.utils.AnrTimer.dump(r37, true, com.android.server.utils.AnrTimer.sDefaultInjector);
     */
    /* JADX WARN: Code restructure failed: missing block: B:513:0x06c2, code lost:
    
        if ("services".equals(r6) != false) goto L423;
     */
    /* JADX WARN: Code restructure failed: missing block: B:517:0x06db, code lost:
    
        if ("locks".equals(r6) != false) goto L426;
     */
    /* JADX WARN: Code restructure failed: missing block: B:518:0x06dd, code lost:
    
        r1 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:519:0x06de, code lost:
    
        r2 = com.android.server.LockGuard.sKnown;
     */
    /* JADX WARN: Code restructure failed: missing block: B:520:0x06e4, code lost:
    
        if (r1 < r2.size()) goto L429;
     */
    /* JADX WARN: Code restructure failed: missing block: B:521:0x06e6, code lost:
    
        r3 = r2.keyAt(r1);
        r2 = (com.android.server.LockGuard.LockInfo) r2.valueAt(r1);
        r37.println("Lock " + com.android.server.LockGuard.lockToString(r3) + ":");
        r3 = 0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:524:0x0713, code lost:
    
        r37.println("  Child " + com.android.server.LockGuard.lockToString(r2.children.valueAt(r3)));
        r3 = r3 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:526:0x0730, code lost:
    
        r37.println();
        r1 = r1 + 1;
     */
    /* JADX WARN: Code restructure failed: missing block: B:529:0x073c, code lost:
    
        if ("users".equals(r6) != false) goto L436;
     */
    /* JADX WARN: Code restructure failed: missing block: B:530:0x073e, code lost:
    
        r35.dumpUsers(r37);
     */
    /* JADX WARN: Code restructure failed: missing block: B:532:0x074a, code lost:
    
        if ("start-info".equals(r6) != false) goto L439;
     */
    /* JADX WARN: Code restructure failed: missing block: B:534:0x074d, code lost:
    
        if (r5 < r11.length) goto L441;
     */
    /* JADX WARN: Code restructure failed: missing block: B:535:0x074f, code lost:
    
        r8 = r11[r5];
        r5 = r4 + 2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:536:0x0753, code lost:
    
        r35.mProcessList.mAppStartInfoTracker.dumpHistoryProcessStartInfo(r37, r8);
     */
    /* JADX WARN: Code restructure failed: missing block: B:538:0x0763, code lost:
    
        if ("exit-info".equals(r6) != false) goto L445;
     */
    /* JADX WARN: Code restructure failed: missing block: B:540:0x0766, code lost:
    
        if (r5 < r11.length) goto L447;
     */
    /* JADX WARN: Code restructure failed: missing block: B:541:0x0768, code lost:
    
        r8 = r11[r5];
        r5 = r4 + 2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:542:0x076c, code lost:
    
        r35.mProcessList.mAppExitInfoTracker.dumpHistoryProcessExitInfo(r37, r8);
     */
    /* JADX WARN: Code restructure failed: missing block: B:544:0x077c, code lost:
    
        if ("component-alias".equals(r6) != false) goto L451;
     */
    /* JADX WARN: Code restructure failed: missing block: B:545:0x077e, code lost:
    
        r35.mComponentAliasResolver.dump(r37);
     */
    /* JADX WARN: Code restructure failed: missing block: B:547:0x078c, code lost:
    
        if ("lmkdset".equals(r6) == false) goto L457;
     */
    /* JADX WARN: Code restructure failed: missing block: B:550:0x0792, code lost:
    
        r1.dumpLMKDParameter(r37);
     */
    /* JADX WARN: Code restructure failed: missing block: B:552:0x079e, code lost:
    
        if ("mars".equals(r6) != false) goto L459;
     */
    /* JADX WARN: Code restructure failed: missing block: B:553:0x07a0, code lost:
    
        r1 = com.android.server.am.MARsPolicyManager.MARs_ENABLE;
        com.android.server.am.MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE.dumpMARsCommand(r37, r11);
     */
    /* JADX WARN: Code restructure failed: missing block: B:555:0x07b0, code lost:
    
        if ("freecess".equals(r6) != false) goto L462;
     */
    /* JADX WARN: Code restructure failed: missing block: B:556:0x07b2, code lost:
    
        r1 = com.android.server.am.FreecessController.IS_MINIMIZE_OLAF_LOCK;
        com.android.server.am.FreecessController.FreecessControllerHolder.INSTANCE.dumpFreecessCommand(r37, r11);
     */
    /* JADX WARN: Code restructure failed: missing block: B:558:0x07c2, code lost:
    
        if ("pageboost".equals(r6) != false) goto L465;
     */
    /* JADX WARN: Code restructure failed: missing block: B:559:0x07c4, code lost:
    
        com.android.server.am.Pageboost.dumpInfo(r37, r38);
     */
    /* JADX WARN: Code restructure failed: missing block: B:561:0x07cb, code lost:
    
        if (com.android.server.am.KillPolicyManager.sPmmEnabledBySpcm == false) goto L482;
     */
    /* JADX WARN: Code restructure failed: missing block: B:564:0x07d6, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:565:0x07d9, code lost:
    
        monitor-enter(r35);
     */
    /* JADX WARN: Code restructure failed: missing block: B:567:0x07da, code lost:
    
        r1 = r35.mKillPolicyManager;
     */
    /* JADX WARN: Code restructure failed: missing block: B:568:0x07dc, code lost:
    
        if (r1 != null) goto L474;
     */
    /* JADX WARN: Code restructure failed: missing block: B:569:0x07de, code lost:
    
        r1.dump(r37, r11);
     */
    /* JADX WARN: Code restructure failed: missing block: B:571:0x07e5, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:573:0x07e2, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:576:0x07eb, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:577:0x07ee, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:579:0x080b, code lost:
    
        if (((com.android.server.wm.ActivityTaskManagerService.LocalService) r35.mAtmInternal).this$0.dumpActivity(r36, r37, r6, r38, r5, r30, r21, r22, r27, r3, 5000) == false) goto L484;
     */
    /* JADX WARN: Code restructure failed: missing block: B:580:0x080d, code lost:
    
        r14 = null;
        r39 = r5;
        r16 = r8;
     */
    /* JADX WARN: Code restructure failed: missing block: B:581:0x082c, code lost:
    
        if (new com.android.server.am.ActivityManagerShellCommand(r35, true).exec(r35, (java.io.FileDescriptor) null, r36, (java.io.FileDescriptor) null, r38, (android.os.ShellCallback) null, new android.os.ResultReceiver(null)) < 0) goto L486;
     */
    /* JADX WARN: Code restructure failed: missing block: B:582:0x082e, code lost:
    
        r37.println("Bad activity command, or no activities match: " + r6);
        r37.println("Use -h for help.");
     */
    /* JADX WARN: Code restructure failed: missing block: B:583:0x0844, code lost:
    
        r15 = r39;
     */
    /* JADX WARN: Code restructure failed: missing block: B:584:0x06cd, code lost:
    
        r39 = r5;
        r16 = r8;
        r14 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:585:0x0848, code lost:
    
        if (r28 != false) goto L489;
     */
    /* JADX WARN: Code restructure failed: missing block: B:586:0x084a, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:587:0x084d, code lost:
    
        monitor-enter(r35);
     */
    /* JADX WARN: Code restructure failed: missing block: B:589:0x084e, code lost:
    
        r2 = r35.mServices;
        r2.getClass();
        r9 = new com.android.server.am.ActiveServices.ServiceDumper(r2, r36, r37, r38, r39, true, r16);
     */
    /* JADX WARN: Code restructure failed: missing block: B:591:0x0865, code lost:
    
        resetPriorityAfterLockedSection();
        r9.dumpWithClient();
     */
    /* JADX WARN: Code restructure failed: missing block: B:593:0x086c, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:595:0x086e, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:596:0x0871, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:597:0x0872, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:598:0x0875, code lost:
    
        monitor-enter(r35);
     */
    /* JADX WARN: Code restructure failed: missing block: B:600:0x0876, code lost:
    
        r2 = r35.mServices;
        r2.getClass();
        new com.android.server.am.ActiveServices.ServiceDumper(r2, r36, r37, r38, r39, true, r16).dumpLocked();
     */
    /* JADX WARN: Code restructure failed: missing block: B:602:0x0890, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:604:0x0894, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:606:0x0896, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:607:0x0899, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:608:0x0667, code lost:
    
        r39 = r5;
        r16 = r8;
        r14 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:609:0x089a, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:610:0x089d, code lost:
    
        monitor-enter(r35);
     */
    /* JADX WARN: Code restructure failed: missing block: B:611:0x089e, code lost:
    
        r9 = r16;
     */
    /* JADX WARN: Code restructure failed: missing block: B:613:0x08a0, code lost:
    
        r35.dumpAssociationsLocked(r37, r9);
     */
    /* JADX WARN: Code restructure failed: missing block: B:615:0x08a4, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:616:0x08a7, code lost:
    
        r15 = r39;
        r16 = r9;
     */
    /* JADX WARN: Code restructure failed: missing block: B:618:0x08ad, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:620:0x08af, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:621:0x08b2, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:622:0x05cd, code lost:
    
        r39 = r5;
        r9 = r8;
        r14 = null;
     */
    /* JADX WARN: Code restructure failed: missing block: B:623:0x08b3, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:624:0x08b6, code lost:
    
        monitor-enter(r35);
     */
    /* JADX WARN: Code restructure failed: missing block: B:626:0x08b7, code lost:
    
        r35.mCpHelper.dumpProvidersLocked(r37, r38, r39, true, r9);
     */
    /* JADX WARN: Code restructure failed: missing block: B:628:0x08c5, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:630:0x08c9, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:632:0x08cb, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:633:0x08ce, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:634:0x050c, code lost:
    
        r39 = r5;
        r14 = null;
        r9 = r8;
     */
    /* JADX WARN: Code restructure failed: missing block: B:635:0x08cf, code lost:
    
        r35.dumpPermissions(r37, r9, true);
     */
    /* JADX WARN: Code restructure failed: missing block: B:636:0x04ba, code lost:
    
        r39 = r5;
        r14 = null;
        r9 = r8;
     */
    /* JADX WARN: Code restructure failed: missing block: B:637:0x08d3, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:638:0x08d6, code lost:
    
        monitor-enter(r35);
     */
    /* JADX WARN: Code restructure failed: missing block: B:640:0x08d7, code lost:
    
        r35.mProcessList.dumpOomLocked(r37, r9, false);
     */
    /* JADX WARN: Code restructure failed: missing block: B:642:0x08dd, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:644:0x08e1, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:646:0x08e3, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:647:0x08e6, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:648:0x04a2, code lost:
    
        r14 = null;
        r9 = r8;
     */
    /* JADX WARN: Code restructure failed: missing block: B:650:0x08ea, code lost:
    
        if (r5 < r11.length) goto L539;
     */
    /* JADX WARN: Code restructure failed: missing block: B:651:0x08ec, code lost:
    
        r9 = r4 + 2;
        r15 = r11[r5];
     */
    /* JADX WARN: Code restructure failed: missing block: B:652:0x08f5, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:653:0x08f8, code lost:
    
        monitor-enter(r35);
     */
    /* JADX WARN: Code restructure failed: missing block: B:655:0x08f9, code lost:
    
        r8 = r35.mProcLock;
        boostPriorityForProcLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:657:0x08fe, code lost:
    
        monitor-enter(r8);
     */
    /* JADX WARN: Code restructure failed: missing block: B:661:0x090d, code lost:
    
        r35.mProcessList.dumpProcessesLSP(r36, r37, r38, r9, true, r15, r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:663:0x0911, code lost:
    
        resetPriorityAfterProcLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:665:0x0915, code lost:
    
        resetPriorityAfterLockedSection();
        r5 = r9;
        r8 = r15;
     */
    /* JADX WARN: Code restructure failed: missing block: B:667:0x0920, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:670:0x0924, code lost:
    
        resetPriorityAfterProcLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:671:0x0927, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:672:0x091e, code lost:
    
        r0 = th;
     */
    /* JADX WARN: Code restructure failed: missing block: B:673:0x091c, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:675:0x0929, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:676:0x092c, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:677:0x08f3, code lost:
    
        r15 = r9;
        r9 = r5;
     */
    /* JADX WARN: Code restructure failed: missing block: B:678:0x048b, code lost:
    
        r14 = null;
        r9 = r8;
     */
    /* JADX WARN: Code restructure failed: missing block: B:680:0x092e, code lost:
    
        if (r5 < r11.length) goto L566;
     */
    /* JADX WARN: Code restructure failed: missing block: B:681:0x0930, code lost:
    
        r8 = r11[r5];
        r5 = r4 + 2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:682:0x0937, code lost:
    
        r35.mPendingIntentController.dumpPendingIntents(r37, r8, true);
     */
    /* JADX WARN: Code restructure failed: missing block: B:683:0x0935, code lost:
    
        r5 = r5;
        r8 = r9;
     */
    /* JADX WARN: Code restructure failed: missing block: B:684:0x0435, code lost:
    
        r14 = null;
        r9 = r8;
        r8 = r5;
     */
    /* JADX WARN: Code restructure failed: missing block: B:686:0x093e, code lost:
    
        if (r8 < r11.length) goto L571;
     */
    /* JADX WARN: Code restructure failed: missing block: B:687:0x0940, code lost:
    
        r9 = r11[r8];
        r8 = r4 + 2;
     */
    /* JADX WARN: Code restructure failed: missing block: B:688:0x0946, code lost:
    
        boostPriorityForLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:689:0x0949, code lost:
    
        monitor-enter(r35);
     */
    /* JADX WARN: Code restructure failed: missing block: B:692:0x0955, code lost:
    
        r35.dumpBroadcastsLocked(r36, r37, r38, r8, true, r9);
     */
    /* JADX WARN: Code restructure failed: missing block: B:694:0x0959, code lost:
    
        resetPriorityAfterLockedSection();
        r5 = r8;
        r8 = r9;
     */
    /* JADX WARN: Code restructure failed: missing block: B:696:0x095f, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:698:0x0961, code lost:
    
        resetPriorityAfterLockedSection();
     */
    /* JADX WARN: Code restructure failed: missing block: B:699:0x0964, code lost:
    
        throw r0;
     */
    /* JADX WARN: Code restructure failed: missing block: B:700:0x0965, code lost:
    
        r14 = null;
        r9 = r8;
        r15 = r5;
        r16 = r9;
        r17 = 0;
        r35.mAtmInternal.dump(r6, r36, r37, r38, r5, true, r28, r9, r27);
     */
    /* JADX WARN: Code restructure failed: missing block: B:701:0x098f, code lost:
    
        r14 = null;
        r5 = r4;
        r4 = r11;
        r7 = r8;
     */
    /* JADX WARN: Code restructure failed: missing block: B:703:0x016b, code lost:
    
        r0 = new android.content.Intent();
        r0.setClassName("com.samsung.android.da.daagent", "com.samsung.android.da.daagent.service.DADebugService");
        r35.mContext.startServiceAsUser(r0, android.os.UserHandle.OWNER);
     */
    /* JADX WARN: Code restructure failed: missing block: B:705:0x0181, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:706:0x0182, code lost:
    
        r0.printStackTrace();
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:125:0x018b  */
    /* JADX WARN: Removed duplicated region for block: B:182:0x0287  */
    /* JADX WARN: Removed duplicated region for block: B:183:0x0293  */
    /* JADX WARN: Removed duplicated region for block: B:250:0x0355  */
    /* JADX WARN: Removed duplicated region for block: B:285:0x0987 A[DONT_GENERATE] */
    /* JADX WARN: Removed duplicated region for block: B:287:0x098c  */
    /* JADX WARN: Removed duplicated region for block: B:702:0x016b A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* renamed from: -$$Nest$mdoDump, reason: not valid java name */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public static void m166$$Nest$mdoDump(com.android.server.am.ActivityManagerService r35, java.io.FileDescriptor r36, java.io.PrintWriter r37, java.lang.String[] r38, boolean r39) {
        /*
            Method dump skipped, instructions count: 2584
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.m166$$Nest$mdoDump(com.android.server.am.ActivityManagerService, java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[], boolean):void");
    }

    /* renamed from: -$$Nest$mhandleBinderHeavyHitterAutoSamplerTimeOut, reason: not valid java name */
    public static void m167$$Nest$mhandleBinderHeavyHitterAutoSamplerTimeOut(ActivityManagerService activityManagerService) {
        ActivityManagerProcLock activityManagerProcLock = activityManagerService.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                if (ActivityManagerConstants.BINDER_HEAVY_HITTER_WATCHER_ENABLED) {
                    resetPriorityAfterProcLockedSection();
                } else {
                    resetPriorityAfterProcLockedSection();
                    Binder.setHeavyHitterWatcherConfig(false, 0, FullScreenMagnificationGestureHandler.MAX_SCALE, null);
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    /* renamed from: -$$Nest$mhandleFollowUpOomAdjusterUpdate, reason: not valid java name */
    public static void m168$$Nest$mhandleFollowUpOomAdjusterUpdate(ActivityManagerService activityManagerService) {
        activityManagerService.mHandler.removeMessages(86);
        boostPriorityForLockedSection();
        synchronized (activityManagerService) {
            try {
                activityManagerService.mOomAdjuster.updateOomAdjFollowUpTargetsLocked();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* renamed from: -$$Nest$smfetchLogcatBuffers, reason: not valid java name */
    public static void m169$$Nest$smfetchLogcatBuffers(StringBuilder sb, int i, int i2, List list) {
        if (list.size() == 0 || i <= 0 || i2 <= 0) {
            return;
        }
        ArrayList arrayList = new ArrayList((list.size() * 2) + 10);
        arrayList.add("/system/bin/timeout");
        arrayList.add("-i");
        arrayList.add("-s");
        arrayList.add("SEGV");
        arrayList.add(i2 + "s");
        arrayList.add("/system/bin/logcat");
        arrayList.add("-v");
        arrayList.add("threadtime,UTC");
        Iterator it = list.iterator();
        while (it.hasNext()) {
            String str = (String) it.next();
            arrayList.add("-b");
            arrayList.add(str);
        }
        arrayList.add("-t");
        arrayList.add(String.valueOf(i));
        try {
            Process start = new ProcessBuilder(arrayList).redirectErrorStream(true).start();
            try {
                start.getOutputStream().close();
            } catch (IOException unused) {
            }
            InputStreamReader inputStreamReader = new InputStreamReader(start.getInputStream());
            try {
                char[] cArr = new char[8192];
                while (true) {
                    int read = inputStreamReader.read(cArr, 0, 8192);
                    if (read <= 0) {
                        inputStreamReader.close();
                        return;
                    }
                    sb.append(cArr, 0, read);
                }
            } finally {
            }
        } catch (IOException e) {
            Slog.e("ActivityManager", "Error running logcat", e);
        }
    }

    static {
        int i = Build.HW_TIMEOUT_MULTIPLIER;
        int i2 = i * 10000;
        PROC_START_TIMEOUT = i2;
        BIND_APPLICATION_TIMEOUT = i * 15000;
        BROADCAST_FG_TIMEOUT = i2;
        BROADCAST_BG_TIMEOUT = i * 60000;
        MY_PID = Process.myPid();
        EMPTY_STRING_ARRAY = new String[0];
        DROPBOX_TIME_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSSZ");
        USER_BUILD = "user".equals(Build.TYPE);
        SHIP_BUILD = "true".equals(SystemProperties.get("ro.product_ship", "false"));
        String str = SystemProperties.get("ro.boot.debug_level", "Unknown");
        DEBUG_LEVEL_LOW = "0x4f4c".equalsIgnoreCase(str);
        "0x494d".equalsIgnoreCase(str);
        "0x4948".equalsIgnoreCase(str);
        sThreadPriorityBooster = new ThreadPriorityBooster(-2, 7);
        sProcThreadPriorityBooster = new ThreadPriorityBooster(-2, 6);
        sActiveProcessInfoSelfLocked = new SparseArray();
        FAKE_TEMP_ALLOW_LIST_ITEM = new FgsTempAllowListItem(300, -1, Long.MAX_VALUE, "");
        sTheRealBuildSerial = "unknown";
        sNullHostingRecord = new HostingRecord("");
        new ArrayList();
        DUMP_MEM_BUCKETS = new long[]{5120, 7168, 10240, 15360, 20480, 30720, 40960, 81920, 122880, 163840, 204800, 256000, 307200, 358400, 409600, 512000, 614400, 819200, 1048576, 2097152, 5242880, 10485760, 20971520};
        DUMP_MEM_OOM_ADJ = new int[]{-1000, -900, -800, -700, 0, 100, 200, 225, FrameworkStatsLog.CAMERA_SHOT_LATENCY_REPORTED__MODE__CONTROL_DS_MODE_MACRO_RAW_SR_MERGE, 300, 400, 500, 600, 700, 800, FrameworkStatsLog.VPN_CONNECTION_STATE_CHANGED, FrameworkStatsLog.CAMERA_FEATURE_COMBINATION_QUERY_EVENT};
        DUMP_MEM_OOM_LABEL = new String[]{"Native", "System", "Persistent", "Persistent Service", "Foreground", "Visible", "Perceptible", "Perceptible Medium", "Perceptible Low", "Backup", "Heavy Weight", "A Services", "Home", "Previous", "B Services", "Picked", "Cached"};
        DUMP_MEM_OOM_COMPACT_LABEL = new String[]{"native", "sys", "pers", "persvc", "fore", "vis", "percept", "perceptm", "perceptl", "backup", "heavy", "servicea", "home", "prev", "serviceb", "picked", "cached"};
    }

    /* JADX WARN: Can't wrap try/catch for region: R(43:0|1|(1:3)|4|(1:6)|7|(1:9)(1:255)|10|2eb|15|(1:17)(1:250)|18|(3:20|(1:22)|23)|24|(1:26)|27|(2:30|28)|31|32|(3:34|35|(19:37|38|39|40|(1:220)(3:44|45|46)|47|48|(2:50|51)|53|(1:55)|56|(5:165|166|167|(2:169|(8:171|172|173|174|175|176|(1:178)|179))|202)|60|(5:132|133|134|(2:136|(7:138|139|140|141|142|(1:144)|145))|162)|64|65|66|67|(17:69|(1:(2:71|(1:74)(1:73))(2:127|128))|75|(4:77|(1:125)(1:80)|81|(2:118|(1:120)(2:121|(1:123)(1:124)))(1:84))(1:126)|85|86|87|88|(3:90|(2:92|93)(1:95)|94)|97|98|(2:100|(1:103)(1:102))|115|104|(3:109|110|(1:112))|106|107)(1:129)))|249|53|(0)|56|(1:58)|165|166|167|(0)|202|60|(1:62)|132|133|134|(0)|162|64|65|66|67|(0)(0)|(2:(0)|(1:198))) */
    /* JADX WARN: Code restructure failed: missing block: B:131:0x077e, code lost:
    
        android.util.Slog.w("ActivityManager", "Setting background thread cpuset failed");
     */
    /* JADX WARN: Code restructure failed: missing block: B:163:0x0753, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:164:0x0754, code lost:
    
        r0.printStackTrace();
     */
    /* JADX WARN: Code restructure failed: missing block: B:203:0x06a4, code lost:
    
        r0 = move-exception;
     */
    /* JADX WARN: Code restructure failed: missing block: B:204:0x06a5, code lost:
    
        r0.printStackTrace();
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:129:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:136:0x0708 A[Catch: Exception -> 0x0753, TRY_LEAVE, TryCatch #19 {Exception -> 0x0753, blocks: (B:134:0x06fd, B:136:0x0708), top: B:133:0x06fd }] */
    /* JADX WARN: Removed duplicated region for block: B:169:0x0655 A[Catch: Exception -> 0x06a4, TRY_LEAVE, TryCatch #15 {Exception -> 0x06a4, blocks: (B:167:0x064a, B:169:0x0655), top: B:166:0x064a }] */
    /* JADX WARN: Removed duplicated region for block: B:178:0x0684 A[Catch: Exception -> 0x0697, TryCatch #17 {Exception -> 0x0697, blocks: (B:178:0x0684, B:179:0x0688, B:186:0x067f), top: B:185:0x067f }] */
    /* JADX WARN: Removed duplicated region for block: B:55:0x061f  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x062f  */
    /* JADX WARN: Removed duplicated region for block: B:62:0x06e9  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x07df  */
    /* JADX WARN: Type inference failed for: r12v13, types: [com.android.server.am.ActivityManagerService$2] */
    /* JADX WARN: Type inference failed for: r12v3, types: [com.android.server.am.ActivityManagerService$1] */
    /* JADX WARN: Type inference failed for: r4v26, types: [boolean] */
    /* JADX WARN: Type inference failed for: r7v5, types: [boolean] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public ActivityManagerService(android.content.Context r18, com.android.server.wm.ActivityTaskManagerService r19) {
        /*
            Method dump skipped, instructions count: 2420
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.<init>(android.content.Context, com.android.server.wm.ActivityTaskManagerService):void");
    }

    public ActivityManagerService(Injector injector, ServiceThread serviceThread) {
        this(injector, serviceThread, null);
    }

    /* JADX WARN: Type inference failed for: r3v13, types: [com.android.server.am.ActivityManagerService$2] */
    /* JADX WARN: Type inference failed for: r3v3, types: [com.android.server.am.ActivityManagerService$1] */
    public ActivityManagerService(Injector injector, ServiceThread serviceThread, UserController userController) {
        this.isNowAppLaunching = new AtomicBoolean(false);
        this.mInstrumentationReporter = new InstrumentationReporter();
        this.mActiveInstrumentation = new ArrayList();
        this.mProcLock = new ActivityManagerProcLock();
        this.mAllowSpecifiedFifoScheduling = true;
        this.mStrictModeCallbacks = new SparseArray();
        this.mProcessCpusetController = null;
        this.mKillPolicyManager = null;
        this.currentLauncherName = null;
        this.mProcessCpuTracker = new ProcessCpuTracker(false);
        this.mApplicationPolicy = null;
        this.mRestrictionPolicy = null;
        this.mPreviousPackage = "";
        this.mCurrentPackage = "";
        this.mPreviousUserId = 0;
        this.mDeviceOwnerUid = -1;
        this.mCompanionAppUidsMap = new ArrayMap();
        this.mProfileOwnerUids = null;
        this.mDeliveryGroupPolicyIgnoredActions = new ArraySet();
        this.mActiveCameraUids = new IntArray(4);
        this.mPriorityDumper = new PriorityDump.PriorityDumper() { // from class: com.android.server.am.ActivityManagerService.1
            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public final void dump(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, boolean z) {
                ActivityManagerService.m166$$Nest$mdoDump(ActivityManagerService.this, fileDescriptor, printWriter, strArr, z);
            }

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public final void dumpCritical(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, boolean z) {
                if (z) {
                    return;
                }
                ActivityManagerService activityManagerService = ActivityManagerService.this;
                ActivityManagerService.m166$$Nest$mdoDump(activityManagerService, fileDescriptor, printWriter, new String[]{"activities"}, z);
                ActivityManagerService.m166$$Nest$mdoDump(activityManagerService, fileDescriptor, printWriter, new String[]{"service", "all-platform-critical"}, z);
            }

            @Override // com.android.server.utils.PriorityDump.PriorityDumper
            public final void dumpNormal(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, boolean z) {
                ActivityManagerService.m166$$Nest$mdoDump(ActivityManagerService.this, fileDescriptor, printWriter, new String[]{"-a", "--normal-priority"}, z);
            }
        };
        this.mDvfsMgr = null;
        this.mBackgroundAppIdAllowlist = new int[]{1002};
        new AtomicBoolean(false);
        new HashSet();
        this.mPidsSelfLocked = new PidMap();
        this.mImportantProcesses = new SparseArray();
        this.mSpecifiedFifoProcesses = new ArrayList();
        this.mProcessesOnHold = new ArrayList();
        this.mPersistentStartingProcesses = new ArrayList();
        this.mActivityLaunchObserver = new ActivityMetricsLaunchObserver() { // from class: com.android.server.am.ActivityManagerService.2
            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public final void onActivityLaunchCancelled(long j) {
                ActivityManagerService.this.isNowAppLaunching.set(false);
                AppStartInfoTracker appStartInfoTracker = ActivityManagerService.this.mProcessList.mAppStartInfoTracker;
                synchronized (appStartInfoTracker.mLock) {
                    try {
                        if (appStartInfoTracker.mEnabled) {
                            int indexOfKey = appStartInfoTracker.mInProgressRecords.indexOfKey(Long.valueOf(j));
                            if (indexOfKey < 0) {
                                return;
                            }
                            ApplicationStartInfo applicationStartInfo = (ApplicationStartInfo) appStartInfoTracker.mInProgressRecords.valueAt(indexOfKey);
                            if (applicationStartInfo == null) {
                                appStartInfoTracker.mInProgressRecords.removeAt(indexOfKey);
                            } else {
                                applicationStartInfo.setStartupState(1);
                                appStartInfoTracker.mInProgressRecords.removeAt(indexOfKey);
                            }
                        }
                    } finally {
                    }
                }
            }

            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public final void onActivityLaunchFinished(long j, ComponentName componentName, long j2, int i) {
                ActivityManagerService.this.isNowAppLaunching.set(false);
                AppStartInfoTracker appStartInfoTracker = ActivityManagerService.this.mProcessList.mAppStartInfoTracker;
                synchronized (appStartInfoTracker.mLock) {
                    try {
                        if (appStartInfoTracker.mEnabled) {
                            int indexOfKey = appStartInfoTracker.mInProgressRecords.indexOfKey(Long.valueOf(j));
                            if (indexOfKey < 0) {
                                return;
                            }
                            ApplicationStartInfo applicationStartInfo = (ApplicationStartInfo) appStartInfoTracker.mInProgressRecords.valueAt(indexOfKey);
                            if (applicationStartInfo == null) {
                                appStartInfoTracker.mInProgressRecords.removeAt(indexOfKey);
                                return;
                            }
                            applicationStartInfo.setLaunchMode(i);
                            if (!android.app.Flags.appStartInfoTimestamps()) {
                                applicationStartInfo.setStartupState(2);
                                appStartInfoTracker.checkCompletenessAndCallback(applicationStartInfo);
                            }
                        }
                    } finally {
                    }
                }
            }

            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public final void onActivityLaunched(int i, int i2, long j, ComponentName componentName) {
                ProcessRecord processRecord;
                AppProfiler appProfiler = ActivityManagerService.this.mAppProfiler;
                if (appProfiler.mPssDeferralTime > 0) {
                    appProfiler.mBgHandler.sendMessageAtFrontOfQueue(appProfiler.mBgHandler.obtainMessage(2));
                }
                ActivityManagerService.this.isNowAppLaunching.set(true);
                ActivityManagerService activityManagerService = ActivityManagerService.this;
                ActivityManagerService.boostPriorityForLockedSection();
                synchronized (activityManagerService) {
                    try {
                        try {
                            ActivityManagerService activityManagerService2 = ActivityManagerService.this;
                            processRecord = activityManagerService2.mProcessList.getProcessRecordLocked(ActivityManagerService.this.mContext.getPackageManager().getPackageUidAsUser(componentName.getPackageName(), 0, i2), componentName.getPackageName());
                        } catch (Throwable th) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            throw th;
                        }
                    } catch (PackageManager.NameNotFoundException unused) {
                        processRecord = null;
                    }
                    ActivityManagerService.this.mProcessList.mAppStartInfoTracker.onActivityLaunched(j, i, processRecord);
                }
                ActivityManagerService.resetPriorityAfterLockedSection();
            }

            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public final void onIntentFailed(long j) {
                AppStartInfoTracker appStartInfoTracker = ActivityManagerService.this.mProcessList.mAppStartInfoTracker;
                synchronized (appStartInfoTracker.mLock) {
                    try {
                        if (appStartInfoTracker.mEnabled) {
                            int indexOfKey = appStartInfoTracker.mInProgressRecords.indexOfKey(Long.valueOf(j));
                            if (indexOfKey < 0) {
                                return;
                            }
                            ApplicationStartInfo applicationStartInfo = (ApplicationStartInfo) appStartInfoTracker.mInProgressRecords.valueAt(indexOfKey);
                            if (applicationStartInfo == null) {
                                appStartInfoTracker.mInProgressRecords.removeAt(indexOfKey);
                            } else {
                                applicationStartInfo.setStartupState(1);
                                appStartInfoTracker.mInProgressRecords.removeAt(indexOfKey);
                            }
                        }
                    } finally {
                    }
                }
            }

            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public final void onIntentStarted(Intent intent, long j) {
                synchronized (this) {
                    ActivityManagerService.this.mProcessList.mAppStartInfoTracker.onIntentStarted(intent, j);
                }
            }

            @Override // com.android.server.wm.ActivityMetricsLaunchObserver
            public final void onReportFullyDrawn(long j, long j2) {
                AppStartInfoTracker appStartInfoTracker = ActivityManagerService.this.mProcessList.mAppStartInfoTracker;
                synchronized (appStartInfoTracker.mLock) {
                    try {
                        if (appStartInfoTracker.mEnabled) {
                            int indexOfKey = appStartInfoTracker.mInProgressRecords.indexOfKey(Long.valueOf(j));
                            if (indexOfKey < 0) {
                                return;
                            }
                            ApplicationStartInfo applicationStartInfo = (ApplicationStartInfo) appStartInfoTracker.mInProgressRecords.valueAt(indexOfKey);
                            if (applicationStartInfo == null) {
                                appStartInfoTracker.mInProgressRecords.removeAt(indexOfKey);
                            } else {
                                applicationStartInfo.addStartupTimestamp(5, j2);
                                appStartInfoTracker.mInProgressRecords.removeAt(indexOfKey);
                            }
                        }
                    } finally {
                    }
                }
            }
        };
        this.mBinderTransactionTrackingEnabled = false;
        this.mAlreadyLoggedViolatedStacks = new HashSet();
        this.mRegisteredReceivers = new HashMap();
        this.mReceiverResolver = new AnonymousClass3();
        this.mStickyBroadcasts = new SparseArray();
        this.mAssociations = new SparseArray();
        this.mBackupTargets = new SparseArray();
        this.mDeviceIdleAllowlist = new int[0];
        this.mDeviceIdleExceptIdleAllowlist = new int[0];
        this.mDeviceIdleTempAllowlist = new int[0];
        this.mPendingTempAllowlist = new PendingTempAllowlists();
        this.mFgsStartTempAllowList = new FgsTempAllowList();
        this.mFgsWhileInUseTempAllowList = new FgsTempAllowList();
        this.mProcessesReady = false;
        this.mSystemReady = false;
        this.mOnBattery = false;
        this.mBooting = false;
        this.mCallFinishBooting = false;
        this.mBootAnimationComplete = false;
        this.mWakefulness = new AtomicInteger(1);
        this.mLastIdleTime = SystemClock.uptimeMillis();
        this.mCurResumedPackage = null;
        this.mCurResumedUid = -1;
        this.mCurResumedAppLock = new Object();
        this.mForegroundPackages = new ProcessMap();
        this.mForegroundServiceStateListeners = new ArrayList();
        this.mBroadcastEventListeners = new CopyOnWriteArrayList();
        this.mBindServiceEventListeners = new CopyOnWriteArrayList();
        this.mDebugApp = null;
        this.mWaitForDebugger = false;
        this.mSuspendUponWait = false;
        this.mDebugTransient = false;
        this.mOrigDebugApp = null;
        this.mOrigWaitForDebugger = false;
        this.mAlwaysFinishActivities = false;
        this.mTrackAllocationApp = null;
        this.mNativeDebuggingApp = null;
        this.mOomAdjObserverLock = new Object();
        this.mAnrHelper = new AnrHelper(this);
        this.mBooted = false;
        this.mDeterministicUidIdle = false;
        this.mUidNetworkBlockedReasons = new SparseIntArray();
        this.mMediaProjectionTokenMap = new SparseArray();
        this.mPrivateSpaceBootCompletedPackages = new ArraySet();
        this.mDynamicHiddenApp = null;
        this.mLastBinderHeavyHitterAutoSamplerStart = 0L;
        this.mPendingSches = new HashMap();
        this.mGetBackgroundStartPrivilegesFunctor = new GetBackgroundStartPrivilegesFunctor();
        this.mUidFrozenStateChangedCallbackList = new RemoteCallbackList();
        this.mDropboxRateLimiter = new DropboxRateLimiter();
        this.mPendingCmdBR = new ArrayList();
        this.mInjector = injector;
        Context context = injector.mContext;
        this.mContext = context;
        this.mUiContext = null;
        this.mAppErrors = null;
        this.mPackageWatchdog = null;
        this.mAppOpsService = new AppOpsService(null, null, null, injector.mContext);
        this.mBatteryStatsService = new BatteryStatsService(injector.mContext, SystemServiceManager.ensureSystemDir());
        UiHandler uiHandler = new UiHandler(serviceThread.getLooper());
        this.mHandler = uiHandler;
        this.mHandlerThread = serviceThread;
        ActivityManagerConstants activityManagerConstants = new ActivityManagerConstants(context, this, uiHandler);
        this.mConstants = activityManagerConstants;
        ActiveUids activeUids = new ActiveUids(this, false);
        this.mPlatformCompat = null;
        ProcessList processList = new ProcessList();
        this.mProcessList = processList;
        processList.init(this, activeUids, null);
        this.mAppProfiler = new AppProfiler(this, BackgroundThread.getHandler().getLooper(), null);
        this.mPhantomProcessList = new PhantomProcessList(this);
        this.mOomAdjuster = activityManagerConstants.ENABLE_NEW_OOMADJ ? new OomAdjusterModernImpl(this, processList, activeUids, serviceThread) : new OomAdjuster(this, processList, activeUids, serviceThread);
        this.mIntentFirewall = null;
        this.mProcessStats = new ProcessStatsService(this, context.getCacheDir());
        this.mCpHelper = new ContentProviderHelper(this, false);
        this.mServices = new ActiveServices(this);
        this.mSystemThread = null;
        throw null;
    }

    public static void addServiceToMap(ArrayMap arrayMap, String str) {
        IBinder service = ServiceManager.getService(str);
        if (service != null) {
            arrayMap.put(str, service);
        }
    }

    public static void appendBasicMemEntry(StringBuilder sb, int i, int i2, long j, long j2, String str) {
        sb.append("  ");
        sb.append(ProcessList.makeOomAdjString(i, false));
        sb.append(' ');
        sb.append(ActivityManager.procStateToString(i2));
        sb.append(' ');
        ProcessList.appendRamKb(sb, j);
        sb.append(": ");
        sb.append(str);
        if (j2 > 0) {
            sb.append(" (");
            sb.append(stringifyKBSize(j2));
            sb.append(" memtrack)");
        }
    }

    public static final void appendMemBucket(StringBuilder sb, long j, String str, boolean z) {
        int lastIndexOf = str.lastIndexOf(46);
        int i = 0;
        int i2 = lastIndexOf >= 0 ? lastIndexOf + 1 : 0;
        int length = str.length();
        while (true) {
            long[] jArr = DUMP_MEM_BUCKETS;
            if (i >= jArr.length) {
                sb.append(j / 1024);
                sb.append(z ? "MB." : "MB ");
                sb.append((CharSequence) str, i2, length);
                return;
            } else {
                long j2 = jArr[i];
                if (j2 >= j) {
                    sb.append(j2 / 1024);
                    sb.append(z ? "MB." : "MB ");
                    sb.append((CharSequence) str, i2, length);
                    return;
                }
                i++;
            }
        }
    }

    public static void appendMemInfo(StringBuilder sb, ProcessMemInfo processMemInfo) {
        long j = processMemInfo.pss;
        long j2 = processMemInfo.memtrack;
        String str = processMemInfo.name;
        appendBasicMemEntry(sb, processMemInfo.oomAdj, processMemInfo.procState, j, j2, str);
        sb.append(" (pid ");
        sb.append(processMemInfo.pid);
        sb.append(") ");
        sb.append(processMemInfo.adjType);
        sb.append('\n');
        String str2 = processMemInfo.adjReason;
        if (str2 != null) {
            sb.append("                      ");
            sb.append(str2);
            sb.append('\n');
        }
    }

    public static void appendSdkSandboxClientPackageHeader(StringBuilder sb, PackageInfo packageInfo) {
        sb.append("SdkSandbox-Client-Package: ");
        sb.append(packageInfo.packageName);
        sb.append(" v");
        sb.append(packageInfo.getLongVersionCode());
        if (packageInfo.versionName != null) {
            sb.append(" (");
            sb.append(packageInfo.versionName);
            sb.append(")");
        }
        sb.append("\n");
    }

    public static void appendSdkSandboxLibraryHeaders(StringBuilder sb, PackageInfo packageInfo) {
        List sharedLibraryInfos = packageInfo.applicationInfo.getSharedLibraryInfos();
        int size = sharedLibraryInfos.size();
        for (int i = 0; i < size; i++) {
            SharedLibraryInfo sharedLibraryInfo = (SharedLibraryInfo) sharedLibraryInfos.get(i);
            if (sharedLibraryInfo.isSdk()) {
                sb.append("SdkSandbox-Library: ");
                sb.append(sharedLibraryInfo.getPackageName());
                VersionedPackage declaringPackage = sharedLibraryInfo.getDeclaringPackage();
                sb.append(" v");
                sb.append(declaringPackage.getLongVersionCode());
                sb.append("\n");
            }
        }
    }

    public static void boostPriorityForLockedSection() {
        sThreadPriorityBooster.boost();
    }

    public static void boostPriorityForProcLockedSection() {
        sProcThreadPriorityBooster.boost();
    }

    public static int checkComponentPermission(int i, int i2, String str, int i3, int i4, boolean z) {
        ArraySet arraySet;
        if (i == MY_PID) {
            return 0;
        }
        if (str != null) {
            SparseArray sparseArray = sActiveProcessInfoSelfLocked;
            synchronized (sparseArray) {
                try {
                    ProcessInfo processInfo = (ProcessInfo) sparseArray.get(i);
                    if (processInfo != null && (arraySet = processInfo.deniedPermissions) != null && arraySet.contains(str)) {
                        return -1;
                    }
                } finally {
                }
            }
        }
        return ActivityManager.checkComponentPermission(str, i2, i3, i4, z);
    }

    public static void checkTime(long j, String str) {
        long uptimeMillis = SystemClock.uptimeMillis() - j;
        if (uptimeMillis > 50) {
            StringBuilder sb = new StringBuilder("Slow operation: ");
            sb.append(uptimeMillis);
            sb.append("ms so far, now at ");
            sb.append(str);
            Slog.w("ActivityManager", sb.toString());
            if (uptimeMillis > 150) {
                PerfLog.d(8, sb.toString());
            }
        }
    }

    public static boolean doesReasonCodeAllowSchedulingUserInitiatedJobs(int i, int i2) {
        if (i != 50 && i != 51 && i != 53 && i != 60) {
            if (i == 62) {
                Flags.fgsDisableSaw();
                return !CompatChanges.isChangeEnabled(319471980L, i2);
            }
            if (i != 67 && i != 57 && i != 58) {
                switch (i) {
                    case 10:
                    case 11:
                    case 12:
                    case 13:
                        break;
                    default:
                        return false;
                }
            }
        }
        return true;
    }

    public static void dumpApplicationMemoryUsageHeader(PrintWriter printWriter, long j, long j2, boolean z, boolean z2) {
        if (z2) {
            printWriter.print("version,");
            printWriter.println(1);
        }
        if (z || z2) {
            printWriter.print("time,");
            printWriter.print(j);
            printWriter.print(",");
            printWriter.println(j2);
            return;
        }
        printWriter.println("Applications Memory Usage (in Kilobytes):");
        printWriter.println("Uptime: " + j + " Realtime: " + j2);
    }

    public static void dumpLmkLocked(PrintWriter printWriter) {
        int[] iArr = SecLmkdStats.LMKD_SLOT_ADJ_VALUES;
        try {
            IndentingPrintWriter indentingPrintWriter = new IndentingPrintWriter(printWriter);
            indentingPrintWriter.println("** SEC LMKD STATS LOG START");
            indentingPrintWriter.increaseIndent();
            indentingPrintWriter.println("[summary]");
            indentingPrintWriter.increaseIndent();
            indentingPrintWriter.print("total_kill_count ");
            indentingPrintWriter.println(SecLmkdStats.getKillCountFromSlotRange(0, 15, false, false));
            indentingPrintWriter.print("total_critical_kill_count ");
            indentingPrintWriter.println(SecLmkdStats.getTotalCriticalKillCount());
            indentingPrintWriter.decreaseIndent();
            SecLmkdStats.dumpKillCountBySlot(indentingPrintWriter);
            SecLmkdStats.dumpKillCountByMemPressure(indentingPrintWriter);
            indentingPrintWriter.println("[kill_count_by_reason]");
            indentingPrintWriter.increaseIndent();
            int[] iArr2 = SecLmkdStats.sKillCountReason;
            for (int i = 0; i < 10; i++) {
                indentingPrintWriter.print(i);
                indentingPrintWriter.print(" ");
                indentingPrintWriter.print(iArr2[i]);
                indentingPrintWriter.print(" ");
                indentingPrintWriter.println(SecLmkdStats.killReasonToString(i));
            }
            indentingPrintWriter.decreaseIndent();
            indentingPrintWriter.println("[kill_count_by_custom_reason]");
            indentingPrintWriter.increaseIndent();
            int[] iArr3 = SecLmkdStats.sKillCountCustomReason;
            for (int i2 = 0; i2 < 4; i2++) {
                int i3 = i2 + 100;
                indentingPrintWriter.print(i3);
                indentingPrintWriter.print(" ");
                indentingPrintWriter.print(iArr3[i2]);
                indentingPrintWriter.print(" ");
                indentingPrintWriter.println(SecLmkdStats.killReasonToString(i3));
            }
            indentingPrintWriter.decreaseIndent();
            SecLmkdStats.dumpInvalidCount(indentingPrintWriter);
            indentingPrintWriter.decreaseIndent();
            indentingPrintWriter.println("** SEC LMKD STATS LOG END");
        } catch (Exception e) {
            e.printStackTrace();
        }
        printWriter.println("ACTIVITY MANAGER LMK KILLS (dumpsys activity lmk)");
        Integer lmkdKillCount = ProcessList.getLmkdKillCount(1001, 1001);
        if (lmkdKillCount == null) {
            return;
        }
        printWriter.println("  Total number of kills: " + lmkdKillCount);
        if (reportLmkKillAtOrBelow(999, printWriter) && reportLmkKillAtOrBelow(FrameworkStatsLog.CAMERA_FEATURE_COMBINATION_QUERY_EVENT, printWriter) && reportLmkKillAtOrBelow(FrameworkStatsLog.VPN_CONNECTION_STATE_CHANGED, printWriter) && reportLmkKillAtOrBelow(800, printWriter) && reportLmkKillAtOrBelow(700, printWriter) && reportLmkKillAtOrBelow(600, printWriter) && reportLmkKillAtOrBelow(500, printWriter) && reportLmkKillAtOrBelow(400, printWriter) && reportLmkKillAtOrBelow(350, printWriter) && reportLmkKillAtOrBelow(300, printWriter) && reportLmkKillAtOrBelow(FrameworkStatsLog.CAMERA_SHOT_LATENCY_REPORTED__MODE__CONTROL_DS_MODE_MACRO_RAW_SR_MERGE, printWriter) && reportLmkKillAtOrBelow(225, printWriter) && reportLmkKillAtOrBelow(200, printWriter) && reportLmkKillAtOrBelow(100, printWriter)) {
            reportLmkKillAtOrBelow(0, printWriter);
        }
    }

    public static final void dumpMemItems(ProtoOutputStream protoOutputStream, long j, String str, ArrayList arrayList, boolean z, boolean z2, boolean z3) {
        if (z) {
            Collections.sort(arrayList, new AnonymousClass21(z2));
        }
        for (int i = 0; i < arrayList.size(); i++) {
            MemItem memItem = (MemItem) arrayList.get(i);
            long start = protoOutputStream.start(j);
            protoOutputStream.write(1138166333441L, str);
            protoOutputStream.write(1138166333442L, memItem.shortLabel);
            protoOutputStream.write(1133871366148L, memItem.isProc);
            protoOutputStream.write(1120986464259L, memItem.id);
            protoOutputStream.write(1133871366149L, memItem.hasActivities);
            protoOutputStream.write(1112396529670L, memItem.pss);
            protoOutputStream.write(1112396529673L, memItem.mRss);
            if (z3) {
                protoOutputStream.write(1112396529671L, memItem.swapPss);
            }
            ArrayList arrayList2 = memItem.subitems;
            if (arrayList2 != null) {
                dumpMemItems(protoOutputStream, 2246267895816L, memItem.shortLabel, arrayList2, true, z2, z3);
            }
            protoOutputStream.end(start);
        }
    }

    public static final void dumpMemItems(PrintWriter printWriter, String str, String str2, ArrayList arrayList, boolean z, boolean z2, boolean z3, boolean z4, boolean z5) {
        String str3;
        if (z && !z2) {
            Collections.sort(arrayList, new AnonymousClass21(z3));
        }
        for (int i = 0; i < arrayList.size(); i++) {
            MemItem memItem = (MemItem) arrayList.get(i);
            if (z2) {
                boolean z6 = memItem.isProc;
                long j = memItem.swapPss;
                long j2 = memItem.mRss;
                long j3 = memItem.pss;
                String str4 = memItem.shortLabel;
                if (z6) {
                    printWriter.print("proc,");
                    printWriter.print(str2);
                    printWriter.print(",");
                    printWriter.print(str4);
                    printWriter.print(",");
                    printWriter.print(memItem.id);
                    printWriter.print(",");
                    if (!z3) {
                        j3 = j2;
                    }
                    printWriter.print(j3);
                    printWriter.print(",");
                    printWriter.print(z4 ? Long.valueOf(j) : "N/A");
                    printWriter.println(memItem.hasActivities ? ",a" : ",e");
                } else {
                    printWriter.print(str2);
                    printWriter.print(",");
                    printWriter.print(str4);
                    printWriter.print(",");
                    if (!z3) {
                        j3 = j2;
                    }
                    printWriter.print(j3);
                    printWriter.print(",");
                    printWriter.println(z4 ? Long.valueOf(j) : "N/A");
                }
            } else {
                if ((z3 && z4) || z5) {
                    StringBuilder sb = new StringBuilder("%s%s: %-60s%s");
                    if (z4) {
                        sb.append("(" + stringifyKBSize(memItem.swapPss) + " in swap" + (z5 ? ", " : ")"));
                    }
                    if (z5) {
                        String str5 = z4 ? "" : "(";
                        sb.append(str5 + stringifyKBSize(memItem.mPrivateDirty) + " private dirty)");
                    }
                    sb.append("\n");
                    str3 = sb.toString();
                } else {
                    str3 = "%s%s: %s%s\n";
                }
                String stringifyKBSize = stringifyKBSize(z3 ? memItem.pss : memItem.mRss);
                String str6 = memItem.label;
                int i2 = memItem.userId;
                printWriter.printf(str3, str, stringifyKBSize, str6, i2 != 0 ? BinaryTransparencyService$$ExternalSyntheticOutline0.m(i2, " (user ", ")") : "");
            }
            if (memItem.subitems != null) {
                dumpMemItems(printWriter, ConnectivityModuleConnector$$ExternalSyntheticOutline0.m$1(str, "    "), memItem.shortLabel, memItem.subitems, true, z2, z3, z4, z5);
            }
        }
    }

    public static void dumpProcessList(PrintWriter printWriter, List list, String str, String str2, String str3) {
        for (int size = list.size() - 1; size >= 0; size--) {
            ProcessRecord processRecord = (ProcessRecord) list.get(size);
            if (str3 == null || str3.equals(processRecord.info.packageName)) {
                printWriter.println(String.format("%s%s #%2d: %s", "    ", processRecord.mPersistent ? str2 : str, Integer.valueOf(size), processRecord.toString()));
                if (processRecord.mPersistent) {
                    processRecord.dump(printWriter);
                }
            }
        }
    }

    public static void enforceAllowedToStartOrBindServiceIfSdkSandbox(Intent intent) {
        if (Process.isSdkSandboxUid(Binder.getCallingUid())) {
            SdkSandboxManagerLocal sdkSandboxManagerLocal = (SdkSandboxManagerLocal) LocalManagerRegistry.getManager(SdkSandboxManagerLocal.class);
            if (sdkSandboxManagerLocal == null) {
                throw new IllegalStateException("SdkSandboxManagerLocal not found when checking whether SDK sandbox uid may start or bind to a service.");
            }
            sdkSandboxManagerLocal.enforceAllowedToStartOrBindService(intent);
        }
    }

    public static void enforceDebuggable(ApplicationInfo applicationInfo) {
        if (Build.IS_DEBUGGABLE || (applicationInfo.flags & 2) != 0) {
            return;
        }
        throw new SecurityException("Process not debuggable: " + applicationInfo.packageName);
    }

    public static void enforceNotIsolatedCaller(String str) {
        if (UserHandle.isIsolated(Binder.getCallingUid())) {
            throw new SecurityException("Isolated process not allowed to call ".concat(str));
        }
    }

    public static final long[] getKsmInfo() {
        int[] iArr = {8224};
        long[] jArr = {0};
        Process.readProcFile("/sys/kernel/mm/ksm/pages_shared", iArr, null, jArr, null);
        long j = jArr[0];
        int i = ProcessList.PAGE_SIZE;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_sharing", iArr, null, jArr, null);
        long j2 = (jArr[0] * i) / 1024;
        jArr[0] = 0;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_unshared", iArr, null, jArr, null);
        long j3 = (jArr[0] * i) / 1024;
        jArr[0] = 0;
        Process.readProcFile("/sys/kernel/mm/ksm/pages_volatile", iArr, null, jArr, null);
        return new long[]{(j * i) / 1024, j2, j3, (jArr[0] * i) / 1024};
    }

    public static String getTagForIntentSenderLocked(PendingIntentRecord pendingIntentRecord, String str) {
        String str2;
        Intent intent = pendingIntentRecord.key.requestIntent;
        if (intent == null) {
            return null;
        }
        if (pendingIntentRecord.lastTag != null && (str2 = pendingIntentRecord.lastTagPrefix) == str && (str2 == null || str2.equals(str))) {
            return pendingIntentRecord.lastTag;
        }
        pendingIntentRecord.lastTagPrefix = str;
        StringBuilder sb = new StringBuilder(128);
        if (str != null) {
            sb.append(str);
        }
        if (intent.getAction() != null) {
            sb.append(intent.getAction());
        } else if (intent.getComponent() != null) {
            intent.getComponent().appendShortString(sb);
        } else {
            sb.append("?");
        }
        String sb2 = sb.toString();
        pendingIntentRecord.lastTag = sb2;
        return sb2;
    }

    public static void handleBinderHeavyHitters(List list, int i, float f, long j) {
        int size = list.size();
        if (size == 0) {
            return;
        }
        BinderTransactionNameResolver binderTransactionNameResolver = new BinderTransactionNameResolver();
        StringBuilder sb = new StringBuilder("Excessive incoming binder calls(>");
        sb.append(String.format("%.1f%%", Float.valueOf(f * 100.0f)));
        sb.append(',');
        sb.append(i);
        sb.append(',');
        sb.append(j);
        sb.append("ms): ");
        for (int i2 = 0; i2 < size; i2++) {
            if (i2 > 0) {
                sb.append(", ");
            }
            BinderCallHeavyHitterWatcher.HeavyHitterContainer heavyHitterContainer = (BinderCallHeavyHitterWatcher.HeavyHitterContainer) list.get(i2);
            sb.append('[');
            sb.append(heavyHitterContainer.mUid);
            sb.append(',');
            sb.append(heavyHitterContainer.mClass.getName());
            sb.append(',');
            sb.append(binderTransactionNameResolver.getMethodName(heavyHitterContainer.mClass, heavyHitterContainer.mCode));
            sb.append(',');
            sb.append(heavyHitterContainer.mCode);
            sb.append(',');
            sb.append(String.format("%.1f%%", Float.valueOf(heavyHitterContainer.mFrequency * 100.0f)));
            sb.append(']');
        }
        Slog.w("ActivityManager", sb.toString());
    }

    public static boolean hasContentProviderConnection(ProcessRecord processRecord) {
        ProcessRecord processRecord2;
        int i;
        for (int size = processRecord.mProviders.mPubProviders.size() - 1; size >= 0; size--) {
            ContentProviderRecord contentProviderRecord = (ContentProviderRecord) processRecord.mProviders.mPubProviders.valueAt(size);
            if (contentProviderRecord != null && contentProviderRecord.proc == processRecord) {
                for (int size2 = contentProviderRecord.connections.size() - 1; size2 >= 0; size2--) {
                    ContentProviderConnection contentProviderConnection = (ContentProviderConnection) contentProviderRecord.connections.get(size2);
                    if (contentProviderConnection != null && (processRecord2 = contentProviderConnection.client) != null && !processRecord2.mPersistent && processRecord2.mThread != null && (i = processRecord2.mProfile.mPid) != 0 && i != MY_PID && processRecord2.uid != contentProviderRecord.uid) {
                        StringBuilder sb = new StringBuilder("hasConnectionProvider ");
                        sb.append(processRecord2.toShortString());
                        sb.append(" (adj ");
                        BinaryTransparencyService$$ExternalSyntheticOutline0.m(sb, processRecord2.mState.mSetAdj, ")", "ActivityManager");
                        return true;
                    }
                }
            }
        }
        return false;
    }

    public static boolean isAllowedWhileBooting(ApplicationInfo applicationInfo) {
        return (applicationInfo.flags & 8) != 0;
    }

    public static boolean isDeviceProvisioned(Context context) {
        return Settings.Global.getInt(context.getContentResolver(), "device_provisioned", 0) != 0;
    }

    public static boolean isSingleton(String str, ApplicationInfo applicationInfo, String str2, int i) {
        if (UserHandle.getAppId(applicationInfo.uid) >= 10000) {
            if ((i & 1073741824) != 0) {
                if (ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS", applicationInfo.uid) == 0) {
                    return true;
                }
                String str3 = "Permission Denial: Component " + new ComponentName(applicationInfo.packageName, str2).flattenToShortString() + " requests FLAG_SINGLE_USER, but app does not hold android.permission.INTERACT_ACROSS_USERS";
                Slog.w("ActivityManager", str3);
                throw new SecurityException(str3);
            }
        } else {
            if ("system".equals(str)) {
                return true;
            }
            if ((i & 1073741824) != 0 && (UserHandle.isSameApp(applicationInfo.uid, 1001) || (applicationInfo.flags & 8) != 0)) {
                return true;
            }
        }
        return false;
    }

    public static boolean isValidSingletonCall(int i, int i2) {
        int appId = UserHandle.getAppId(i2);
        return UserHandle.isSameApp(i, i2) || appId == 1000 || appId == 1001 || ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", i2) == 0;
    }

    public static int parseKillTimeout(String str) {
        if (str == null) {
            return -1;
        }
        if ("immediate".equals(str)) {
            return 0;
        }
        if (str.length() <= 3 || !"sec".equals(str.substring(str.length() - 3))) {
            return -1;
        }
        try {
            return Integer.parseInt(str.substring(0, str.length() - 3)) * 1000;
        } catch (NumberFormatException unused) {
            Slog.d("ActivityManager", "kill dex related process - NumberFormatException");
            return -1;
        }
    }

    public static String processClass(ProcessRecord processRecord) {
        return (processRecord == null || processRecord.mPid == MY_PID) ? "system_server" : (processRecord.info.isSystemApp() || processRecord.info.isSystemExt()) ? "system_app" : "data_app";
    }

    public static boolean reportLmkKillAtOrBelow(int i, PrintWriter printWriter) {
        Integer lmkdKillCount = ProcessList.getLmkdKillCount(0, i);
        if (lmkdKillCount == null) {
            return false;
        }
        printWriter.println("    kills at or below oom_adj " + i + ": " + lmkdKillCount);
        return true;
    }

    public static void resetPriorityAfterLockedSection() {
        sThreadPriorityBooster.reset();
    }

    public static void resetPriorityAfterProcLockedSection() {
        sProcThreadPriorityBooster.reset();
    }

    public static void scheduleAsFifoPriority(int i, boolean z) {
        try {
            Process.setThreadScheduler(i, 1073741825, 1);
        } catch (IllegalArgumentException e) {
            if (z) {
                return;
            }
            Slog.w("ActivityManager", "Failed to set scheduling policy, thread does not exist:\n" + e);
        } catch (SecurityException e2) {
            if (z) {
                return;
            }
            Slog.w("ActivityManager", "Failed to set scheduling policy, not allowed:\n" + e2);
        }
    }

    public static void scheduleAsRegularPriority(int i, boolean z) {
        try {
            Process.setThreadScheduler(i, 0, 0);
        } catch (IllegalArgumentException e) {
            if (z) {
                return;
            }
            Slog.w("ActivityManager", "Failed to set scheduling policy, thread does not exist:\n" + e);
        } catch (SecurityException e2) {
            if (z) {
                return;
            }
            Slog.w("ActivityManager", "Failed to set scheduling policy, not allowed:\n" + e2);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:13:0x0020  */
    /* JADX WARN: Removed duplicated region for block: B:15:0x0027  */
    /* JADX WARN: Removed duplicated region for block: B:23:0x002a  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x0023  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public static void scheduleCanceledResultTo(com.android.server.am.ProcessRecord r15, android.content.IIntentReceiver r16, android.content.Intent r17, int r18, android.app.BroadcastOptions r19, int r20, java.lang.String r21) {
        /*
            r1 = r15
            if (r16 != 0) goto L4
            return
        L4:
            r0 = 0
            if (r1 == 0) goto La
            android.app.IApplicationThread r2 = r1.mOnewayThread
            goto Lb
        La:
            r2 = r0
        Lb:
            if (r2 == 0) goto L77
            if (r19 == 0) goto L19
            boolean r3 = r19.isShareIdentityEnabled()     // Catch: android.os.RemoteException -> L17
            if (r3 == 0) goto L19
            r3 = 1
            goto L1a
        L17:
            r0 = move-exception
            goto L3b
        L19:
            r3 = 0
        L1a:
            com.android.server.am.ProcessStateRecord r4 = r1.mState     // Catch: android.os.RemoteException -> L17
            int r12 = r4.mRepProcState     // Catch: android.os.RemoteException -> L17
            if (r3 == 0) goto L23
            r13 = r20
            goto L25
        L23:
            r4 = -1
            r13 = r4
        L25:
            if (r3 == 0) goto L2a
            r14 = r21
            goto L2b
        L2a:
            r14 = r0
        L2b:
            r9 = 0
            r10 = 1
            r5 = 0
            r6 = 0
            r7 = 0
            r8 = 0
            r3 = r16
            r4 = r17
            r11 = r18
            r2.scheduleRegisteredReceiver(r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14)     // Catch: android.os.RemoteException -> L17
            goto L77
        L3b:
            java.lang.StringBuilder r2 = new java.lang.StringBuilder
            java.lang.String r3 = "Failed to schedule result of "
            r2.<init>(r3)
            r3 = r17
            r2.append(r3)
            java.lang.String r3 = " via "
            r2.append(r3)
            r2.append(r15)
            java.lang.String r3 = ": "
            r2.append(r3)
            r2.append(r0)
            java.lang.String r0 = r2.toString()
            r2 = 26
            r3 = 1
            java.lang.String r4 = "Can't schedule resultTo"
            r5 = 13
            r6 = 1
            r16 = r5
            r17 = r2
            r18 = r4
            r19 = r4
            r20 = r3
            r21 = r6
            r15.killLocked(r16, r17, r18, r19, r20, r21)
            java.lang.String r1 = "ActivityManager"
            android.util.Slog.d(r1, r0)
        L77:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.scheduleCanceledResultTo(com.android.server.am.ProcessRecord, android.content.IIntentReceiver, android.content.Intent, int, android.app.BroadcastOptions, int, java.lang.String):void");
    }

    public static int sendIntentSender(IApplicationThread iApplicationThread, IIntentSender iIntentSender, IBinder iBinder, int i, Intent intent, String str, IIntentReceiver iIntentReceiver, String str2, Bundle bundle, int i2, int i3) {
        Intent intent2;
        if (iIntentSender instanceof PendingIntentRecord) {
            PendingIntentRecord pendingIntentRecord = (PendingIntentRecord) iIntentSender;
            PendingIntentRecord.Key key = pendingIntentRecord.key;
            UserManagerInternal userManagerInternal = (UserManagerInternal) LocalServices.getService(UserManagerInternal.class);
            int callingUserId = UserHandle.getCallingUserId();
            if (!UserManager.isVisibleBackgroundUsersEnabled() || key.userId != -2 || callingUserId == 0 || !userManagerInternal.isUserVisible(callingUserId)) {
                return pendingIntentRecord.sendInner(iApplicationThread, i, intent, str, iBinder, iIntentReceiver, str2, null, null, 0, 0, 0, bundle, i2, i3);
            }
            EventLog.writeEvent(30110, callingUserId);
            return new PendingIntentRecord(pendingIntentRecord.controller, new PendingIntentRecord.Key(key.type, key.packageName, key.featureId, key.activity, key.who, key.requestCode, key.allIntents, key.allResolvedTypes, key.flags, key.options, callingUserId), pendingIntentRecord.uid).sendInner(iApplicationThread, i, intent, str, iBinder, iIntentReceiver, str2, null, null, 0, 0, 0, bundle, i2, i3);
        }
        if (intent == null) {
            Slog.wtf("ActivityManager", "Can't use null intent with direct IIntentSender call");
            intent2 = new Intent("android.intent.action.MAIN");
        } else {
            intent2 = intent;
        }
        if (iBinder != null) {
            try {
                int callingUid = Binder.getCallingUid();
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    String nameForUid = AppGlobals.getPackageManager().getNameForUid(callingUid);
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                    Slog.wtf("ActivityManager", "Send a non-null allowlistToken to a non-PI target. Calling package: " + nameForUid + "; intent: " + intent2 + "; options: " + bundle);
                } catch (Throwable th) {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                    throw th;
                }
            } catch (RemoteException unused) {
            }
        }
        iIntentSender.send(i, intent2, str, (IBinder) null, (IIntentReceiver) null, str2, bundle);
        if (iIntentReceiver == null) {
            return 0;
        }
        try {
            iIntentReceiver.performReceive(intent2, 0, (String) null, (Bundle) null, false, false, UserHandle.getCallingUserId());
            return 0;
        } catch (RemoteException unused2) {
            return 0;
        }
    }

    public static void setFifoPriority(ProcessRecord processRecord, boolean z) {
        int i = processRecord.mPid;
        int i2 = processRecord.mRenderThreadTid;
        if (z) {
            scheduleAsFifoPriority(i, true);
            if (i2 != 0) {
                scheduleAsFifoPriority(i2, true);
                return;
            }
            return;
        }
        scheduleAsRegularPriority(i, true);
        if (i2 != 0) {
            scheduleAsRegularPriority(i2, true);
        }
    }

    public static void setProcessTrackerStateLOSP(int i, ProcessRecord processRecord) {
        if (processRecord.mThread != null) {
            ProcessProfileRecord processProfileRecord = processRecord.mProfile;
            int i2 = processRecord.mState.mRepProcState;
            synchronized (processProfileRecord.mService.mProcessStats.mLock) {
                try {
                    ProcessState processState = processProfileRecord.mBaseProcessTracker;
                    if (processState != null && i2 != 20) {
                        PackageList packageList = processProfileRecord.mApp.mPkgList;
                        long uptimeMillis = SystemClock.uptimeMillis();
                        synchronized (packageList) {
                            processState.setState(i2, i, uptimeMillis, packageList.mPkgList);
                        }
                    }
                } finally {
                }
            }
        }
    }

    public static String stringifyKBSize(long j) {
        return stringifySize(j * 1024);
    }

    public static String stringifySize(long j) {
        return String.format(Locale.US, "%,9dK", Long.valueOf(j / 1024));
    }

    public static void traceBegin(String str, String str2) {
        if (Trace.isTagEnabled(64L)) {
            Trace.traceBegin(64L, str + str2);
        }
    }

    public final ProcessRecord addAppLocked(ApplicationInfo applicationInfo, String str, boolean z, int i, String str2, boolean z2, boolean z3, String str3, int i2) {
        ProcessRecord processRecordLocked = this.mProcessList.getProcessRecordLocked(applicationInfo.uid, str != null ? str : applicationInfo.processName);
        if (processRecordLocked == null) {
            processRecordLocked = this.mProcessList.newProcessRecordLocked(applicationInfo, str, false, 0, z, i, str2, new HostingRecord("added application", str != null ? str : applicationInfo.processName));
            updateLruProcessLocked(processRecordLocked, null, false);
            updateOomAdjLocked(11, processRecordLocked);
        }
        ProcessRecord processRecord = processRecordLocked;
        this.mUsageStatsService.reportEvent(UserHandle.getUserId(processRecord.uid), 31, applicationInfo.packageName);
        if (!z) {
            try {
                PackageManagerInternal packageManagerInternal = this.mPackageManagerInt;
                String str4 = applicationInfo.packageName;
                int userId = UserHandle.getUserId(processRecord.uid);
                PackageManagerService packageManagerService = ((PackageManagerService.PackageManagerInternalImpl) packageManagerInternal).mService;
                packageManagerService.setPackageStoppedState(userId, packageManagerService.snapshotComputer(), str4, false);
            } catch (IllegalArgumentException e) {
                Slog.w("ActivityManager", "Failed trying to unstop package " + applicationInfo.packageName + ": " + e);
            }
        }
        if ((applicationInfo.flags & 9) == 9) {
            processRecord.mPersistent = true;
            processRecord.mWindowProcessController.mPersistent = true;
            processRecord.mState.mMaxAdj = -800;
        }
        if (processRecord.mThread == null && this.mPersistentStartingProcesses.indexOf(processRecord) < 0) {
            this.mPersistentStartingProcesses.add(processRecord);
            this.mProcessList.startProcessLocked(processRecord, new HostingRecord("added application", str != null ? str : processRecord.processName), i2, z2, z3, str3);
        }
        return processRecord;
    }

    public final void addAppLocked(ApplicationInfo applicationInfo, int i) {
        addAppLocked(applicationInfo, null, false, 0, null, false, false, null, i);
    }

    public final void addApplicationStartInfoCompleteListener(IApplicationStartInfoCompleteListener iApplicationStartInfoCompleteListener, int i) {
        enforceNotIsolatedCaller("setApplicationStartInfoCompleteListener");
        if (i == -1 || i == -2) {
            throw new IllegalArgumentException("Unsupported userId");
        }
        int callingUid = Binder.getCallingUid();
        this.mUserController.handleIncomingUser(Binder.getCallingPid(), callingUid, i, true, 0, "addApplicationStartInfoCompleteListener", null);
        AppStartInfoTracker appStartInfoTracker = this.mProcessList.mAppStartInfoTracker;
        int uid = UserHandle.getUid(i, UserHandle.getAppId(callingUid));
        synchronized (appStartInfoTracker.mLock) {
            try {
                if (appStartInfoTracker.mEnabled) {
                    ArrayList arrayList = (ArrayList) appStartInfoTracker.mCallbacks.get(uid);
                    if (arrayList == null) {
                        SparseArray sparseArray = appStartInfoTracker.mCallbacks;
                        ArrayList arrayList2 = new ArrayList();
                        sparseArray.set(uid, arrayList2);
                        arrayList = arrayList2;
                    }
                    arrayList.add(appStartInfoTracker.new ApplicationStartInfoCompleteCallback(iApplicationStartInfoCompleteListener, uid));
                }
            } finally {
            }
        }
    }

    public final void addBroadcastStatLocked(int i, int i2, String str, String str2, long j) {
        rotateBroadcastStatsIfNeededLocked();
        BroadcastStats broadcastStats = this.mCurBroadcastStats;
        BroadcastStats.ActionEntry actionEntry = (BroadcastStats.ActionEntry) broadcastStats.mActions.get(str);
        if (actionEntry == null) {
            actionEntry = new BroadcastStats.ActionEntry(str);
            broadcastStats.mActions.put(str, actionEntry);
        }
        actionEntry.mReceiveCount += i;
        actionEntry.mSkipCount += i2;
        actionEntry.mTotalDispatchTime += j;
        if (actionEntry.mMaxDispatchTime < j) {
            actionEntry.mMaxDispatchTime = j;
        }
        BroadcastStats.PackageEntry packageEntry = (BroadcastStats.PackageEntry) actionEntry.mPackages.get(str2);
        if (packageEntry == null) {
            packageEntry = new BroadcastStats.PackageEntry();
            actionEntry.mPackages.put(str2, packageEntry);
        }
        packageEntry.mSendCount++;
    }

    public final void addErrorToDropBox(String str, ProcessRecord processRecord, String str2, String str3, String str4, ProcessRecord processRecord2, String str5, final String str6, final File file, final ApplicationErrorReport.CrashInfo crashInfo, Float f, IncrementalMetrics incrementalMetrics, UUID uuid, VolatileDropboxEntryStates volatileDropboxEntryStates) {
        String str7;
        DropboxRateLimiter.RateLimitResult rateLimitResult;
        String str8;
        String str9;
        try {
            final DropBoxManager dropBoxManager = (DropBoxManager) this.mContext.getSystemService(DropBoxManager.class);
            String str10 = processClass(processRecord) + "_" + str;
            if (dropBoxManager == null || !dropBoxManager.isTagEnabled(str10)) {
                return;
            }
            DropboxRateLimiter.RateLimitResult shouldRateLimit = this.mDropboxRateLimiter.shouldRateLimit(str, str2);
            if (shouldRateLimit.mShouldRateLimit) {
                return;
            }
            final StringBuilder sb = new StringBuilder(1024);
            appendDropBoxProcessHeaders(processRecord, str2, volatileDropboxEntryStates, sb);
            if (processRecord != null) {
                sb.append("Foreground: ");
                sb.append(processRecord.isInterestingToUserLocked() ? "Yes" : "No");
                sb.append("\n");
                str7 = str10;
                rateLimitResult = shouldRateLimit;
                if (processRecord.mStartUptime > 0) {
                    BootReceiver$$ExternalSyntheticOutline0.m(sb, "Process-Runtime: ", SystemClock.uptimeMillis() - processRecord.mStartUptime, "\n");
                }
            } else {
                str7 = str10;
                rateLimitResult = shouldRateLimit;
            }
            if (str.equals("crash")) {
                String format = DROPBOX_TIME_FORMATTER.format(Instant.now().atZone(ZoneId.systemDefault()));
                sb.append("Timestamp: ");
                sb.append(format);
                sb.append("\n");
            }
            if (str3 != null) {
                RCPManagerService$$ExternalSyntheticOutline0.m$1(sb, "Activity: ", str3, "\n");
            }
            if (str4 != null) {
                if (processRecord2 != null && processRecord2.mPid != processRecord.mPid) {
                    sb.append("Parent-Process: ");
                    sb.append(processRecord2.processName);
                    sb.append("\n");
                }
                if (!str4.equals(str3)) {
                    RCPManagerService$$ExternalSyntheticOutline0.m$1(sb, "Parent-Activity: ", str4, "\n");
                }
            }
            if (str5 != null) {
                RCPManagerService$$ExternalSyntheticOutline0.m$1(sb, "Subject: ", str5, "\n");
            }
            if (uuid != null) {
                sb.append("ErrorId: ");
                sb.append(uuid.toString());
                sb.append("\n");
            }
            sb.append("Build: ");
            sb.append(Build.FINGERPRINT);
            sb.append("\n");
            long sysconf = Os.sysconf(OsConstants._SC_PAGESIZE);
            if (sysconf != 4096) {
                BootReceiver$$ExternalSyntheticOutline0.m(sb, "PageSize: ", sysconf, "\n");
            }
            if (Debug.isDebuggerConnected()) {
                sb.append("Debugger: Connected\n");
            }
            if (crashInfo != null && (str9 = crashInfo.exceptionHandlerClassName) != null && !str9.isEmpty()) {
                sb.append("Crash-Handler: ");
                sb.append(crashInfo.exceptionHandlerClassName);
                sb.append("\n");
            }
            if (crashInfo != null && (str8 = crashInfo.crashTag) != null && !str8.isEmpty()) {
                sb.append("Crash-Tag: ");
                sb.append(crashInfo.crashTag);
                sb.append("\n");
            }
            if (f != null) {
                sb.append("Loading-Progress: ");
                sb.append(f.floatValue());
                sb.append("\n");
            }
            if (incrementalMetrics != null) {
                sb.append("Incremental: Yes");
                sb.append("\n");
                long millisSinceOldestPendingRead = incrementalMetrics.getMillisSinceOldestPendingRead();
                if (millisSinceOldestPendingRead > 0) {
                    BootReceiver$$ExternalSyntheticOutline0.m(sb, "Millis-Since-Oldest-Pending-Read: ", millisSinceOldestPendingRead, "\n");
                }
            }
            sb.append("Dropped-Count: " + rateLimitResult.mDroppedCountSinceRateLimitActivated + "\n");
            sb.append("\n");
            final boolean z = processRecord == null;
            final String str11 = str7;
            Thread thread = new Thread(ConnectivityModuleConnector$$ExternalSyntheticOutline0.m("Error dump: ", str11)) { // from class: com.android.server.am.ActivityManagerService.20
                @Override // java.lang.Thread, java.lang.Runnable
                public final void run() {
                    String str12;
                    String str13 = str6;
                    if (str13 != null) {
                        sb.append(str13);
                    }
                    String str14 = "logcat_for_" + str11;
                    String str15 = "kernel_logs_for_" + str11;
                    String str16 = "max_error_bytes_for_" + str11;
                    boolean z2 = Build.IS_USER;
                    int i = z2 ? 0 : Settings.Global.getInt(ActivityManagerService.this.mContext.getContentResolver(), str14, 0);
                    int i2 = z2 ? 0 : Settings.Global.getInt(ActivityManagerService.this.mContext.getContentResolver(), str15, 0);
                    int i3 = Settings.Global.getInt(ActivityManagerService.this.mContext.getContentResolver(), str16, 524288);
                    if (file != null) {
                        StringBuilder sb2 = sb;
                        sb2.append("Data File: ");
                        sb2.append(file.getAbsolutePath());
                        sb2.append('\n');
                        int length = (((i3 - sb.length()) - (i * 100)) - (i2 * 100)) - 14;
                        if (length > 0) {
                            try {
                                sb.append(FileUtils.readTextFile(file, length, "\n\n[[TRUNCATED]]\n"));
                            } catch (IOException e) {
                                Slog.e("ActivityManager", "Error reading " + file, e);
                            }
                        }
                        sb.append("End Data File\n");
                    }
                    ApplicationErrorReport.CrashInfo crashInfo2 = crashInfo;
                    if (crashInfo2 != null && (str12 = crashInfo2.stackTrace) != null) {
                        sb.append(str12);
                    }
                    boolean z3 = i > 0 || i2 > 0;
                    if (!z && z3) {
                        sb.append("\n");
                        if (i > 0) {
                            ActivityManagerService.m169$$Nest$smfetchLogcatBuffers(sb, i, 10, List.of("events", "system", "main", "crash"));
                        }
                        if (i2 > 0) {
                            ActivityManagerService.m169$$Nest$smfetchLogcatBuffers(sb, i2, 5, List.of("kernel"));
                        }
                    }
                    dropBoxManager.addText(str11, sb.toString());
                }
            };
            if (z) {
                int allowThreadDiskWritesMask = StrictMode.allowThreadDiskWritesMask();
                try {
                    thread.run();
                    return;
                } finally {
                    StrictMode.setThreadPolicyMask(allowThreadDiskWritesMask);
                }
            }
            thread.start();
            if (processRecord != null && processRecord.mPid == MY_PID && "crash".equals(str)) {
                thread.join(2000L);
            }
        } catch (InterruptedException | Exception unused) {
        }
    }

    public final void addInstrumentationResults(IApplicationThread iApplicationThread, Bundle bundle) {
        UserHandle.getCallingUserId();
        if (bundle != null && bundle.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                if (recordForAppLOSP == null) {
                    Slog.w("ActivityManager", "addInstrumentationResults: no app for " + iApplicationThread);
                    resetPriorityAfterLockedSection();
                    return;
                }
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    ActiveInstrumentation activeInstrumentation = recordForAppLOSP.mInstr;
                    if (activeInstrumentation == null) {
                        Slog.w("ActivityManager", "finishInstrumentation called on non-instrumented: " + recordForAppLOSP);
                    } else if (!activeInstrumentation.mFinished && bundle != null) {
                        Bundle bundle2 = activeInstrumentation.mCurResults;
                        if (bundle2 == null) {
                            activeInstrumentation.mCurResults = new Bundle(bundle);
                        } else {
                            bundle2.putAll(bundle);
                        }
                    }
                    resetPriorityAfterLockedSection();
                } finally {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final boolean addLongLiveApp(String str) {
        if (!CoreRune.FW_DEDICATED_MEMORY) {
            return false;
        }
        checkLongLivePermissions("addLongLiveApp");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (!this.mExt.addLongLivePackageLocked(str)) {
                    resetPriorityAfterLockedSection();
                    return false;
                }
                updateOomAdjLocked(0);
                resetPriorityAfterLockedSection();
                return true;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final void addOverridePermissionState(int i, int i2, String str, int i3) {
        AccessCheckDelegateHelper accessCheckDelegateHelper = getAccessCheckDelegateHelper();
        accessCheckDelegateHelper.getClass();
        if (UserHandle.getCallingAppId() != 0) {
            throw new SecurityException("Only root can override permissions");
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = accessCheckDelegateHelper.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                int size = accessCheckDelegateHelper.mActiveInstrumentation.size();
                for (int i4 = 0; i4 < size; i4++) {
                    ActiveInstrumentation activeInstrumentation = (ActiveInstrumentation) accessCheckDelegateHelper.mActiveInstrumentation.get(i4);
                    if (activeInstrumentation.mTargetInfo.uid == i) {
                        if (activeInstrumentation.mSourceUid != 0 || activeInstrumentation.mUiAutomationConnection == null) {
                            throw new SecurityException("Root can only override permissions only if the owning app was instrumented from root.");
                        }
                        AccessCheckDelegate$AccessCheckDelegateImpl accessCheckDelegateLPr = accessCheckDelegateHelper.getAccessCheckDelegateLPr();
                        if (accessCheckDelegateLPr.mOverridePermissionStates != null && !accessCheckDelegateLPr.isDelegateAndOwnerUid(i)) {
                            throw new SecurityException("Only one instrumentation to grant overrides is allowed at a time.");
                        }
                        accessCheckDelegateLPr.addOverridePermissionState(i, i2, str, i3);
                        resetPriorityAfterProcLockedSection();
                        return;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public final void addPackageDependency(String str) {
        ProcessRecord processRecord;
        if (Binder.getCallingPid() == Process.myPid()) {
            return;
        }
        int callingUid = Binder.getCallingUid();
        if (getPackageManagerInternal().filterAppAccess(callingUid, UserHandle.getUserId(callingUid), str, true)) {
            HeimdAllFsService$$ExternalSyntheticOutline0.m("Failed trying to add dependency on non-existing package: ", str, "ActivityManager");
            return;
        }
        synchronized (this.mPidsSelfLocked) {
            processRecord = this.mPidsSelfLocked.get(Binder.getCallingPid());
        }
        if (processRecord != null) {
            ArraySet arraySet = processRecord.mPkgDeps;
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerProcLock) {
                        if (arraySet == null) {
                            try {
                                arraySet = new ArraySet(1);
                                processRecord.mPkgDeps = arraySet;
                            } catch (Throwable th) {
                                resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                        }
                        arraySet.add(str);
                    }
                    resetPriorityAfterProcLockedSection();
                } catch (Throwable th2) {
                    resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            resetPriorityAfterLockedSection();
        }
    }

    public final void addPidLocked(ProcessRecord processRecord) {
        int i = processRecord.mPid;
        synchronized (this.mPidsSelfLocked) {
            ((SparseArray) this.mPidsSelfLocked.mPidMap).put(i, processRecord);
        }
        SparseArray sparseArray = sActiveProcessInfoSelfLocked;
        synchronized (sparseArray) {
            try {
                ProcessInfo processInfo = processRecord.processInfo;
                if (processInfo != null) {
                    sparseArray.put(i, processInfo);
                } else {
                    sparseArray.remove(i);
                }
            } catch (Throwable th) {
                throw th;
            }
        }
        ActivityTaskManagerInternal activityTaskManagerInternal = this.mAtmInternal;
        WindowProcessController windowProcessController = processRecord.mWindowProcessController;
        ActivityTaskManagerService.LocalService localService = (ActivityTaskManagerService.LocalService) activityTaskManagerInternal;
        WindowManagerGlobalLock windowManagerGlobalLock = ActivityTaskManagerService.this.mGlobalLock;
        WindowManagerService.boostPriorityForLockedSection();
        synchronized (windowManagerGlobalLock) {
            try {
                ActivityTaskManagerService.this.mProcessMap.put(i, windowProcessController);
            } catch (Throwable th2) {
                WindowManagerService.resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        WindowManagerService.resetPriorityAfterLockedSection();
    }

    public final void addStartInfoTimestamp(int i, long j, int i2) {
        enforceNotIsolatedCaller("addStartInfoTimestamp");
        if (i2 == -1 || i2 == -2) {
            throw new IllegalArgumentException("Unsupported userId");
        }
        int callingUid = Binder.getCallingUid();
        this.mUserController.handleIncomingUser(Binder.getCallingPid(), callingUid, i2, true, 0, "addStartInfoTimestamp", null);
        addStartInfoTimestampInternal(i, i2, callingUid, j);
    }

    public final void addStartInfoTimestampInternal(int i, int i2, int i3, long j) {
        this.mProcessList.mAppStartInfoTracker.addTimestampToStart(UserHandle.getUid(i2, UserHandle.getAppId(i3)), i, j, Settings.getPackageNameForUid(this.mContext, i3));
    }

    public final void addUidToObserver(IBinder iBinder, String str, int i) {
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "registerUidObserver");
        }
        Handler handler = this.mUidObserverController.mHandler;
        handler.sendMessage(Message.obtain(handler, 80, i, 0, iBinder));
    }

    public void adjustFifoProcessesIfNeeded(int i, boolean z) {
        UidRecord uidRecord;
        if (z == this.mAllowSpecifiedFifoScheduling) {
            return;
        }
        if (z || ((uidRecord = this.mProcessList.mActiveUids.get(i)) != null && uidRecord.mCurProcState <= 2)) {
            this.mAllowSpecifiedFifoScheduling = z;
            for (int size = this.mSpecifiedFifoProcesses.size() - 1; size >= 0; size--) {
                ProcessRecord processRecord = (ProcessRecord) this.mSpecifiedFifoProcesses.get(size);
                if (processRecord.mState.mSetSchedGroup == 3) {
                    setFifoPriority(processRecord, z);
                }
            }
        }
    }

    public final void appDiedLocked(final ProcessRecord processRecord, final int i, IApplicationThread iApplicationThread, boolean z, String str) {
        ProcessRecord processRecord2;
        IApplicationThread iApplicationThread2;
        boolean z2;
        synchronized (this.mPidsSelfLocked) {
            processRecord2 = this.mPidsSelfLocked.get(i);
        }
        if (processRecord2 != processRecord) {
            if (z) {
                ProcessList processList = this.mProcessList;
                processList.getClass();
                String str2 = processRecord.processName;
                ProcessList.MyProcessMap myProcessMap = processList.mProcessNames;
                int i2 = processRecord.uid;
                if (myProcessMap.get(str2, i2) != processRecord) {
                    ProcessMap processMap = processList.mDyingProcesses;
                    String str3 = processRecord.processName;
                    if (processMap.get(str3, i2) == processRecord) {
                        Slog.v("ActivityManager", "Got obituary of " + i + ":" + str3);
                        processRecord.unlinkDeathRecipient();
                        processList.mDyingProcesses.remove(str3, i2);
                        processRecord.mDyingPid = 0;
                        processList.handlePrecedingAppDiedLocked(processRecord);
                        processList.removeLruProcessLocked(processRecord);
                        return;
                    }
                }
            }
            Slog.w("ActivityManager", "Spurious death for " + processRecord + ", curProc for " + i + ": " + processRecord2);
            return;
        }
        if (AppMonitor.get().isOn()) {
            final long elapsedRealtime = SystemClock.elapsedRealtime();
            final long cpuTimeForPid = processRecord.mService.mAppProfiler.mProcessCpuTracker.getCpuTimeForPid(processRecord.mPid);
            BackgroundThread.getHandler().post(new Runnable() { // from class: com.android.server.am.ActivityManagerService.6
                @Override // java.lang.Runnable
                public final void run() {
                    AppMonitor appMonitor = AppMonitor.get();
                    long j = elapsedRealtime;
                    int i3 = i;
                    ProcessRecord processRecord3 = processRecord;
                    appMonitor.reportApplicationDying(j, i3, processRecord3.uid, processRecord3.processName, cpuTimeForPid);
                }
            });
        }
        final BatteryStatsService batteryStatsService = this.mBatteryStatsService;
        final int i3 = processRecord.info.uid;
        synchronized (batteryStatsService.mLock) {
            batteryStatsService.mHandler.post(new Runnable() { // from class: com.android.server.am.BatteryStatsService$$ExternalSyntheticLambda87
                @Override // java.lang.Runnable
                public final void run() {
                    BatteryStatsService batteryStatsService2 = BatteryStatsService.this;
                    int i4 = i3;
                    int i5 = i;
                    synchronized (batteryStatsService2.mStats) {
                        BatteryStatsImpl batteryStatsImpl = batteryStatsService2.mStats;
                        BatteryStatsImpl.Uid uid = (BatteryStatsImpl.Uid) batteryStatsImpl.mUidStats.get(batteryStatsImpl.mapUid(i4));
                        if (uid != null) {
                            uid.mPids.remove(i5);
                        }
                    }
                }
            });
        }
        BackgroundThread.getHandler().post(new AnonymousClass7(i, processRecord));
        MemInfoReader memInfoReader = new MemInfoReader();
        memInfoReader.readLightMemInfo();
        int freeSize = (int) (memInfoReader.getFreeSize() / 1048576);
        int cachedSizeLegacy = (int) (memInfoReader.getCachedSizeLegacy() / 1048576);
        BackgroundThread.getHandler().post(new AnonymousClass7(processRecord, i));
        if (!processRecord.mKilled) {
            if (!z) {
                if (Process.getThreadGroupLeader(i) == i) {
                    Process.killProcessQuiet(i);
                    this.mProcessList.noteAppKill(processRecord, 13, 0, str);
                } else if (!"TGL@".equals(str)) {
                    BrailleDisplayConnection$$ExternalSyntheticOutline0.m(i, "Not TGL ", "in appDiedLocked", "ActivityManager");
                }
            }
            processRecord.killProcessGroupIfNecessaryLocked(true);
            ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerProcLock) {
                try {
                    processRecord.mKilled = true;
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
        }
        ProcessStateRecord processStateRecord = processRecord.mState;
        int i4 = processStateRecord.mSetAdj;
        int i5 = processStateRecord.mSetProcState;
        if (processRecord.mPid == i && (iApplicationThread2 = processRecord.mThread) != null && iApplicationThread2.asBinder() == iApplicationThread.asBinder()) {
            boolean z3 = processRecord.mInstr == null;
            if (processRecord.mKilledByAm) {
                this.mAppProfiler.mAllowLowerMemLevel = false;
                z2 = false;
            } else {
                StringBuilder sb = new StringBuilder("Process ");
                AccessibilityManagerService$$ExternalSyntheticOutline0.m(i, processRecord.processName, " (pid ", ") has died: ", sb);
                sb.append(ProcessList.makeOomAdjString(i4, true));
                sb.append(" ");
                sb.append(ActivityManager.procStateToString(i5));
                AbstractAccessibilityServiceConnection$$ExternalSyntheticOutline0.m(freeSize, cachedSizeLegacy, "(", ",", sb);
                sb.append(")");
                reportUidInfoMessageLocked(processRecord.info.uid, sb.toString());
                this.mAppProfiler.mAllowLowerMemLevel = true;
                z2 = z3;
            }
            if (z3) {
                Flags.migrateFullOomadjUpdates();
                ProcessServiceRecord processServiceRecord = processRecord.mServices;
                for (int size = processServiceRecord.mConnections.size() - 1; size >= 0; size--) {
                    enqueueOomAdjTargetLocked(processServiceRecord.getConnectionAt(size).binding.service.app);
                }
                ArraySet arraySet = processServiceRecord.mSdkSandboxConnections;
                for (int size2 = (arraySet != null ? arraySet.size() : 0) - 1; size2 >= 0; size2--) {
                    ArraySet arraySet2 = processServiceRecord.mSdkSandboxConnections;
                    enqueueOomAdjTargetLocked((arraySet2 != null ? (ConnectionRecord) arraySet2.valueAt(size2) : null).binding.service.app);
                }
                ProcessProviderRecord processProviderRecord = processRecord.mProviders;
                for (int size3 = processProviderRecord.mConProviders.size() - 1; size3 >= 0; size3--) {
                    enqueueOomAdjTargetLocked(((ContentProviderConnection) processProviderRecord.mConProviders.get(size3)).provider.proc);
                }
            }
            EventLog.writeEvent(30011, Integer.valueOf(processRecord.userId), Integer.valueOf(i), processRecord.processName, Integer.valueOf(i4), Integer.valueOf(i5), Integer.valueOf(freeSize), Integer.valueOf(cachedSizeLegacy));
            PerProcessNandswap.getInstance().notifyDiedAppToPPR(processRecord.mPid);
            Pageboost.onProcStatusChange(2, processRecord.mPid, processRecord.info.packageName);
            handleAppDiedLocked(i, processRecord, false, true, z);
            if (z3) {
                Flags.migrateFullOomadjUpdates();
                updateOomAdjPendingTargetsLocked(12);
            }
            if (z2) {
                this.mAppProfiler.doLowMemReportIfNeededLocked(processRecord);
            }
        } else if (processRecord.mPid != i) {
            StringBuilder sb2 = new StringBuilder("Process ");
            AccessibilityManagerService$$ExternalSyntheticOutline0.m(i, processRecord.processName, " (pid ", ") has died and restarted (pid ", sb2);
            ServiceKeeper$$ExternalSyntheticOutline0.m(processRecord.mPid, freeSize, ").(", ",", sb2);
            reportUidInfoMessageLocked(processRecord.info.uid, AmFmBandRange$$ExternalSyntheticOutline0.m(cachedSizeLegacy, sb2, ")"));
            PerProcessNandswap.getInstance().notifyDiedAppToPPR(processRecord.mPid);
            Pageboost.onProcStatusChange(2, processRecord.mPid, processRecord.info.packageName);
            EventLog.writeEvent(30011, Integer.valueOf(processRecord.userId), Integer.valueOf(processRecord.mPid), processRecord.processName, Integer.valueOf(i4), Integer.valueOf(i5), Integer.valueOf(freeSize), Integer.valueOf(cachedSizeLegacy));
        }
        if (MemoryStatUtil.DEVICE_HAS_PER_APP_MEMCG) {
            return;
        }
        FrameworkStatsLog.write(65, SystemClock.elapsedRealtime());
    }

    public final void appNotResponding(String str) {
        TimeoutRecord forApp = TimeoutRecord.forApp("App requested: " + str);
        int callingPid = Binder.getCallingPid();
        forApp.mLatencyTracker.waitingOnPidLockStarted();
        synchronized (this.mPidsSelfLocked) {
            try {
                forApp.mLatencyTracker.waitingOnPidLockEnded();
                ProcessRecord processRecord = this.mPidsSelfLocked.get(callingPid);
                if (processRecord == null) {
                    throw new SecurityException("Unknown process: " + callingPid);
                }
                this.mAnrHelper.appNotResponding(processRecord, null, processRecord.info, null, null, false, forApp, false);
            } catch (Throwable th) {
                throw th;
            }
        }
    }

    public final void appNotRespondingViaProvider(IBinder iBinder) {
        ProviderInfo providerInfo;
        ActivityManagerService activityManagerService = this.mCpHelper.mService;
        activityManagerService.enforceCallingPermission("android.permission.REMOVE_TASKS", "appNotRespondingViaProvider()");
        ContentProviderConnection contentProviderConnection = (ContentProviderConnection) iBinder;
        if (contentProviderConnection == null) {
            Slog.w("ContentProviderHelper", "ContentProviderConnection is null");
            return;
        }
        ContentProviderRecord contentProviderRecord = contentProviderConnection.provider;
        traceBegin("appNotRespondingViaProvider: ", (contentProviderRecord == null || (providerInfo = contentProviderRecord.info) == null) ? "" : providerInfo.authority);
        try {
            ProcessRecord processRecord = contentProviderConnection.provider.proc;
            if (processRecord == null) {
                Slog.w("ContentProviderHelper", "Failed to find hosting ProcessRecord");
            } else {
                activityManagerService.mAnrHelper.appNotResponding(processRecord, TimeoutRecord.forContentProvider("ContentProvider not responding"));
            }
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public final int appRestrictedInBackgroundLOSP(int i, int i2, String str) {
        if (i2 >= 26) {
            return 2;
        }
        if (this.mOnBattery && this.mConstants.FORCE_BACKGROUND_CHECK_ON_RESTRICTED_APPS) {
            if (45 <= this.mUsageStatsService.getAppStandbyBucket(UserHandle.getUserId(i), str, SystemClock.elapsedRealtime())) {
                return 1;
            }
        }
        int noteOpNoThrow = getAppOpsManager$1().noteOpNoThrow(63, i, str, (String) null, "");
        return noteOpNoThrow != 0 ? noteOpNoThrow != 1 ? 2 : 1 : (!this.mForceBackgroundCheck || UserHandle.isCore(i) || isOnDeviceIdleAllowlistLOSP(i, true)) ? 0 : 1;
    }

    public final void appendDropBoxProcessHeaders(ProcessRecord processRecord, String str, VolatileDropboxEntryStates volatileDropboxEntryStates, StringBuilder sb) {
        ZonedDateTime zonedDateTime;
        Boolean bool;
        sb.append("SystemUptimeMs: ");
        sb.append(SystemClock.uptimeMillis());
        sb.append("\n");
        if (processRecord == null) {
            RCPManagerService$$ExternalSyntheticOutline0.m$1(sb, "Process: ", str, "\n");
            return;
        }
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                sb.append("Process: ");
                sb.append(str);
                sb.append("\n");
                sb.append("PID: ");
                sb.append(processRecord.mPid);
                sb.append("\n");
                sb.append("UID: ");
                sb.append(processRecord.uid);
                sb.append("\n");
                if (processRecord.mOptRecord != null) {
                    sb.append("Frozen: ");
                    sb.append((volatileDropboxEntryStates == null || (bool = volatileDropboxEntryStates.mIsProcessFrozen) == null) ? processRecord.mOptRecord.mFrozen : bool.booleanValue());
                    sb.append("\n");
                }
                if (volatileDropboxEntryStates != null && (zonedDateTime = volatileDropboxEntryStates.mTimestamp) != null) {
                    String format = DROPBOX_TIME_FORMATTER.format(zonedDateTime);
                    sb.append("Timestamp: ");
                    sb.append(format);
                    sb.append("\n");
                }
                int i = processRecord.info.flags;
                IPackageManager packageManager = AppGlobals.getPackageManager();
                sb.append("Flags: 0x");
                sb.append(Integer.toHexString(i));
                sb.append("\n");
                int callingUserId = UserHandle.getCallingUserId();
                processRecord.mPkgList.forEachPackage(new ActivityManagerService$$ExternalSyntheticLambda7(sb, packageManager, callingUserId));
                if (processRecord.info.isInstantApp()) {
                    sb.append("Instant-App: true\n");
                }
                if (processRecord.isSdkSandbox) {
                    String str2 = processRecord.sdkSandboxClientAppPackage;
                    try {
                        PackageInfo packageInfo = packageManager.getPackageInfo(str2, 1024L, callingUserId);
                        if (packageInfo != null) {
                            appendSdkSandboxClientPackageHeader(sb, packageInfo);
                            appendSdkSandboxLibraryHeaders(sb, packageInfo);
                        } else {
                            Slog.e("ActivityManager", "PackageInfo is null for SDK sandbox client: " + str2);
                        }
                    } catch (RemoteException e) {
                        Slog.e("ActivityManager", "Error getting package info for SDK sandbox client: " + str2, e);
                    }
                    sb.append("SdkSandbox: true\n");
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public final void attachApplication(IApplicationThread iApplicationThread, long j) {
        if (iApplicationThread == null) {
            throw new SecurityException("Invalid application interface");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                int callingPid = Binder.getCallingPid();
                int callingUid = Binder.getCallingUid();
                long clearCallingIdentity = Binder.clearCallingIdentity();
                attachApplicationLocked(iApplicationThread, callingPid, callingUid, j);
                Binder.restoreCallingIdentity(clearCallingIdentity);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:158:0x03b3 A[Catch: Exception -> 0x022d, TRY_ENTER, TryCatch #3 {Exception -> 0x022d, blocks: (B:88:0x0216, B:90:0x021b, B:92:0x0221, B:94:0x0225, B:97:0x0234, B:99:0x023e, B:101:0x024b, B:102:0x0250, B:110:0x026b, B:112:0x0272, B:114:0x027c, B:116:0x0282, B:120:0x028b, B:122:0x028f, B:123:0x0298, B:125:0x029e, B:127:0x02c0, B:128:0x02c5, B:130:0x02d7, B:132:0x02dd, B:134:0x02e6, B:136:0x02f0, B:138:0x02fa, B:139:0x030d, B:141:0x0319, B:143:0x0323, B:144:0x0336, B:146:0x0340, B:147:0x034b, B:152:0x0357, B:154:0x038e, B:231:0x0392, B:234:0x03a4, B:236:0x03aa, B:158:0x03b3, B:159:0x03be, B:160:0x03c6, B:162:0x03e1, B:163:0x03ea, B:165:0x0407, B:214:0x041a, B:215:0x0434, B:220:0x0442, B:245:0x0354, B:250:0x02c3, B:149:0x034c, B:150:0x034e), top: B:87:0x0216, inners: #14 }] */
    /* JADX WARN: Removed duplicated region for block: B:229:0x03bc  */
    /* JADX WARN: Removed duplicated region for block: B:32:0x00df  */
    /* JADX WARN: Removed duplicated region for block: B:34:0x00e6  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x0117  */
    /* JADX WARN: Type inference failed for: r13v1 */
    /* JADX WARN: Type inference failed for: r13v2, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r13v32 */
    /* JADX WARN: Type inference failed for: r17v11 */
    /* JADX WARN: Type inference failed for: r17v16 */
    /* JADX WARN: Type inference failed for: r17v3 */
    /* JADX WARN: Type inference failed for: r17v4 */
    /* JADX WARN: Type inference failed for: r17v5 */
    /* JADX WARN: Type inference failed for: r2v2, types: [android.os.IBinder] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final void attachApplicationLocked(android.app.IApplicationThread r51, int r52, int r53, long r54) {
        /*
            Method dump skipped, instructions count: 1455
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.attachApplicationLocked(android.app.IApplicationThread, int, int, long):void");
    }

    public final void backgroundAllowlistUid(int i) {
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("Only the OS may call backgroundAllowlistUid()");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerProcLock) {
                    try {
                        int[] iArr = this.mBackgroundAppIdAllowlist;
                        int length = iArr.length;
                        int[] iArr2 = new int[length + 1];
                        System.arraycopy(iArr, 0, iArr2, 0, length);
                        iArr2[length] = UserHandle.getAppId(i);
                        this.mBackgroundAppIdAllowlist = iArr2;
                    } catch (Throwable th) {
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void backupAgentCreated(String str, IBinder iBinder, int i) {
        int callingUid = Binder.getCallingUid();
        if (getPackageManagerInternal().getPackageUid(str, 0L, UserHandle.getUserId(callingUid)) != callingUid) {
            throw new SecurityException(VpnManagerService$$ExternalSyntheticOutline0.m(callingUid, str, " does not belong to uid "));
        }
        int handleIncomingUser = this.mUserController.handleIncomingUser(Binder.getCallingPid(), callingUid, i, false, 2, "backupAgentCreated", null);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                BackupRecord backupRecord = (BackupRecord) this.mBackupTargets.get(handleIncomingUser);
                if (!str.equals(backupRecord == null ? null : backupRecord.appInfo.packageName)) {
                    Slog.e("ActivityManager", "Backup agent created for " + str + " but not requested!");
                    resetPriorityAfterLockedSection();
                    return;
                }
                resetPriorityAfterLockedSection();
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    try {
                        IBackupManager.Stub.asInterface(ServiceManager.getService("backup")).agentConnectedForUser(handleIncomingUser, str, iBinder);
                    } catch (RemoteException unused) {
                    } catch (Exception e) {
                        Slog.w("ActivityManager", "Exception trying to deliver BackupAgent binding: ");
                        e.printStackTrace();
                    }
                } finally {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final void batterySendBroadcast(Intent intent) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                broadcastIntentLocked(intent, null, null, null, false, -1, Binder.getCallingUid(), Binder.getCallingPid(), -1);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX WARN: Can't wrap try/catch for region: R(16:30|31|(3:88|89|(16:91|92|93|94|34|35|36|37|38|39|(5:44|45|(1:47)(1:80)|(1:49)|(4:51|52|53|54)(13:55|(1:58)|59|(1:61)(1:79)|62|(1:64)(1:78)|65|(2:74|75)|67|68|(1:70)|(1:72)|73))|81|45|(0)(0)|(0)|(0)(0)))|33|34|35|36|37|38|39|(6:41|44|45|(0)(0)|(0)|(0)(0))|81|45|(0)(0)|(0)|(0)(0)) */
    /* JADX WARN: Code restructure failed: missing block: B:83:0x010e, code lost:
    
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:84:0x0113, code lost:
    
        android.util.Slog.w("ActivityManager", r25 + r10.packageName + ": " + r0);
     */
    /* JADX WARN: Code restructure failed: missing block: B:86:0x0110, code lost:
    
        r0 = e;
     */
    /* JADX WARN: Code restructure failed: missing block: B:87:0x0111, code lost:
    
        r10 = r22;
     */
    /* JADX WARN: Removed duplicated region for block: B:41:0x0137  */
    /* JADX WARN: Removed duplicated region for block: B:47:0x015b  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0162 A[Catch: all -> 0x00d6, TryCatch #4 {all -> 0x00d6, blocks: (B:31:0x008d, B:89:0x0093, B:91:0x00ab, B:94:0x00d2, B:35:0x00f6, B:38:0x00fa, B:39:0x0130, B:44:0x013b, B:45:0x014e, B:49:0x0162, B:51:0x0181, B:52:0x0194, B:55:0x0199, B:58:0x01af, B:59:0x01b1, B:61:0x01be, B:62:0x01c4, B:64:0x01c8, B:65:0x01cc, B:75:0x01e0, B:67:0x01e3, B:81:0x0145, B:84:0x0113, B:97:0x00e5), top: B:30:0x008d }] */
    /* JADX WARN: Removed duplicated region for block: B:51:0x0181 A[Catch: all -> 0x00d6, TryCatch #4 {all -> 0x00d6, blocks: (B:31:0x008d, B:89:0x0093, B:91:0x00ab, B:94:0x00d2, B:35:0x00f6, B:38:0x00fa, B:39:0x0130, B:44:0x013b, B:45:0x014e, B:49:0x0162, B:51:0x0181, B:52:0x0194, B:55:0x0199, B:58:0x01af, B:59:0x01b1, B:61:0x01be, B:62:0x01c4, B:64:0x01c8, B:65:0x01cc, B:75:0x01e0, B:67:0x01e3, B:81:0x0145, B:84:0x0113, B:97:0x00e5), top: B:30:0x008d }] */
    /* JADX WARN: Removed duplicated region for block: B:55:0x0199 A[Catch: all -> 0x00d6, TRY_ENTER, TryCatch #4 {all -> 0x00d6, blocks: (B:31:0x008d, B:89:0x0093, B:91:0x00ab, B:94:0x00d2, B:35:0x00f6, B:38:0x00fa, B:39:0x0130, B:44:0x013b, B:45:0x014e, B:49:0x0162, B:51:0x0181, B:52:0x0194, B:55:0x0199, B:58:0x01af, B:59:0x01b1, B:61:0x01be, B:62:0x01c4, B:64:0x01c8, B:65:0x01cc, B:75:0x01e0, B:67:0x01e3, B:81:0x0145, B:84:0x0113, B:97:0x00e5), top: B:30:0x008d }] */
    /* JADX WARN: Removed duplicated region for block: B:80:0x015e  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final boolean bindBackupAgent(java.lang.String r27, int r28, int r29, int r30) {
        /*
            Method dump skipped, instructions count: 511
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.bindBackupAgent(java.lang.String, int, int, int):boolean");
    }

    public final int bindService(IApplicationThread iApplicationThread, IBinder iBinder, Intent intent, String str, IServiceConnection iServiceConnection, long j, String str2, int i) {
        return bindServiceInstance(iApplicationThread, iBinder, intent, str, iServiceConnection, j, null, str2, i);
    }

    public final int bindServiceInstance(IApplicationThread iApplicationThread, IBinder iBinder, Intent intent, String str, IServiceConnection iServiceConnection, long j, String str2, String str3, int i) {
        return bindServiceInstance(iApplicationThread, iBinder, intent, str, iServiceConnection, j, str2, false, -1, null, null, str3, i);
    }

    /* JADX WARN: Removed duplicated region for block: B:41:0x0097 A[Catch: all -> 0x00a7, TryCatch #2 {all -> 0x00a7, blocks: (B:39:0x0091, B:41:0x0097, B:43:0x00a2, B:44:0x00af, B:45:0x00ab, B:46:0x00b9, B:48:0x00bc), top: B:38:0x0091 }] */
    /* JADX WARN: Removed duplicated region for block: B:50:0x00bd A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final int bindServiceInstance(android.app.IApplicationThread r20, android.os.IBinder r21, android.content.Intent r22, java.lang.String r23, android.app.IServiceConnection r24, long r25, java.lang.String r27, boolean r28, int r29, java.lang.String r30, android.app.IApplicationThread r31, java.lang.String r32, int r33) {
        /*
            Method dump skipped, instructions count: 255
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.bindServiceInstance(android.app.IApplicationThread, android.os.IBinder, android.content.Intent, java.lang.String, android.app.IServiceConnection, long, java.lang.String, boolean, int, java.lang.String, android.app.IApplicationThread, java.lang.String, int):int");
    }

    public final void bootAnimationComplete() {
        boolean z;
        EventLogTags.writeBootProgressAmsState(0, -1, 0, "bootAnimationComplete", "NULL");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                z = this.mCallFinishBooting;
                this.mBootAnimationComplete = true;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        if (z) {
            finishBooting();
        }
        EventLogTags.writeBootProgressAmsState(0, -1, 2, "bootAnimationComplete", "NULL");
    }

    public final int broadcastIntent(IApplicationThread iApplicationThread, Intent intent, String str, IIntentReceiver iIntentReceiver, int i, String str2, Bundle bundle, String[] strArr, int i2, Bundle bundle2, boolean z, boolean z2, int i3) {
        return broadcastIntentWithFeature(iApplicationThread, null, intent, str, iIntentReceiver, i, str2, bundle, strArr, null, null, i2, bundle2, z, z2, i3);
    }

    public final int broadcastIntentInPackage(IApplicationThread iApplicationThread, String str, String str2, int i, int i2, int i3, Intent intent, String str3, ProcessRecord processRecord, IIntentReceiver iIntentReceiver, int i4, String str4, Bundle bundle, String str5, Bundle bundle2, boolean z, boolean z2, int i5, BackgroundStartPrivileges backgroundStartPrivileges, int[] iArr) {
        int broadcastIntentLocked;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                verifyBroadcastLocked(intent);
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    broadcastIntentLocked = broadcastIntentLocked(getRecordForAppLOSP(iApplicationThread), str, str2, intent, str3, processRecord, iIntentReceiver, i4, str4, bundle, str5 == null ? null : new String[]{str5}, null, null, -1, bundle2, z, z2, -1, i, i2, i3, i5, backgroundStartPrivileges, iArr, null);
                } finally {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return broadcastIntentLocked;
    }

    public final int broadcastIntentLocked(Intent intent, IIntentReceiver iIntentReceiver, String[] strArr, Bundle bundle, boolean z, int i, int i2, int i3, int i4) {
        return broadcastIntentLocked(null, null, null, intent, null, null, iIntentReceiver, 0, null, null, strArr, null, null, -1, bundle, z, false, i, 1000, i2, i3, i4, BackgroundStartPrivileges.NONE, null, null);
    }

    public final int broadcastIntentLocked(ProcessRecord processRecord, String str, String str2, Intent intent, String str3, ProcessRecord processRecord2, IIntentReceiver iIntentReceiver, int i, String str4, Bundle bundle, String[] strArr, String[] strArr2, String[] strArr3, int i2, Bundle bundle2, boolean z, boolean z2, int i3, int i4, int i5, int i6, int i7, BackgroundStartPrivileges backgroundStartPrivileges, int[] iArr, BiFunction biFunction) {
        int i8;
        Flags.traceReceiverRegistration();
        if (Trace.isTagEnabled(64L)) {
            StringBuilder sb = new StringBuilder("broadcastIntent: ");
            sb.append(i4);
            sb.append('/');
            String action = intent.getAction();
            if (action == null) {
                action = null;
            }
            sb.append(action);
            sb.append("/0x");
            sb.append(Integer.toHexString(intent.getFlags()));
            sb.append('/');
            sb.append(z ? "O" : "_");
            sb.append(z2 ? "S" : "_");
            sb.append(iIntentReceiver != null ? "C" : "_");
            sb.append("/u");
            sb.append(i7);
            if (i4 != i5) {
                sb.append("/sender=");
                sb.append(i5);
            }
            i8 = BroadcastQueue.traceBegin(sb.toString());
        } else {
            i8 = 0;
        }
        int i9 = i8;
        try {
            return broadcastIntentLockedTraced(processRecord, str, str2, intent, str3, processRecord2, iIntentReceiver, i, str4, bundle, strArr, strArr2, strArr3, i2, BroadcastOptions.fromBundleNullable(bundle2), z, z2, i3, i4, i5, i6, i7, backgroundStartPrivileges, iArr, biFunction);
        } finally {
            if (Trace.isTagEnabled(64L)) {
                BroadcastQueue.traceEnd(i9);
            }
        }
    }

    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARN: Code restructure failed: missing block: B:559:0x06c2, code lost:
    
        if (r6.equals("android.intent.action.PACKAGES_UNSUSPENDED") == false) goto L301;
     */
    /* JADX WARN: Failed to restore switch over string. Please report as a decompilation issue */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:114:0x0378  */
    /* JADX WARN: Removed duplicated region for block: B:139:0x09af  */
    /* JADX WARN: Removed duplicated region for block: B:148:0x0a0b  */
    /* JADX WARN: Removed duplicated region for block: B:178:0x0b64  */
    /* JADX WARN: Removed duplicated region for block: B:186:0x0ba4  */
    /* JADX WARN: Removed duplicated region for block: B:189:0x0bbe  */
    /* JADX WARN: Removed duplicated region for block: B:214:0x0c4e A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:217:0x0c58  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x00ca  */
    /* JADX WARN: Removed duplicated region for block: B:228:0x0c8e  */
    /* JADX WARN: Removed duplicated region for block: B:230:0x0c97  */
    /* JADX WARN: Removed duplicated region for block: B:279:0x0dd0  */
    /* JADX WARN: Removed duplicated region for block: B:286:0x0de3  */
    /* JADX WARN: Removed duplicated region for block: B:288:0x0df4  */
    /* JADX WARN: Removed duplicated region for block: B:311:0x0ec4  */
    /* JADX WARN: Removed duplicated region for block: B:344:0x0dca  */
    /* JADX WARN: Removed duplicated region for block: B:345:0x0c94  */
    /* JADX WARN: Removed duplicated region for block: B:347:0x0c3f  */
    /* JADX WARN: Removed duplicated region for block: B:348:0x0bb6  */
    /* JADX WARN: Removed duplicated region for block: B:353:0x0b71  */
    /* JADX WARN: Removed duplicated region for block: B:378:0x0b5d  */
    /* JADX WARN: Removed duplicated region for block: B:381:0x09ce  */
    /* JADX WARN: Removed duplicated region for block: B:384:0x09d9  */
    /* JADX WARN: Removed duplicated region for block: B:388:0x09ed  */
    /* JADX WARN: Removed duplicated region for block: B:390:0x09f0  */
    /* JADX WARN: Removed duplicated region for block: B:391:0x09d4  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x01c1  */
    /* JADX WARN: Removed duplicated region for block: B:644:0x09f9  */
    /* JADX WARN: Removed duplicated region for block: B:654:0x02b0  */
    /* JADX WARN: Removed duplicated region for block: B:89:0x02d3  */
    /* JADX WARN: Removed duplicated region for block: B:95:0x02e3  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final int broadcastIntentLockedTraced(com.android.server.am.ProcessRecord r58, java.lang.String r59, java.lang.String r60, android.content.Intent r61, java.lang.String r62, com.android.server.am.ProcessRecord r63, android.content.IIntentReceiver r64, int r65, java.lang.String r66, android.os.Bundle r67, java.lang.String[] r68, java.lang.String[] r69, java.lang.String[] r70, int r71, android.app.BroadcastOptions r72, boolean r73, boolean r74, int r75, int r76, int r77, int r78, int r79, android.app.BackgroundStartPrivileges r80, int[] r81, java.util.function.BiFunction r82) {
        /*
            Method dump skipped, instructions count: 4038
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.broadcastIntentLockedTraced(com.android.server.am.ProcessRecord, java.lang.String, java.lang.String, android.content.Intent, java.lang.String, com.android.server.am.ProcessRecord, android.content.IIntentReceiver, int, java.lang.String, android.os.Bundle, java.lang.String[], java.lang.String[], java.lang.String[], int, android.app.BroadcastOptions, boolean, boolean, int, int, int, int, int, android.app.BackgroundStartPrivileges, int[], java.util.function.BiFunction):int");
    }

    public final int broadcastIntentWithFeature(IApplicationThread iApplicationThread, String str, Intent intent, String str2, IIntentReceiver iIntentReceiver, int i, String str3, Bundle bundle, String[] strArr, String[] strArr2, String[] strArr3, int i2, Bundle bundle2, boolean z, boolean z2, int i3) {
        String str4;
        int broadcastIntentLocked;
        enforceNotIsolatedCaller("broadcastIntent");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                verifyBroadcastLocked(intent);
                ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                int callingPid = Binder.getCallingPid();
                int callingUid = Binder.getCallingUid();
                enforceBroadcastOptionPermissionsInternal(callingUid, bundle2);
                long clearCallingIdentity = Binder.clearCallingIdentity();
                if (recordForAppLOSP != null) {
                    try {
                        str4 = recordForAppLOSP.info.packageName;
                    } catch (Throwable th) {
                        Binder.restoreCallingIdentity(clearCallingIdentity);
                        throw th;
                    }
                } else {
                    str4 = null;
                }
                broadcastIntentLocked = broadcastIntentLocked(recordForAppLOSP, str4, str, intent, str2, recordForAppLOSP, iIntentReceiver, i, str3, bundle, strArr, strArr2, strArr3, i2, bundle2, z, z2, callingPid, callingUid, callingUid, callingPid, i3, BackgroundStartPrivileges.NONE, null, null);
                Binder.restoreCallingIdentity(clearCallingIdentity);
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
        return broadcastIntentLocked;
    }

    public final boolean canGcNowLocked() {
        BroadcastQueueModernImpl broadcastQueueModernImpl = this.mBroadcastQueue;
        broadcastQueueModernImpl.getClass();
        boolean z = false;
        if (!broadcastQueueModernImpl.testAllProcessQueues(new BroadcastQueueModernImpl$$ExternalSyntheticLambda1(1), "idle", ActivityManagerDebugConfig.LOG_WRITER_INFO)) {
            return false;
        }
        ActivityTaskManagerService.LocalService localService = (ActivityTaskManagerService.LocalService) this.mAtmInternal;
        WindowManagerGlobalLock windowManagerGlobalLock = ActivityTaskManagerService.this.mGlobalLock;
        WindowManagerService.boostPriorityForLockedSection();
        synchronized (windowManagerGlobalLock) {
            try {
                if (!ActivityTaskManagerService.this.mSleeping) {
                    if (ActivityTaskManagerService.this.mRootWindowContainer.allResumedActivitiesIdle()) {
                    }
                }
                z = true;
            } catch (Throwable th) {
                WindowManagerService.resetPriorityAfterLockedSection();
                throw th;
            }
        }
        WindowManagerService.resetPriorityAfterLockedSection();
        return z;
    }

    public final boolean canRestrict(int i, String str, int i2) {
        boolean z = MARsPolicyManager.MARs_ENABLE;
        MARsPolicyManager mARsPolicyManager = MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE;
        mARsPolicyManager.getClass();
        if (MARsPolicyManager.hasPermission("com.samsung.android.permission.SEM_APP_RESTRICTION")) {
            return mARsPolicyManager.canRestrictBySEPWithoutPermissionCheck(i, i2, str);
        }
        return false;
    }

    public final boolean canScheduleUserInitiatedJobs(int i, int i2, String str) {
        ProcessRecord processRecord;
        BackgroundStartPrivileges backgroundStartPrivileges;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                synchronized (this.mPidsSelfLocked) {
                    processRecord = this.mPidsSelfLocked.get(i2);
                }
                long elapsedRealtime = SystemClock.elapsedRealtime();
                if (processRecord == null) {
                    backgroundStartPrivileges = getBackgroundStartPrivileges(i);
                } else {
                    if (isProcessInStateToScheduleUserInitiatedJobsLocked(i, elapsedRealtime, processRecord)) {
                        resetPriorityAfterLockedSection();
                        return true;
                    }
                    backgroundStartPrivileges = processRecord.getBackgroundStartPrivileges();
                }
                BackgroundStartPrivileges backgroundStartPrivileges2 = backgroundStartPrivileges;
                if (backgroundStartPrivileges2.allowsBackgroundActivityStarts()) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                if (this.mServices.shouldAllowFgsWhileInUsePermissionLocked(str, i2, i, processRecord, backgroundStartPrivileges2) != -1) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                UidRecord uidRecord = this.mProcessList.mActiveUids.get(i);
                boolean hasSystemAlertWindowPermission = ActivityTaskManagerService.this.hasSystemAlertWindowPermission(i, i2, str);
                Flags.fgsDisableSaw();
                boolean isChangeEnabled = CompatChanges.isChangeEnabled(319471980L, i);
                if (uidRecord != null) {
                    for (int size = uidRecord.mProcRecords.size() - 1; size >= 0; size--) {
                        ProcessRecord processRecord2 = (ProcessRecord) uidRecord.mProcRecords.valueAt(size);
                        if (isProcessInStateToScheduleUserInitiatedJobsLocked(i, elapsedRealtime, processRecord2)) {
                            resetPriorityAfterLockedSection();
                            return true;
                        }
                        if (hasSystemAlertWindowPermission && isChangeEnabled && processRecord2 != null && processRecord2.mState.mHasOverlayUi) {
                            resetPriorityAfterLockedSection();
                            return true;
                        }
                    }
                }
                if (hasSystemAlertWindowPermission && !isChangeEnabled) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                if (this.mInternal.isAssociatedCompanionApp(UserHandle.getUserId(i), i) && checkComponentPermission(i2, i, "android.permission.REQUEST_COMPANION_RUN_IN_BACKGROUND", 0, -1, true) == 0) {
                    resetPriorityAfterLockedSection();
                    return true;
                }
                resetPriorityAfterLockedSection();
                return false;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final void cancelIntentSender(IIntentSender iIntentSender) {
        PendingIntentController pendingIntentController = this.mPendingIntentController;
        pendingIntentController.getClass();
        if (iIntentSender instanceof PendingIntentRecord) {
            synchronized (pendingIntentController.mLock) {
                PendingIntentRecord pendingIntentRecord = (PendingIntentRecord) iIntentSender;
                try {
                    if (!UserHandle.isSameApp(AppGlobals.getPackageManager().getPackageUid(pendingIntentRecord.key.packageName, 268435456L, UserHandle.getCallingUserId()), Binder.getCallingUid())) {
                        String str = "Permission Denial: cancelIntentSender() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " is not allowed to cancel package " + pendingIntentRecord.key.packageName;
                        Slog.w("ActivityManager", str);
                        throw new SecurityException(str);
                    }
                    pendingIntentController.cancelIntentSender(pendingIntentRecord, true, 8);
                } catch (RemoteException e) {
                    throw new SecurityException(e);
                }
            }
        }
    }

    public final void cancelTaskWindowTransition(int i) {
        this.mActivityTaskManager.cancelTaskWindowTransition(i);
    }

    public final void checkBroadcastFromSystem(Intent intent, ProcessRecord processRecord, String str, int i, boolean z, List list) {
        HashSet hashSet;
        if ((intent.getFlags() & 4194304) != 0) {
            return;
        }
        String action = intent.getAction();
        if (Build.IS_USERDEBUG && DEBUG_LEVEL_LOW) {
            return;
        }
        if ((!z && action != null && (hashSet = this.mExt.mRelaxedBroadcastActions) != null && hashSet.contains(action)) || z || "android.intent.action.CLOSE_SYSTEM_DIALOGS".equals(action) || "com.android.intent.action.DISMISS_KEYBOARD_SHORTCUTS".equals(action) || "android.intent.action.MEDIA_BUTTON".equals(action) || "android.intent.action.MEDIA_SCANNER_SCAN_FILE".equals(action) || "com.android.intent.action.SHOW_KEYBOARD_SHORTCUTS".equals(action) || "android.intent.action.MASTER_CLEAR".equals(action) || "android.intent.action.FACTORY_RESET".equals(action) || "android.appwidget.action.APPWIDGET_CONFIGURE".equals(action) || "android.appwidget.action.APPWIDGET_UPDATE".equals(action) || "com.android.omadm.service.CONFIGURATION_UPDATE".equals(action) || "android.text.style.SUGGESTION_PICKED".equals(action) || "android.media.action.OPEN_AUDIO_EFFECT_CONTROL_SESSION".equals(action) || "android.media.action.CLOSE_AUDIO_EFFECT_CONTROL_SESSION".equals(action)) {
            return;
        }
        if (intent.getPackage() != null || intent.getComponent() != null) {
            if (list == null || list.size() == 0) {
                return;
            }
            for (int size = list.size() - 1; size >= 0; size--) {
                Object obj = list.get(size);
                if (obj instanceof ResolveInfo) {
                    ActivityInfo activityInfo = ((ResolveInfo) obj).activityInfo;
                    if (activityInfo.exported && activityInfo.permission == null) {
                    }
                } else {
                    BroadcastFilter broadcastFilter = (BroadcastFilter) obj;
                    if (broadcastFilter.exported && broadcastFilter.requiredPermission == null) {
                    }
                }
            }
            return;
        }
        if (processRecord != null) {
            StringBuilder m = DumpUtils$$ExternalSyntheticOutline0.m("Sending non-protected broadcast ", action, " from system ");
            m.append(processRecord.toShortString());
            m.append(" pkg ");
            m.append(str);
            Log.wtf("ActivityManager", m.toString(), new Throwable());
            return;
        }
        StringBuilder m2 = DumpUtils$$ExternalSyntheticOutline0.m("Sending non-protected broadcast ", action, " from system uid ");
        m2.append(UserHandle.formatUid(i));
        m2.append(" pkg ");
        m2.append(str);
        Log.wtf("ActivityManager", m2.toString(), new Throwable());
    }

    public final int checkCallingPermission(String str) {
        return checkPermissionForDevice(str, Binder.getCallingPid(), Binder.getCallingUid(), 0);
    }

    public final int checkContentUriPermissionFull(Uri uri, int i, int i2, int i3, int i4) {
        return checkUriPermission(uri, i, i2, i3, i4, true, "checkContentUriPermissionFull");
    }

    public final boolean checkExcessivePowerUsageLPr(long j, boolean z, long j2, String str, int i, ProcessRecord processRecord) {
        if (!z || j <= 0 || (100 * j2) / j < i) {
            return false;
        }
        BatteryStatsService batteryStatsService = this.mBatteryStatsService;
        int i2 = processRecord.info.uid;
        String str2 = processRecord.processName;
        synchronized (batteryStatsService.mLock) {
            batteryStatsService.mHandler.post(new BatteryStatsService$$ExternalSyntheticLambda8(batteryStatsService, i2, str2, j, j2, 3));
        }
        processRecord.mPkgList.forEachPackageProcessStats(new ActivityManagerService$$ExternalSyntheticLambda5(str, 1, processRecord));
        return true;
    }

    public final boolean checkIfProcessIsRunning(int i, String str) {
        boolean z;
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("The caller is not authorized to access the API");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                z = this.mProcessList.getProcessRecordLocked(i, str) != null;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        Log.d("ActivityManager", "check to see if the app added to knox vpn profile is running " + z);
        return z;
    }

    public final void checkLongLivePermissions(String str) {
        if (Binder.getCallingUid() == Process.myUid()) {
            return;
        }
        String[] strArr = {"com.samsung.android.multistar", Constants.SYSTEMUI_PACKAGE_NAME, KnoxCustomManagerService.LAUNCHER_PACKAGE, "com.sec.android.app.desktoplauncher", "system", "com.samsung.android.sidegesturepad"};
        try {
            String[] packagesForUid = AppGlobals.getPackageManager().getPackagesForUid(Binder.getCallingUid());
            if (packagesForUid != null && packagesForUid.length > 0) {
                for (String str2 : packagesForUid) {
                    for (int i = 0; i < 6; i++) {
                        String str3 = strArr[i];
                        if (str3 != null && str3.equals(str2)) {
                            enforceCallingPermission("android.permission.FORCE_STOP_PACKAGES", str);
                            return;
                        }
                    }
                }
            }
        } catch (RemoteException unused) {
        }
        StringBuilder m = DumpUtils$$ExternalSyntheticOutline0.m("Permission Denial: ", str, " from pid=");
        m.append(Binder.getCallingPid());
        m.append(", uid=");
        m.append(Binder.getCallingUid());
        throw new SecurityException(m.toString());
    }

    public final int checkPermission(String str, int i, int i2) {
        return checkPermissionForDevice(str, i, i2, 0);
    }

    public final int checkPermissionForDevice(String str, int i, int i2, int i3) {
        if (str == null) {
            return -1;
        }
        return checkComponentPermission(i, i2, str, i3, -1, true);
    }

    /* JADX WARN: Removed duplicated region for block: B:19:0x014b A[EDGE_INSN: B:19:0x014b->B:20:0x014b BREAK  A[LOOP:0: B:6:0x000e->B:23:?], SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:23:? A[LOOP:0: B:6:0x000e->B:23:?, LOOP_END, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:85:0x013c  */
    /* JADX WARN: Removed duplicated region for block: B:87:0x0149 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final int checkProcDiedOrComponentExecutingForFreeze(java.util.ArrayList r10, java.util.ArrayList r11) {
        /*
            Method dump skipped, instructions count: 333
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.checkProcDiedOrComponentExecutingForFreeze(java.util.ArrayList, java.util.ArrayList):int");
    }

    public final void checkProfileForADCP(int i, String str) {
        IApplicationThread iApplicationThread;
        if (CoreRune.SYSPERF_ACTIVE_APP_ADCP_ENABLE) {
            synchronized (this.mPidsSelfLocked) {
                ProcessRecord processRecord = this.mPidsSelfLocked.get(i);
                if (processRecord != null && (iApplicationThread = processRecord.mThread) != null) {
                    try {
                        iApplicationThread.getProfileLength(str);
                    } catch (RemoteException unused) {
                        Slog.w("ActivityManager", "Failed to get profile length");
                    }
                }
            }
        }
    }

    public final int checkUriPermission(Uri uri, int i, int i2, int i3, int i4, IBinder iBinder) {
        return checkUriPermission(uri, i, i2, i3, i4, false, "checkUriPermission");
    }

    public final int checkUriPermission(Uri uri, int i, int i2, int i3, int i4, boolean z, String str) {
        enforceNotIsolatedCaller(str);
        if (i == MY_PID) {
            return 0;
        }
        if (i2 != 0) {
            if (((PackageManagerService.PackageManagerInternalImpl) this.mPackageManagerInt).mService.snapshotComputer().filterAppAccess(i2, Binder.getCallingUid())) {
                return -1;
            }
        }
        return ((UriGrantsManagerService.LocalService) this.mUgmInternal).checkUriPermission(new GrantUri(i4, i3, uri), i2, i3, z) ? 0 : -1;
    }

    public final int[] checkUriPermissions(List list, int i, int i2, int i3, int i4, IBinder iBinder) {
        int size = list.size();
        int[] iArr = new int[size];
        Arrays.fill(iArr, -1);
        for (int i5 = 0; i5 < size; i5++) {
            Uri uri = (Uri) list.get(i5);
            iArr[i5] = checkUriPermission(ContentProvider.getUriWithoutUserId(uri), i, i2, i3, ContentProvider.getUserIdFromUri(uri, i4), iBinder);
        }
        return iArr;
    }

    /* JADX WARN: Removed duplicated region for block: B:14:0x0059 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final boolean cleanUpApplicationRecordLocked(com.android.server.am.ProcessRecord r15, int r16, boolean r17, boolean r18, boolean r19, boolean r20) {
        /*
            Method dump skipped, instructions count: 484
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.cleanUpApplicationRecordLocked(com.android.server.am.ProcessRecord, int, boolean, boolean, boolean, boolean):boolean");
    }

    public final void cleanupDisabledPackageComponentsLocked(String str, int i, String[] strArr) {
        ArraySet arraySet;
        IPackageManager packageManager = AppGlobals.getPackageManager();
        if (strArr == null) {
            return;
        }
        int length = strArr.length - 1;
        boolean z = false;
        ArraySet arraySet2 = null;
        while (true) {
            if (length < 0) {
                arraySet = arraySet2;
                break;
            }
            String str2 = strArr[length];
            if (str2.equals(str)) {
                try {
                    int applicationEnabledSetting = packageManager.getApplicationEnabledSetting(str, i != -1 ? i : 0);
                    z = (applicationEnabledSetting == 1 || applicationEnabledSetting == 0) ? false : true;
                    if (z) {
                        this.mExt.removeLongLivePackageWhenUninstalledLocked(str);
                        if (CoreRune.FW_DEDICATED_MEMORY) {
                            this.mExt.removeLongLiveTaskLocked(i, str);
                        }
                        arraySet = null;
                    }
                } catch (Exception unused) {
                    return;
                }
            } else {
                try {
                    int componentEnabledSetting = packageManager.getComponentEnabledSetting(new ComponentName(str, str2), i != -1 ? i : 0);
                    if (componentEnabledSetting != 1 && componentEnabledSetting != 0) {
                        if (arraySet2 == null) {
                            arraySet2 = new ArraySet(strArr.length);
                        }
                        arraySet2.add(str2);
                    }
                } catch (Exception unused2) {
                    return;
                }
            }
            length--;
        }
        if (z || arraySet != null) {
            ActivityTaskManagerInternal activityTaskManagerInternal = this.mAtmInternal;
            boolean z2 = this.mBooted;
            ActivityTaskManagerService.LocalService localService = (ActivityTaskManagerService.LocalService) activityTaskManagerInternal;
            WindowManagerGlobalLock windowManagerGlobalLock = ActivityTaskManagerService.this.mGlobalLock;
            WindowManagerService.boostPriorityForLockedSection();
            synchronized (windowManagerGlobalLock) {
                try {
                    RootWindowContainer rootWindowContainer = ActivityTaskManagerService.this.mRootWindowContainer;
                    if (rootWindowContainer == null) {
                        WindowManagerService.resetPriorityAfterLockedSection();
                    } else {
                        if (rootWindowContainer.finishDisabledPackageActivities(i, str, arraySet, true, false, false) && z2) {
                            ActivityTaskManagerService.this.mRootWindowContainer.resumeFocusedTasksTopActivities();
                            ActivityTaskManagerService.this.mTaskSupervisor.scheduleIdle();
                        }
                        ActivityTaskManagerService.this.mRecentTasks.cleanupDisabledPackageTasksLocked(i, str, arraySet);
                        WindowManagerService.resetPriorityAfterLockedSection();
                    }
                } catch (Throwable th) {
                    WindowManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            this.mServices.bringDownDisabledPackageServicesLocked(i, str, arraySet, false, false, true);
            ArrayList arrayList = new ArrayList();
            this.mCpHelper.mProviderMap.collectPackageProvidersLocked(str, (Set) arraySet, true, false, i, arrayList);
            for (int size = arrayList.size() - 1; size >= 0; size--) {
                this.mCpHelper.removeDyingProviderLocked(null, (ContentProviderRecord) arrayList.get(size), true);
            }
            this.mBroadcastQueue.cleanupDisabledPackageReceiversLocked(i, str, arraySet);
        }
    }

    public final void clearAllOverridePermissionStates(int i) {
        AccessCheckDelegateHelper accessCheckDelegateHelper = getAccessCheckDelegateHelper();
        accessCheckDelegateHelper.getClass();
        if (UserHandle.getCallingAppId() != 0) {
            throw new SecurityException("Only root can override permissions.");
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = accessCheckDelegateHelper.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                AccessCheckDelegate$AccessCheckDelegateImpl accessCheckDelegate$AccessCheckDelegateImpl = accessCheckDelegateHelper.mAccessCheckDelegate;
                if (accessCheckDelegate$AccessCheckDelegateImpl == null) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                if (!accessCheckDelegate$AccessCheckDelegateImpl.isDelegateAndOwnerUid(i)) {
                    if (accessCheckDelegate$AccessCheckDelegateImpl.mOverridePermissionStates != null) {
                        throw new SecurityException("Only the granter of current overrides can remove them.");
                    }
                    resetPriorityAfterProcLockedSection();
                } else {
                    accessCheckDelegate$AccessCheckDelegateImpl.mOverridePermissionStates = null;
                    PackageManager.invalidatePackageInfoCache();
                    if (!accessCheckDelegate$AccessCheckDelegateImpl.hasDelegateOrOverrides()) {
                        accessCheckDelegateHelper.removeAccessCheckDelegateLPr();
                    }
                    resetPriorityAfterProcLockedSection();
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:12:0x0027 A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:14:0x0028  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final boolean clearApplicationUserData(java.lang.String r9, boolean r10, android.content.pm.IPackageDataObserver r11, int r12) {
        /*
            r8 = this;
            boolean r0 = android.text.TextUtils.isEmpty(r9)
            r1 = 0
            if (r0 != 0) goto L24
            com.samsung.android.knox.application.IApplicationPolicy r0 = r8.mApplicationPolicy
            if (r0 != 0) goto L18
            java.lang.String r0 = "application_policy"
            android.os.IBinder r0 = android.os.ServiceManager.getService(r0)
            com.samsung.android.knox.application.IApplicationPolicy r0 = com.samsung.android.knox.application.IApplicationPolicy.Stub.asInterface(r0)
            r8.mApplicationPolicy = r0
        L18:
            com.samsung.android.knox.application.IApplicationPolicy r0 = r8.mApplicationPolicy
            r8.mApplicationPolicy = r0
            if (r0 == 0) goto L24
            r2 = 1
            boolean r0 = r0.isApplicationClearDataDisabled(r9, r12, r2)     // Catch: android.os.RemoteException -> L24
            goto L25
        L24:
            r0 = r1
        L25:
            if (r0 == 0) goto L28
            return r1
        L28:
            r5 = 0
            r2 = r8
            r3 = r9
            r4 = r10
            r6 = r11
            r7 = r12
            boolean r8 = r2.clearApplicationUserData(r3, r4, r5, r6, r7)
            return r8
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.clearApplicationUserData(java.lang.String, boolean, android.content.pm.IPackageDataObserver, int):boolean");
    }

    /* JADX WARN: Removed duplicated region for block: B:106:0x00bf  */
    /* JADX WARN: Removed duplicated region for block: B:109:0x0091  */
    /* JADX WARN: Removed duplicated region for block: B:10:0x0072 A[Catch: all -> 0x008e, TryCatch #5 {all -> 0x008e, blocks: (B:3:0x0051, B:5:0x0066, B:10:0x0072, B:17:0x0097, B:20:0x009e, B:26:0x00c5, B:31:0x00d8, B:34:0x00e5, B:41:0x00fe, B:42:0x0101, B:46:0x0152, B:48:0x0166, B:51:0x016f, B:54:0x0182, B:56:0x0185, B:57:0x01b4, B:68:0x01cd, B:78:0x01d4, B:79:0x01d7, B:86:0x01d8, B:90:0x01ec, B:92:0x01f0, B:99:0x01fc, B:100:0x0219, B:101:0x00a7, B:107:0x007c, B:108:0x008d, B:81:0x0104, B:83:0x013c, B:85:0x0142, B:45:0x0151), top: B:2:0x0051, inners: #0, #4 }] */
    /* JADX WARN: Removed duplicated region for block: B:15:0x0095  */
    /* JADX WARN: Removed duplicated region for block: B:26:0x00c5 A[Catch: all -> 0x008e, TryCatch #5 {all -> 0x008e, blocks: (B:3:0x0051, B:5:0x0066, B:10:0x0072, B:17:0x0097, B:20:0x009e, B:26:0x00c5, B:31:0x00d8, B:34:0x00e5, B:41:0x00fe, B:42:0x0101, B:46:0x0152, B:48:0x0166, B:51:0x016f, B:54:0x0182, B:56:0x0185, B:57:0x01b4, B:68:0x01cd, B:78:0x01d4, B:79:0x01d7, B:86:0x01d8, B:90:0x01ec, B:92:0x01f0, B:99:0x01fc, B:100:0x0219, B:101:0x00a7, B:107:0x007c, B:108:0x008d, B:81:0x0104, B:83:0x013c, B:85:0x0142, B:45:0x0151), top: B:2:0x0051, inners: #0, #4 }] */
    /* JADX WARN: Removed duplicated region for block: B:99:0x01fc A[Catch: all -> 0x008e, TRY_ENTER, TryCatch #5 {all -> 0x008e, blocks: (B:3:0x0051, B:5:0x0066, B:10:0x0072, B:17:0x0097, B:20:0x009e, B:26:0x00c5, B:31:0x00d8, B:34:0x00e5, B:41:0x00fe, B:42:0x0101, B:46:0x0152, B:48:0x0166, B:51:0x016f, B:54:0x0182, B:56:0x0185, B:57:0x01b4, B:68:0x01cd, B:78:0x01d4, B:79:0x01d7, B:86:0x01d8, B:90:0x01ec, B:92:0x01f0, B:99:0x01fc, B:100:0x0219, B:101:0x00a7, B:107:0x007c, B:108:0x008d, B:81:0x0104, B:83:0x013c, B:85:0x0142, B:45:0x0151), top: B:2:0x0051, inners: #0, #4 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final boolean clearApplicationUserData(java.lang.String r25, boolean r26, final boolean r27, final android.content.pm.IPackageDataObserver r28, int r29) {
        /*
            Method dump skipped, instructions count: 542
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.clearApplicationUserData(java.lang.String, boolean, boolean, android.content.pm.IPackageDataObserver, int):boolean");
    }

    public final boolean clearLongLiveTask(int i) {
        if (!CoreRune.FW_DEDICATED_MEMORY) {
            return false;
        }
        checkLongLivePermissions("clearLongLiveTask");
        this.mExt.setLongLiveTask(i, false);
        return true;
    }

    public final void clearOomAdjObserver() {
        synchronized (this.mOomAdjObserverLock) {
            this.mCurOomAdjUid = -1;
            this.mCurOomAdjObserver = null;
        }
    }

    public final void clearOverridePermissionStates(int i, int i2) {
        AccessCheckDelegateHelper accessCheckDelegateHelper = getAccessCheckDelegateHelper();
        accessCheckDelegateHelper.getClass();
        if (UserHandle.getCallingAppId() != 0) {
            throw new SecurityException("Only root can override permissions.");
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = accessCheckDelegateHelper.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                AccessCheckDelegate$AccessCheckDelegateImpl accessCheckDelegate$AccessCheckDelegateImpl = accessCheckDelegateHelper.mAccessCheckDelegate;
                if (accessCheckDelegate$AccessCheckDelegateImpl == null) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                if (!accessCheckDelegate$AccessCheckDelegateImpl.isDelegateAndOwnerUid(i)) {
                    if (accessCheckDelegate$AccessCheckDelegateImpl.mOverridePermissionStates != null) {
                        throw new SecurityException("Only the granter of current overrides can remove them.");
                    }
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                SparseArray sparseArray = accessCheckDelegate$AccessCheckDelegateImpl.mOverridePermissionStates;
                if (sparseArray != null) {
                    sparseArray.remove(i2);
                    PackageManager.invalidatePackageInfoCache();
                    if (accessCheckDelegate$AccessCheckDelegateImpl.mOverridePermissionStates.size() == 0) {
                        accessCheckDelegate$AccessCheckDelegateImpl.mOverridePermissionStates = null;
                    }
                }
                if (!accessCheckDelegate$AccessCheckDelegateImpl.hasDelegateOrOverrides()) {
                    accessCheckDelegateHelper.removeAccessCheckDelegateLPr();
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public final boolean clearRestrictionInfo(List list) {
        boolean z = MARsPolicyManager.MARs_ENABLE;
        MARsPolicyManager mARsPolicyManager = MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE;
        mARsPolicyManager.getClass();
        if (!MARsPolicyManager.hasPermission("com.samsung.android.permission.SEM_APP_RESTRICTION") || list == null) {
            return false;
        }
        List removeRestrictedInfo = mARsPolicyManager.removeRestrictedInfo("default", list);
        if (list.isEmpty()) {
            return false;
        }
        StringBuilder sb = new StringBuilder("CLR ");
        sb.append(removeRestrictedInfo.toString());
        sb.append(" f: ");
        ArrayList arrayList = (ArrayList) removeRestrictedInfo;
        sb.append(list.size() - arrayList.size());
        mARsPolicyManager.addDebugInfoToHistory("SEP", sb.toString());
        return arrayList.size() == list.size();
    }

    public final void clearTTSPkgInfo() {
        if (MARsPolicyManager.MARs_ENABLE) {
            MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE.getClass();
            ActiveMusicRecordFilter activeMusicRecordFilter = ActiveMusicRecordFilter.ActiveMusicRecordFilterHolder.INSTANCE;
            synchronized (activeMusicRecordFilter.mTTSPkgsUid) {
                activeMusicRecordFilter.mTTSPkgsUid.clear();
            }
            Slog.d("MARsPolicyManager", "clearTTSPkgInfo");
        }
    }

    public final void closeSystemDialogs(String str) {
        this.mAtmInternal.closeSystemDialogs(str);
    }

    public final void closeSystemDialogsInDisplay(String str, int i) {
        ActivityTaskManagerService.LocalService localService = (ActivityTaskManagerService.LocalService) this.mAtmInternal;
        localService.getClass();
        ActivityTaskManagerService.enforceNotIsolatedCaller("closeSystemDialogs");
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        if (ActivityTaskManagerService.this.checkCanCloseSystemDialogs(callingPid, callingUid, null)) {
            long clearCallingIdentity = Binder.clearCallingIdentity();
            try {
                WindowManagerGlobalLock windowManagerGlobalLock = ActivityTaskManagerService.this.mGlobalLock;
                WindowManagerService.boostPriorityForLockedSection();
                synchronized (windowManagerGlobalLock) {
                    if (callingUid >= 10000) {
                        try {
                            WindowProcessController process = ActivityTaskManagerService.this.mProcessMap.getProcess(callingPid);
                            if (!process.mPerceptible && (process.mActivityStateFlags & EndpointMonitorConst.FLAG_TRACING_NETWORK_EVENT_ABNORMAL_PKT) == 0) {
                                Slog.w("ActivityTaskManager", "Ignoring closeSystemDialogs " + str + " from background process " + process);
                                WindowManagerService.resetPriorityAfterLockedSection();
                            }
                        } catch (Throwable th) {
                            WindowManagerService.resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                    ActivityTaskManagerService.this.mWindowManager.closeSystemDialogsInDisplay(str, i);
                    RootWindowContainer rootWindowContainer = ActivityTaskManagerService.this.mRootWindowContainer;
                    DisplayContent displayContent = rootWindowContainer.getDisplayContent(i);
                    if (displayContent == null) {
                        Slog.e("WindowManager", "closeSystemDialogActivities: cannot find display #" + i);
                    } else {
                        displayContent.forAllActivities(new RootWindowContainer$$ExternalSyntheticLambda16(rootWindowContainer, str, 0));
                    }
                    WindowManagerService.resetPriorityAfterLockedSection();
                    ActivityTaskManagerService.this.mAmInternal.broadcastCloseSystemDialogs(str, i);
                }
            } finally {
                Binder.restoreCallingIdentity(clearCallingIdentity);
            }
        }
    }

    public final ArrayList collectProcesses(int i, boolean z, String[] strArr) {
        ArrayList collectProcessesLOSP;
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                collectProcessesLOSP = this.mProcessList.collectProcessesLOSP(i, z, strArr);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return collectProcessesLOSP;
    }

    public final List collectReceiverComponents(Intent intent, String str, int i, int i2, int[] iArr, int[] iArr2) {
        boolean z = false;
        List list = null;
        HashSet hashSet = null;
        for (int i3 : iArr) {
            if (i != 2000 || !this.mUserController.hasUserRestriction("no_debugging_features", i3)) {
                PackageManagerService.PackageManagerInternalImpl packageManagerInternalImpl = (PackageManagerService.PackageManagerInternalImpl) this.mPackageManagerInt;
                List queryIntentReceiversInternal = PackageManagerService.this.mResolveIntentHelper.queryIntentReceiversInternal(packageManagerInternalImpl.mService.snapshotComputer(), intent, str, 268436480L, i3, i, i2, true);
                if (i3 != 0 && queryIntentReceiversInternal != null) {
                    int i4 = 0;
                    while (i4 < queryIntentReceiversInternal.size()) {
                        if ((((ResolveInfo) queryIntentReceiversInternal.get(i4)).activityInfo.flags & 536870912) != 0) {
                            queryIntentReceiversInternal.remove(i4);
                            i4--;
                        }
                        i4++;
                    }
                }
                if (queryIntentReceiversInternal != null) {
                    for (int size = queryIntentReceiversInternal.size() - 1; size >= 0; size--) {
                        ComponentAliasResolver componentAliasResolver = this.mComponentAliasResolver;
                        componentAliasResolver.getClass();
                        long clearCallingIdentity = Binder.clearCallingIdentity();
                        try {
                            synchronized (componentAliasResolver.mLock) {
                            }
                            Binder.restoreCallingIdentity(clearCallingIdentity);
                        } catch (Throwable th) {
                            Binder.restoreCallingIdentity(clearCallingIdentity);
                            throw th;
                        }
                    }
                }
                if (queryIntentReceiversInternal != null && queryIntentReceiversInternal.size() == 0) {
                    queryIntentReceiversInternal = null;
                }
                if (list == null) {
                    list = queryIntentReceiversInternal;
                } else if (queryIntentReceiversInternal != null) {
                    if (!z) {
                        for (int i5 = 0; i5 < list.size(); i5++) {
                            ResolveInfo resolveInfo = (ResolveInfo) list.get(i5);
                            if ((resolveInfo.activityInfo.flags & 1073741824) != 0) {
                                ActivityInfo activityInfo = resolveInfo.activityInfo;
                                ComponentName componentName = new ComponentName(activityInfo.packageName, activityInfo.name);
                                if (hashSet == null) {
                                    hashSet = new HashSet();
                                }
                                hashSet.add(componentName);
                            }
                        }
                        z = true;
                    }
                    for (int i6 = 0; i6 < queryIntentReceiversInternal.size(); i6++) {
                        ResolveInfo resolveInfo2 = (ResolveInfo) queryIntentReceiversInternal.get(i6);
                        if ((resolveInfo2.activityInfo.flags & 1073741824) != 0) {
                            ActivityInfo activityInfo2 = resolveInfo2.activityInfo;
                            ComponentName componentName2 = new ComponentName(activityInfo2.packageName, activityInfo2.name);
                            if (hashSet == null) {
                                hashSet = new HashSet();
                            }
                            if (!hashSet.contains(componentName2)) {
                                hashSet.add(componentName2);
                                list.add(resolveInfo2);
                            }
                        } else {
                            list.add(resolveInfo2);
                        }
                    }
                }
            }
        }
        if (list != null && iArr2 != null) {
            for (int size2 = list.size() - 1; size2 >= 0; size2--) {
                int appId = UserHandle.getAppId(((ResolveInfo) list.get(size2)).activityInfo.applicationInfo.uid);
                if (appId >= 10000 && Arrays.binarySearch(iArr2, appId) < 0) {
                    list.remove(size2);
                }
            }
        }
        return list;
    }

    public final CompatibilityInfo compatibilityInfoForPackage(ApplicationInfo applicationInfo) {
        CompatibilityInfo compatibilityInfoForPackageLocked;
        ActivityTaskManagerService.LocalService localService = (ActivityTaskManagerService.LocalService) this.mAtmInternal;
        WindowManagerGlobalLock windowManagerGlobalLock = ActivityTaskManagerService.this.mGlobalLock;
        WindowManagerService.boostPriorityForLockedSection();
        synchronized (windowManagerGlobalLock) {
            try {
                compatibilityInfoForPackageLocked = ActivityTaskManagerService.this.mCompatModePackages.compatibilityInfoForPackageLocked(applicationInfo);
            } catch (Throwable th) {
                WindowManagerService.resetPriorityAfterLockedSection();
                throw th;
            }
        }
        WindowManagerService.resetPriorityAfterLockedSection();
        return compatibilityInfoForPackageLocked;
    }

    public final void crashApplicationWithType(int i, int i2, String str, int i3, String str2, boolean z, int i4) {
        crashApplicationWithTypeWithExtras(i, i2, str, i3, str2, z, i4, null);
    }

    public final void crashApplicationWithTypeWithExtras(int i, int i2, String str, int i3, String str2, boolean z, int i4, Bundle bundle) {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            throw new SecurityException(ActivityManagerService$$ExternalSyntheticOutline0.m(new StringBuilder("Permission Denial: crashApplication() from pid="), ", uid=", " requires android.permission.FORCE_STOP_PACKAGES", "ActivityManager"));
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mAppErrors.scheduleAppCrashLocked(i, i2, str, i3, str2, z, i4, bundle);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void dismissUserSwitchingDialog(int i) {
        this.mUserController.mInjector.dismissUserSwitchingDialog(null);
    }

    public final void doActiveLaunch(String str, boolean z, int i) {
        ActivityManagerPerformance activityManagerPerformance;
        if (str == null) {
            return;
        }
        if (checkCallingPermission("com.samsung.android.permission.DO_ACTIVE_LAUNCH") != 0) {
            throw new SecurityException("uid : " + Binder.getCallingUid() + ", Requires active launch permission ");
        }
        if (z) {
            Pageboost.startActiveLaunch(str);
        }
        PackageManager packageManager = this.mContext.getPackageManager();
        if (packageManager == null) {
            return;
        }
        Intent launchIntentForPackage = packageManager.getLaunchIntentForPackage(str);
        if (launchIntentForPackage == null) {
            Slog.e("ActivityManager", "launchIntent is null");
            return;
        }
        ActivityOptions makeBasic = ActivityOptions.makeBasic();
        if (makeBasic != null) {
            makeBasic.setActiveApplaunch(true);
            long clearCallingIdentity = Binder.clearCallingIdentity();
            try {
                try {
                    boolean z2 = CoreRune.SYSPERF_VI_BOOST;
                    if (z2) {
                        ActivityTaskManagerService activityTaskManagerService = this.mActivityTaskManager;
                        activityTaskManagerService.getClass();
                        if (z2 && (activityManagerPerformance = activityTaskManagerService.mAMBooster) != null && z2) {
                            ActivityManagerPerformance.MainHandler mainHandler = activityManagerPerformance.mHandler;
                            mainHandler.sendMessage(mainHandler.obtainMessage(15, 100));
                        }
                    }
                    if (z) {
                        this.mContext.startActivity(launchIntentForPackage, makeBasic.toBundle());
                    } else {
                        this.mContext.startActivityAsUser(launchIntentForPackage, makeBasic.toBundle(), UserHandle.of(i));
                    }
                } catch (Exception e) {
                    Slog.i("ActivityManager", "No activity to handle assist action.", e);
                }
                Binder.restoreCallingIdentity(clearCallingIdentity);
                Slog.d("ActivityManager", "starting Active launch");
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(clearCallingIdentity);
                Slog.d("ActivityManager", "starting Active launch");
                throw th;
            }
        }
    }

    public final void doStopUidLocked(int i, UidRecord uidRecord) {
        this.mServices.stopInBackgroundLocked(i);
        enqueueUidChangeLocked(uidRecord, i, -2147483646);
    }

    public final void dump(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr) {
        PriorityDump.dump(this.mPriorityDumper, fileDescriptor, printWriter, strArr);
    }

    public final void dumpAllResources(ParcelFileDescriptor parcelFileDescriptor, PrintWriter printWriter) {
        ArrayList arrayList = new ArrayList();
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                arrayList.addAll(this.mProcessList.mLruProcesses);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            ProcessRecord processRecord = (ProcessRecord) arrayList.get(i);
            printWriter.println(XmlUtils$$ExternalSyntheticOutline0.m("Resources History for ", processRecord.processName, " (", processRecord.info.packageName, ")"));
            if (processRecord.mOptRecord.mFrozen) {
                printWriter.println("  Skipping frozen process");
                printWriter.flush();
            } else {
                printWriter.flush();
                try {
                    TransferPipe transferPipe = new TransferPipe("  ");
                    try {
                        IApplicationThread iApplicationThread = processRecord.mThread;
                        if (iApplicationThread != null) {
                            iApplicationThread.dumpResources(transferPipe.getWriteFd(), (RemoteCallback) null);
                            transferPipe.go(parcelFileDescriptor.getFileDescriptor(), 2000L);
                        } else {
                            printWriter.println("  Resources history for " + processRecord.processName + " (" + processRecord.info.packageName + ") failed, no thread");
                        }
                        transferPipe.kill();
                    } catch (Throwable th2) {
                        transferPipe.kill();
                        throw th2;
                    }
                } catch (IOException e) {
                    printWriter.println("  " + e.getMessage());
                    printWriter.flush();
                }
            }
        }
    }

    public final void dumpAllowedAssociationsLocked(PrintWriter printWriter, String str) {
        printWriter.println("ACTIVITY MANAGER ALLOWED ASSOCIATION STATE (dumpsys activity allowed-associations)");
        boolean z = false;
        if (this.mAllowedAssociations != null) {
            boolean z2 = false;
            for (int i = 0; i < this.mAllowedAssociations.size(); i++) {
                String str2 = (String) this.mAllowedAssociations.keyAt(i);
                ArraySet arraySet = ((PackageAssociationInfo) this.mAllowedAssociations.valueAt(i)).mAllowedPackageAssociations;
                if (!z2) {
                    printWriter.println("  Allowed associations (by restricted package):");
                    z2 = true;
                }
                printWriter.print("  * ");
                printWriter.print(str2);
                printWriter.println(":");
                for (int i2 = 0; i2 < arraySet.size(); i2++) {
                    if (str == null || str2.equals(str) || ((String) arraySet.valueAt(i2)).equals(str)) {
                        printWriter.print("      Allow: ");
                        printWriter.println((String) arraySet.valueAt(i2));
                    }
                }
                if (((PackageAssociationInfo) this.mAllowedAssociations.valueAt(i)).mIsDebuggable) {
                    printWriter.println("      (debuggable)");
                }
            }
            z = z2;
        }
        if (z) {
            return;
        }
        printWriter.println("  (No association restrictions)");
    }

    public final void dumpAppRestrictionController(PrintWriter printWriter) {
        printWriter.println("-------------------------------------------------------------------------------");
        AppRestrictionController appRestrictionController = this.mAppRestrictionController;
        appRestrictionController.getClass();
        printWriter.print("");
        printWriter.println("APP BACKGROUND RESTRICTIONS");
        printWriter.print("  ");
        printWriter.println("BACKGROUND RESTRICTION LEVEL SETTINGS");
        AppRestrictionController.RestrictionSettings restrictionSettings = appRestrictionController.mRestrictionSettings;
        restrictionSettings.getClass();
        final ArrayList arrayList = new ArrayList();
        synchronized (AppRestrictionController.this.mSettingsLock) {
            restrictionSettings.mRestrictionLevels.forEach(new Consumer() { // from class: com.android.server.am.AppRestrictionController$RestrictionSettings$$ExternalSyntheticLambda0
                @Override // java.util.function.Consumer
                public final void accept(Object obj) {
                    arrayList.add((AppRestrictionController.RestrictionSettings.PkgSettings) obj);
                }
            });
        }
        Collections.sort(arrayList, Comparator.comparingInt(new AppRestrictionController$RestrictionSettings$$ExternalSyntheticLambda1()));
        AppRestrictionController.this.mInjector.getClass();
        long currentTimeMillis = System.currentTimeMillis();
        int size = arrayList.size();
        for (int i = 0; i < size; i++) {
            printWriter.print("    ");
            printWriter.print('#');
            printWriter.print(i);
            printWriter.print(' ');
            AppRestrictionController.RestrictionSettings.PkgSettings pkgSettings = (AppRestrictionController.RestrictionSettings.PkgSettings) arrayList.get(i);
            synchronized (AppRestrictionController.this.mSettingsLock) {
                try {
                    printWriter.print(pkgSettings.toString());
                    if (pkgSettings.mLastRestrictionLevel != 0) {
                        printWriter.print('/');
                        printWriter.print(ActivityManager.restrictionLevelToName(pkgSettings.mLastRestrictionLevel));
                    }
                    printWriter.print(" levelChange=");
                    TimeUtils.formatDuration(pkgSettings.mLevelChangeTime - currentTimeMillis, printWriter);
                    if (pkgSettings.mLastNotificationShownTime != null) {
                        int i2 = 0;
                        while (true) {
                            long[] jArr = pkgSettings.mLastNotificationShownTime;
                            if (i2 >= jArr.length) {
                                break;
                            }
                            if (jArr[i2] > 0) {
                                printWriter.print(" lastNoti(");
                                AppRestrictionController.NotificationHelper notificationHelper = AppRestrictionController.this.mNotificationHelper;
                                printWriter.print(AppRestrictionController.NotificationHelper.NOTIFICATION_TYPE_STRINGS[i2]);
                                printWriter.print(")=");
                                TimeUtils.formatDuration(pkgSettings.mLastNotificationShownTime[i2] - currentTimeMillis, printWriter);
                            }
                            i2++;
                        }
                    }
                } catch (Throwable th) {
                    throw th;
                }
            }
            printWriter.print(" effectiveExemption=");
            printWriter.print(PowerExemptionManager.reasonCodeToString(AppRestrictionController.this.getBackgroundRestrictionExemptionReason(pkgSettings.mUid)));
            printWriter.println();
        }
        AppRestrictionController.ConstantsObserver constantsObserver = appRestrictionController.mConstantsObserver;
        constantsObserver.getClass();
        printWriter.print("    ");
        printWriter.println("BACKGROUND RESTRICTION POLICY SETTINGS:");
        printWriter.print("      ");
        printWriter.print("bg_auto_restricted_bucket_on_bg_restricted");
        printWriter.print('=');
        printWriter.println(constantsObserver.mBgAutoRestrictedBucket);
        printWriter.print("      ");
        printWriter.print("bg_auto_restrict_abusive_apps");
        printWriter.print('=');
        printWriter.println(constantsObserver.mBgAutoRestrictAbusiveApps);
        printWriter.print("      ");
        printWriter.print("bg_abusive_notification_minimal_interval");
        printWriter.print('=');
        ActivityManagerConstants$$ExternalSyntheticOutline0.m(constantsObserver.mBgAbusiveNotificationMinIntervalMs, printWriter, "      ", "bg_long_fgs_notification_minimal_interval");
        printWriter.print('=');
        ActivityManagerConstants$$ExternalSyntheticOutline0.m(constantsObserver.mBgLongFgsNotificationMinIntervalMs, printWriter, "      ", "bg_prompt_fgs_on_long_running");
        printWriter.print('=');
        printWriter.println(constantsObserver.mBgPromptFgsOnLongRunning);
        printWriter.print("      ");
        printWriter.print("bg_prompt_fgs_with_noti_on_long_running");
        printWriter.print('=');
        printWriter.println(constantsObserver.mBgPromptFgsWithNotiOnLongRunning);
        printWriter.print("      ");
        printWriter.print("bg_prompt_fgs_with_noti_to_bg_restricted");
        printWriter.print('=');
        printWriter.println(constantsObserver.mBgPromptFgsWithNotiToBgRestricted);
        printWriter.print("      ");
        printWriter.print("bg_prompt_abusive_apps_to_bg_restricted");
        printWriter.print('=');
        printWriter.println(constantsObserver.mBgPromptAbusiveAppsToBgRestricted);
        printWriter.print("      ");
        printWriter.print("bg_restriction_exempted_packages");
        printWriter.print('=');
        printWriter.println(constantsObserver.mBgRestrictionExemptedPackages.toString());
        int size2 = appRestrictionController.mAppStateTrackers.size();
        for (int i3 = 0; i3 < size2; i3++) {
            printWriter.println();
            ((BaseAppStateTracker) appRestrictionController.mAppStateTrackers.get(i3)).dump(printWriter, "  ");
        }
        if (appRestrictionController.errorMsg != null) {
            BinaryTransparencyService$$ExternalSyntheticOutline0.m(BinaryTransparencyService$$ExternalSyntheticOutline0.m(printWriter, "  ", "App Restrictions have changed due to an exception while parsing XML "), appRestrictionController.errorMsg, printWriter);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:38:0x00a5, code lost:
    
        if (android.os.Debug.getMemoryInfo(r10, r1) == false) goto L26;
     */
    /* JADX WARN: Removed duplicated region for block: B:108:0x02cb  */
    /* JADX WARN: Removed duplicated region for block: B:117:0x0459  */
    /* JADX WARN: Removed duplicated region for block: B:205:0x03c5 A[Catch: RemoteException -> 0x03b5, IOException -> 0x03b7, TryCatch #11 {RemoteException -> 0x03b5, IOException -> 0x03b7, blocks: (B:188:0x03ab, B:190:0x03b0, B:203:0x03c0, B:205:0x03c5, B:206:0x03cc), top: B:187:0x03ab }] */
    /* JADX WARN: Removed duplicated region for block: B:222:0x0409  */
    @dalvik.annotation.optimization.NeverCompile
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final void dumpApplicationMemoryUsage(java.io.FileDescriptor r92, java.io.PrintWriter r93, final com.android.server.am.ActivityManagerService.MemoryUsageDumpOptions r94, java.lang.String[] r95, java.util.ArrayList r96) {
        /*
            Method dump skipped, instructions count: 3346
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.dumpApplicationMemoryUsage(java.io.FileDescriptor, java.io.PrintWriter, com.android.server.am.ActivityManagerService$MemoryUsageDumpOptions, java.lang.String[], java.util.ArrayList):void");
    }

    /* JADX WARN: Removed duplicated region for block: B:56:0x0170  */
    /* JADX WARN: Removed duplicated region for block: B:59:? A[RETURN, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:8:0x0029  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final void dumpAssociationsLocked(java.io.PrintWriter r22, java.lang.String r23) {
        /*
            Method dump skipped, instructions count: 374
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.dumpAssociationsLocked(java.io.PrintWriter, java.lang.String):void");
    }

    public final void dumpBinderCacheContents(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr) {
        ArrayList collectProcesses = collectProcesses(0, false, strArr);
        if (collectProcesses == null) {
            BinaryTransparencyService$$ExternalSyntheticOutline0.m(new StringBuilder("No process found for: "), strArr[0], printWriter);
            return;
        }
        printWriter.println("Per-process Binder Cache Contents");
        for (int size = collectProcesses.size() - 1; size >= 0; size--) {
            ProcessRecord processRecord = (ProcessRecord) collectProcesses.get(size);
            int i = processRecord.mPid;
            IApplicationThread iApplicationThread = processRecord.mThread;
            if (iApplicationThread != null) {
                StringBuilder m = BatteryService$$ExternalSyntheticOutline0.m(i, "\n\n** Cache info for pid ", " [");
                m.append(processRecord.processName);
                m.append("] **");
                printWriter.println(m.toString());
                printWriter.flush();
                try {
                    if (i == Process.myPid()) {
                        ParcelFileDescriptor fromFd = ParcelFileDescriptor.fromFd(fileDescriptor.getInt$());
                        try {
                            iApplicationThread.dumpCacheInfo(fromFd, strArr);
                            if (fromFd != null) {
                                fromFd.close();
                            }
                        } catch (Throwable th) {
                            if (fromFd != null) {
                                try {
                                    fromFd.close();
                                } catch (Throwable th2) {
                                    th.addSuppressed(th2);
                                }
                            }
                            throw th;
                        }
                    } else {
                        TransferPipe transferPipe = new TransferPipe();
                        try {
                            iApplicationThread.dumpCacheInfo(transferPipe.getWriteFd(), strArr);
                            transferPipe.go(fileDescriptor);
                            transferPipe.kill();
                        } catch (Throwable th3) {
                            transferPipe.kill();
                            throw th3;
                        }
                    }
                } catch (RemoteException unused) {
                    printWriter.println("Got a RemoteException while dumping the app " + processRecord);
                    printWriter.flush();
                } catch (IOException unused2) {
                    printWriter.println("Failure while dumping the app " + processRecord);
                    printWriter.flush();
                }
            }
        }
    }

    public final void dumpBinderProxies(int i, PrintWriter printWriter) {
        printWriter.println("ACTIVITY MANAGER BINDER PROXY STATE (dumpsys activity binder-proxies)");
        int proxyCount = BinderProxy.getProxyCount();
        if (proxyCount >= i) {
            BinderProxy.InterfaceCount[] sortedInterfaceCounts = BinderProxy.getSortedInterfaceCounts(50);
            printWriter.println("Top proxy interface names held by SYSTEM");
            int i2 = 0;
            while (i2 < sortedInterfaceCounts.length) {
                StringBuilder sb = new StringBuilder("    #");
                int i3 = i2 + 1;
                sb.append(i3);
                sb.append(": ");
                sb.append(sortedInterfaceCounts[i2]);
                printWriter.println(sb.toString());
                i2 = i3;
            }
        } else {
            printWriter.print("Not dumping proxy interface counts because size (" + Integer.toString(proxyCount) + ") looks reasonable");
            printWriter.println();
        }
        SparseIntArray nGetBinderProxyPerUidCounts = BinderInternal.nGetBinderProxyPerUidCounts();
        if (nGetBinderProxyPerUidCounts != null) {
            printWriter.println("  Counts of Binder Proxies held by SYSTEM");
            for (int i4 = 0; i4 < nGetBinderProxyPerUidCounts.size(); i4++) {
                int keyAt = nGetBinderProxyPerUidCounts.keyAt(i4);
                int valueAt = nGetBinderProxyPerUidCounts.valueAt(i4);
                printWriter.print("    UID ");
                printWriter.print(keyAt);
                printWriter.print(", binder count = ");
                printWriter.print(valueAt);
                printWriter.print(", package(s)= ");
                String[] packagesForUid = this.mContext.getPackageManager().getPackagesForUid(keyAt);
                if (packagesForUid != null) {
                    for (String str : packagesForUid) {
                        printWriter.print(str);
                        printWriter.print("; ");
                    }
                } else {
                    printWriter.print("NO PACKAGE NAME FOUND");
                }
                printWriter.println();
            }
        }
    }

    @NeverCompile
    public final void dumpBroadcastStatsLocked(PrintWriter printWriter, String str) {
        if (this.mCurBroadcastStats == null) {
            return;
        }
        printWriter.println("ACTIVITY MANAGER BROADCAST STATS STATE (dumpsys activity broadcast-stats)");
        long elapsedRealtime = SystemClock.elapsedRealtime();
        if (this.mLastBroadcastStats != null) {
            printWriter.print("  Last stats (from ");
            TimeUtils.formatDuration(this.mLastBroadcastStats.mStartRealtime, elapsedRealtime, printWriter);
            printWriter.print(" to ");
            TimeUtils.formatDuration(this.mLastBroadcastStats.mEndRealtime, elapsedRealtime, printWriter);
            printWriter.print(", ");
            BroadcastStats broadcastStats = this.mLastBroadcastStats;
            TimeUtils.formatDuration(broadcastStats.mEndUptime - broadcastStats.mStartUptime, printWriter);
            printWriter.println(" uptime):");
            if (!this.mLastBroadcastStats.dumpStats(printWriter, str)) {
                printWriter.println("    (nothing)");
            }
            printWriter.println();
        }
        printWriter.print("  Current stats (from ");
        TimeUtils.formatDuration(this.mCurBroadcastStats.mStartRealtime, elapsedRealtime, printWriter);
        printWriter.print(" to now, ");
        TimeUtils.formatDuration(SystemClock.uptimeMillis() - this.mCurBroadcastStats.mStartUptime, printWriter);
        printWriter.println(" uptime):");
        if (this.mCurBroadcastStats.dumpStats(printWriter, str)) {
            return;
        }
        printWriter.println("    (nothing)");
    }

    /* JADX WARN: Removed duplicated region for block: B:23:0x007e A[LOOP:0: B:14:0x003c->B:23:0x007e, LOOP_END] */
    /* JADX WARN: Removed duplicated region for block: B:24:0x007d A[SYNTHETIC] */
    @dalvik.annotation.optimization.NeverCompile
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final void dumpBroadcastsLocked(java.io.FileDescriptor r23, java.io.PrintWriter r24, java.lang.String[] r25, int r26, boolean r27, java.lang.String r28) {
        /*
            Method dump skipped, instructions count: 933
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.dumpBroadcastsLocked(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[], int, boolean, java.lang.String):void");
    }

    public final void dumpDbInfo(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr) {
        ArrayList collectProcesses = collectProcesses(0, false, strArr);
        if (collectProcesses == null) {
            BinaryTransparencyService$$ExternalSyntheticOutline0.m(new StringBuilder("No process found for: "), strArr[0], printWriter);
            return;
        }
        printWriter.println("Applications Database Info:");
        for (int size = collectProcesses.size() - 1; size >= 0; size--) {
            ProcessRecord processRecord = (ProcessRecord) collectProcesses.get(size);
            int i = processRecord.mPid;
            IApplicationThread iApplicationThread = processRecord.mThread;
            if (iApplicationThread != null) {
                StringBuilder m = BatteryService$$ExternalSyntheticOutline0.m(i, "\n** Database info for pid ", " [");
                m.append(processRecord.processName);
                m.append("] **");
                printWriter.println(m.toString());
                printWriter.flush();
                try {
                    TransferPipe transferPipe = new TransferPipe();
                    try {
                        iApplicationThread.dumpDbInfo(transferPipe.getWriteFd(), strArr);
                        transferPipe.go(fileDescriptor);
                        transferPipe.kill();
                    } catch (Throwable th) {
                        transferPipe.kill();
                        throw th;
                    }
                } catch (RemoteException unused) {
                    printWriter.println("Got a RemoteException while dumping the app " + processRecord);
                    printWriter.flush();
                } catch (IOException unused2) {
                    printWriter.println("Failure while dumping the app: " + processRecord);
                    printWriter.flush();
                }
            }
        }
    }

    public final void dumpEverything(FileDescriptor fileDescriptor, PrintWriter printWriter, String[] strArr, int i, boolean z, String str, int i2, boolean z2, boolean z3, int i3, boolean z4) {
        ActiveServices.ServiceDumper serviceDumper;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mConstants.dump(printWriter);
                ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerProcLock) {
                    try {
                        this.mOomAdjuster.dumpCachedAppOptimizerSettings(printWriter);
                    } finally {
                    }
                }
                resetPriorityAfterProcLockedSection();
                this.mOomAdjuster.dumpCacheOomRankerSettings(printWriter);
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                dumpAllowedAssociationsLocked(printWriter, str);
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                this.mPendingIntentController.dumpPendingIntents(printWriter, str, z);
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                dumpBroadcastsLocked(fileDescriptor, printWriter, strArr, i, z, str);
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                if (z || str != null) {
                    dumpBroadcastStatsLocked(printWriter, str);
                    printWriter.println();
                    if (z) {
                        printWriter.println("-------------------------------------------------------------------------------");
                    }
                }
                this.mCpHelper.dumpProvidersLocked(printWriter, strArr, i, z, str);
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                dumpPermissions(printWriter, str, z);
                printWriter.println();
                ActiveServices activeServices = this.mServices;
                activeServices.getClass();
                serviceDumper = new ActiveServices.ServiceDumper(activeServices, fileDescriptor, printWriter, strArr, i, z, str);
                if (!z2) {
                    if (z) {
                        printWriter.println("-------------------------------------------------------------------------------");
                    }
                    serviceDumper.dumpLocked();
                }
            } finally {
            }
        }
        resetPriorityAfterLockedSection();
        printWriter.println("-------------------------------------------------------------------------------");
        AnrTimer.dump(printWriter, false, AnrTimer.sDefaultInjector);
        if (z2) {
            if (z) {
                printWriter.println("-------------------------------------------------------------------------------");
            }
            serviceDumper.dumpWithClient();
        }
        if (str == null && z4) {
            printWriter.println();
            if (z) {
                printWriter.println("-------------------------------------------------------------------------------");
            }
            dumpBinderProxies(6000, printWriter);
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                this.mAtmInternal.dump("recents", fileDescriptor, printWriter, strArr, i, z, z2, str, i2);
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                this.mAtmInternal.dump("lastanr", fileDescriptor, printWriter, strArr, i, z, z2, str, i2);
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                this.mAtmInternal.dump("starter", fileDescriptor, printWriter, strArr, i, z, z2, str, i2);
                if (str == null) {
                    printWriter.println();
                    if (z) {
                        printWriter.println("-------------------------------------------------------------------------------");
                    }
                    this.mAtmInternal.dump("containers", fileDescriptor, printWriter, strArr, i, z, z2, str, i2);
                }
                if (!z3) {
                    printWriter.println();
                    if (z) {
                        printWriter.println("-------------------------------------------------------------------------------");
                    }
                    this.mAtmInternal.dump("activities", fileDescriptor, printWriter, strArr, i, z, z2, str, i2);
                }
                if (this.mAssociations.size() > 0) {
                    printWriter.println();
                    if (z) {
                        printWriter.println("-------------------------------------------------------------------------------");
                    }
                    dumpAssociationsLocked(printWriter, str);
                }
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                    this.mProcessList.mAppStartInfoTracker.dumpHistoryProcessStartInfo(printWriter, str);
                    printWriter.println("-------------------------------------------------------------------------------");
                    this.mProcessList.mAppExitInfoTracker.dumpHistoryProcessExitInfo(printWriter, str);
                }
                if (str == null) {
                    printWriter.println();
                    if (z) {
                        printWriter.println("-------------------------------------------------------------------------------");
                    }
                    dumpLmkLocked(printWriter);
                }
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                if (MARsPolicyManager.MARs_ENABLE) {
                    printWriter.println();
                    if (z) {
                        printWriter.println("-------------------------------------------------------------------------------");
                    }
                    MARsPolicyManager mARsPolicyManager = MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE;
                    mARsPolicyManager.dumpMARs(printWriter);
                    mARsPolicyManager.dumpMARsHistory(printWriter);
                    boolean z5 = FreecessController.IS_MINIMIZE_OLAF_LOCK;
                    FreecessController freecessController = FreecessController.FreecessControllerHolder.INSTANCE;
                    if (freecessController.mIsFreecessEnable) {
                        freecessController.dumpFreecess(printWriter);
                    }
                }
                PDSController.Lock lock = PDSController.PDSLock;
                PDSController pDSController = PDSController.PDSControllerHolder.INSTANCE;
                if (pDSController.mIsPDSEnable) {
                    Slog.v("ActivityManager", "dumpPDS");
                    pDSController.dumpPDS(printWriter);
                    pDSController.dumpPDSHistory(printWriter);
                }
                ActivityManagerProcLock activityManagerProcLock2 = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerProcLock2) {
                    try {
                        this.mProcessList.dumpProcessesLSP(fileDescriptor, printWriter, strArr, i, z, str, i3);
                    } finally {
                    }
                }
                resetPriorityAfterProcLockedSection();
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                dumpUsers(printWriter);
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                this.mAtmInternal.dump("multitasking", fileDescriptor, printWriter, strArr, i, z, z2, str, i2);
                this.mExt.dumpLongLivePackageLocked(printWriter, z);
                printWriter.println();
                if (z) {
                    printWriter.println("-------------------------------------------------------------------------------");
                }
                this.mComponentAliasResolver.dump(printWriter);
            } finally {
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX WARN: Removed duplicated region for block: B:15:0x006e  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x00dc  */
    /* JADX WARN: Removed duplicated region for block: B:40:? A[RETURN, SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final void dumpGraphicsHardwareUsage(java.io.FileDescriptor r10, java.io.PrintWriter r11, java.lang.String[] r12) {
        /*
            r9 = this;
            r0 = 0
            java.util.ArrayList r9 = r9.collectProcesses(r0, r0, r12)
            if (r9 != 0) goto L14
            java.lang.StringBuilder r9 = new java.lang.StringBuilder
            java.lang.String r10 = "No process found for: "
            r9.<init>(r10)
            r10 = r12[r0]
            com.android.server.BinaryTransparencyService$$ExternalSyntheticOutline0.m(r9, r10, r11)
            return
        L14:
            int r0 = r12.length
            r1 = 2
            r2 = 1
            java.lang.String r3 = "debug.hwui.dump_texture_cache"
            if (r0 < r1) goto L40
            r0 = r12[r2]
            r0.getClass()
            java.lang.String r1 = "-p"
            boolean r1 = r0.equals(r1)
            if (r1 != 0) goto L39
            java.lang.String r1 = "-t"
            boolean r0 = r0.equals(r1)
            if (r0 != 0) goto L32
            goto L40
        L32:
            java.lang.String r0 = "tga"
            android.os.SystemProperties.set(r3, r0)
            goto L41
        L39:
            java.lang.String r0 = "png"
            android.os.SystemProperties.set(r3, r0)
            goto L41
        L40:
            r0 = 0
        L41:
            long r4 = android.os.SystemClock.uptimeMillis()
            long r6 = android.os.SystemClock.elapsedRealtime()
            java.lang.String r1 = "Applications Graphics Acceleration Info:"
            r11.println(r1)
            java.lang.StringBuilder r1 = new java.lang.StringBuilder
            java.lang.String r8 = "Uptime: "
            r1.<init>(r8)
            r1.append(r4)
            java.lang.String r4 = " Realtime: "
            r1.append(r4)
            r1.append(r6)
            java.lang.String r1 = r1.toString()
            r11.println(r1)
            int r1 = r9.size()
            int r1 = r1 - r2
        L6c:
            if (r1 < 0) goto Lda
            java.lang.Object r2 = r9.get(r1)
            com.android.server.am.ProcessRecord r2 = (com.android.server.am.ProcessRecord) r2
            int r4 = r2.mPid
            android.app.IApplicationThread r5 = r2.mThread
            if (r5 == 0) goto Ld7
            java.lang.String r6 = "\n** Graphics info for pid "
            java.lang.String r7 = " ["
            java.lang.StringBuilder r4 = com.android.server.BatteryService$$ExternalSyntheticOutline0.m(r4, r6, r7)
            java.lang.String r6 = r2.processName
            r4.append(r6)
            java.lang.String r6 = "] **"
            r4.append(r6)
            java.lang.String r4 = r4.toString()
            r11.println(r4)
            r11.flush()
            com.android.internal.os.TransferPipe r4 = new com.android.internal.os.TransferPipe     // Catch: android.os.RemoteException -> Lae java.io.IOException -> Lc3
            r4.<init>()     // Catch: android.os.RemoteException -> Lae java.io.IOException -> Lc3
            android.os.ParcelFileDescriptor r6 = r4.getWriteFd()     // Catch: java.lang.Throwable -> La9
            r5.dumpGfxInfo(r6, r12)     // Catch: java.lang.Throwable -> La9
            r4.go(r10)     // Catch: java.lang.Throwable -> La9
            r4.kill()     // Catch: android.os.RemoteException -> Lae java.io.IOException -> Lc3
            goto Ld7
        La9:
            r5 = move-exception
            r4.kill()     // Catch: android.os.RemoteException -> Lae java.io.IOException -> Lc3
            throw r5     // Catch: android.os.RemoteException -> Lae java.io.IOException -> Lc3
        Lae:
            java.lang.StringBuilder r4 = new java.lang.StringBuilder
            java.lang.String r5 = "Got a RemoteException while dumping the app "
            r4.<init>(r5)
            r4.append(r2)
            java.lang.String r2 = r4.toString()
            r11.println(r2)
            r11.flush()
            goto Ld7
        Lc3:
            java.lang.StringBuilder r4 = new java.lang.StringBuilder
            java.lang.String r5 = "Failure while dumping the app: "
            r4.<init>(r5)
            r4.append(r2)
            java.lang.String r2 = r4.toString()
            r11.println(r2)
            r11.flush()
        Ld7:
            int r1 = r1 + (-1)
            goto L6c
        Lda:
            if (r0 == 0) goto Led
            java.lang.String r9 = ""
            android.os.SystemProperties.set(r3, r9)
            java.lang.String r9 = "\nFile Type : "
            java.lang.String r9 = r9.concat(r0)
            r11.println(r9)
            r11.flush()
        Led:
            return
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.dumpGraphicsHardwareUsage(java.io.FileDescriptor, java.io.PrintWriter, java.lang.String[]):void");
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:44:0x00a4 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Type inference failed for: r2v0, types: [java.lang.String] */
    /* JADX WARN: Type inference failed for: r2v1 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final boolean dumpHeap(java.lang.String r13, int r14, boolean r15, boolean r16, boolean r17, java.lang.String r18, java.lang.String r19, android.os.ParcelFileDescriptor r20, final android.os.RemoteCallback r21) {
        /*
            r12 = this;
            r1 = r12
            r0 = r13
            java.lang.String r2 = "Unknown process: "
            java.lang.String r3 = "android.permission.SET_ACTIVITY_WATCHER"
            int r3 = r12.checkCallingPermission(r3)     // Catch: java.lang.Throwable -> L82 android.os.RemoteException -> L86
            if (r3 != 0) goto L92
            if (r20 == 0) goto L89
            boostPriorityForLockedSection()     // Catch: java.lang.Throwable -> L82 android.os.RemoteException -> L86
            monitor-enter(r12)     // Catch: java.lang.Throwable -> L82 android.os.RemoteException -> L86
            java.lang.String r3 = "dumpHeap"
            r4 = r14
            com.android.server.am.ProcessRecord r3 = r12.findProcessLOSP(r14, r13, r3)     // Catch: java.lang.Throwable -> L37
            if (r3 == 0) goto L69
            android.app.IApplicationThread r4 = r3.mThread     // Catch: java.lang.Throwable -> L37
            if (r4 == 0) goto L69
            boolean r0 = com.android.server.am.MARsPolicyManager.MARs_ENABLE     // Catch: java.lang.Throwable -> L37
            if (r0 == 0) goto L3b
            boolean r0 = com.android.server.am.FreecessController.IS_MINIMIZE_OLAF_LOCK     // Catch: java.lang.Throwable -> L37
            com.android.server.am.FreecessController r0 = com.android.server.am.FreecessController.FreecessControllerHolder.INSTANCE     // Catch: java.lang.Throwable -> L37
            boolean r2 = r0.mIsFreecessEnable     // Catch: java.lang.Throwable -> L37
            if (r2 == 0) goto L3b
            int r2 = r3.uid     // Catch: java.lang.Throwable -> L37
            java.lang.String r5 = "dumpHeap"
            r6 = 30000(0x7530, double:1.4822E-319)
            r0.protectFreezePackage(r2, r5, r6)     // Catch: java.lang.Throwable -> L37
            goto L3b
        L37:
            r0 = move-exception
            r2 = r20
            goto L7b
        L3b:
            r12.enforceDebuggable(r3)     // Catch: java.lang.Throwable -> L37
            com.android.server.am.OomAdjuster r0 = r1.mOomAdjuster     // Catch: java.lang.Throwable -> L37
            com.android.server.am.CachedAppOptimizer r0 = r0.mCachedAppOptimizer     // Catch: java.lang.Throwable -> L37
            r2 = 0
            r0.enableFreezer(r2)     // Catch: java.lang.Throwable -> L37
            android.os.RemoteCallback r11 = new android.os.RemoteCallback     // Catch: java.lang.Throwable -> L37
            com.android.server.am.ActivityManagerService$23 r0 = new com.android.server.am.ActivityManagerService$23     // Catch: java.lang.Throwable -> L37
            r2 = r21
            r0.<init>()     // Catch: java.lang.Throwable -> L37
            r2 = 0
            r11.<init>(r0, r2)     // Catch: java.lang.Throwable -> L37
            r5 = r15
            r6 = r16
            r7 = r17
            r8 = r18
            r9 = r19
            r10 = r20
            r4.dumpHeap(r5, r6, r7, r8, r9, r10, r11)     // Catch: java.lang.Throwable -> L37
            monitor-exit(r12)     // Catch: java.lang.Throwable -> L67
            resetPriorityAfterLockedSection()
            r0 = 1
            return r0
        L67:
            r0 = move-exception
            goto L7b
        L69:
            java.lang.IllegalArgumentException r3 = new java.lang.IllegalArgumentException     // Catch: java.lang.Throwable -> L37
            java.lang.StringBuilder r4 = new java.lang.StringBuilder     // Catch: java.lang.Throwable -> L37
            r4.<init>(r2)     // Catch: java.lang.Throwable -> L37
            r4.append(r13)     // Catch: java.lang.Throwable -> L37
            java.lang.String r0 = r4.toString()     // Catch: java.lang.Throwable -> L37
            r3.<init>(r0)     // Catch: java.lang.Throwable -> L37
            throw r3     // Catch: java.lang.Throwable -> L37
        L7b:
            monitor-exit(r12)     // Catch: java.lang.Throwable -> L67
            resetPriorityAfterLockedSection()     // Catch: java.lang.Throwable -> L80 android.os.RemoteException -> L9a
            throw r0     // Catch: java.lang.Throwable -> L80 android.os.RemoteException -> L9a
        L80:
            r0 = move-exception
            goto La2
        L82:
            r0 = move-exception
            r2 = r20
            goto La2
        L86:
            r2 = r20
            goto L9a
        L89:
            java.lang.IllegalArgumentException r0 = new java.lang.IllegalArgumentException     // Catch: java.lang.Throwable -> L82 android.os.RemoteException -> L86
            java.lang.String r1 = "null fd"
            r0.<init>(r1)     // Catch: java.lang.Throwable -> L82 android.os.RemoteException -> L86
            throw r0     // Catch: java.lang.Throwable -> L82 android.os.RemoteException -> L86
        L92:
            java.lang.SecurityException r0 = new java.lang.SecurityException     // Catch: java.lang.Throwable -> L82 android.os.RemoteException -> L86
            java.lang.String r1 = "Requires permission android.permission.SET_ACTIVITY_WATCHER"
            r0.<init>(r1)     // Catch: java.lang.Throwable -> L82 android.os.RemoteException -> L86
            throw r0     // Catch: java.lang.Throwable -> L82 android.os.RemoteException -> L86
        L9a:
            java.lang.IllegalStateException r0 = new java.lang.IllegalStateException     // Catch: java.lang.Throwable -> L80
            java.lang.String r1 = "Process disappeared"
            r0.<init>(r1)     // Catch: java.lang.Throwable -> L80
            throw r0     // Catch: java.lang.Throwable -> L80
        La2:
            if (r2 == 0) goto La7
            r2.close()     // Catch: java.io.IOException -> La7
        La7:
            throw r0
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.dumpHeap(java.lang.String, int, boolean, boolean, boolean, java.lang.String, java.lang.String, android.os.ParcelFileDescriptor, android.os.RemoteCallback):boolean");
    }

    public final void dumpHeapFinished(String str) {
        AppProfiler appProfiler = this.mAppProfiler;
        int callingPid = Binder.getCallingPid();
        synchronized (appProfiler.mProfilerLock) {
            try {
                if (callingPid != appProfiler.mMemWatchDumpPid) {
                    Slog.w("ActivityManager", "dumpHeapFinished: Calling pid " + Binder.getCallingPid() + " does not match last pid " + appProfiler.mMemWatchDumpPid);
                    return;
                }
                Uri uri = appProfiler.mMemWatchDumpUri;
                if (uri != null && uri.getPath().equals(str)) {
                    appProfiler.mService.mHandler.sendEmptyMessage(50);
                    Runtime.getRuntime().gc();
                    return;
                }
                Slog.w("ActivityManager", "dumpHeapFinished: Calling path " + str + " does not match last path " + appProfiler.mMemWatchDumpUri);
            } finally {
            }
        }
    }

    public final void dumpPermissions(PrintWriter printWriter, String str, boolean z) {
        boolean z2;
        printWriter.println("ACTIVITY MANAGER URI PERMISSIONS (dumpsys activity permissions)");
        UriGrantsManagerService.LocalService localService = (UriGrantsManagerService.LocalService) this.mUgmInternal;
        synchronized (UriGrantsManagerService.this.mLock) {
            try {
                if (UriGrantsManagerService.this.mGrantedUriPermissions.size() > 0) {
                    int packageUid = str != null ? UriGrantsManagerService.this.mPmInternal.getPackageUid(str, 4194304L, 0) : -2;
                    z2 = false;
                    boolean z3 = false;
                    boolean z4 = false;
                    for (int i = 0; i < UriGrantsManagerService.this.mGrantedUriPermissions.size(); i++) {
                        int keyAt = UriGrantsManagerService.this.mGrantedUriPermissions.keyAt(i);
                        if (packageUid < -1 || UserHandle.getAppId(keyAt) == packageUid) {
                            ArrayMap arrayMap = (ArrayMap) UriGrantsManagerService.this.mGrantedUriPermissions.valueAt(i);
                            if (!z3) {
                                if (z4) {
                                    printWriter.println();
                                }
                                printWriter.println("  Granted Uri Permissions:");
                                z2 = true;
                                z3 = true;
                                z4 = true;
                            }
                            printWriter.print("  * UID ");
                            printWriter.print(keyAt);
                            printWriter.println(" holds:");
                            for (UriPermission uriPermission : arrayMap.values()) {
                                printWriter.print("    ");
                                printWriter.println(uriPermission);
                                if (z) {
                                    uriPermission.dump(printWriter);
                                }
                            }
                        }
                    }
                } else {
                    z2 = false;
                }
                if (!z2) {
                    printWriter.println("  (nothing)");
                }
                if (UriGrantsManagerService.this.mUriPermissionHistory.size() > 0) {
                    printWriter.println("  Uri Permission History:");
                    for (int i2 = 0; i2 < UriGrantsManagerService.this.mUriPermissionHistory.size(); i2++) {
                        printWriter.print("    ");
                        printWriter.println((String) UriGrantsManagerService.this.mUriPermissionHistory.get(i2));
                    }
                }
            } catch (Throwable th) {
                throw th;
            }
        }
    }

    public final void dumpUsers(PrintWriter printWriter) {
        printWriter.println("ACTIVITY MANAGER USERS (dumpsys activity users)");
        UserController userController = this.mUserController;
        synchronized (userController.mLock) {
            try {
                printWriter.println("  mStartedUsers:");
                for (int i = 0; i < userController.mStartedUsers.size(); i++) {
                    UserState userState = (UserState) userController.mStartedUsers.valueAt(i);
                    printWriter.print("    User #");
                    printWriter.print(userState.mHandle.getIdentifier());
                    printWriter.print(": ");
                    printWriter.print("");
                    printWriter.print("state=");
                    printWriter.print(UserState.stateToString(userState.state));
                    if (userState.switching) {
                        printWriter.print(" SWITCHING");
                    }
                    printWriter.println();
                }
                printWriter.print("  mStartedUserArray: [");
                for (int i2 = 0; i2 < userController.mStartedUserArray.length; i2++) {
                    if (i2 > 0) {
                        printWriter.print(", ");
                    }
                    printWriter.print(userController.mStartedUserArray[i2]);
                }
                printWriter.println("]");
                printWriter.print("  mUserLru: [");
                for (int i3 = 0; i3 < userController.mUserLru.size(); i3++) {
                    if (i3 > 0) {
                        printWriter.print(", ");
                    }
                    printWriter.print(userController.mUserLru.get(i3));
                }
                printWriter.println("]");
                if (userController.mUserProfileGroupIds.size() > 0) {
                    printWriter.println("  mUserProfileGroupIds:");
                    for (int i4 = 0; i4 < userController.mUserProfileGroupIds.size(); i4++) {
                        printWriter.print("    User #");
                        printWriter.print(userController.mUserProfileGroupIds.keyAt(i4));
                        printWriter.print(" -> profile #");
                        printWriter.println(userController.mUserProfileGroupIds.valueAt(i4));
                    }
                }
                printWriter.println("  mCurrentProfileIds:" + Arrays.toString(userController.mCurrentProfileIds));
                printWriter.println("  mCurrentUserId:" + userController.mCurrentUserId);
                printWriter.println("  mTargetUserId:" + userController.mTargetUserId);
                printWriter.println("  mLastActiveUsersForDelayedLocking:" + userController.mLastActiveUsersForDelayedLocking);
                printWriter.println("  mDelayUserDataLocking:" + userController.mDelayUserDataLocking);
                printWriter.println("  mAllowUserUnlocking:" + userController.mAllowUserUnlocking);
                printWriter.println("  shouldStopUserOnSwitch():" + userController.shouldStopUserOnSwitch());
                printWriter.println("  mStopUserOnSwitch:" + userController.mStopUserOnSwitch);
                printWriter.println("  mMaxRunningUsers:" + userController.mMaxRunningUsers);
                printWriter.println("  mBackgroundUserScheduledStopTimeSecs:" + userController.mBackgroundUserScheduledStopTimeSecs);
                printWriter.println("  mUserSwitchUiEnabled:" + userController.mUserSwitchUiEnabled);
                printWriter.println("  mInitialized:" + userController.mInitialized);
                printWriter.println("  mIsBroadcastSentForSystemUserStarted:" + userController.mIsBroadcastSentForSystemUserStarted);
                printWriter.println("  mIsBroadcastSentForSystemUserStarting:" + userController.mIsBroadcastSentForSystemUserStarting);
                if (userController.mSwitchingFromSystemUserMessage != null) {
                    printWriter.println("  mSwitchingFromSystemUserMessage: " + userController.mSwitchingFromSystemUserMessage);
                }
                if (userController.mSwitchingToSystemUserMessage != null) {
                    printWriter.println("  mSwitchingToSystemUserMessage: " + userController.mSwitchingToSystemUserMessage);
                }
                printWriter.println("  mLastUserUnlockingUptime: " + userController.mLastUserUnlockingUptime);
            } catch (Throwable th) {
                throw th;
            }
        }
    }

    public final boolean enableAppFreezer(boolean z) {
        int callingUid = Binder.getCallingUid();
        if (callingUid == 1000 || Build.IS_DEBUGGABLE) {
            return this.mOomAdjuster.mCachedAppOptimizer.enableFreezer(z);
        }
        throw new SecurityException(BinaryTransparencyService$$ExternalSyntheticOutline0.m(callingUid, "Caller uid ", " cannot set freezer state "));
    }

    public final boolean enableFgsNotificationRateLimit(boolean z) {
        enforceCallingPermission("android.permission.WRITE_DEVICE_CONFIG", "enableFgsNotificationRateLimit");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActiveServices activeServices = this.mServices;
                if (z != activeServices.mFgsDeferralRateLimited) {
                    activeServices.mFgsDeferralRateLimited = z;
                    if (!z) {
                        activeServices.mFgsDeferralEligible.clear();
                    }
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return z;
    }

    public final void enforceBroadcastOptionPermissionsInternal(int i, Bundle bundle) {
        BroadcastOptions fromBundleNullable = BroadcastOptions.fromBundleNullable(bundle);
        if (fromBundleNullable == null || i == 1000) {
            return;
        }
        if (fromBundleNullable.isAlarmBroadcast()) {
            throw new SecurityException("Non-system callers may not flag broadcasts as alarm");
        }
        if (fromBundleNullable.isInteractive()) {
            enforceCallingPermission("android.permission.BROADCAST_OPTION_INTERACTIVE", "setInteractive");
        }
    }

    public final void enforceCallingPermission(String str, String str2) {
        if (checkCallingPermission(str) == 0) {
            return;
        }
        StringBuilder m = DumpUtils$$ExternalSyntheticOutline0.m("Permission Denial: ", str2, " from pid=");
        m.append(Binder.getCallingPid());
        m.append(", uid=");
        m.append(Binder.getCallingUid());
        m.append(" requires ");
        m.append(str);
        String sb = m.toString();
        Slog.w("ActivityManager", sb);
        throw new SecurityException(sb);
    }

    public final void enforceDebuggable(ProcessRecord processRecord) {
        if ((isHeapDumpAllowed() && (processRecord.getProcessClassEnum() == 2 || processRecord.getProcessClassEnum() == 3)) || Build.IS_DEBUGGABLE || processRecord.isDebuggable()) {
            return;
        }
        throw new SecurityException("Process not debuggable: " + processRecord.info.packageName);
    }

    public final int enforceDumpPermissionForPackage(int i, int i2, String str, String str2) {
        try {
            if (Process.isSdkSandboxUid(i2)) {
                if (getPackageManager().getSdkSandboxPackageName().equals(str)) {
                    return i2;
                }
            }
        } catch (RemoteException unused) {
            Log.e("ActivityManager", "Could not get SDK sandbox package name");
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            int packageUid = this.mPackageManagerInt.getPackageUid(str, 786432L, i);
            Binder.restoreCallingIdentity(clearCallingIdentity);
            if (UserHandle.getAppId(packageUid) != UserHandle.getAppId(i2)) {
                enforceCallingPermission("android.permission.DUMP", str2);
            }
            return packageUid;
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(clearCallingIdentity);
            throw th;
        }
    }

    public final void enforcePermission(int i, int i2, String str, String str2) {
        if (checkComponentPermission(i, i2, str, 0, -1, true) == 0) {
            return;
        }
        StringBuilder m = StorageManagerService$$ExternalSyntheticOutline0.m(i, "Permission Denial: ", str2, " from pid=", ", uid=");
        m.append(i2);
        m.append(" requires ");
        m.append(str);
        String sb = m.toString();
        Slog.w("ActivityManager", sb);
        throw new SecurityException(sb);
    }

    public final void enforceWriteSettingsPermission(String str, String str2) {
        String str3;
        int callingUid = Binder.getCallingUid();
        if (callingUid == 0) {
            return;
        }
        synchronized (this.mPidsSelfLocked) {
            try {
                ProcessRecord processRecord = this.mPidsSelfLocked.get(Binder.getCallingPid());
                str3 = processRecord != null ? processRecord.info.packageName : null;
            } catch (Throwable th) {
                throw th;
            }
        }
        if (str3 != null) {
            str = str3;
        }
        if (Settings.checkAndNoteWriteSettingsOperation(this.mContext, callingUid, str, str2, false)) {
            return;
        }
        String str4 = "Permission Denial: updatePersistentConfiguration() from pid=" + Binder.getCallingPid() + ", uid=" + callingUid + " requires android.permission.WRITE_SETTINGS";
        Slog.w("ActivityManager", str4);
        throw new SecurityException(str4);
    }

    public final void enqueueOomAdjTargetLocked(ProcessRecord processRecord) {
        OomAdjuster oomAdjuster = this.mOomAdjuster;
        oomAdjuster.getClass();
        if (processRecord == null || processRecord.mState.mMaxAdj <= 0) {
            return;
        }
        oomAdjuster.mPendingProcessSet.add(processRecord);
    }

    public final void enqueuePendingTopAppIfNecessaryLocked() {
        ProcessRecord processRecord;
        PendingStartActivityUids pendingStartActivityUids = this.mPendingStartActivityUids;
        synchronized (pendingStartActivityUids) {
            int size = pendingStartActivityUids.mPendingUids.size();
            for (int i = 0; i < size; i++) {
                Pair pair = (Pair) pendingStartActivityUids.mPendingUids.valueAt(i);
                synchronized (this.mPidsSelfLocked) {
                    processRecord = this.mPidsSelfLocked.get(((Integer) pair.first).intValue());
                }
                if (processRecord != null) {
                    enqueueOomAdjTargetLocked(processRecord);
                }
            }
        }
    }

    public final void enqueueUidChangeLocked(UidRecord uidRecord, int i, int i2) {
        int i3;
        if (uidRecord != null) {
            i = uidRecord.mUid;
        }
        if (i < 0) {
            throw new IllegalArgumentException("No UidRecord or uid");
        }
        int i4 = uidRecord != null ? uidRecord.mSetProcState : 20;
        if (uidRecord != null) {
            i3 = 1001;
            for (int size = uidRecord.mProcRecords.size() - 1; size >= 0; size--) {
                int i5 = ((ProcessRecord) uidRecord.mProcRecords.valueAt(size)).mState.mSetAdj;
                if (i5 < i3) {
                    i3 = i5;
                }
            }
        } else {
            i3 = -10000;
        }
        long j = uidRecord != null ? uidRecord.curProcStateSeq : 0L;
        boolean z = false;
        int i6 = uidRecord != null ? uidRecord.mSetCapability : 0;
        if (uidRecord != null) {
            z = uidRecord.mEphemeral;
        } else {
            String[] packagesForUid = this.mContext.getPackageManager().getPackagesForUid(i);
            if (packagesForUid != null && packagesForUid.length == 1) {
                z = getPackageManagerInternal().isPackageEphemeral(UserHandle.getUserId(i), packagesForUid[0]);
            }
        }
        if (uidRecord != null && uidRecord.mIdle && (i2 & 2) != 0) {
            final ProcessList processList = this.mProcessList;
            processList.getClass();
            final long elapsedRealtime = SystemClock.elapsedRealtime();
            uidRecord.forEachProcess(new Consumer() { // from class: com.android.server.am.ProcessList$$ExternalSyntheticLambda5
                @Override // java.util.function.Consumer
                public final void accept(Object obj) {
                    ProcessList.this.killAppIfBgRestrictedAndCachedIdleLocked((ProcessRecord) obj, elapsedRealtime);
                }
            });
        }
        if (uidRecord != null && !uidRecord.mIdle && (i2 & 1) != 0) {
            i2 |= 2;
        }
        UidObserverController uidObserverController = this.mUidObserverController;
        UidObserverController.ChangeRecord changeRecord = uidRecord == null ? null : uidRecord.pendingChange;
        synchronized (uidObserverController.mLock) {
            try {
                if (uidObserverController.mPendingUidChanges.size() == 0) {
                    uidObserverController.mHandler.post(uidObserverController.mDispatchRunnable);
                }
                if (changeRecord == null) {
                    int size2 = uidObserverController.mAvailUidChanges.size();
                    changeRecord = size2 > 0 ? (UidObserverController.ChangeRecord) uidObserverController.mAvailUidChanges.remove(size2 - 1) : new UidObserverController.ChangeRecord();
                }
                if (changeRecord.isPending) {
                    i2 = UidObserverController.mergeWithPendingChange(i2, changeRecord.change);
                } else {
                    changeRecord.isPending = true;
                    uidObserverController.mPendingUidChanges.add(changeRecord);
                }
                changeRecord.uid = i;
                changeRecord.change = i2;
                changeRecord.procState = i4;
                changeRecord.procAdj = i3;
                changeRecord.procStateSeq = j;
                changeRecord.capability = i6;
                changeRecord.ephemeral = z;
            } catch (Throwable th) {
                throw th;
            }
        }
        if (uidRecord != null) {
            uidRecord.mLastReportedChange = i2;
        }
        PowerManagerInternal powerManagerInternal = this.mLocalPowerManager;
        if (powerManagerInternal != null) {
            if ((i2 & 4) != 0) {
                powerManagerInternal.uidActive(i);
            }
            if ((i2 & 2) != 0) {
                this.mLocalPowerManager.uidIdle(i);
            }
            if ((i2 & 1) != 0) {
                this.mLocalPowerManager.uidGone(i);
            } else if ((Integer.MIN_VALUE & i2) != 0) {
                this.mLocalPowerManager.updateUidProcState(i, i4);
            }
        }
    }

    public final void ensureAllowedAssociations() {
        boolean z;
        ApplicationInfo applicationInfo;
        if (this.mAllowedAssociations == null) {
            ArrayMap arrayMap = SystemConfig.getInstance().mAllowedAssociations;
            this.mAllowedAssociations = new ArrayMap(arrayMap.size());
            getPackageManagerInternal();
            for (int i = 0; i < arrayMap.size(); i++) {
                String str = (String) arrayMap.keyAt(i);
                ArraySet arraySet = (ArraySet) arrayMap.valueAt(i);
                try {
                    applicationInfo = AppGlobals.getPackageManager().getApplicationInfo(str, 131072L, 0);
                } catch (RemoteException unused) {
                }
                if (applicationInfo != null && (applicationInfo.flags & 2) != 0) {
                    z = true;
                    this.mAllowedAssociations.put(str, new PackageAssociationInfo(arraySet, z));
                }
                z = false;
                this.mAllowedAssociations.put(str, new PackageAssociationInfo(arraySet, z));
            }
        }
    }

    public final void ensureBootCompleted() {
        boolean z;
        boolean z2;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                z = this.mBooting;
                this.mBooting = false;
                z2 = !this.mBooted;
                this.mBooted = true;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        StringBuilder sb = new StringBuilder("!@AM_BOOT_PROGRESS , ensureBootCompleted booting:");
        sb.append(z);
        sb.append(" /enableScreen:");
        sb.append(z2);
        sb.append(" /caller:");
        ActivityManagerService$$ExternalSyntheticOutline0.m(2, sb, "ActivityManager");
        if (z) {
            finishBooting();
        }
        if (z2) {
            this.mAtmInternal.enableScreenAfterBoot(this.mBooted);
        }
    }

    public final void enterSafeMode() {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (!this.mSystemReady) {
                    try {
                        AppGlobals.getPackageManager().enterSafeMode();
                    } catch (RemoteException unused) {
                    }
                }
                this.mSafeMode = true;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final ProcessRecord findAppProcess(IBinder iBinder, String str) {
        ProcessRecord findAppProcessLOSP;
        if (iBinder == null) {
            return null;
        }
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                findAppProcessLOSP = this.mProcessList.findAppProcessLOSP(iBinder, str);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return findAppProcessLOSP;
    }

    public final ProcessRecord findProcessLOSP(int i, String str, String str2) {
        SparseArray sparseArray;
        int handleIncomingUser = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), i, true, 2, str2, null);
        ProcessRecord processRecord = null;
        try {
            int parseInt = Integer.parseInt(str);
            synchronized (this.mPidsSelfLocked) {
                processRecord = this.mPidsSelfLocked.get(parseInt);
            }
        } catch (NumberFormatException unused) {
        }
        if (processRecord != null || (sparseArray = (SparseArray) this.mProcessList.mProcessNames.getMap().get(str)) == null || sparseArray.size() <= 0) {
            return processRecord;
        }
        ProcessRecord processRecord2 = (ProcessRecord) sparseArray.valueAt(0);
        if (handleIncomingUser == -1 || processRecord2.userId == handleIncomingUser) {
            return processRecord2;
        }
        for (int i2 = 1; i2 < sparseArray.size(); i2++) {
            ProcessRecord processRecord3 = (ProcessRecord) sparseArray.valueAt(i2);
            if (processRecord3.userId == handleIncomingUser) {
                return processRecord3;
            }
        }
        return processRecord2;
    }

    public final boolean finishActivity(IBinder iBinder, int i, Intent intent, int i2) {
        return ActivityClient.getInstance().finishActivity(iBinder, i, intent, i2);
    }

    public final void finishAttachApplication(long j, long j2) {
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        if (!this.mConstants.mEnableWaitForFinishAttachApplication) {
            Slog.i("ActivityManager", "Flag disabled. Ignoring finishAttachApplication from uid: " + callingUid + ". pid: " + callingPid);
            return;
        }
        if (callingPid == MY_PID && callingUid == 1000) {
            return;
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            finishAttachApplicationInner(callingUid, callingPid, j);
            Binder.restoreCallingIdentity(clearCallingIdentity);
            if (!android.app.Flags.appStartInfoTimestamps() || j2 <= 0) {
                return;
            }
            addStartInfoTimestampInternal(2, UserHandle.getUserId(callingUid), callingUid, j2);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(clearCallingIdentity);
            throw th;
        }
    }

    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    /* JADX WARN: Removed duplicated region for block: B:150:0x00a4 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:155:0x0080 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:161:0x005b A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:22:0x007c  */
    /* JADX WARN: Removed duplicated region for block: B:37:0x0103 A[Catch: all -> 0x0052, TryCatch #2 {all -> 0x0052, blocks: (B:14:0x0041, B:16:0x0047, B:20:0x0057, B:162:0x005b, B:156:0x0080, B:151:0x00a4, B:25:0x00c6, B:28:0x00d4, B:30:0x00d8, B:32:0x00df, B:35:0x00ee, B:37:0x0103, B:38:0x0114, B:43:0x011b, B:44:0x0124, B:46:0x012a, B:48:0x0133, B:50:0x013b, B:51:0x0143, B:53:0x0147, B:54:0x0155, B:60:0x027f, B:67:0x02e1, B:68:0x02e4, B:154:0x00b3, B:159:0x008f, B:166:0x0067), top: B:13:0x0041, inners: #1, #3, #4, #6 }] */
    /* JADX WARN: Removed duplicated region for block: B:42:0x0119  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final void finishAttachApplicationInner(int r24, int r25, long r26) {
        /*
            Method dump skipped, instructions count: 968
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.finishAttachApplicationInner(int, int, long):void");
    }

    /* JADX WARN: Finally extract failed */
    public final void finishBooting() {
        boolean z;
        boolean z2;
        int i = 1;
        TimingsTraceAndSlog timingsTraceAndSlog = new TimingsTraceAndSlog(64L, "ActivityManagerTiming");
        timingsTraceAndSlog.traceBegin("FinishBooting");
        int i2 = 0;
        EventLogTags.writeBootProgressAmsState(0, -1, 0, "finishBooting", "NULL");
        synchronized (ProcessCpusetController.class) {
            if (ProcessCpusetController.mController == null) {
                ProcessCpusetController.mController = new ProcessCpusetController(this);
            }
        }
        this.mProcessCpusetController = ProcessCpusetController.mController;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (!this.mBootAnimationComplete) {
                    this.mCallFinishBooting = true;
                    EventLogTags.writeBootProgressAmsState(0, -1, 2, "finishBooting", "mBootAnimationComplete is not ready");
                    resetPriorityAfterLockedSection();
                    return;
                }
                this.mCallFinishBooting = false;
                resetPriorityAfterLockedSection();
                Process.ZYGOTE_PROCESS.bootCompleted();
                VMRuntime.bootCompleted();
                IntentFilter intentFilter = new IntentFilter();
                intentFilter.addAction("android.intent.action.QUERY_PACKAGE_RESTART");
                intentFilter.addDataScheme("package");
                this.mContext.registerReceiver(new AnonymousClass11(this, i2), intentFilter);
                try {
                    Slog.i("ActivityManager", "About to commit checkpoint");
                    InstallLocationUtils.getStorageManager().commitChanges();
                } catch (Exception unused) {
                    ((PowerManager) this.mInjector.mContext.getSystemService("power")).reboot("Checkpoint commit failed");
                }
                final DynamicHiddenApp dynamicHiddenApp = this.mDynamicHiddenApp;
                dynamicHiddenApp.getClass();
                int i3 = CameraKillModeManager.CAMERA_DHA_VER;
                CameraKillModeManager cameraKillModeManager = CameraKillModeManager.CameraKillModeManagerLazyHolder.INSTANCE;
                dynamicHiddenApp.mCameraKillModeManager = cameraKillModeManager;
                Context context = dynamicHiddenApp.mContext;
                UiHandler uiHandler = dynamicHiddenApp.mAm.mHandler;
                cameraKillModeManager.getClass();
                boolean z3 = CameraKillModeManager.CameraKillModeManagerLazyHolder.isinitClass;
                BGSlotManager bGSlotManager = dynamicHiddenApp.mBGSlotManager;
                if (!z3) {
                    cameraKillModeManager.mDynamicHiddenApp = dynamicHiddenApp;
                    cameraKillModeManager.mInfo = dynamicHiddenApp.mInfo;
                    cameraKillModeManager.mBGSlotManager = bGSlotManager;
                    if (CameraKillModeManager.CAMERA_DHA_VER > 0) {
                        cameraKillModeManager.mMinFreeMax = dynamicHiddenApp.mProcessList != null ? r10.getMemLevel(999) : 0L;
                    }
                    if (CameraKillModeManager.CAMERA_DHA_VER > 1) {
                        DynamicHiddenApp.setLmkdCameraKillBoost(99, 0, 0);
                        int i4 = 0;
                        while (true) {
                            String[] strArr = BGProtectManager.LMKD_CAM_CLIENT_EXCEPT_ARRAY;
                            if (i4 >= strArr.length) {
                                break;
                            }
                            cameraKillModeManager.dha_cameraclientexcept_map.put(strArr[i4], 1);
                            i4++;
                        }
                        cameraKillModeManager.dha_camera_map.put(DynamicHiddenApp.decodeToStr("Y29tLnNlYy5hbmRyb2lkLmFwcC5jYW1lcmE="), -1);
                    }
                    CameraManager cameraManager = (CameraManager) context.getSystemService("camera");
                    cameraKillModeManager.mCameraManager = cameraManager;
                    if (cameraManager != null) {
                        cameraManager.unregisterSemCameraDeviceStateCallback(cameraKillModeManager);
                        cameraKillModeManager.mCameraManager.registerSemCameraDeviceStateCallback(cameraKillModeManager, uiHandler);
                    }
                    CameraKillModeManager.CameraKillModeManagerLazyHolder.isinitClass = true;
                }
                dynamicHiddenApp.mBGProtectManager.initBGProtectManagerPostBoot();
                bGSlotManager.setBonusMaxCachedAppsPerSwap();
                ProcessList.setLmkdParameter(18, 1);
                IntentFilter intentFilter2 = new IntentFilter();
                intentFilter2.addAction("com.android.server.am.BROADCAST_DHA_DEBUG_ON");
                ActivityManagerService$$ExternalSyntheticOutline0.m(intentFilter2, "com.android.server.am.BROADCAST_SET_DHA_PARAMETER", "com.android.server.am.BROADCAST_SET_LMKD_PARAMETER_INTENT", "android.intent.action.DOCK_EVENT", "com.samsung.android.homehub.action.DEFAULT_HOME_CHANGE");
                dynamicHiddenApp.mContext.registerReceiver(new BroadcastReceiver() { // from class: com.android.server.am.DynamicHiddenApp.1
                    public AnonymousClass1() {
                    }

                    /* JADX WARN: Multi-variable type inference failed */
                    /* JADX WARN: Removed duplicated region for block: B:122:0x0410  */
                    /* JADX WARN: Removed duplicated region for block: B:124:0x0417  */
                    @Override // android.content.BroadcastReceiver
                    /*
                        Code decompiled incorrectly, please refer to instructions dump.
                        To view partially-correct code enable 'Show inconsistent code' option in preferences
                    */
                    public final void onReceive(android.content.Context r14, android.content.Intent r15) {
                        /*
                            Method dump skipped, instructions count: 1416
                            To view this dump change 'Code comments level' option to 'DEBUG'
                        */
                        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.DynamicHiddenApp.AnonymousClass1.onReceive(android.content.Context, android.content.Intent):void");
                    }
                }, intentFilter2, 2);
                this.mSystemServiceManager.startBootPhase(timingsTraceAndSlog, 1000);
                ActivityTaskManagerService activityTaskManagerService = this.mActivityTaskManager;
                activityTaskManagerService.mAMBooster = ActivityManagerPerformance.getBooster(activityTaskManagerService.mContext, activityTaskManagerService);
                if (DualDarManager.isOnDeviceOwnerEnabled()) {
                    boostPriorityForLockedSection();
                    synchronized (this) {
                        try {
                            int size = this.mProcessesOnHold.size();
                            if (size > 0) {
                                ArrayList arrayList = new ArrayList(this.mProcessesOnHold);
                                z2 = false;
                                for (int i5 = 0; i5 < size; i5++) {
                                    if ("com.samsung.android.knox.containercore".equals(((ProcessRecord) arrayList.get(i5)).processName)) {
                                        this.mProcessList.startProcessLocked((ProcessRecord) arrayList.get(i5), new HostingRecord("on-hold"), 2);
                                        z2 = true;
                                    }
                                }
                            } else {
                                z2 = false;
                            }
                        } catch (Throwable th) {
                            throw th;
                        }
                    }
                    resetPriorityAfterLockedSection();
                    if (z2) {
                        KnoxProxyManagerInternal knoxProxyManagerInternal = (KnoxProxyManagerInternal) LocalServices.getService(KnoxProxyManagerInternal.class);
                        if (knoxProxyManagerInternal != null) {
                            knoxProxyManagerInternal.ensureProxyAgentBindingIfRequired("KNOXCORE_PROXY_AGENT");
                            String clientPackage = DualDarManager.getInstance(this.mContext).getClientPackage(0);
                            if (clientPackage != null) {
                                knoxProxyManagerInternal.ensureProxyAgentBindingIfRequired(clientPackage);
                            }
                        }
                        DualDarManager.getInstance(this.mContext).ensureDataUnlockedIfRequired();
                    }
                }
                boostPriorityForLockedSection();
                synchronized (this) {
                    try {
                        int size2 = this.mProcessesOnHold.size();
                        if (size2 > 0) {
                            ArrayList arrayList2 = new ArrayList(this.mProcessesOnHold);
                            for (int i6 = 0; i6 < size2; i6++) {
                                if (((ProcessRecord) arrayList2.get(i6)).mWindowProcessController.getConfiguration().getLocales().isEmpty()) {
                                    Slog.d("ActivityManager", "Proc " + arrayList2.get(i6) + "has empty locales now, updating it with newly updated configuration.");
                                    WindowProcessController windowProcessController = ((ProcessRecord) arrayList2.get(i6)).mWindowProcessController;
                                    windowProcessController.onConfigurationChanged(windowProcessController.mAtm.getGlobalConfiguration());
                                }
                                this.mProcessList.startProcessLocked((ProcessRecord) arrayList2.get(i6), new HostingRecord("on-hold"), 2);
                            }
                        }
                        if (this.mFactoryTest == 1) {
                            resetPriorityAfterLockedSection();
                            return;
                        }
                        this.mHandler.sendMessageDelayed(this.mHandler.obtainMessage(27), this.mConstants.POWER_CHECK_INTERVAL);
                        if (((Boolean) InitProperties.userspace_reboot_in_progress().orElse(Boolean.FALSE)).booleanValue()) {
                            if (PowerManager.isRebootingUserspaceSupportedImpl()) {
                                SystemProperties.set("sys.userspace_reboot.log.last_finished", String.valueOf(SystemClock.elapsedRealtime()));
                            } else {
                                Slog.wtf("UserspaceRebootLogger", "noteUserspaceRebootSuccess: Userspace reboot is not supported.");
                            }
                        }
                        SystemProperties.set("sys.boot_completed", "1");
                        SystemProperties.set("dev.bootcomplete", "1");
                        ByteBuffer allocate = ByteBuffer.allocate(4);
                        allocate.putInt(9);
                        ProcessList.writeLmkd(allocate, null);
                        this.mUserController.onBootComplete(new AnonymousClass12());
                        maybeLogUserspaceRebootEvent();
                        UserController userController = this.mUserController;
                        userController.getClass();
                        FgThread.getHandler().post(new UserController$$ExternalSyntheticLambda11(userController, 1));
                        if (CoreRune.MNO_TMO_DEVICE_REPORTING) {
                            Slog.d("ActivityManager", "TMO finishBooting");
                            DeviceReportingSecurityChecker.enable(this.mContext);
                            AppStateBroadcaster.enableIntentBroadcast(this.mContext, this.mProcessList.mProcessNames);
                        }
                        resetPriorityAfterLockedSection();
                        if (SystemProperties.get("init.svc.console").equals(INetd.IF_FLAG_RUNNING)) {
                            String string = this.mContext.getString(R.string.file_count);
                            ((NotificationManager) this.mContext.getSystemService(NotificationManager.class)).notifyAsUser(null, 55, new Notification.Builder(this.mContext, SystemNotificationChannels.DEVELOPER).setSmallIcon(17304445).setWhen(0L).setOngoing(true).setTicker(string).setDefaults(0).setColor(this.mContext.getColor(R.color.system_notification_accent_color)).setContentTitle(string).setContentText(this.mContext.getString(R.string.fileSizeSuffix)).setVisibility(1).build(), UserHandle.ALL);
                        }
                        if (!Arrays.asList(SystemProperties.get("arm64.memtag.bootctl").split(",")).contains("memtag") && SystemProperties.getBoolean("ro.arm64.memtag.bootctl_supported", false) && Zygote.nativeSupportsMemoryTagging()) {
                            String string2 = this.mContext.getString(R.string.resolver_work_tab);
                            ((NotificationManager) this.mContext.getSystemService(NotificationManager.class)).notifyAsUser(null, 69, new Notification.Builder(this.mContext, SystemNotificationChannels.DEVELOPER).setSmallIcon(17304445).setOngoing(true).setTicker(string2).setDefaults(0).setColor(this.mContext.getColor(R.color.system_notification_accent_color)).setContentTitle(string2).setContentText(this.mContext.getString(R.string.resolver_turn_on_work_apps)).setVisibility(1).build(), UserHandle.ALL);
                        }
                        if (Looper.getMainLooper() != null) {
                            Looper.getMainLooper().setPerfLogEnable();
                        }
                        boolean z4 = MARsPolicyManager.MARs_ENABLE;
                        MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE.postInit();
                        boolean z5 = FreecessController.IS_MINIMIZE_OLAF_LOCK;
                        FreecessController freecessController = FreecessController.FreecessControllerHolder.INSTANCE;
                        Context context2 = this.mContext;
                        freecessController.mContext = context2;
                        freecessController.mAm = this;
                        freecessController.setScreenOnFreecessEnabled(false);
                        freecessController.FREECESS_ENHANCEMENT = false;
                        freecessController.mIsOLAFEnabled = false;
                        freecessController.mIsFreecessEnable = false;
                        if (freecessController.mConfigFreecess == 4) {
                            FreecessHandler freecessHandler = FreecessHandler.FreecessHandlerHolder.INSTANCE;
                            new FreecessHandler.NetLinkReceiverThread().start();
                            new FreecessHandler.FreecessThread(1).start();
                            freecessHandler.mBluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
                            new FreecessHandler.FreecessThread(2).start();
                        }
                        CameraManager cameraManager2 = (CameraManager) context2.getSystemService("camera");
                        if (cameraManager2 != null) {
                            cameraManager2.registerSemCameraDeviceStateCallback(freecessController.mCameraDeviceStateCallback, FreecessHandler.FreecessHandlerHolder.INSTANCE.mMainHandler);
                        }
                        PDSController.Lock lock = PDSController.PDSLock;
                        PDSController pDSController = PDSController.PDSControllerHolder.INSTANCE;
                        try {
                            pDSController.mContext.getPackageManager().getPackageInfo("com.samsung.android.uds", 128);
                            z = true;
                        } catch (PackageManager.NameNotFoundException unused2) {
                            z = false;
                        }
                        pDSController.udsPolicy = new PDSController.Policy(5, "udspolicy", z);
                        pDSController.mpsmPolicy = new PDSController.Policy(10, "mpsmpolicy", true);
                        pDSController.mIsPDSEnable = true;
                        PDSTrigger pDSTrigger = PDSTrigger.PDSTriggerHolder.INSTANCE;
                        pDSTrigger.getClass();
                        Slog.d("PDSTrigger", "registerUDSReceiver");
                        IntentFilter intentFilter3 = new IntentFilter();
                        intentFilter3.addAction("com.android.server.am.MARS_TRIGGER_UDS_POLICY");
                        intentFilter3.addAction("com.android.server.am.MARS_CANCEL_UDS_POLICY");
                        pDSTrigger.mContext.registerReceiver(pDSTrigger.mPolicyUDSIntentReceiver, intentFilter3, 2);
                        PDSController.Policy policy = pDSController.mpsmPolicy;
                        if (policy != null && policy.enabled) {
                            Slog.d("PDSTrigger", "registerMPSMReceiver");
                            IntentFilter intentFilter4 = new IntentFilter();
                            intentFilter4.addAction("com.android.server.am.MARS_TRIGGER_MPSM_POLICY");
                            intentFilter4.addAction("com.android.server.am.MARS_CANCEL_MPSM_POLICY");
                            pDSTrigger.mContext.registerReceiver(pDSTrigger.mPolicyMPSMIntentReceiver, intentFilter4, 2);
                        }
                        if (PDSController.DEBUG_ENG && pDSController.udsPolicy != null && pDSController.mpsmPolicy != null) {
                            StringBuilder sb = new StringBuilder(", UD = ");
                            sb.append(pDSController.udsPolicy.enabled);
                            sb.append(", MP = ");
                            ProxyManager$$ExternalSyntheticOutline0.m("PDSController", sb, pDSController.mpsmPolicy.enabled);
                        }
                        if (!PDSController.DEBUG_MID && !PDSController.DEBUG_HIGH) {
                            pDSController.mHistoryBufferArray = new HistoryBuffer();
                        }
                        if (!pDSTrigger.mReceiverRegistered) {
                            if (pDSTrigger.mAlarm == null) {
                                pDSTrigger.mAlarm = (AlarmManager) pDSTrigger.mContext.getSystemService("alarm");
                            }
                            pDSTrigger.mContext.registerReceiver(pDSTrigger.mIntentReceiver, DirEncryptServiceHelper$$ExternalSyntheticOutline0.m("android.intent.action.SCREEN_ON", "android.intent.action.SCREEN_OFF"));
                            IntentFilter intentFilter5 = new IntentFilter();
                            intentFilter5.addAction("FIRST_ALARM_TRIGGER_ACTION");
                            pDSTrigger.mContext.registerReceiver(pDSTrigger.mPolicyIntentReceiver, intentFilter5);
                            IntentFilter intentFilter6 = new IntentFilter();
                            intentFilter6.addAction("com.samsung.android.server.am.ACTION_UI_TRIGGER_POLICY");
                            pDSTrigger.mContext.registerReceiver(pDSTrigger.mPolicyIntentReceiver, intentFilter6, "android.permission.WRITE_SECURE_SETTINGS", null, 2);
                            pDSTrigger.mReceiverRegistered = true;
                        }
                        Slog.i("ActivityManager", "!@Boot: bootcomplete");
                        Slog.i("ActivityManager", "!@Boot_EBS_F: bootcomplete");
                        new CountDownTimer() { // from class: com.android.server.am.ActivityManagerService.13
                            @Override // android.os.CountDownTimer
                            public final void onFinish() {
                                int i7;
                                Slog.i("ActivityManager", "setMaxStartingBackgroundTimer onfinish");
                                ActiveServices activeServices = ActivityManagerService.this.mServices;
                                activeServices.getClass();
                                try {
                                    i7 = Integer.parseInt(SystemProperties.get("ro.config.max_starting_bg", "0"));
                                } catch (RuntimeException unused3) {
                                    i7 = 0;
                                }
                                if (i7 <= 0) {
                                    i7 = ActivityManager.isLowRamDeviceStatic() ? 1 : 8;
                                }
                                activeServices.mMaxStartingBackground = i7;
                                CustomizedBinderCallsStatsInternal$$ExternalSyntheticOutline0.m(new StringBuilder("MaxStartingBackground is set. ( current : "), activeServices.mMaxStartingBackground, " )", "ActivityManager");
                            }

                            @Override // android.os.CountDownTimer
                            public final void onTick(long j) {
                            }
                        }.start();
                        DynamicHiddenApp dynamicHiddenApp2 = this.mDynamicHiddenApp;
                        dynamicHiddenApp2.getClass();
                        boolean z6 = CustomEFKManager.BOOTING_EFK_BOOST_ENABLE;
                        CustomEFKManager customEFKManager = dynamicHiddenApp2.mCustomEFKManager;
                        if (z6) {
                            int i7 = customEFKManager.origin_EFK;
                            if (i7 != -1) {
                                String num = Integer.toString(i7 + customEFKManager.v_bonusEFKWhileBoot);
                                int i8 = BgAppPropManager.TOTAL_MEMORY_2ND;
                                SystemProperties.set("sys.sysctl.extra_free_kbytes", num);
                            }
                            new CustomEFKManager.AnonymousClass1(customEFKManager).start();
                        } else {
                            customEFKManager.getClass();
                        }
                        final BGSlotManager bGSlotManager2 = dynamicHiddenApp2.mBGSlotManager;
                        bGSlotManager2.getClass();
                        new CountDownTimer() { // from class: com.android.server.bgslotmanager.BGSlotManager.1
                            public AnonymousClass1() {
                            }

                            @Override // android.os.CountDownTimer
                            public final void onFinish() {
                                Slog.i("DynamicHiddenApp_BGSlotManager", "swapTimer onfinish");
                                BGSlotManager.this.setBonusMaxCachedAppsPerSwap();
                                SystemServiceManager$$ExternalSyntheticOutline0.m(new StringBuilder("change Max_Cached by setSwapTimer : "), BGSlotManager.MAX_CACHED_APPS, "DynamicHiddenApp_BGSlotManager");
                            }

                            @Override // android.os.CountDownTimer
                            public final void onTick(long j) {
                            }
                        }.start();
                        if (Settings.Secure.getInt(this.mContext.getContentResolver(), "sem_sp_edition_flipfont_changed", 0) != 1) {
                            new FlipFontOptimizer().setFlipfont(this.mContext);
                            Settings.Secure.putInt(this.mContext.getContentResolver(), "sem_sp_edition_flipfont_changed", 1);
                        }
                        EventLogTags.writeBootProgressAmsState(0, -1, 2, "finishBooting", "NULL");
                        this.mHandler.post(new ActivityManagerService$$ExternalSyntheticLambda11(this, i2));
                        if (CoreRune.FW_APPLOCK) {
                            this.mHandler.post(new ActivityManagerService$$ExternalSyntheticLambda11(this, i));
                        }
                        try {
                            Pageboost.mContext = this.mContext;
                            Pageboost.mActivityManagerService = this;
                            if (!Pageboost.isPageboostMinimized()) {
                                Pageboost.sendMessage(1, -1, -1, -1, 5000, null);
                            }
                            if (Pageboost.BOOTFILE_ENABLED) {
                                Pageboost.sendMessage(23, -1, -1, -1, 0, null);
                                Pageboost.sendMessage(24, -1, -1, -1, 600000, null);
                            }
                        } catch (Exception unused3) {
                            Slog.e("Pageboost", "failed to initPageboost by exception");
                        }
                        try {
                            if (!Pageboost.isPageboostMinimized()) {
                                Slog.i("Pageboost", "Update Packages");
                                Pageboost.sendMessage(4, -1, -1, -1, 10000, null);
                            }
                        } catch (Exception unused4) {
                            Slog.e("Pageboost", "failed to updatePackages by exception");
                        }
                        KillPolicyManager killPolicyManager = this.mKillPolicyManager;
                        if (killPolicyManager != null) {
                            if (killPolicyManager.mContext != null) {
                                killPolicyManager.mContext.registerReceiver(killPolicyManager.policyBroadcastReceiver, VcnManagementService$$ExternalSyntheticOutline0.m("com.android.server.am.BROADCAST_SET_KPM_POLICY", "com.android.server.am.BROADCAST_SET_KPM_DEBUG", "com.android.server.am.BROADCAST_SET_KPM_STATE", "com.android.server.am.BROADCAST_SET_KPM_ONOFF", "com.sec.server.am.BROADCAST_SET_PMM_DMABUF_LEAK_DETECTOR_SOURCE"), null, KillPolicyManager.brHandler);
                            } else {
                                Slog.d("ActivityManager_kpm", " KPMregisterReceiver failed due to mContext being null");
                            }
                        }
                        timingsTraceAndSlog.traceEnd();
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public final void finishForceStopPackageLocked(int i, final String str) {
        Bundle bundle;
        final int i2 = !this.mProcessesReady ? 1342177280 : 0;
        final PackageManagerService.PackageManagerInternalImpl packageManagerInternalImpl = (PackageManagerService.PackageManagerInternalImpl) this.mPackageManagerInt;
        packageManagerInternalImpl.getClass();
        int userId = UserHandle.getUserId(i);
        PackageManagerService packageManagerService = PackageManagerService.this;
        final int[] resolveUserIds = packageManagerService.resolveUserIds(userId);
        final SparseArray visibilityAllowLists = packageManagerService.snapshotComputer().getVisibilityAllowLists(str, resolveUserIds);
        final Bundle bundle2 = new Bundle();
        bundle2.putInt("android.intent.extra.UID", i);
        bundle2.putInt("android.intent.extra.user_handle", userId);
        if (com.android.internal.hidden_from_bootclasspath.android.content.pm.Flags.stayStopped()) {
            bundle2.putLong("android.intent.extra.TIME", SystemClock.elapsedRealtime());
            packageManagerService.mHandler.post(new Runnable() { // from class: com.android.server.pm.PackageManagerService$PackageManagerInternalImpl$$ExternalSyntheticLambda2
                @Override // java.lang.Runnable
                public final void run() {
                    PackageManagerService.PackageManagerInternalImpl packageManagerInternalImpl2 = PackageManagerService.PackageManagerInternalImpl.this;
                    PackageManagerService.this.mBroadcastHelper.sendPackageBroadcast("android.intent.action.PACKAGE_RESTARTED", str, bundle2, i2, null, null, resolveUserIds, null, visibilityAllowLists, null, null);
                }
            });
            bundle = bundle2;
        } else {
            bundle = bundle2;
            packageManagerService.mBroadcastHelper.sendPackageBroadcast("android.intent.action.PACKAGE_RESTARTED", str, bundle2, i2, null, null, resolveUserIds, null, visibilityAllowLists, null, null);
        }
        packageManagerService.mPackageMonitorCallbackHelper.notifyPackageMonitor("android.intent.action.PACKAGE_RESTARTED", str, bundle, resolveUserIds, null, visibilityAllowLists, packageManagerService.mHandler, null);
    }

    public final void finishHeavyWeightApp() {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            throw new SecurityException(ActivityManagerService$$ExternalSyntheticOutline0.m(new StringBuilder("Permission Denial: finishHeavyWeightApp() from pid="), ", uid=", " requires android.permission.FORCE_STOP_PACKAGES", "ActivityManager"));
        }
        ActivityTaskManagerService.LocalService localService = (ActivityTaskManagerService.LocalService) this.mAtmInternal;
        WindowManagerGlobalLock windowManagerGlobalLock = ActivityTaskManagerService.this.mGlobalLock;
        WindowManagerService.boostPriorityForLockedSection();
        synchronized (windowManagerGlobalLock) {
            try {
                if (ActivityTaskManagerService.this.mHeavyWeightProcess != null) {
                    WindowProcessController windowProcessController = ActivityTaskManagerService.this.mHeavyWeightProcess;
                    windowProcessController.getClass();
                    ArrayList arrayList = new ArrayList(windowProcessController.mActivities);
                    for (int i = 0; i < arrayList.size(); i++) {
                        ActivityRecord activityRecord = (ActivityRecord) arrayList.get(i);
                        if (!activityRecord.finishing && activityRecord.isInRootTaskLocked()) {
                            activityRecord.finishIfPossible("finish-heavy", true);
                        }
                    }
                }
                ActivityTaskManagerService activityTaskManagerService = ActivityTaskManagerService.this;
                activityTaskManagerService.clearHeavyWeightProcessIfEquals(activityTaskManagerService.mHeavyWeightProcess);
            } catch (Throwable th) {
                WindowManagerService.resetPriorityAfterLockedSection();
                throw th;
            }
        }
        WindowManagerService.resetPriorityAfterLockedSection();
    }

    public final void finishInstrumentation(IApplicationThread iApplicationThread, int i, Bundle bundle) {
        UserHandle.getCallingUserId();
        if (bundle != null && bundle.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                if (recordForAppLOSP == null) {
                    Slog.w("ActivityManager", "finishInstrumentation: no app for " + iApplicationThread);
                    resetPriorityAfterLockedSection();
                    return;
                }
                long clearCallingIdentity = Binder.clearCallingIdentity();
                finishInstrumentationLocked(recordForAppLOSP, i, bundle);
                Binder.restoreCallingIdentity(clearCallingIdentity);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final void finishInstrumentationLocked(ProcessRecord processRecord, int i, Bundle bundle) {
        Bundle bundle2;
        try {
            Trace.traceBegin(64L, "finishInstrumentationLocked()");
            ActiveInstrumentation activeInstrumentation = processRecord.mInstr;
            if (activeInstrumentation == null) {
                Slog.w("ActivityManager", "finishInstrumentation called on non-instrumented: " + processRecord);
                return;
            }
            ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerProcLock) {
                try {
                    if (!activeInstrumentation.mFinished) {
                        if (activeInstrumentation.mWatcher != null) {
                            Bundle bundle3 = activeInstrumentation.mCurResults;
                            if (bundle3 != null) {
                                if (bundle != null) {
                                    bundle3.putAll(bundle);
                                }
                                bundle2 = bundle3;
                            } else {
                                bundle2 = bundle;
                            }
                            InstrumentationReporter instrumentationReporter = this.mInstrumentationReporter;
                            IInstrumentationWatcher iInstrumentationWatcher = activeInstrumentation.mWatcher;
                            ComponentName componentName = activeInstrumentation.mClass;
                            instrumentationReporter.getClass();
                            instrumentationReporter.report(new InstrumentationReporter.Report(1, iInstrumentationWatcher, componentName, i, bundle2));
                        }
                        if (activeInstrumentation.mUiAutomationConnection != null) {
                            this.mAppOpsService.setMode(99, processRecord.uid, processRecord.info.packageName, 2, null);
                            getAccessCheckDelegateHelper().onInstrumentationFinished(processRecord.uid, processRecord.info.packageName);
                            this.mHandler.obtainMessage(56, activeInstrumentation.mUiAutomationConnection).sendToTarget();
                        }
                        activeInstrumentation.mFinished = true;
                    }
                    activeInstrumentation.mFinished = true;
                    activeInstrumentation.mRunningProcesses.remove(processRecord);
                    if (activeInstrumentation.mRunningProcesses.size() == 0) {
                        activeInstrumentation.mService.mActiveInstrumentation.remove(activeInstrumentation);
                    }
                    processRecord.setActiveInstrumentation(null);
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            processRecord.mProfile.clearHostingComponentType(8);
            if (processRecord.isSdkSandbox) {
                killUid(UserHandle.getAppId(processRecord.uid), UserHandle.getUserId(processRecord.uid), "finished instr");
                SdkSandboxManagerLocal sdkSandboxManagerLocal = (SdkSandboxManagerLocal) LocalManagerRegistry.getManager(SdkSandboxManagerLocal.class);
                if (sdkSandboxManagerLocal != null) {
                    sdkSandboxManagerLocal.notifyInstrumentationFinished(processRecord.sdkSandboxClientAppPackage, Process.getAppUidForSdkSandboxUid(processRecord.uid));
                }
            } else if (!activeInstrumentation.mNoRestart) {
                forceStopPackageLocked(processRecord.info.packageName, -1, false, false, true, true, false, processRecord.userId, "finished inst");
            }
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public final void finishReceiver(IBinder iBinder, int i, String str, Bundle bundle, boolean z, int i2) {
        if (bundle != null && bundle.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Bundle");
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iBinder);
                    if (recordForAppLOSP != null) {
                        this.mBroadcastQueue.finishReceiverLocked(recordForAppLOSP, i, str, bundle, z);
                        trimApplicationsLocked(2, false);
                        resetPriorityAfterLockedSection();
                    } else {
                        Slog.w("ActivityManager", "finishReceiver: no app for " + iBinder);
                        resetPriorityAfterLockedSection();
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final void forceDelayBroadcastDelivery(String str, final long j) {
        Objects.requireNonNull(str);
        Preconditions.checkArgumentNonnegative(j);
        enforceCallingPermission("android.permission.DUMP", "forceDelayBroadcastDelivery()");
        BroadcastQueueModernImpl broadcastQueueModernImpl = this.mBroadcastQueue;
        ActivityManagerService activityManagerService = broadcastQueueModernImpl.mService;
        boostPriorityForLockedSection();
        synchronized (activityManagerService) {
            try {
                broadcastQueueModernImpl.forEachMatchingQueue(new BroadcastQueueModernImpl$$ExternalSyntheticLambda10(0, str), new Consumer() { // from class: com.android.server.am.BroadcastQueueModernImpl$$ExternalSyntheticLambda11
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        long j2 = j;
                        BroadcastProcessQueue broadcastProcessQueue = (BroadcastProcessQueue) obj;
                        if (broadcastProcessQueue.mForcedDelayedDurationMs != j2) {
                            broadcastProcessQueue.mForcedDelayedDurationMs = j2;
                            broadcastProcessQueue.mRunnableAtInvalidated = true;
                        }
                    }
                });
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void forceStopAppZygoteLocked(int i, int i2, String str) {
        if (i < 0) {
            i = UserHandle.getAppId(getPackageManagerInternal().getPackageUid(str, 272629760L, 0));
        }
        this.mProcessList.killAppZygotesLocked(i, i2, str, true);
    }

    public final void forceStopPackage(String str, int i) {
        if (this.mExt.mCanTmoPkgAvoidForceStop && "com.tmobile.echolocate".equals(str)) {
            return;
        }
        forceStopPackage(str, i, false, 0, null);
        boolean z = MARsPolicyManager.MARs_ENABLE;
        MARsPolicyManager mARsPolicyManager = MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE;
        mARsPolicyManager.getClass();
        if (MARsPolicyManager.isChinaPolicyEnabled() && mARsPolicyManager.isAutoRunBlockedApp(str, i)) {
            mARsPolicyManager.addRestrictListAvoidAssoicationLaunch(i, str, "forceStop", "UserForceStop");
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:18:0x009a, code lost:
    
        if (com.android.server.wm.ActivityTaskManagerService.isForceStopDisabled(r23, r5, null, null, null, true) != false) goto L25;
     */
    /* JADX WARN: Code restructure failed: missing block: B:30:0x00cb, code lost:
    
        if (r0.isChangeRequestedAsUser(r8) > 0) goto L25;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final void forceStopPackage(java.lang.String r23, int r24, boolean r25, int r26, java.lang.String r27) {
        /*
            Method dump skipped, instructions count: 483
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.forceStopPackage(java.lang.String, int, boolean, int, java.lang.String):void");
    }

    public final void forceStopPackageByAdmin(String str, int i) {
        forceStopPackage(str, i, true, 0, null);
    }

    public final void forceStopPackageEvenWhenStopping(String str, int i) {
        forceStopPackage(str, i, false, 1, null);
    }

    public final boolean forceStopPackageForMARsLocked(int i, int i2, int i3, boolean z, boolean z2, String str, String str2) {
        if (z) {
            int size = this.mProcessList.mProcessNames.getMap().size();
            for (int i4 = 0; i4 < size; i4++) {
                SparseArray sparseArray = (SparseArray) this.mProcessList.mProcessNames.getMap().valueAt(i4);
                int size2 = sparseArray.size();
                for (int i5 = 0; i5 < size2; i5++) {
                    ProcessRecord processRecord = (ProcessRecord) sparseArray.valueAt(i5);
                    if (processRecord.mPkgList.containsKey(str) && processRecord.mState.mSetAdj < i) {
                        if (MARsDebugConfig.DEBUG_MARs) {
                            Slog.e("MARsPolicyManager", AppStateTrackerImpl$MyHandler$$ExternalSyntheticOutline0.m(i, "Choosed Package ", str, " has the process under ADJ ", " - Skip EM KILL"));
                        }
                        return false;
                    }
                }
            }
        }
        forceStopPackageLocked(str, UserHandle.getAppId(i3), false, false, true, false, false, i2, str2);
        if (!z2) {
            return true;
        }
        Intent intent = new Intent("android.intent.action.PACKAGE_RESTARTED", Uri.fromParts("package", str, null));
        if (!this.mProcessesReady) {
            intent.addFlags(1342177280);
        }
        intent.putExtra("android.intent.extra.UID", i3);
        intent.putExtra("android.intent.extra.user_handle", UserHandle.getUserId(i3));
        int i6 = MY_PID;
        broadcastIntentLocked(null, null, null, intent, null, null, null, 0, null, null, null, null, null, -1, null, false, false, i6, 1000, UserHandle.getUserId(i3), i6, UserHandle.getUserId(i3), BackgroundStartPrivileges.NONE, null, null);
        return true;
    }

    public final boolean forceStopPackageLocked(String str, int i, boolean z, boolean z2, boolean z3, boolean z4, boolean z5, int i2, String str2) {
        return forceStopPackageLocked(str, i, z, z2, z3, z4, false, z5, i2, str2, str == null ? 11 : 10);
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:110:0x01f5  */
    /* JADX WARN: Removed duplicated region for block: B:113:0x0201 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:171:0x01f7  */
    /* JADX WARN: Type inference failed for: r9v3 */
    /* JADX WARN: Type inference failed for: r9v4, types: [boolean, int] */
    /* JADX WARN: Type inference failed for: r9v5 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final boolean forceStopPackageLocked(java.lang.String r24, int r25, boolean r26, boolean r27, boolean r28, boolean r29, boolean r30, boolean r31, int r32, java.lang.String r33, int r34) {
        /*
            Method dump skipped, instructions count: 694
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.forceStopPackageLocked(java.lang.String, int, boolean, boolean, boolean, boolean, boolean, boolean, int, java.lang.String, int):boolean");
    }

    public final void frozenBinderTransactionDetected(int i, int i2, int i3, int i4) {
        ProcessRecord processRecord;
        synchronized (this.mPidsSelfLocked) {
            processRecord = this.mPidsSelfLocked.get(i);
        }
        CachedAppOptimizer cachedAppOptimizer = this.mOomAdjuster.mCachedAppOptimizer;
        cachedAppOptimizer.getClass();
        StringBuilder sb = new StringBuilder("pid ");
        sb.append(i);
        sb.append(" ");
        AccessibilityManagerService$$ExternalSyntheticOutline0.m(i2, processRecord == null ? "null" : processRecord.processName, " sent binder code ", " with flags ", sb);
        sb.append(i3);
        sb.append(" to frozen apps and got error ");
        sb.append(i4);
        Slog.w("ActivityManager", sb.toString());
        if (cachedAppOptimizer.mUseFreezer && cachedAppOptimizer.mFreezerBinderCallbackEnabled) {
            long uptimeMillis = SystemClock.uptimeMillis();
            if (uptimeMillis < cachedAppOptimizer.mFreezerBinderCallbackLast + cachedAppOptimizer.mFreezerBinderCallbackThrottle) {
                Slog.d("ActivityManager", "Too many transaction errors, throttling freezer binder callback.");
            } else {
                cachedAppOptimizer.mFreezerBinderCallbackLast = uptimeMillis;
                cachedAppOptimizer.mFreezeHandler.sendEmptyMessage(8);
            }
        }
    }

    public final AccessCheckDelegateHelper getAccessCheckDelegateHelper() {
        if (this.mAccessCheckDelegateHelper == null) {
            ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
            ArrayList arrayList = this.mActiveInstrumentation;
            AppOpsService appOpsService = this.mAppOpsService;
            if (this.mPermissionManagerInt == null) {
                this.mPermissionManagerInt = (PermissionManagerService.PermissionManagerServiceInternalImpl) LocalServices.getService(PermissionManagerService.PermissionManagerServiceInternalImpl.class);
            }
            this.mAccessCheckDelegateHelper = new AccessCheckDelegateHelper(activityManagerProcLock, arrayList, appOpsService, this.mPermissionManagerInt);
        }
        return this.mAccessCheckDelegateHelper;
    }

    public final Map getActiveUids() {
        HashMap hashMap;
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                ActiveUids activeUids = this.mProcessList.mActiveUids;
                activeUids.getClass();
                hashMap = new HashMap();
                for (int i = 0; i < activeUids.mActiveUids.size(); i++) {
                    UidRecord uidRecord = (UidRecord) activeUids.mActiveUids.valueAt(i);
                    hashMap.put(Integer.valueOf(uidRecord.mUid), Boolean.valueOf(uidRecord.mIdle));
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return hashMap;
    }

    public final List getAllRestrictedList() {
        boolean z = MARsPolicyManager.MARs_ENABLE;
        MARsPolicyManager mARsPolicyManager = MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE;
        mARsPolicyManager.getClass();
        if (!MARsPolicyManager.hasPermission("com.samsung.android.permission.SEM_APP_RESTRICTION")) {
            return null;
        }
        ArrayList arrayList = new ArrayList();
        synchronized (MARsPolicyManager.MARsLock) {
            for (int i = 0; i < mARsPolicyManager.mMARsTargetPackages.mMap.size(); i++) {
                try {
                    SparseArray sparseArray = (SparseArray) mARsPolicyManager.mMARsTargetPackages.mMap.valueAt(i);
                    for (int i2 = 0; i2 < sparseArray.size(); i2++) {
                        MARsPackageInfo mARsPackageInfo = (MARsPackageInfo) sparseArray.valueAt(i2);
                        if (mARsPackageInfo != null && mARsPolicyManager.isCurrentUser(mARsPackageInfo.userId)) {
                            arrayList.add(new SemAppRestrictionManager.AppRestrictionInfo(mARsPackageInfo.name, mARsPackageInfo.uid, mARsPackageInfo.maxLevel == 4 ? new SemAppRestrictionManager.RestrictionInfo(0, 1, FASTableContract.convertDisableReasonToDBValue(mARsPackageInfo.disableReason)) : mARsPackageInfo.isFASEnabled ? new SemAppRestrictionManager.RestrictionInfo(1, 1, FASTableContract.convertFASTypeToReason(mARsPackageInfo.fasType)) : mARsPackageInfo.fasType == 256 ? new SemAppRestrictionManager.RestrictionInfo(3, 1, FASTableContract.convertFASTypeToReason(mARsPackageInfo.fasType)) : null));
                        }
                    }
                } catch (Throwable th) {
                    throw th;
                }
            }
        }
        return arrayList;
    }

    public final List getAllRootTaskInfos() {
        return this.mActivityTaskManager.getAllRootTaskInfos();
    }

    public final int getAppId(String str) {
        if (str == null) {
            return -1;
        }
        try {
            return UserHandle.getAppId(this.mContext.getPackageManager().getApplicationInfo(str, 0).uid);
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
            return -1;
        }
    }

    public final AppOpsManager getAppOpsManager$1() {
        if (this.mAppOpsManager == null) {
            this.mAppOpsManager = (AppOpsManager) this.mContext.getSystemService(AppOpsManager.class);
        }
        return this.mAppOpsManager;
    }

    public final int getAppStartModeLOSP(int i, int i2, int i3, String str, boolean z, boolean z2, boolean z3) {
        int appRestrictedInBackgroundLOSP;
        AndroidPackageInternal androidPackageInternal;
        ProcessRecord processRecord;
        if (this.mInternal.isPendingTopUid(i)) {
            return 0;
        }
        UidRecord uidRecord = this.mProcessList.mActiveUids.get(i);
        if (uidRecord != null && !z && !z3 && !uidRecord.mIdle) {
            return 0;
        }
        if (uidRecord == null ? getPackageManagerInternal().isPackageEphemeral(UserHandle.getUserId(i), str) : uidRecord.mEphemeral) {
            return 3;
        }
        if (z2) {
            return 0;
        }
        if (z) {
            appRestrictedInBackgroundLOSP = appRestrictedInBackgroundLOSP(i, i2, str);
        } else {
            PackageSetting packageStateInternal = ((PackageManagerService.PackageManagerInternalImpl) this.mPackageManagerInt).mService.snapshotComputer().getPackageStateInternal(str);
            if (packageStateInternal == null || (androidPackageInternal = packageStateInternal.pkg) == null || !packageStateInternal.isSystem() || !androidPackageInternal.isPersistent()) {
                int appId = UserHandle.getAppId(i);
                int[] iArr = this.mBackgroundAppIdAllowlist;
                int length = iArr.length;
                int i4 = 0;
                while (true) {
                    if (i4 < length) {
                        if (appId == iArr[i4]) {
                            break;
                        }
                        i4++;
                    } else if (!isOnDeviceIdleAllowlistLOSP(i, false)) {
                        appRestrictedInBackgroundLOSP = appRestrictedInBackgroundLOSP(i, i2, str);
                    }
                }
            }
            appRestrictedInBackgroundLOSP = 0;
        }
        if (appRestrictedInBackgroundLOSP == 1 && i3 >= 0) {
            synchronized (this.mPidsSelfLocked) {
                processRecord = this.mPidsSelfLocked.get(i3);
            }
            if (processRecord != null && !ActivityManager.isProcStateBackground(processRecord.mState.mCurProcState)) {
                return 0;
            }
        }
        return appRestrictedInBackgroundLOSP;
    }

    public final boolean getAutoRemoveRecents(int i) {
        boolean z = false;
        if (!CoreRune.FW_DEDICATED_MEMORY) {
            return false;
        }
        checkLongLivePermissions("getAutoRemoveRecents");
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    ActivityTaskManagerService activityTaskManagerService = this.mExt.mAtmService;
                    WindowManagerGlobalLock windowManagerGlobalLock = activityTaskManagerService.mGlobalLock;
                    WindowManagerService.boostPriorityForLockedSection();
                    synchronized (windowManagerGlobalLock) {
                        try {
                            Task anyTaskForId = activityTaskManagerService.mRootWindowContainer.anyTaskForId(i, 1, null, false);
                            if (anyTaskForId == null) {
                                WindowManagerService.resetPriorityAfterLockedSection();
                            } else {
                                z = anyTaskForId.autoRemoveRecents;
                                WindowManagerService.resetPriorityAfterLockedSection();
                            }
                        } catch (Throwable th) {
                            WindowManagerService.resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                } catch (Throwable th2) {
                    resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            resetPriorityAfterLockedSection();
            return z;
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final int getBackgroundRestrictionExemptionReason(int i) {
        enforceCallingPermission("android.permission.DEVICE_POWER", "getBackgroundRestrictionExemptionReason()");
        return this.mAppRestrictionController.getBackgroundRestrictionExemptionReason(i);
    }

    public final BackgroundStartPrivileges getBackgroundStartPrivileges(int i) {
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                UidRecord uidRecord = this.mProcessList.mActiveUids.get(i);
                if (uidRecord == null) {
                    BackgroundStartPrivileges backgroundStartPrivileges = BackgroundStartPrivileges.NONE;
                    resetPriorityAfterProcLockedSection();
                    return backgroundStartPrivileges;
                }
                GetBackgroundStartPrivilegesFunctor getBackgroundStartPrivilegesFunctor = this.mGetBackgroundStartPrivilegesFunctor;
                getBackgroundStartPrivilegesFunctor.mUid = i;
                getBackgroundStartPrivilegesFunctor.mBackgroundStartPrivileges = BackgroundStartPrivileges.NONE;
                uidRecord.forEachProcess(getBackgroundStartPrivilegesFunctor);
                BackgroundStartPrivileges backgroundStartPrivileges2 = this.mGetBackgroundStartPrivilegesFunctor.mBackgroundStartPrivileges;
                resetPriorityAfterProcLockedSection();
                return backgroundStartPrivileges2;
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    /* JADX WARN: Finally extract failed */
    /* JADX WARN: Removed duplicated region for block: B:12:0x0050 A[Catch: all -> 0x005a, DONT_GENERATE, TRY_LEAVE, TryCatch #1 {all -> 0x005a, blocks: (B:38:0x001e, B:12:0x0050, B:16:0x005c, B:17:0x005e, B:22:0x0068, B:25:0x0073, B:28:0x006d, B:31:0x007c, B:32:0x007d, B:44:0x0036, B:19:0x005f), top: B:37:0x001e, outer: #0, inners: #2 }] */
    /* JADX WARN: Removed duplicated region for block: B:16:0x005c A[Catch: all -> 0x005a, TRY_ENTER, TryCatch #1 {all -> 0x005a, blocks: (B:38:0x001e, B:12:0x0050, B:16:0x005c, B:17:0x005e, B:22:0x0068, B:25:0x0073, B:28:0x006d, B:31:0x007c, B:32:0x007d, B:44:0x0036, B:19:0x005f), top: B:37:0x001e, outer: #0, inners: #2 }] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final int getBindingUidProcessState(final int r9, java.lang.String r10) {
        /*
            r8 = this;
            boolean r10 = r8.hasUsageStatsPermission(r10)
            if (r10 != 0) goto Le
            java.lang.String r10 = "android.permission.GET_BINDING_UID_IMPORTANCE"
            java.lang.String r0 = "getBindingUidProcessState"
            r8.enforceCallingPermission(r10, r0)
        Le:
            int r10 = android.os.Binder.getCallingUid()
            long r0 = android.os.Binder.clearCallingIdentity()
            boostPriorityForLockedSection()     // Catch: java.lang.Throwable -> L83
            monitor-enter(r8)     // Catch: java.lang.Throwable -> L83
            r2 = 0
            r3 = 1
            if (r10 == r9) goto L4d
            com.android.server.am.ProcessList r4 = r8.mProcessList     // Catch: java.lang.Throwable -> L5a
            com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda18 r5 = new com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda18     // Catch: java.lang.Throwable -> L5a
            r6 = 0
            r5.<init>()     // Catch: java.lang.Throwable -> L5a
            java.lang.Object r4 = r4.searchEachLruProcessesLOSP(r5, r2)     // Catch: java.lang.Throwable -> L5a
            java.lang.Boolean r4 = (java.lang.Boolean) r4     // Catch: java.lang.Throwable -> L5a
            java.lang.Boolean r5 = java.lang.Boolean.TRUE     // Catch: java.lang.Throwable -> L5a
            boolean r4 = r5.equals(r4)     // Catch: java.lang.Throwable -> L5a
            if (r4 == 0) goto L36
            r10 = r3
            goto L48
        L36:
            com.android.server.am.ProcessList r4 = r8.mProcessList     // Catch: java.lang.Throwable -> L5a
            com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda18 r6 = new com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda18     // Catch: java.lang.Throwable -> L5a
            r7 = 1
            r6.<init>()     // Catch: java.lang.Throwable -> L5a
            java.lang.Object r10 = r4.searchEachLruProcessesLOSP(r6, r2)     // Catch: java.lang.Throwable -> L5a
            java.lang.Boolean r10 = (java.lang.Boolean) r10     // Catch: java.lang.Throwable -> L5a
            boolean r10 = r5.equals(r10)     // Catch: java.lang.Throwable -> L5a
        L48:
            if (r10 == 0) goto L4b
            goto L4d
        L4b:
            r10 = r2
            goto L4e
        L4d:
            r10 = r3
        L4e:
            if (r10 != 0) goto L5c
            monitor-exit(r8)     // Catch: java.lang.Throwable -> L5a
            resetPriorityAfterLockedSection()
            android.os.Binder.restoreCallingIdentity(r0)
            r8 = 20
            return r8
        L5a:
            r9 = move-exception
            goto L7e
        L5c:
            com.android.server.am.PendingStartActivityUids r10 = r8.mPendingStartActivityUids     // Catch: java.lang.Throwable -> L5a
            monitor-enter(r10)     // Catch: java.lang.Throwable -> L5a
            android.util.SparseArray r4 = r10.mPendingUids     // Catch: java.lang.Throwable -> L7b
            java.lang.Object r4 = r4.get(r9)     // Catch: java.lang.Throwable -> L7b
            if (r4 == 0) goto L68
            r2 = r3
        L68:
            monitor-exit(r10)     // Catch: java.lang.Throwable -> L5a
            if (r2 == 0) goto L6d
            r9 = 2
            goto L73
        L6d:
            com.android.server.am.ProcessList r10 = r8.mProcessList     // Catch: java.lang.Throwable -> L5a
            int r9 = r10.getUidProcStateLOSP(r9)     // Catch: java.lang.Throwable -> L5a
        L73:
            monitor-exit(r8)     // Catch: java.lang.Throwable -> L5a
            resetPriorityAfterLockedSection()
            android.os.Binder.restoreCallingIdentity(r0)
            return r9
        L7b:
            r9 = move-exception
            monitor-exit(r10)     // Catch: java.lang.Throwable -> L5a
            throw r9     // Catch: java.lang.Throwable -> L5a
        L7e:
            monitor-exit(r8)     // Catch: java.lang.Throwable -> L5a
            resetPriorityAfterLockedSection()     // Catch: java.lang.Throwable -> L83
            throw r9     // Catch: java.lang.Throwable -> L83
        L83:
            r8 = move-exception
            android.os.Binder.restoreCallingIdentity(r0)
            throw r8
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.getBindingUidProcessState(int, java.lang.String):int");
    }

    public final List getBugreportWhitelistedPackages() {
        enforceCallingPermission("android.permission.MANAGE_DEBUGGING", "getBugreportWhitelistedPackages");
        return new ArrayList(SystemConfig.getInstance().mBugreportWhitelistedPackages);
    }

    public final CustomFrequencyManagerInternal getCfmsInternalLocked() {
        if (this.mCfmsManagerInt == null) {
            this.mCfmsManagerInt = (CustomFrequencyManagerInternal) LocalServices.getService(CustomFrequencyManagerInternal.class);
        }
        return this.mCfmsManagerInt;
    }

    public final ArrayMap getCommonServicesLocked(boolean z) {
        if (z) {
            if (this.mIsolatedAppBindArgs == null) {
                ArrayMap arrayMap = new ArrayMap(1);
                this.mIsolatedAppBindArgs = arrayMap;
                addServiceToMap(arrayMap, "package");
                addServiceToMap(this.mIsolatedAppBindArgs, "permissionmgr");
            }
            return this.mIsolatedAppBindArgs;
        }
        if (this.mAppBindArgs == null) {
            ArrayMap arrayMap2 = new ArrayMap();
            this.mAppBindArgs = arrayMap2;
            addServiceToMap(arrayMap2, "package");
            addServiceToMap(this.mAppBindArgs, "permissionmgr");
            addServiceToMap(this.mAppBindArgs, "window");
            addServiceToMap(this.mAppBindArgs, "alarm");
            addServiceToMap(this.mAppBindArgs, "display");
            addServiceToMap(this.mAppBindArgs, "network_management");
            addServiceToMap(this.mAppBindArgs, "connectivity");
            addServiceToMap(this.mAppBindArgs, "accessibility");
            addServiceToMap(this.mAppBindArgs, "input_method");
            addServiceToMap(this.mAppBindArgs, "input");
            addServiceToMap(this.mAppBindArgs, "graphicsstats");
            addServiceToMap(this.mAppBindArgs, "appops");
            addServiceToMap(this.mAppBindArgs, "content");
            addServiceToMap(this.mAppBindArgs, "jobscheduler");
            addServiceToMap(this.mAppBindArgs, "notification");
            addServiceToMap(this.mAppBindArgs, "vibrator");
            addServiceToMap(this.mAppBindArgs, "account");
            addServiceToMap(this.mAppBindArgs, "power");
            addServiceToMap(this.mAppBindArgs, "user");
            addServiceToMap(this.mAppBindArgs, "mount");
            addServiceToMap(this.mAppBindArgs, "platform_compat");
            addServiceToMap(this.mAppBindArgs, "activity_task");
            addServiceToMap(this.mAppBindArgs, "autofill");
            addServiceToMap(this.mAppBindArgs, "phone");
            addServiceToMap(this.mAppBindArgs, "clipboard");
            addServiceToMap(this.mAppBindArgs, "semclipboard");
            addServiceToMap(this.mAppBindArgs, "audio");
            addServiceToMap(this.mAppBindArgs, "webviewupdate");
            addServiceToMap(this.mAppBindArgs, "uimode");
            addServiceToMap(this.mAppBindArgs, "batterystats");
            addServiceToMap(this.mAppBindArgs, "batteryproperties");
            addServiceToMap(this.mAppBindArgs, "netpolicy");
        }
        return this.mAppBindArgs;
    }

    public final Configuration getConfiguration() {
        return this.mActivityTaskManager.getConfiguration();
    }

    public final String[] getContentByTask(int i) {
        ContentDispatcher contentDispatcher = this.mActivityTaskManager.mContentDispatcher;
        contentDispatcher.getClass();
        String[] strArr = {"", "", ""};
        synchronized (contentDispatcher.mPdfInfos) {
            ContentDispatcher.PdfInfo pdfInfo = (ContentDispatcher.PdfInfo) contentDispatcher.mPdfInfos.get(Integer.valueOf(i));
            if (pdfInfo != null) {
                try {
                    contentDispatcher.mGrantUriPermission.accept(Integer.valueOf(pdfInfo.mCallingUid), pdfInfo.mIntent.getData());
                    strArr[0] = pdfInfo.mIntent.getData().toString();
                    strArr[2] = pdfInfo.mPackageName;
                    return strArr;
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            return null;
        }
    }

    public final ContentProviderHolder getContentProvider(IApplicationThread iApplicationThread, String str, String str2, int i, boolean z) {
        String str3;
        traceBegin("getContentProvider: ", str2);
        try {
            boolean z2 = MARsPolicyManager.MARs_ENABLE;
            if (str2 != null && (str2.contains(".CapsuleProvider") || str2.contains(".WalletSettingsProvider") || str2.contains("spay.common.share"))) {
                boostPriorityForLockedSection();
                synchronized (this) {
                    try {
                        ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                        str3 = (recordForAppLOSP == null || recordForAppLOSP.info == null) ? null : recordForAppLOSP.info.packageName;
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterLockedSection();
                if ("com.samsung.android.bixby.agent".equals(str3)) {
                    MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE.cancelDisablePolicy(str2.split(".CapsuleProvider")[0], i, 1);
                } else if ("com.samsung.android.samsungpass".equals(str3)) {
                    MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE.cancelDisablePolicy("com.samsung.android.spay", i, 1);
                }
            }
            return this.mCpHelper.getContentProvider(iApplicationThread, str, str2, i, z);
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public final ContentProviderHolder getContentProviderExternal(String str, int i, IBinder iBinder, String str2) {
        traceBegin("getContentProviderExternal: ", str);
        try {
            ContentProviderHelper contentProviderHelper = this.mCpHelper;
            ActivityManagerService activityManagerService = contentProviderHelper.mService;
            activityManagerService.enforceCallingPermission("android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY", "Do not have permission in call getContentProviderExternal()");
            return contentProviderHelper.getContentProviderImpl(null, str, iBinder, Binder.getCallingUid(), null, str2 != null ? str2 : "*external*", true, activityManagerService.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), i, false, 2, "getContentProvider", null), -1);
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public final ContentProviderHelper getContentProviderHelper() {
        return this.mCpHelper;
    }

    public final UserInfo getCurrentUser() {
        return this.mUserController.getCurrentUser();
    }

    public final int getCurrentUserId() {
        int currentOrTargetUserIdLU;
        UserController userController = this.mUserController;
        userController.checkGetCurrentUserPermissions();
        if (userController.mTargetUserId == -10000) {
            return userController.mCurrentUserId;
        }
        synchronized (userController.mLock) {
            currentOrTargetUserIdLU = userController.getCurrentOrTargetUserIdLU();
        }
        return currentOrTargetUserIdLU;
    }

    public final List getDelegatedShellPermissions() {
        List of;
        AccessCheckDelegateHelper accessCheckDelegateHelper = getAccessCheckDelegateHelper();
        accessCheckDelegateHelper.getClass();
        if (UserHandle.getCallingAppId() != 2000 && UserHandle.getCallingAppId() != 0) {
            throw new SecurityException("Only the shell can get delegated permissions");
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = accessCheckDelegateHelper.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                AccessCheckDelegate$AccessCheckDelegateImpl accessCheckDelegate$AccessCheckDelegateImpl = accessCheckDelegateHelper.mAccessCheckDelegate;
                if (accessCheckDelegate$AccessCheckDelegateImpl == null) {
                    of = Collections.EMPTY_LIST;
                    resetPriorityAfterProcLockedSection();
                } else {
                    String[] strArr = accessCheckDelegate$AccessCheckDelegateImpl.mDelegatePermissions;
                    of = strArr == null ? null : List.of((Object[]) strArr);
                    resetPriorityAfterProcLockedSection();
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        return of;
    }

    public final int[] getDisplayIdsForStartingVisibleBackgroundUsers() {
        String[] strArr = {"android.permission.MANAGE_USERS", "android.permission.INTERACT_ACROSS_USERS"};
        for (int i = 0; i < 2; i++) {
            if (checkCallingPermission(strArr[i]) == 0) {
                Injector injector = this.mInjector;
                injector.getClass();
                if (!UserManager.isVisibleBackgroundUsersEnabled()) {
                    Slogf.w("ActivityManager", "getDisplayIdsForStartingVisibleBackgroundUsers(): not supported");
                    return null;
                }
                DisplayManager displayManager = (DisplayManager) injector.mContext.getSystemService(DisplayManager.class);
                Display[] displays = displayManager.getDisplays();
                if (displays == null || displays.length == 0) {
                    Slogf.wtf("ActivityManager", "displayManager (%s) returned no displays", displayManager);
                    return null;
                }
                for (Display display : displays) {
                    if (display.getDisplayId() == 0) {
                        boolean isVisibleBackgroundUsersOnDefaultDisplayEnabled = UserManager.isVisibleBackgroundUsersOnDefaultDisplayEnabled();
                        int length = displays.length;
                        if (!isVisibleBackgroundUsersOnDefaultDisplayEnabled) {
                            length--;
                        }
                        int[] iArr = new int[length];
                        int i2 = 0;
                        for (Display display2 : displays) {
                            int displayId = display2.getDisplayId();
                            if (display2.isValid() && (display2.getFlags() & 4) == 0 && (isVisibleBackgroundUsersOnDefaultDisplayEnabled || displayId != 0)) {
                                iArr[i2] = displayId;
                                i2++;
                            }
                        }
                        if (i2 != 0) {
                            if (i2 == length) {
                                return iArr;
                            }
                            int[] iArr2 = new int[i2];
                            System.arraycopy(iArr, 0, iArr2, 0, i2);
                            return iArr2;
                        }
                        int i3 = SystemProperties.getInt("fw.display_ids_for_starting_users_for_testing_purposes", 0);
                        if (!(isVisibleBackgroundUsersOnDefaultDisplayEnabled && i3 == 0) && i3 <= 0) {
                            Slogf.e("ActivityManager", "getDisplayIdsForStartingVisibleBackgroundUsers(): no valid display on %s", Arrays.toString(displays));
                            return null;
                        }
                        Slogf.w("ActivityManager", "getDisplayIdsForStartingVisibleBackgroundUsers(): no valid display found, but returning %d as set by property %s", Integer.valueOf(i3), "fw.display_ids_for_starting_users_for_testing_purposes");
                        return new int[]{i3};
                    }
                }
                Slogf.wtf("ActivityManager", "displayManager (%s) has %d displays (%s), but none has id DEFAULT_DISPLAY (%d)", displayManager, Integer.valueOf(displays.length), Arrays.toString(displays), 0);
                return null;
            }
        }
        String str = "Permission Denial: getDisplayIdsForStartingVisibleBackgroundUsers() from pid=" + Binder.getCallingPid() + ", uid=" + Binder.getCallingUid() + " requires one of " + Arrays.toString(strArr);
        Slog.w("ActivityManager", str);
        throw new SecurityException(str);
    }

    public final List getDumpMemoryInfo$1() {
        ArrayList arrayList;
        int i;
        IApplicationThread iApplicationThread;
        int i2;
        String str;
        int setAdjWithServices;
        int callingUid = Binder.getCallingUid();
        long[] jArr = null;
        if (ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) != 0) {
            AnyMotionDetector$$ExternalSyntheticOutline0.m(callingUid, "getDumpMemoryInfo() - permission is not granted. callingUid: ", "ActivityManager");
            return null;
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                arrayList = new ArrayList(this.mProcessList.mLruProcesses);
            } finally {
            }
        }
        resetPriorityAfterLockedSection();
        ArrayList arrayList2 = new ArrayList();
        SparseArray sparseArray = new SparseArray();
        int size = arrayList.size() - 1;
        while (true) {
            i = 3;
            if (size < 0) {
                break;
            }
            ProcessRecord processRecord = (ProcessRecord) arrayList.get(size);
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    iApplicationThread = processRecord.mThread;
                    i2 = processRecord.mPid;
                    str = processRecord.processName;
                    setAdjWithServices = processRecord.mState.getSetAdjWithServices();
                } finally {
                }
            }
            resetPriorityAfterLockedSection();
            if (iApplicationThread != null) {
                long[] jArr2 = new long[3];
                long pss = Debug.getPss(i2, jArr2, jArr);
                int i3 = 0;
                while (true) {
                    int[] iArr = DUMP_MEM_OOM_ADJ;
                    if (i3 >= iArr.length) {
                        break;
                    }
                    if (i3 == iArr.length - 1 || (setAdjWithServices >= iArr[i3] && setAdjWithServices < iArr[i3 + 1])) {
                        break;
                    }
                    i3++;
                }
                MemDumpInfo memDumpInfo = new MemDumpInfo();
                long j = jArr2[1];
                memDumpInfo.pss = pss - j;
                memDumpInfo.swap_out = j;
                memDumpInfo.rss = jArr2[2];
                memDumpInfo.label = DUMP_MEM_OOM_COMPACT_LABEL[i3];
                memDumpInfo.procName = str;
                arrayList2.add(memDumpInfo);
                sparseArray.append(i2, memDumpInfo);
            }
            size--;
            jArr = null;
        }
        if (arrayList.size() > 1) {
            try {
                updateCpuStatsNow();
                ArrayList arrayList3 = new ArrayList();
                Debug.MemoryInfo[] memoryInfoArr = new Debug.MemoryInfo[1];
                this.mAppProfiler.forAllCpuStats(new ActivityManagerService$$ExternalSyntheticLambda14(2, arrayList3));
                int size2 = arrayList3.size() - 1;
                boolean z = false;
                while (size2 >= 0) {
                    ProcessCpuTracker.Stats stats = (ProcessCpuTracker.Stats) arrayList3.get(size2);
                    if (stats.vsize > 0 && sparseArray.indexOfKey(stats.pid) < 0) {
                        long[] jArr3 = new long[i];
                        if (!z && stats.name.equals("dex2oat")) {
                            z = true;
                        }
                        long pss2 = Debug.getPss(stats.pid, jArr3, null);
                        MemDumpInfo memDumpInfo2 = new MemDumpInfo();
                        long j2 = jArr3[1];
                        memDumpInfo2.pss = pss2 - j2;
                        memDumpInfo2.swap_out = j2;
                        memDumpInfo2.rss = jArr3[2];
                        memDumpInfo2.label = DUMP_MEM_OOM_COMPACT_LABEL[0];
                        memDumpInfo2.procName = stats.name;
                        arrayList2.add(memDumpInfo2);
                        sparseArray.append(stats.pid, memDumpInfo2);
                    } else if (sparseArray.indexOfKey(stats.pid) >= 0) {
                        ((MemDumpInfo) sparseArray.get(stats.pid)).getClass();
                    }
                    size2--;
                    i = 3;
                }
            } catch (Exception unused) {
            }
        }
        MemDumpInfo memDumpInfo3 = new MemDumpInfo();
        this.mProcessCpuTracker.getLastSystemTime();
        this.mProcessCpuTracker.getLastUserTime();
        int i4 = this.mOomAdjuster.mNumCachedProcessCount;
        arrayList2.add(memDumpInfo3);
        return arrayList2;
    }

    public final ActivityTaskManager.RootTaskInfo getFocusedRootTaskInfo() {
        return this.mActivityTaskManager.getFocusedRootTaskInfo();
    }

    public final int getForegroundServiceType(ComponentName componentName, IBinder iBinder) {
        int foregroundServiceTypeLocked;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                foregroundServiceTypeLocked = this.mServices.getForegroundServiceTypeLocked(componentName, iBinder);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return foregroundServiceTypeLocked;
    }

    public final Configuration getGlobalConfiguration() {
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            return this.mActivityTaskManager.getConfiguration();
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final ParceledListSlice getHistoricalProcessExitReasons(String str, int i, int i2, int i3) {
        enforceNotIsolatedCaller("getHistoricalProcessExitReasons");
        if (i3 == -1 || i3 == -2) {
            throw new IllegalArgumentException("Unsupported userId");
        }
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        UserHandle.getCallingUserId();
        this.mUserController.handleIncomingUser(callingPid, callingUid, i3, true, 0, "getHistoricalProcessExitReasons", null);
        NativeTombstoneManager nativeTombstoneManager = (NativeTombstoneManager) LocalServices.getService(NativeTombstoneManager.class);
        ArrayList arrayList = new ArrayList();
        if (TextUtils.isEmpty(str)) {
            this.mProcessList.mAppExitInfoTracker.getExitInfo(str, callingUid, i, i2, arrayList);
            nativeTombstoneManager.collectTombstones(arrayList, callingUid, i, i2);
        } else {
            int enforceDumpPermissionForPackage = enforceDumpPermissionForPackage(i3, callingUid, str, "getHistoricalProcessExitReasons");
            if (enforceDumpPermissionForPackage != -1) {
                this.mProcessList.mAppExitInfoTracker.getExitInfo(str, enforceDumpPermissionForPackage, i, i2, arrayList);
                nativeTombstoneManager.collectTombstones(arrayList, enforceDumpPermissionForPackage, i, i2);
            }
        }
        return new ParceledListSlice(arrayList);
    }

    public final ParceledListSlice getHistoricalProcessStartReasons(String str, int i, int i2) {
        enforceNotIsolatedCaller("getHistoricalProcessStartReasons");
        if (i2 == -1 || i2 == -2) {
            throw new IllegalArgumentException("Unsupported userId");
        }
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        this.mUserController.handleIncomingUser(callingPid, callingUid, i2, true, 0, "getHistoricalProcessStartReasons", null);
        ArrayList arrayList = new ArrayList();
        if (TextUtils.isEmpty(str)) {
            this.mProcessList.mAppStartInfoTracker.getStartInfo(callingUid, i, str, arrayList);
        } else {
            int enforceDumpPermissionForPackage = enforceDumpPermissionForPackage(i2, callingUid, str, "getHistoricalProcessStartReasons");
            if (enforceDumpPermissionForPackage != -1) {
                this.mProcessList.mAppStartInfoTracker.getStartInfo(enforceDumpPermissionForPackage, i, str, arrayList);
            }
        }
        return new ParceledListSlice(arrayList);
    }

    public final ActivityManager.PendingIntentInfo getInfoForIntentSender(IIntentSender iIntentSender) {
        if (!(iIntentSender instanceof PendingIntentRecord)) {
            return new ActivityManager.PendingIntentInfo((String) null, -1, false, 0);
        }
        PendingIntentRecord pendingIntentRecord = (PendingIntentRecord) iIntentSender;
        String str = pendingIntentRecord.key.packageName;
        int i = pendingIntentRecord.uid;
        boolean filterAppAccess = getPackageManagerInternal().filterAppAccess(Binder.getCallingUid(), UserHandle.getUserId(i), str, true);
        String str2 = filterAppAccess ? null : str;
        int i2 = filterAppAccess ? -1 : i;
        PendingIntentRecord.Key key = pendingIntentRecord.key;
        return new ActivityManager.PendingIntentInfo(str2, i2, (key.flags & 67108864) != 0, key.type);
    }

    public final ParceledListSlice getInstalledPackageListFromMARs(int i, int i2) {
        boolean z = MARsPolicyManager.MARs_ENABLE;
        MARsPolicyManager mARsPolicyManager = MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE;
        mARsPolicyManager.getClass();
        ParceledListSlice parceledListSlice = null;
        if (MARsPolicyManager.hasPermission("android.permission.INTERACT_ACROSS_USERS") || MARsPolicyManager.hasPermission("android.permission.INTERACT_ACROSS_USERS_FULL")) {
            long clearCallingIdentity = Binder.clearCallingIdentity();
            try {
                try {
                    ParceledListSlice parceledListSlice2 = new ParceledListSlice(mARsPolicyManager.mContext.getPackageManager().getInstalledPackagesAsUser(i, i2));
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                    parceledListSlice = parceledListSlice2;
                } catch (Exception e) {
                    Slog.e("MARsPolicyManager", "getInstalledPackageListFromMARs exception:" + e);
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(clearCallingIdentity);
                throw th;
            }
        }
        return parceledListSlice;
    }

    public final Intent getIntentForIntentSender(IIntentSender iIntentSender) {
        enforceCallingPermission("android.permission.GET_INTENT_SENDER_INTENT", "getIntentForIntentSender()");
        if (!(iIntentSender instanceof PendingIntentRecord)) {
            return null;
        }
        try {
            PendingIntentRecord pendingIntentRecord = (PendingIntentRecord) iIntentSender;
            if (pendingIntentRecord.key.requestIntent != null) {
                return new Intent(pendingIntentRecord.key.requestIntent);
            }
            return null;
        } catch (ClassCastException unused) {
            return null;
        }
    }

    public final IIntentSender getIntentSender(int i, String str, IBinder iBinder, String str2, int i2, Intent[] intentArr, String[] strArr, int i3, Bundle bundle, int i4) {
        return getIntentSenderWithFeature(i, str, null, iBinder, str2, i2, intentArr, strArr, i3, bundle, i4);
    }

    public final IIntentSender getIntentSenderWithFeature(int i, String str, String str2, IBinder iBinder, String str3, int i2, Intent[] intentArr, String[] strArr, int i3, Bundle bundle, int i4) {
        enforceNotIsolatedCaller("getIntentSender");
        return getIntentSenderWithFeatureAsApp(i, i2, i3, i4, Binder.getCallingUid(), bundle, iBinder, str, str2, str3, intentArr, strArr);
    }

    public final PendingIntentRecord getIntentSenderWithFeatureAsApp(int i, int i2, int i3, int i4, int i5, Bundle bundle, IBinder iBinder, String str, String str2, String str3, Intent[] intentArr, String[] strArr) {
        PendingIntentRecord intentSenderLocked;
        Intent intent;
        if (intentArr != null) {
            if (intentArr.length < 1) {
                throw new IllegalArgumentException("Intents array length must be >= 1");
            }
            int i6 = 0;
            while (i6 < intentArr.length) {
                Intent intent2 = intentArr[i6];
                if (intent2 != null) {
                    if (intent2.hasFileDescriptors()) {
                        throw new IllegalArgumentException("File descriptors passed in Intent");
                    }
                    if (i == 1 && (intent2.getFlags() & 33554432) != 0) {
                        throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
                    }
                    if (PendingIntent.isNewMutableDisallowedImplicitPendingIntent(i3, intent2, i == 3)) {
                        boolean isChangeEnabled = CompatChanges.isChangeEnabled(236704164L, str, UserHandle.of(i4));
                        intent = intent2;
                        SaferIntentUtils.reportUnsafeIntentEvent(4, i5, -1, intent2, (strArr == null || i6 >= strArr.length) ? null : strArr[i6], isChangeEnabled);
                        if (isChangeEnabled) {
                            throw new IllegalArgumentException(ConnectivityModuleConnector$$ExternalSyntheticOutline0.m$1(str, ": Targeting U+ (version 34 and above) disallows creating or retrieving a PendingIntent with FLAG_MUTABLE, an implicit Intent within and without FLAG_NO_CREATE and FLAG_ALLOW_UNSAFE_IMPLICIT_INTENT for security reasons. To retrieve an already existing PendingIntent, use FLAG_NO_CREATE, however, to create a new PendingIntent with an implicit Intent use FLAG_IMMUTABLE."));
                        }
                    } else {
                        intent = intent2;
                    }
                    Intent intent3 = new Intent(intent);
                    intentArr[i6] = intent3;
                    intent3.removeExtendedFlags(1);
                }
                i6++;
            }
            if (strArr != null && strArr.length != intentArr.length) {
                throw new IllegalArgumentException("Intent array length does not match resolvedTypes length");
            }
        }
        if (bundle != null && bundle.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in options");
        }
        int handleIncomingUser = i4 == -2 ? -2 : this.mUserController.handleIncomingUser(Binder.getCallingPid(), i5, i4, i == 1, 0, "getIntentSender", null);
        if (i5 != 0 && i5 != 1000 && !getPackageManagerInternal().isSameApp(i5, UserHandle.getUserId(i5), 268435456L, str)) {
            String str4 = "Permission Denial: getIntentSender() from pid=" + Binder.getCallingPid() + ", uid=" + i5 + " is not allowed to send as package " + str;
            Slog.w("ActivityManager", str4);
            throw new SecurityException(str4);
        }
        if (i != 3) {
            return this.mPendingIntentController.getIntentSender(i, i5, handleIncomingUser, i2, i3, bundle, iBinder, str, str2, str3, intentArr, strArr);
        }
        ActivityTaskManagerService.LocalService localService = (ActivityTaskManagerService.LocalService) this.mAtmInternal;
        WindowManagerGlobalLock windowManagerGlobalLock = ActivityTaskManagerService.this.mGlobalLock;
        WindowManagerService.boostPriorityForLockedSection();
        synchronized (windowManagerGlobalLock) {
            try {
                intentSenderLocked = ActivityTaskManagerService.this.getIntentSenderLocked(i, i5, handleIncomingUser, i2, i3, bundle, iBinder, str, str2, str3, intentArr, strArr);
            } catch (Throwable th) {
                WindowManagerService.resetPriorityAfterLockedSection();
                throw th;
            }
        }
        WindowManagerService.resetPriorityAfterLockedSection();
        return intentSenderLocked;
    }

    public final int[] getIsolatedProcessList() {
        if (checkCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL") != 0) {
            Slog.d("ActivityManager", "getIsolatedProcessList - permission is not granted. callingUid: " + Binder.getCallingUid());
            return null;
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (this.mProcessList.mIsolatedProcesses.size() <= 0) {
                    resetPriorityAfterLockedSection();
                    return null;
                }
                int[] iArr = new int[this.mProcessList.mIsolatedProcesses.size()];
                for (int i = 0; i < this.mProcessList.mIsolatedProcesses.size(); i++) {
                    iArr[i] = ((ProcessRecord) this.mProcessList.mIsolatedProcesses.valueAt(i)).mPid;
                }
                resetPriorityAfterLockedSection();
                return iArr;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final String getLaunchedFromPackage(IBinder iBinder) {
        return ActivityClient.getInstance().getLaunchedFromPackage(iBinder);
    }

    public final int getLaunchedFromUid(IBinder iBinder) {
        return ActivityClient.getInstance().getLaunchedFromUid(iBinder);
    }

    public final ParcelFileDescriptor getLifeMonitor() {
        ParcelFileDescriptor dup;
        int callingUid = Binder.getCallingUid();
        if (callingUid != 2000 && callingUid != 0) {
            throw new SecurityException("Only shell can call it");
        }
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                try {
                    if (this.mLifeMonitorFds == null) {
                        this.mLifeMonitorFds = ParcelFileDescriptor.createPipe();
                    }
                    dup = this.mLifeMonitorFds[0].dup();
                } catch (IOException e) {
                    Slog.w("ActivityManager", "Unable to create pipe", e);
                    resetPriorityAfterProcLockedSection();
                    return null;
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return dup;
    }

    public final int getLockTaskModeState() {
        return this.mActivityTaskManager.mLockTaskController.mLockTaskModeState;
    }

    public final String getLongLiveApp() {
        String str;
        checkLongLivePermissions("getLongLiveApp");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActivityManagerServiceExt activityManagerServiceExt = this.mExt;
                str = activityManagerServiceExt.mLongLiveAppByPackages.size() > 0 ? (String) activityManagerServiceExt.mLongLiveAppByPackages.get(0) : null;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return str;
    }

    public final List getLongLiveApps() {
        ArrayList arrayList;
        if (!CoreRune.FW_DEDICATED_MEMORY) {
            return null;
        }
        checkLongLivePermissions("getLongLiveApps");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                arrayList = this.mExt.mLongLiveAppByPackages;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return arrayList;
    }

    public final List getLongLiveProcesses() {
        ArrayList dedicatedProcessesLocked;
        if (!CoreRune.FW_DEDICATED_MEMORY) {
            return null;
        }
        checkLongLivePermissions("getLongLiveProcesses");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                dedicatedProcessesLocked = this.mExt.getDedicatedProcessesLocked(-1);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return dedicatedProcessesLocked;
    }

    public final List getLongLiveProcessesForUser(int i) {
        ArrayList dedicatedProcessesLocked;
        if (!CoreRune.FW_DEDICATED_MEMORY) {
            return null;
        }
        checkLongLivePermissions("getLongLiveProcessesForUser");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                dedicatedProcessesLocked = this.mExt.getDedicatedProcessesLocked(i);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return dedicatedProcessesLocked;
    }

    public final List getLongLiveTaskIdsForUser(int i) {
        ArrayList dedicatedTaskIdsLocked;
        if (!CoreRune.FW_DEDICATED_MEMORY) {
            return null;
        }
        checkLongLivePermissions("getLongLiveTaskIdsForUser");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActivityTaskManagerService activityTaskManagerService = this.mExt.mAtmService;
                WindowManagerGlobalLock windowManagerGlobalLock = activityTaskManagerService.mGlobalLock;
                WindowManagerService.boostPriorityForLockedSection();
                synchronized (windowManagerGlobalLock) {
                    try {
                        dedicatedTaskIdsLocked = activityTaskManagerService.mRecentTasks.getDedicatedTaskIdsLocked(i);
                    } catch (Throwable th) {
                        WindowManagerService.resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
                WindowManagerService.resetPriorityAfterLockedSection();
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
        return dedicatedTaskIdsLocked;
    }

    public final int getMaxLongLiveApps() {
        int i;
        if (!CoreRune.FW_DEDICATED_MEMORY) {
            return 0;
        }
        checkLongLivePermissions("getMaxLongLiveApps");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mExt.getClass();
                i = ActivityManagerServiceExt.MAX_LONG_LIVE_APP;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return i;
    }

    public final void getMemoryInfo(ActivityManager.MemoryInfo memoryInfo) {
        ProcessList processList = this.mProcessList;
        long memLevel = processList.getMemLevel(600);
        long memLevel2 = processList.getMemLevel(FrameworkStatsLog.CAMERA_FEATURE_COMBINATION_QUERY_EVENT);
        memoryInfo.advertisedMem = Process.getAdvertisedMem();
        memoryInfo.availMem = Process.getFreeMemory();
        memoryInfo.totalMem = Process.getTotalMemory();
        memoryInfo.threshold = memLevel;
        memoryInfo.lowMemory = memoryInfo.availMem < ((memLevel2 - memLevel) / 2) + memLevel;
        memoryInfo.hiddenAppThreshold = memLevel2;
        memoryInfo.secondaryServerThreshold = processList.getMemLevel(500);
        memoryInfo.visibleAppThreshold = processList.getMemLevel(100);
        memoryInfo.foregroundAppThreshold = processList.getMemLevel(0);
    }

    public final int getMemoryTrimLevel() {
        int lastMemoryLevelLocked;
        enforceNotIsolatedCaller("getMyMemoryState");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                lastMemoryLevelLocked = this.mAppProfiler.getLastMemoryLevelLocked();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return lastMemoryLevelLocked;
    }

    public final void getMimeTypeFilterAsync(final Uri uri, int i, final RemoteCallback remoteCallback) {
        final int i2 = i;
        final ContentProviderHelper contentProviderHelper = this.mCpHelper;
        ActivityManagerService activityManagerService = contentProviderHelper.mService;
        activityManagerService.getClass();
        enforceNotIsolatedCaller("getProviderMimeTypeAsync");
        final String authority = uri.getAuthority();
        final int callingUid = Binder.getCallingUid();
        int callingPid = Binder.getCallingPid();
        UserController userController = activityManagerService.mUserController;
        userController.getClass();
        if (i2 == -2 || i2 == -3) {
            i2 = userController.getCurrentUserId();
        }
        long clearCallingIdentity = (UserHandle.getUserId(callingUid) == i2 || checkComponentPermission(callingPid, callingUid, "android.permission.INTERACT_ACROSS_USERS", 0, -1, true) == 0 || checkComponentPermission(callingPid, callingUid, "android.permission.INTERACT_ACROSS_USERS_FULL", 0, -1, true) == 0) ? Binder.clearCallingIdentity() : 0L;
        try {
            ContentProviderHolder contentProviderImpl = contentProviderHelper.getContentProviderImpl(null, authority, null, callingUid, null, "*getmimetype*", true, i2, callingPid);
            try {
                if (!contentProviderHelper.isHolderVisibleToCaller(contentProviderImpl, callingUid, i2)) {
                    remoteCallback.sendResult(Bundle.EMPTY);
                } else if (checkComponentPermission(callingPid, callingUid, "android.permission.GET_ANY_PROVIDER_TYPE", 0, -1, true) == 0) {
                    contentProviderImpl.provider.getTypeAsync(new AttributionSource.Builder(callingUid).build(), uri, new RemoteCallback(new RemoteCallback.OnResultListener() { // from class: com.android.server.am.ContentProviderHelper$$ExternalSyntheticLambda0
                        public final void onResult(Bundle bundle) {
                            ContentProviderHelper contentProviderHelper2 = ContentProviderHelper.this;
                            String str = authority;
                            int i3 = i2;
                            RemoteCallback remoteCallback2 = remoteCallback;
                            contentProviderHelper2.getClass();
                            long clearCallingIdentity2 = Binder.clearCallingIdentity();
                            try {
                                contentProviderHelper2.removeContentProviderExternalUnchecked(i3, null, str);
                                Binder.restoreCallingIdentity(clearCallingIdentity2);
                                remoteCallback2.sendResult(bundle);
                            } catch (Throwable th) {
                                Binder.restoreCallingIdentity(clearCallingIdentity2);
                                throw th;
                            }
                        }
                    }));
                } else {
                    final int i3 = i2;
                    contentProviderImpl.provider.getTypeAnonymousAsync(uri, new RemoteCallback(new RemoteCallback.OnResultListener() { // from class: com.android.server.am.ContentProviderHelper$$ExternalSyntheticLambda1
                        public final void onResult(Bundle bundle) {
                            ContentProviderHelper contentProviderHelper2 = ContentProviderHelper.this;
                            String str = authority;
                            int i4 = i3;
                            RemoteCallback remoteCallback2 = remoteCallback;
                            int i5 = callingUid;
                            Uri uri2 = uri;
                            contentProviderHelper2.getClass();
                            long clearCallingIdentity2 = Binder.clearCallingIdentity();
                            try {
                                contentProviderHelper2.removeContentProviderExternalUnchecked(i4, null, str);
                                Binder.restoreCallingIdentity(clearCallingIdentity2);
                                remoteCallback2.sendResult(bundle);
                                String pairValue = bundle.getPairValue();
                                if (pairValue != null) {
                                    FrameworkStatsLog.write(FrameworkStatsLog.GET_TYPE_ACCESSED_WITHOUT_PERMISSION, 1, i5, uri2.getAuthority(), pairValue);
                                }
                            } catch (Throwable th) {
                                Binder.restoreCallingIdentity(clearCallingIdentity2);
                                throw th;
                            }
                        }
                    }));
                }
            } catch (RemoteException e) {
                Log.w("ContentProviderHelper", "Content provider dead retrieving " + uri, e);
                remoteCallback.sendResult(Bundle.EMPTY);
            }
        } finally {
            if (clearCallingIdentity != 0) {
                Binder.restoreCallingIdentity(clearCallingIdentity);
            }
        }
    }

    public final void getMyMemoryState(ActivityManager.RunningAppProcessInfo runningAppProcessInfo) {
        ProcessRecord processRecord;
        if (runningAppProcessInfo == null) {
            throw new IllegalArgumentException("outState is null");
        }
        enforceNotIsolatedCaller("getMyMemoryState");
        int uidTargetSdkVersion = this.mPackageManagerInt.getUidTargetSdkVersion(Binder.getCallingUid());
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                synchronized (this.mPidsSelfLocked) {
                    processRecord = this.mPidsSelfLocked.get(Binder.getCallingPid());
                }
                if (processRecord != null) {
                    this.mProcessList.fillInProcMemInfoLOSP(processRecord, runningAppProcessInfo, uidTargetSdkVersion);
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public final Bundle getOptionsForIntentSender(IIntentSender iIntentSender) {
        return null;
    }

    public final String getPackageFromAppProcesses(int i) {
        int callingUid = Binder.getCallingUid();
        if (i <= 0 || 1000 != UserHandle.getAppId(callingUid)) {
            return null;
        }
        synchronized (this.mPidsSelfLocked) {
            try {
                ProcessRecord processRecord = this.mPidsSelfLocked.get(i);
                if (processRecord == null || processRecord.mPid != i || processRecord.info == null) {
                    return null;
                }
                return processRecord.info.packageName;
            } finally {
            }
        }
    }

    public IPackageManager getPackageManager() {
        return AppGlobals.getPackageManager();
    }

    public PackageManagerInternal getPackageManagerInternal() {
        if (this.mPackageManagerInt == null) {
            this.mPackageManagerInt = (PackageManagerInternal) LocalServices.getService(PackageManagerInternal.class);
        }
        return this.mPackageManagerInt;
    }

    public final int getPackageProcessState(String str, String str2) {
        if (!hasUsageStatsPermission(str2)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getPackageProcessState");
        }
        int[] iArr = {20};
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                this.mProcessList.forEachLruProcessesLOSP(new ActivityManagerService$$ExternalSyntheticLambda5(str, 0, iArr), false);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return iArr[0];
    }

    public final int getProcessLimit() {
        int i;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                i = this.mConstants.mOverrideMaxCachedProcesses;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return i;
    }

    public final Debug.MemoryInfo[] getProcessMemoryInfo(int[] iArr) {
        boolean z;
        ProcessRecord processRecord;
        Debug.MemoryInfo[] memoryInfoArr;
        ProcessProfileRecord processProfileRecord;
        int i;
        int i2;
        int i3;
        Debug.MemoryInfo memoryInfo;
        ActiveInstrumentation activeInstrumentation;
        int i4;
        ActivityManagerService activityManagerService = this;
        int[] iArr2 = iArr;
        enforceNotIsolatedCaller("getProcessMemoryInfo");
        long uptimeMillis = SystemClock.uptimeMillis() - activityManagerService.mConstants.MEMORY_INFO_THROTTLE_TIME;
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        int userId = UserHandle.getUserId(callingUid);
        boolean z2 = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        boolean isGetTasksAllowed = ActivityTaskManagerService.this.isGetTasksAllowed(callingPid, callingUid, "getProcessMemoryInfo");
        ActivityManagerProcLock activityManagerProcLock = activityManagerService.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                synchronized (activityManagerService.mPidsSelfLocked) {
                    try {
                        ProcessRecord processRecord2 = activityManagerService.mPidsSelfLocked.get(callingPid);
                        z = (processRecord2 == null || (activeInstrumentation = processRecord2.mInstr) == null || ((i4 = activeInstrumentation.mSourceUid) != 2000 && i4 != 0)) ? false : true;
                    } finally {
                    }
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        Debug.MemoryInfo[] memoryInfoArr2 = new Debug.MemoryInfo[iArr2.length];
        int length = iArr2.length - 1;
        while (length >= 0) {
            Debug.MemoryInfo memoryInfo2 = new Debug.MemoryInfo();
            memoryInfoArr2[length] = memoryInfo2;
            synchronized (activityManagerService.mAppProfiler.mProfilerLock) {
                synchronized (activityManagerService.mPidsSelfLocked) {
                    try {
                        processRecord = activityManagerService.mPidsSelfLocked.get(iArr2[length]);
                        if (processRecord != null) {
                            processProfileRecord = processRecord.mProfile;
                            memoryInfoArr = memoryInfoArr2;
                            i = processProfileRecord.mSetAdj;
                        } else {
                            memoryInfoArr = memoryInfoArr2;
                            processProfileRecord = null;
                            i = 0;
                        }
                    } finally {
                    }
                }
            }
            int i5 = processRecord != null ? processRecord.uid : -1;
            int userId2 = processRecord != null ? UserHandle.getUserId(i5) : -1;
            if (callingUid == i5 || (isGetTasksAllowed && (z2 || userId2 == userId))) {
                if (processRecord != null) {
                    synchronized (activityManagerService.mAppProfiler.mProfilerLock) {
                        i2 = callingUid;
                        i3 = userId;
                        try {
                            if (processProfileRecord.mLastMemInfoTime >= uptimeMillis && (memoryInfo = processProfileRecord.mLastMemInfo) != null && !z) {
                                memoryInfo2.set(memoryInfo);
                            }
                        } finally {
                        }
                    }
                } else {
                    i2 = callingUid;
                    i3 = userId;
                }
                long currentThreadTimeMillis = SystemClock.currentThreadTimeMillis();
                Debug.MemoryInfo memoryInfo3 = new Debug.MemoryInfo();
                Debug.getMemoryInfo(iArr2[length], memoryInfo3);
                long currentThreadTimeMillis2 = SystemClock.currentThreadTimeMillis() - currentThreadTimeMillis;
                memoryInfo2.set(memoryInfo3);
                if (processRecord != null) {
                    synchronized (activityManagerService.mAppProfiler.mProfilerLock) {
                        try {
                            processProfileRecord.mLastMemInfo = memoryInfo3;
                            processProfileRecord.mLastMemInfoTime = SystemClock.uptimeMillis();
                            if (processProfileRecord.mThread != null && processProfileRecord.mSetAdj == i) {
                                processProfileRecord.addPss(memoryInfo2.getTotalPss(), memoryInfo2.getTotalUss(), memoryInfo2.getTotalRss(), false, 4, currentThreadTimeMillis2);
                            }
                        } finally {
                        }
                    }
                } else {
                    continue;
                }
            } else {
                i2 = callingUid;
                i3 = userId;
            }
            length--;
            activityManagerService = this;
            iArr2 = iArr;
            memoryInfoArr2 = memoryInfoArr;
            callingUid = i2;
            userId = i3;
        }
        return memoryInfoArr2;
    }

    public final long[] getProcessPss(int[] iArr) {
        ProcessRecord processRecord;
        int i;
        enforceNotIsolatedCaller("getProcessPss");
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        int userId = UserHandle.getUserId(callingUid);
        boolean z = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        boolean isGetTasksAllowed = ActivityTaskManagerService.this.isGetTasksAllowed(callingPid, callingUid, "getProcessPss");
        long[] jArr = new long[iArr.length];
        for (int length = iArr.length - 1; length >= 0; length--) {
            ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerProcLock) {
                try {
                    synchronized (this.mPidsSelfLocked) {
                        try {
                            processRecord = this.mPidsSelfLocked.get(iArr[length]);
                            i = processRecord != null ? processRecord.mState.mSetAdj : 0;
                        } finally {
                        }
                    }
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            if (isGetTasksAllowed && (z || UserHandle.getUserId(processRecord.uid) == userId)) {
                long[] jArr2 = new long[3];
                long currentThreadTimeMillis = SystemClock.currentThreadTimeMillis();
                long pss = Debug.getPss(iArr[length], jArr2, null);
                jArr[length] = pss;
                long currentThreadTimeMillis2 = SystemClock.currentThreadTimeMillis() - currentThreadTimeMillis;
                if (processRecord != null) {
                    ProcessProfileRecord processProfileRecord = processRecord.mProfile;
                    synchronized (this.mAppProfiler.mProfilerLock) {
                        try {
                            if (processProfileRecord.mThread != null && processProfileRecord.mSetAdj == i) {
                                processProfileRecord.addPss(pss, jArr2[0], jArr2[2], false, 3, currentThreadTimeMillis2);
                            }
                        } finally {
                        }
                    }
                } else {
                    continue;
                }
            }
        }
        return jArr;
    }

    public final ProcessRecord getProcessRecordFromPidLocked(int i) {
        ProcessRecord processRecord;
        synchronized (this.mPidsSelfLocked) {
            processRecord = this.mPidsSelfLocked.get(i);
        }
        return processRecord;
    }

    public final void getProcessStatesAndOomScoresForPIDs(int[] iArr, int[] iArr2, int[] iArr3) {
        ProcessRecord processRecord;
        long longValue;
        if (iArr3 != null) {
            enforceCallingPermission("android.permission.GET_PROCESS_STATE_AND_OOM_SCORE", "getProcessStatesAndOomScoresForPIDs()");
        }
        if (iArr == null) {
            throw new NullPointerException("pids");
        }
        if (iArr2 == null) {
            throw new NullPointerException("states");
        }
        if (iArr.length != iArr2.length) {
            throw new IllegalArgumentException("pids and states arrays have different lengths!");
        }
        if (iArr3 != null && iArr.length != iArr3.length) {
            throw new IllegalArgumentException("pids and scores arrays have different lengths!");
        }
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            long j = Long.MIN_VALUE;
            int i = -1;
            for (int i2 = 0; i2 < iArr.length; i2++) {
                try {
                    synchronized (this.mPidsSelfLocked) {
                        processRecord = this.mPidsSelfLocked.get(iArr[i2]);
                    }
                    if (processRecord != null) {
                        PendingStartActivityUids pendingStartActivityUids = this.mPendingStartActivityUids;
                        int i3 = processRecord.uid;
                        int i4 = iArr[i2];
                        synchronized (pendingStartActivityUids) {
                            Pair pair = (Pair) pendingStartActivityUids.mPendingUids.get(i3);
                            longValue = (pair == null || ((Integer) pair.first).intValue() != i4) ? 0L : ((Long) pair.second).longValue();
                        }
                        if (longValue != 0) {
                            iArr2[i2] = 2;
                            if (iArr3 != null) {
                                iArr3[i2] = -1;
                            }
                            if (longValue > j) {
                                i = i2;
                                j = longValue;
                            }
                        } else {
                            ProcessStateRecord processStateRecord = processRecord.mState;
                            iArr2[i2] = processStateRecord.mCurProcState;
                            if (iArr3 != null) {
                                iArr3[i2] = processStateRecord.mCurAdj;
                            }
                        }
                    } else {
                        iArr2[i2] = 20;
                        if (iArr3 != null) {
                            iArr3[i2] = -10000;
                        }
                    }
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            if (i != -1 && iArr3 != null) {
                iArr3[i] = -2;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public final List getProcessesInErrorState() {
        enforceNotIsolatedCaller("getProcessesInErrorState");
        final List[] listArr = new List[1];
        final int callingUid = Binder.getCallingUid();
        final boolean z = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        final int userId = UserHandle.getUserId(callingUid);
        final boolean z2 = ActivityManager.checkUidPermission("android.permission.DUMP", callingUid) == 0;
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                this.mProcessList.forEachLruProcessesLOSP(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda16
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        boolean z3 = z;
                        int i = userId;
                        boolean z4 = z2;
                        int i2 = callingUid;
                        List[] listArr2 = listArr;
                        ProcessRecord processRecord = (ProcessRecord) obj;
                        if (z3 || processRecord.userId == i) {
                            if (z4 || processRecord.info.uid == i2) {
                                ProcessErrorStateRecord processErrorStateRecord = processRecord.mErrorState;
                                boolean z5 = processErrorStateRecord.mCrashing;
                                boolean z6 = processErrorStateRecord.mNotResponding;
                                if (processRecord.mThread != null) {
                                    if (z5 || z6) {
                                        ActivityManager.ProcessErrorStateInfo processErrorStateInfo = z5 ? processErrorStateRecord.mCrashingReport : z6 ? processErrorStateRecord.mNotRespondingReport : null;
                                        if (processErrorStateInfo != null) {
                                            if (listArr2[0] == null) {
                                                listArr2[0] = new ArrayList(1);
                                            }
                                            listArr2[0].add(processErrorStateInfo);
                                            return;
                                        }
                                        Slog.w("ActivityManager", "Missing app error report, app = " + processRecord.processName + " crashing = " + z5 + " notResponding = " + z6);
                                    }
                                }
                            }
                        }
                    }
                }, false);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return listArr[0];
    }

    public final int getRealProcessStateLocked(int i, ProcessRecord processRecord) {
        if (processRecord == null) {
            synchronized (this.mPidsSelfLocked) {
                processRecord = this.mPidsSelfLocked.get(i);
            }
        }
        if (processRecord == null || processRecord.mThread == null || processRecord.mKilled) {
            return 20;
        }
        return processRecord.mState.mCurProcState;
    }

    public final ParceledListSlice getRecentTasks(int i, int i2, int i3) {
        return this.mActivityTaskManager.getRecentTasks(i, i2, i3);
    }

    public final ProcessRecord getRecordForAppLOSP(IApplicationThread iApplicationThread) {
        if (iApplicationThread == null) {
            return null;
        }
        return getRecordForAppLOSP(iApplicationThread.asBinder());
    }

    public final ProcessRecord getRecordForAppLOSP(IBinder iBinder) {
        if (iBinder == null) {
            return null;
        }
        ProcessRecord lRURecordForAppLOSP = this.mProcessList.getLRURecordForAppLOSP(iBinder);
        if (lRURecordForAppLOSP != null) {
            return lRURecordForAppLOSP;
        }
        ArrayMap map = this.mProcessList.mProcessNames.getMap();
        for (int size = map.size() - 1; size >= 0; size--) {
            SparseArray sparseArray = (SparseArray) map.valueAt(size);
            for (int size2 = sparseArray.size() - 1; size2 >= 0; size2--) {
                ProcessRecord processRecord = (ProcessRecord) sparseArray.valueAt(size2);
                IApplicationThread iApplicationThread = processRecord.mThread;
                if (iApplicationThread != null && iApplicationThread.asBinder() == iBinder) {
                    if (!processRecord.mPendingFinishAttach) {
                        Slog.wtf("ActivityManager", "getRecordForApp: exists in name list but not in LRU list: " + processRecord);
                    }
                    return processRecord;
                }
            }
        }
        return null;
    }

    public final List getRestrictableList(int i) {
        SemAppRestrictionManager.RestrictionInfo restrictionInfo;
        boolean z = MARsPolicyManager.MARs_ENABLE;
        MARsPolicyManager mARsPolicyManager = MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE;
        mARsPolicyManager.getClass();
        if (!MARsPolicyManager.hasPermission("com.samsung.android.permission.SEM_APP_RESTRICTION")) {
            return null;
        }
        ArrayList arrayList = new ArrayList();
        synchronized (MARsPolicyManager.MARsLock) {
            for (int i2 = 0; i2 < mARsPolicyManager.mMARsTargetPackages.mMap.size(); i2++) {
                try {
                    SparseArray sparseArray = (SparseArray) mARsPolicyManager.mMARsTargetPackages.mMap.valueAt(i2);
                    for (int i3 = 0; i3 < sparseArray.size(); i3++) {
                        MARsPackageInfo mARsPackageInfo = (MARsPackageInfo) sparseArray.valueAt(i3);
                        if (mARsPackageInfo != null) {
                            if (mARsPolicyManager.canRestrictBySEPWithoutPermissionCheck(i, mARsPackageInfo.uid, mARsPackageInfo.name)) {
                                if (i == 1) {
                                    if (mARsPackageInfo.isFASEnabled) {
                                        restrictionInfo = new SemAppRestrictionManager.RestrictionInfo(i, 1, FASTableContract.convertFASTypeToReason(mARsPackageInfo.fasType));
                                        arrayList.add(new SemAppRestrictionManager.AppRestrictionInfo(mARsPackageInfo.name, mARsPackageInfo.uid, restrictionInfo));
                                    }
                                    restrictionInfo = null;
                                    arrayList.add(new SemAppRestrictionManager.AppRestrictionInfo(mARsPackageInfo.name, mARsPackageInfo.uid, restrictionInfo));
                                } else {
                                    if (i == 0 && mARsPackageInfo.maxLevel == 4) {
                                        restrictionInfo = new SemAppRestrictionManager.RestrictionInfo(i, 1, FASTableContract.convertDisableReasonToDBValue(mARsPackageInfo.disableReason));
                                        arrayList.add(new SemAppRestrictionManager.AppRestrictionInfo(mARsPackageInfo.name, mARsPackageInfo.uid, restrictionInfo));
                                    }
                                    restrictionInfo = null;
                                    arrayList.add(new SemAppRestrictionManager.AppRestrictionInfo(mARsPackageInfo.name, mARsPackageInfo.uid, restrictionInfo));
                                }
                            }
                        }
                    }
                } catch (Throwable th) {
                    throw th;
                }
            }
        }
        return arrayList;
    }

    /* JADX WARN: Removed duplicated region for block: B:26:0x0090 A[Catch: all -> 0x0064, TryCatch #0 {all -> 0x0064, blocks: (B:7:0x001e, B:9:0x0028, B:10:0x0033, B:12:0x0039, B:14:0x0041, B:26:0x0090, B:30:0x0055, B:32:0x0059, B:34:0x005f, B:35:0x0066, B:37:0x006c, B:39:0x0070, B:40:0x0077, B:42:0x007b, B:43:0x0082, B:45:0x0086, B:28:0x00a1, B:49:0x00a3, B:51:0x00a6), top: B:6:0x001e }] */
    /* JADX WARN: Removed duplicated region for block: B:29:0x00a1 A[SYNTHETIC] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final java.util.List getRestrictedList(int r13) {
        /*
            r12 = this;
            r12 = 1
            boolean r0 = com.android.server.am.MARsPolicyManager.MARs_ENABLE
            com.android.server.am.MARsPolicyManager r0 = com.android.server.am.MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE
            java.lang.String r1 = "com.samsung.android.permission.SEM_APP_RESTRICTION"
            r0.getClass()
            boolean r1 = com.android.server.am.MARsPolicyManager.hasPermission(r1)
            r2 = 0
            if (r1 != 0) goto L14
            goto La8
        L14:
            java.util.ArrayList r1 = new java.util.ArrayList
            r1.<init>()
            com.android.server.am.MARsPolicyManager$Lock r3 = com.android.server.am.MARsPolicyManager.MARsLock
            monitor-enter(r3)
            r4 = 0
            r5 = r4
        L1e:
            com.android.server.am.MARsPkgMap r6 = r0.mMARsTargetPackages     // Catch: java.lang.Throwable -> L64
            android.util.ArrayMap r6 = r6.mMap     // Catch: java.lang.Throwable -> L64
            int r6 = r6.size()     // Catch: java.lang.Throwable -> L64
            if (r5 >= r6) goto La6
            com.android.server.am.MARsPkgMap r6 = r0.mMARsTargetPackages     // Catch: java.lang.Throwable -> L64
            android.util.ArrayMap r6 = r6.mMap     // Catch: java.lang.Throwable -> L64
            java.lang.Object r6 = r6.valueAt(r5)     // Catch: java.lang.Throwable -> L64
            android.util.SparseArray r6 = (android.util.SparseArray) r6     // Catch: java.lang.Throwable -> L64
            r7 = r4
        L33:
            int r8 = r6.size()     // Catch: java.lang.Throwable -> L64
            if (r7 >= r8) goto La3
            java.lang.Object r8 = r6.valueAt(r7)     // Catch: java.lang.Throwable -> L64
            com.android.server.am.MARsPackageInfo r8 = (com.android.server.am.MARsPackageInfo) r8     // Catch: java.lang.Throwable -> L64
            if (r8 == 0) goto La1
            int r9 = r8.userId     // Catch: java.lang.Throwable -> L64
            boolean r9 = r0.isCurrentUser(r9)     // Catch: java.lang.Throwable -> L64
            if (r9 == 0) goto La1
            r9 = 4
            if (r13 == 0) goto L82
            if (r13 == r12) goto L77
            r10 = 2
            if (r13 == r10) goto L66
            r9 = 3
            if (r13 == r9) goto L55
            goto L8d
        L55:
            boolean r9 = r8.isFASEnabled     // Catch: java.lang.Throwable -> L64
            if (r9 != 0) goto L8d
            int r9 = r8.fasType     // Catch: java.lang.Throwable -> L64
            r10 = 256(0x100, float:3.59E-43)
            if (r9 != r10) goto L8d
            java.lang.String r9 = com.android.server.am.mars.database.FASTableContract.convertFASTypeToReason(r9)     // Catch: java.lang.Throwable -> L64
            goto L8e
        L64:
            r12 = move-exception
            goto La9
        L66:
            int r10 = r8.state     // Catch: java.lang.Throwable -> L64
            r11 = 8
            if (r10 != r11) goto L8d
            int r10 = r8.maxLevel     // Catch: java.lang.Throwable -> L64
            if (r10 == r9) goto L8d
            int r9 = r8.fasType     // Catch: java.lang.Throwable -> L64
            java.lang.String r9 = com.android.server.am.mars.database.FASTableContract.convertFASTypeToReason(r9)     // Catch: java.lang.Throwable -> L64
            goto L8e
        L77:
            boolean r9 = r8.isFASEnabled     // Catch: java.lang.Throwable -> L64
            if (r9 == 0) goto L8d
            int r9 = r8.fasType     // Catch: java.lang.Throwable -> L64
            java.lang.String r9 = com.android.server.am.mars.database.FASTableContract.convertFASTypeToReason(r9)     // Catch: java.lang.Throwable -> L64
            goto L8e
        L82:
            int r10 = r8.maxLevel     // Catch: java.lang.Throwable -> L64
            if (r10 != r9) goto L8d
            int r9 = r8.disableReason     // Catch: java.lang.Throwable -> L64
            java.lang.String r9 = com.android.server.am.mars.database.FASTableContract.convertDisableReasonToDBValue(r9)     // Catch: java.lang.Throwable -> L64
            goto L8e
        L8d:
            r9 = r2
        L8e:
            if (r9 == 0) goto La1
            com.samsung.android.sdhms.SemAppRestrictionManager$RestrictionInfo r10 = new com.samsung.android.sdhms.SemAppRestrictionManager$RestrictionInfo     // Catch: java.lang.Throwable -> L64
            r10.<init>(r13, r12, r9)     // Catch: java.lang.Throwable -> L64
            com.samsung.android.sdhms.SemAppRestrictionManager$AppRestrictionInfo r9 = new com.samsung.android.sdhms.SemAppRestrictionManager$AppRestrictionInfo     // Catch: java.lang.Throwable -> L64
            java.lang.String r11 = r8.name     // Catch: java.lang.Throwable -> L64
            int r8 = r8.uid     // Catch: java.lang.Throwable -> L64
            r9.<init>(r11, r8, r10)     // Catch: java.lang.Throwable -> L64
            r1.add(r9)     // Catch: java.lang.Throwable -> L64
        La1:
            int r7 = r7 + r12
            goto L33
        La3:
            int r5 = r5 + r12
            goto L1e
        La6:
            monitor-exit(r3)     // Catch: java.lang.Throwable -> L64
            r2 = r1
        La8:
            return r2
        La9:
            monitor-exit(r3)     // Catch: java.lang.Throwable -> L64
            throw r12
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.getRestrictedList(int):java.util.List");
    }

    public final SemAppRestrictionManager.RestrictionInfo getRestrictionInfo(int i, String str, int i2) {
        MARsPackageInfo mARsPackageInfo;
        int i3;
        boolean z = MARsPolicyManager.MARs_ENABLE;
        MARsPolicyManager mARsPolicyManager = MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE;
        mARsPolicyManager.getClass();
        if (!MARsPolicyManager.hasPermission("com.samsung.android.permission.SEM_APP_RESTRICTION")) {
            return null;
        }
        String str2 = "default";
        synchronized (MARsPolicyManager.MARsLock) {
            try {
                mARsPackageInfo = MARsPolicyManager.getMARsPackageInfo(mARsPolicyManager.mMARsTargetPackages, str, UserHandle.getUserId(i2));
                i3 = 0;
            } catch (Throwable th) {
                throw th;
            }
            if (mARsPackageInfo != null && mARsPolicyManager.isCurrentUser(mARsPackageInfo.userId)) {
                if (i == 0) {
                    if (mARsPackageInfo.maxLevel == 4) {
                        str2 = FASTableContract.convertDisableReasonToDBValue(mARsPackageInfo.disableReason);
                        i3 = 1;
                    } else {
                        int i4 = mARsPackageInfo.disableReason;
                        if (i4 == 0) {
                            str2 = "default";
                        } else {
                            str2 = FASTableContract.convertDisableReasonToDBValue(i4);
                            i3 = 2;
                        }
                    }
                } else if (i == 1) {
                    if (mARsPackageInfo.isFASEnabled) {
                        str2 = FASTableContract.convertFASTypeToReason(mARsPackageInfo.fasType);
                        i3 = 1;
                    } else {
                        int i5 = mARsPackageInfo.fasType;
                        if (i5 == 0) {
                            str2 = "default";
                        } else {
                            str2 = FASTableContract.convertFASTypeToReason(i5);
                            i3 = 2;
                        }
                    }
                } else if (i == 2) {
                    if (mARsPackageInfo.state == 8) {
                        str2 = "added_from_mars_auto";
                        i3 = 1;
                    } else {
                        str2 = "added_from_mars_auto";
                        i3 = 2;
                    }
                } else if (i == 3) {
                    if (mARsPackageInfo.isFASEnabled || mARsPackageInfo.fasType != 256) {
                        str2 = "default";
                        i3 = 2;
                    } else {
                        str2 = "default";
                        i3 = 1;
                    }
                }
                throw th;
            }
        }
        return new SemAppRestrictionManager.RestrictionInfo(i, i3, str2);
    }

    public final List getRunningAppProcesses() {
        List runningAppProcessesLOSP;
        enforceNotIsolatedCaller("getRunningAppProcesses");
        int callingUid = Binder.getCallingUid();
        int uidTargetSdkVersion = this.mPackageManagerInt.getUidTargetSdkVersion(callingUid);
        boolean z = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        int userId = UserHandle.getUserId(callingUid);
        boolean isGetTasksAllowed = ActivityTaskManagerService.this.isGetTasksAllowed(Binder.getCallingPid(), callingUid, "getRunningAppProcesses");
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                runningAppProcessesLOSP = this.mProcessList.getRunningAppProcessesLOSP(userId, callingUid, uidTargetSdkVersion, z, isGetTasksAllowed);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return runningAppProcessesLOSP;
    }

    public final List getRunningExternalApplications() {
        enforceNotIsolatedCaller("getRunningExternalApplications");
        List runningAppProcesses = getRunningAppProcesses();
        ArrayList arrayList = new ArrayList();
        if (runningAppProcesses != null && runningAppProcesses.size() > 0) {
            HashSet hashSet = new HashSet();
            Iterator it = runningAppProcesses.iterator();
            while (it.hasNext()) {
                String[] strArr = ((ActivityManager.RunningAppProcessInfo) it.next()).pkgList;
                if (strArr != null) {
                    for (String str : strArr) {
                        hashSet.add(str);
                    }
                }
            }
            IPackageManager packageManager = AppGlobals.getPackageManager();
            Iterator it2 = hashSet.iterator();
            while (it2.hasNext()) {
                try {
                    ApplicationInfo applicationInfo = packageManager.getApplicationInfo((String) it2.next(), 0L, UserHandle.getCallingUserId());
                    if ((applicationInfo.flags & 262144) != 0) {
                        arrayList.add(applicationInfo);
                    }
                } catch (RemoteException unused) {
                }
            }
        }
        return arrayList;
    }

    public final PendingIntent getRunningServiceControlPanel(ComponentName componentName) {
        PendingIntent runningServiceControlPanelLocked;
        enforceNotIsolatedCaller("getRunningServiceControlPanel");
        int callingUid = Binder.getCallingUid();
        int userId = UserHandle.getUserId(callingUid);
        if (componentName == null || getPackageManagerInternal().filterAppAccess(callingUid, userId, componentName.getPackageName(), true)) {
            return null;
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                runningServiceControlPanelLocked = this.mServices.getRunningServiceControlPanelLocked(componentName);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return runningServiceControlPanelLocked;
    }

    public final int[] getRunningUserIds() {
        int[] iArr;
        if (checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") != 0) {
            throw new SecurityException(ActivityManagerService$$ExternalSyntheticOutline0.m(new StringBuilder("Permission Denial: isUserRunning() from pid="), ", uid=", " requires android.permission.INTERACT_ACROSS_USERS", "ActivityManager"));
        }
        UserController userController = this.mUserController;
        synchronized (userController.mLock) {
            iArr = userController.mStartedUserArray;
        }
        return iArr;
    }

    public final List getServices(int i, int i2) {
        List runningServiceInfoLocked;
        enforceNotIsolatedCaller("getServices");
        int callingUid = Binder.getCallingUid();
        boolean z = ActivityManager.checkUidPermission("android.permission.INTERACT_ACROSS_USERS_FULL", callingUid) == 0;
        boolean isGetTasksAllowed = ActivityTaskManagerService.this.isGetTasksAllowed(Binder.getCallingPid(), callingUid, "getServices");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                runningServiceInfoLocked = this.mServices.getRunningServiceInfoLocked(i, callingUid, isGetTasksAllowed, z);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return runningServiceInfoLocked;
    }

    public ArrayList getStickyBroadcastsForTest(String str, int i) {
        synchronized (this.mStickyBroadcasts) {
            try {
                ArrayMap arrayMap = (ArrayMap) this.mStickyBroadcasts.get(i);
                if (arrayMap == null) {
                    return null;
                }
                return (ArrayList) arrayMap.get(str);
            } catch (Throwable th) {
                throw th;
            }
        }
    }

    public final String getSwitchingFromUserMessage() {
        String str;
        UserController userController = this.mUserController;
        userController.checkHasManageUsersPermission("getSwitchingFromSystemUserMessage()");
        synchronized (userController.mLock) {
            str = userController.mSwitchingFromSystemUserMessage;
        }
        return str;
    }

    public final String getSwitchingToUserMessage() {
        String str;
        UserController userController = this.mUserController;
        userController.checkHasManageUsersPermission("getSwitchingToSystemUserMessage()");
        synchronized (userController.mLock) {
            str = userController.mSwitchingToSystemUserMessage;
        }
        return str;
    }

    public final String getTagForIntentSender(IIntentSender iIntentSender, String str) {
        String tagForIntentSenderLocked;
        if (!(iIntentSender instanceof PendingIntentRecord)) {
            return null;
        }
        try {
            PendingIntentRecord pendingIntentRecord = (PendingIntentRecord) iIntentSender;
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    tagForIntentSenderLocked = getTagForIntentSenderLocked(pendingIntentRecord, str);
                } finally {
                }
            }
            resetPriorityAfterLockedSection();
            return tagForIntentSenderLocked;
        } catch (ClassCastException unused) {
            return null;
        }
    }

    public final Rect getTaskBounds(int i) {
        return this.mActivityTaskManager.getTaskBounds(i);
    }

    public final int getTaskForActivity(IBinder iBinder, boolean z) {
        return ActivityClient.getInstance().getTaskForActivity(iBinder, z);
    }

    public final List getTasks(int i) {
        return this.mActivityTaskManager.getTasks(i, false, false, -1);
    }

    public final ProcessRecord getTopApp() {
        int i;
        long clearCallingIdentity;
        ActivityTaskManagerInternal activityTaskManagerInternal = this.mAtmInternal;
        String str = null;
        WindowProcessController windowProcessController = activityTaskManagerInternal != null ? ActivityTaskManagerService.this.mTopApp : null;
        ProcessRecord processRecord = windowProcessController != null ? (ProcessRecord) windowProcessController.mOwner : null;
        if (processRecord != null) {
            str = processRecord.processName;
            i = processRecord.info.uid;
        } else {
            i = -1;
        }
        synchronized (this.mCurResumedAppLock) {
            try {
                try {
                    if (i == this.mCurResumedUid) {
                        String str2 = this.mCurResumedPackage;
                        if (str != str2) {
                            if (str != null) {
                                if (!str.equals(str2)) {
                                }
                            }
                        }
                    }
                    String str3 = this.mCurResumedPackage;
                    if (str3 != null) {
                        this.mBatteryStatsService.noteEvent(16387, str3, this.mCurResumedUid);
                    }
                    this.mCurResumedPackage = str;
                    this.mCurResumedUid = i;
                    if (str != null) {
                        this.mBatteryStatsService.noteEvent(32771, str, i);
                    }
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                } catch (Throwable th) {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                    throw th;
                }
                clearCallingIdentity = Binder.clearCallingIdentity();
            } catch (Throwable th2) {
                throw th2;
            }
        }
        return processRecord;
    }

    public final int[] getUidFrozenState(int[] iArr) {
        Preconditions.checkNotNull(iArr, "uid array cannot be null");
        enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getUidFrozenState()");
        int[] iArr2 = new int[iArr.length];
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            for (int i = 0; i < iArr.length; i++) {
                try {
                    UidRecord uidRecord = this.mProcessList.mActiveUids.get(iArr[i]);
                    if (uidRecord == null || !uidRecord.areAllProcessesFrozen(null)) {
                        iArr2[i] = 2;
                    } else {
                        iArr2[i] = 1;
                    }
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
        }
        resetPriorityAfterProcLockedSection();
        return iArr2;
    }

    public final long getUidLastIdleElapsedTime(int i, String str) {
        long j;
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getUidLastIdleElapsedTime");
        }
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                UidRecord uidRecord = this.mProcessList.mActiveUids.get(i);
                j = uidRecord != null ? uidRecord.mRealLastIdleTime : 0L;
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return j;
    }

    public final int getUidProcessCapabilities(int i, String str) {
        int uidProcessCapabilityLOSP;
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getUidProcessState");
        }
        this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), UserHandle.getUserId(i), false, 2, "getUidProcessCapabilities", str);
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                uidProcessCapabilityLOSP = this.mProcessList.getUidProcessCapabilityLOSP(i);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return uidProcessCapabilityLOSP;
    }

    public final int getUidProcessState(int i, String str) {
        boolean z;
        int uidProcStateLOSP;
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "getUidProcessState");
        }
        this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), UserHandle.getUserId(i), false, 2, "getUidProcessState", str);
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                PendingStartActivityUids pendingStartActivityUids = this.mPendingStartActivityUids;
                synchronized (pendingStartActivityUids) {
                    z = pendingStartActivityUids.mPendingUids.get(i) != null;
                }
                uidProcStateLOSP = z ? 2 : this.mProcessList.getUidProcStateLOSP(i);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return uidProcStateLOSP;
    }

    public final int getUidState(int i) {
        int uidProcStateLOSP;
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                uidProcStateLOSP = this.mProcessList.getUidProcStateLOSP(i);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return uidProcStateLOSP;
    }

    public void grantImplicitAccess(int i, Intent intent, int i2, int i3) {
        ((PackageManagerService.PackageManagerInternalImpl) getPackageManagerInternal()).grantImplicitAccess(i, intent, i3, i2, true, false);
    }

    public final void grantUriPermission(IApplicationThread iApplicationThread, String str, Uri uri, int i, int i2) {
        enforceNotIsolatedCaller("grantUriPermission");
        GrantUri grantUri = new GrantUri(i2, i, uri);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                if (recordForAppLOSP == null) {
                    throw new SecurityException("Unable to find app for caller " + iApplicationThread + " when granting permission to uri " + grantUri);
                }
                if (str == null) {
                    throw new IllegalArgumentException("null target");
                }
                int userId = UserHandle.getUserId(recordForAppLOSP.uid);
                if (this.mPackageManagerInt.filterAppAccess(recordForAppLOSP.uid, userId, str, true)) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                Preconditions.checkFlagsArgument(i, 195);
                Intent intent = new Intent();
                intent.setData(ContentProvider.maybeAddUserId(uri, i2));
                intent.setFlags(i);
                if (i2 != UserHandle.getUserId(recordForAppLOSP.uid) && (SemPersonaManager.isSecureFolderId(i2) || SemPersonaManager.isSecureFolderId(UserHandle.getUserId(recordForAppLOSP.uid)))) {
                    intent.prepareToLeaveUser(i2);
                }
                if (i2 != UserHandle.getUserId(recordForAppLOSP.uid) && (SemDualAppManager.isDualAppId(i2) || SemDualAppManager.isDualAppId(UserHandle.getUserId(recordForAppLOSP.uid)))) {
                    intent.prepareToLeaveUser(i2);
                }
                ((UriGrantsManagerService.LocalService) this.mUgmInternal).grantUriPermissionUncheckedFromIntent(((UriGrantsManagerService.LocalService) this.mUgmInternal).internalCheckGrantUriPermissionFromIntent(intent, recordForAppLOSP.uid, str, userId, null), null);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final void handleAppDiedLocked(int i, ProcessRecord processRecord, boolean z, boolean z2, boolean z3) {
        KillPolicyManager killPolicyManager = this.mKillPolicyManager;
        if (killPolicyManager != null && KillPolicyManager.sPmmEnabledBySpcm) {
            ProcessStateRecord processStateRecord = processRecord.mState;
            int i2 = processStateRecord.mCurProcState;
            int i3 = processStateRecord.mSetAdj;
            boolean z4 = processRecord.mKilledByAm;
            KillPolicyManager.KpmRaw currentKpmRawPolicy = killPolicyManager.getCurrentKpmRawPolicy();
            KillPolicyManager.KpmRaw currentKpmRawBigdata = killPolicyManager.getCurrentKpmRawBigdata();
            if (!z4 && i3 >= 900 && i3 <= 999) {
                if (i2 == 16 || i2 == 18) {
                    if (currentKpmRawPolicy != null) {
                        currentKpmRawPolicy.cachedNormalKillCount++;
                    }
                    if (currentKpmRawBigdata != null) {
                        currentKpmRawBigdata.cachedNormalKillCount++;
                    }
                } else if (i2 == 17) {
                    if (currentKpmRawPolicy != null) {
                        currentKpmRawPolicy.cachedClientKillCount++;
                    }
                    if (currentKpmRawBigdata != null) {
                        currentKpmRawBigdata.cachedClientKillCount++;
                    }
                } else if (i2 == 19) {
                    if (currentKpmRawPolicy != null) {
                        currentKpmRawPolicy.cachedEmptyKillCount++;
                    }
                    if (currentKpmRawBigdata != null) {
                        currentKpmRawBigdata.cachedEmptyKillCount++;
                    }
                }
            }
            if (KillPolicyManager.KPM_DEBUG) {
                int i4 = currentKpmRawPolicy != null ? currentKpmRawPolicy.currentCachedActCnt : 0;
                StringBuilder sb = new StringBuilder(128);
                if (z4) {
                    sb.append("loggingAppDied KilledByAm Process : ");
                    sb.append(killPolicyManager.mAppLaunchCount);
                } else {
                    sb.append("loggingAppDied Killed Process : ");
                    sb.append(killPolicyManager.mAppLaunchCount);
                }
                sb.append(", App PID:");
                sb.append(processRecord.mPid);
                sb.append(", App Name:");
                AccessibilityManagerService$$ExternalSyntheticOutline0.m(i3, processRecord.processName, ", App SetADJ:", ", App AdjType:", sb);
                AccessibilityManagerService$$ExternalSyntheticOutline0.m(i4, processRecord.mState.mAdjType, ", Current CCH-ACT Count:", ", Proc State:", sb);
                DeviceIdleController$$ExternalSyntheticOutline0.m(sb, i2, "ActivityManager_kpm");
            }
        }
        if (!cleanUpApplicationRecordLocked(processRecord, i, z, z2, false, z3) && !z) {
            this.mProcessList.removeLruProcessLocked(processRecord);
            if (i > 0) {
                ProcessList.remove(i);
            }
        }
        AppProfiler appProfiler = this.mAppProfiler;
        synchronized (appProfiler.mProfilerLock) {
            try {
                if (appProfiler.mProfileData.mProfileProc == processRecord) {
                    appProfiler.clearProfilerLPf();
                }
            } finally {
            }
        }
        ActivityTaskManagerInternal activityTaskManagerInternal = this.mAtmInternal;
        WindowProcessController windowProcessController = processRecord.mWindowProcessController;
        ActivityTaskManagerService.LocalService localService = (ActivityTaskManagerService.LocalService) activityTaskManagerInternal;
        synchronized (ActivityTaskManagerService.this.mGlobalLockWithoutBoost) {
            try {
                ActivityTaskManagerService.this.mTaskSupervisor.beginDeferResume();
                try {
                    boolean handleAppDied$1 = windowProcessController.handleAppDied$1();
                    ActivityTaskManagerService.this.mTaskSupervisor.endDeferResume();
                    if (!z && handleAppDied$1) {
                        ActivityTaskManagerService.this.deferWindowLayout();
                        try {
                            RootWindowContainer rootWindowContainer = ActivityTaskManagerService.this.mRootWindowContainer;
                            Task topDisplayFocusedRootTask = rootWindowContainer.getTopDisplayFocusedRootTask();
                            if (topDisplayFocusedRootTask != null && topDisplayFocusedRootTask.topRunningActivity(true) == null) {
                                topDisplayFocusedRootTask.adjustFocusToNextFocusableTask("handleAppDied", false, true);
                            }
                            if (!rootWindowContainer.resumeFocusedTasksTopActivities(null, null, null, false)) {
                                rootWindowContainer.ensureActivitiesVisible();
                            }
                            ActivityTaskManagerService.this.continueWindowLayout();
                        } catch (Throwable th) {
                            ActivityTaskManagerService.this.continueWindowLayout();
                            throw th;
                        }
                    }
                } catch (Throwable th2) {
                    ActivityTaskManagerService.this.mTaskSupervisor.endDeferResume();
                    throw th2;
                }
            } finally {
            }
        }
        if (windowProcessController.mInstrumenting) {
            Slog.w("ActivityManager", "Crash of app " + processRecord.processName + " running instrumentation " + processRecord.mInstr.mClass);
            Bundle bundle = new Bundle();
            bundle.putString("shortMsg", "Process crashed.");
            finishInstrumentationLocked(processRecord, 0, bundle);
        }
        if (MARsPolicyManager.MARs_ENABLE) {
            MARsPolicyManager mARsPolicyManager = MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE;
            mARsPolicyManager.getClass();
            if (MARsPolicyManager.isChinaPolicyEnabled()) {
                if (mARsPolicyManager.isForegroundPackage(processRecord.userId, processRecord.info.packageName) || mARsPolicyManager.getScreenOnState()) {
                    return;
                }
                StringBuilder sb2 = new StringBuilder("Package: ");
                sb2.append(processRecord.info.packageName);
                sb2.append(", userid: ");
                BinaryTransparencyService$$ExternalSyntheticOutline0.m(sb2, processRecord.userId, ", hostingType: activity is Restricted by policy: autorun(2)", "MARsPolicyManager");
            }
        }
    }

    public final void handleApplicationCrash(IBinder iBinder, ApplicationErrorReport.ParcelableCrashInfo parcelableCrashInfo) {
        PackageManager packageManager;
        ProcessRecord findAppProcess = findAppProcess(iBinder, "Crash");
        String str = iBinder == null ? "system_server" : findAppProcess == null ? "unknown" : findAppProcess.processName;
        if (!CoreRune.SYSFW_APP_SPEG || (packageManager = this.mContext.getPackageManager()) == null || findAppProcess == null || !packageManager.isSpeg(findAppProcess.info.packageName, findAppProcess.userId)) {
            handleApplicationCrashInner("crash", findAppProcess, str, parcelableCrashInfo);
            return;
        }
        Slog.d("SPEG", "Skipping crash report of " + findAppProcess.info.packageName + ": launched by SPEG");
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    this.mAppErrors.killAppAtUserRequestLocked(findAppProcess);
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:133:0x03a2  */
    /* JADX WARN: Removed duplicated region for block: B:157:0x03fa  */
    /* JADX WARN: Removed duplicated region for block: B:166:0x0297 A[EXC_TOP_SPLITTER, SYNTHETIC] */
    /* JADX WARN: Removed duplicated region for block: B:172:0x023d  */
    /* JADX WARN: Removed duplicated region for block: B:173:0x0233  */
    /* JADX WARN: Removed duplicated region for block: B:174:0x0222  */
    /* JADX WARN: Removed duplicated region for block: B:175:0x01f2  */
    /* JADX WARN: Removed duplicated region for block: B:178:0x01ae  */
    /* JADX WARN: Removed duplicated region for block: B:179:0x01a3  */
    /* JADX WARN: Removed duplicated region for block: B:180:0x0198  */
    /* JADX WARN: Removed duplicated region for block: B:181:0x018d  */
    /* JADX WARN: Removed duplicated region for block: B:182:0x0182  */
    /* JADX WARN: Removed duplicated region for block: B:183:0x0177  */
    /* JADX WARN: Removed duplicated region for block: B:184:0x016c  */
    /* JADX WARN: Removed duplicated region for block: B:186:0x0154  */
    /* JADX WARN: Removed duplicated region for block: B:187:0x0149  */
    /* JADX WARN: Removed duplicated region for block: B:188:0x013e  */
    /* JADX WARN: Removed duplicated region for block: B:189:0x0131  */
    /* JADX WARN: Removed duplicated region for block: B:191:0x012a  */
    /* JADX WARN: Removed duplicated region for block: B:195:0x00f3  */
    /* JADX WARN: Removed duplicated region for block: B:196:0x00ec  */
    /* JADX WARN: Removed duplicated region for block: B:197:0x00df  */
    /* JADX WARN: Removed duplicated region for block: B:200:0x00a1  */
    /* JADX WARN: Removed duplicated region for block: B:21:0x009e  */
    /* JADX WARN: Removed duplicated region for block: B:24:0x00dd  */
    /* JADX WARN: Removed duplicated region for block: B:26:0x00e9  */
    /* JADX WARN: Removed duplicated region for block: B:28:0x00f0  */
    /* JADX WARN: Removed duplicated region for block: B:42:0x011e  */
    /* JADX WARN: Removed duplicated region for block: B:46:0x012e  */
    /* JADX WARN: Removed duplicated region for block: B:49:0x0137  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x0142  */
    /* JADX WARN: Removed duplicated region for block: B:53:0x014d  */
    /* JADX WARN: Removed duplicated region for block: B:59:0x0165  */
    /* JADX WARN: Removed duplicated region for block: B:61:0x0170  */
    /* JADX WARN: Removed duplicated region for block: B:63:0x017b  */
    /* JADX WARN: Removed duplicated region for block: B:65:0x0186  */
    /* JADX WARN: Removed duplicated region for block: B:67:0x0191  */
    /* JADX WARN: Removed duplicated region for block: B:69:0x019c  */
    /* JADX WARN: Removed duplicated region for block: B:71:0x01a7  */
    /* JADX WARN: Removed duplicated region for block: B:73:0x01b2  */
    /* JADX WARN: Removed duplicated region for block: B:76:0x01d2  */
    /* JADX WARN: Removed duplicated region for block: B:78:0x0220  */
    /* JADX WARN: Removed duplicated region for block: B:81:0x022c  */
    /* JADX WARN: Removed duplicated region for block: B:85:0x023a  */
    /* JADX WARN: Removed duplicated region for block: B:94:0x02cf  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final void handleApplicationCrashInner(java.lang.String r48, com.android.server.am.ProcessRecord r49, java.lang.String r50, android.app.ApplicationErrorReport.CrashInfo r51) {
        /*
            Method dump skipped, instructions count: 1050
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.handleApplicationCrashInner(java.lang.String, com.android.server.am.ProcessRecord, java.lang.String, android.app.ApplicationErrorReport$CrashInfo):void");
    }

    public final void handleApplicationStrictModeViolation(IBinder iBinder, int i, StrictMode.ViolationInfo violationInfo) {
        boolean z;
        int i2;
        boolean z2;
        ProcessRecord findAppProcess = findAppProcess(iBinder, "StrictMode");
        if ((67108864 & i) != 0) {
            Integer valueOf = Integer.valueOf(violationInfo.hashCode());
            synchronized (this.mAlreadyLoggedViolatedStacks) {
                try {
                    z = true;
                    if (this.mAlreadyLoggedViolatedStacks.contains(valueOf)) {
                        z2 = false;
                    } else {
                        if (this.mAlreadyLoggedViolatedStacks.size() >= 5000) {
                            this.mAlreadyLoggedViolatedStacks.clear();
                        }
                        this.mAlreadyLoggedViolatedStacks.add(valueOf);
                        z2 = true;
                    }
                } finally {
                }
            }
            if (z2) {
                if (findAppProcess != null && (findAppProcess.info.flags & 129) == 0) {
                    z = false;
                }
                String str = (findAppProcess == null || findAppProcess.mPid != MY_PID) ? findAppProcess == null ? "unknown" : findAppProcess.processName : "system_server";
                DropBoxManager dropBoxManager = (DropBoxManager) this.mContext.getSystemService("dropbox");
                String concat = processClass(findAppProcess).concat("_strictmode");
                if (dropBoxManager != null && dropBoxManager.isTagEnabled(concat)) {
                    StringBuilder sb = new StringBuilder(1024);
                    synchronized (sb) {
                        try {
                            appendDropBoxProcessHeaders(findAppProcess, str, null, sb);
                            sb.append("Build: ");
                            sb.append(Build.FINGERPRINT);
                            sb.append("\n");
                            sb.append("System-App: ");
                            sb.append(z);
                            sb.append("\n");
                            sb.append("Uptime-Millis: ");
                            sb.append(violationInfo.violationUptimeMillis);
                            sb.append("\n");
                            if (violationInfo.violationNumThisLoop != 0) {
                                sb.append("Loop-Violation-Number: ");
                                sb.append(violationInfo.violationNumThisLoop);
                                sb.append("\n");
                            }
                            if (violationInfo.numAnimationsRunning != 0) {
                                sb.append("Animations-Running: ");
                                sb.append(violationInfo.numAnimationsRunning);
                                sb.append("\n");
                            }
                            if (violationInfo.broadcastIntentAction != null) {
                                sb.append("Broadcast-Intent-Action: ");
                                sb.append(violationInfo.broadcastIntentAction);
                                sb.append("\n");
                            }
                            if (violationInfo.durationMillis != -1) {
                                sb.append("Duration-Millis: ");
                                sb.append(violationInfo.durationMillis);
                                sb.append("\n");
                            }
                            if (violationInfo.numInstances != -1) {
                                sb.append("Instance-Count: ");
                                sb.append(violationInfo.numInstances);
                                sb.append("\n");
                            }
                            String[] strArr = violationInfo.tags;
                            if (strArr != null) {
                                for (String str2 : strArr) {
                                    sb.append("Span-Tag: ");
                                    sb.append(str2);
                                    sb.append("\n");
                                }
                            }
                            sb.append("\n");
                            sb.append(violationInfo.getStackTrace());
                            sb.append("\n");
                            if (violationInfo.getViolationDetails() != null) {
                                sb.append(violationInfo.getViolationDetails());
                                sb.append("\n");
                            }
                        } finally {
                        }
                    }
                    IoThread.getHandler().post(new ActivityManagerService$$ExternalSyntheticLambda15(dropBoxManager, concat, sb.toString()));
                }
            }
        }
        if ((i & 536870912) != 0) {
            AppErrorResult appErrorResult = new AppErrorResult();
            long clearCallingIdentity = Binder.clearCallingIdentity();
            try {
                Message obtain = Message.obtain();
                obtain.what = 26;
                HashMap hashMap = new HashMap();
                hashMap.put(KnoxCustomManagerService.SPCM_KEY_RESULT, appErrorResult);
                hashMap.put("app", findAppProcess);
                hashMap.put("info", violationInfo);
                obtain.obj = hashMap;
                this.mUiHandler.sendMessage(obtain);
                synchronized (appErrorResult) {
                    while (!appErrorResult.mHasResult) {
                        try {
                            appErrorResult.wait();
                        } catch (InterruptedException unused) {
                        }
                    }
                }
                DeviceIdleController$$ExternalSyntheticOutline0.m(appErrorResult.mResult, "handleApplicationStrictModeViolation; res=", "ActivityManager");
            } finally {
                Binder.restoreCallingIdentity(clearCallingIdentity);
            }
        }
    }

    public final boolean handleApplicationWtf(final IBinder iBinder, final String str, boolean z, final ApplicationErrorReport.ParcelableCrashInfo parcelableCrashInfo, int i) {
        final int callingUid = Binder.getCallingUid();
        final int callingPid = Binder.getCallingPid();
        Preconditions.checkNotNull(parcelableCrashInfo);
        if (z || i == Process.myPid()) {
            this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService.19
                @Override // java.lang.Runnable
                public final void run() {
                    ActivityManagerService.this.handleApplicationWtfInner(callingUid, callingPid, iBinder, str, parcelableCrashInfo);
                }
            });
            return false;
        }
        ProcessRecord handleApplicationWtfInner = handleApplicationWtfInner(callingUid, callingPid, iBinder, str, parcelableCrashInfo);
        boolean z2 = Build.IS_ENG;
        boolean z3 = z2 || Settings.Global.getInt(this.mContext.getContentResolver(), "wtf_is_fatal", 0) != 0;
        boolean z4 = handleApplicationWtfInner == null || handleApplicationWtfInner.mPersistent;
        if (!z3 || z4) {
            return false;
        }
        if (z2 && this.mUserController.getCurrentUserId() == 77) {
            return false;
        }
        Slog.v("ActivityManager", "handleApplicationWtf: crashing " + handleApplicationWtfInner + " from " + callingPid);
        AppErrors appErrors = this.mAppErrors;
        appErrors.getClass();
        int callingPid2 = Binder.getCallingPid();
        int callingUid2 = Binder.getCallingUid();
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            appErrors.crashApplicationInner(handleApplicationWtfInner, parcelableCrashInfo, callingPid2, callingUid2);
            return true;
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    /* JADX WARN: Removed duplicated region for block: B:12:0x004b  */
    /* JADX WARN: Removed duplicated region for block: B:17:0x0051  */
    /* JADX WARN: Removed duplicated region for block: B:18:0x002d  */
    /* JADX WARN: Removed duplicated region for block: B:19:0x0025  */
    /* JADX WARN: Removed duplicated region for block: B:7:0x0023  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final com.android.server.am.ProcessRecord handleApplicationWtfInner(int r18, int r19, android.os.IBinder r20, java.lang.String r21, android.app.ApplicationErrorReport.CrashInfo r22) {
        /*
            r17 = this;
            r0 = r20
            r10 = r22
            java.lang.String r1 = "WTF"
            r2 = r17
            com.android.server.am.ProcessRecord r15 = r2.findAppProcess(r0, r1)
            java.lang.String r1 = "unknown"
            if (r0 != 0) goto L16
            java.lang.String r0 = "system_server"
        L14:
            r9 = r0
            goto L1d
        L16:
            if (r15 != 0) goto L1a
            r9 = r1
            goto L1d
        L1a:
            java.lang.String r0 = r15.processName
            goto L14
        L1d:
            int r0 = android.os.UserHandle.getUserId(r18)
            if (r15 != 0) goto L25
            r3 = -1
            goto L29
        L25:
            android.content.pm.ApplicationInfo r3 = r15.info
            int r3 = r3.flags
        L29:
            if (r10 != 0) goto L2d
        L2b:
            r8 = r1
            goto L30
        L2d:
            java.lang.String r1 = r10.exceptionMessage
            goto L2b
        L30:
            java.lang.Integer r0 = java.lang.Integer.valueOf(r0)
            java.lang.Integer r4 = java.lang.Integer.valueOf(r19)
            java.lang.Integer r6 = java.lang.Integer.valueOf(r3)
            r3 = r0
            r5 = r9
            r7 = r21
            java.lang.Object[] r0 = new java.lang.Object[]{r3, r4, r5, r6, r7, r8}
            r1 = 30040(0x7558, float:4.2095E-41)
            android.util.EventLog.writeEvent(r1, r0)
            if (r15 == 0) goto L51
            int r0 = r15.getProcessClassEnum()
        L4f:
            r8 = r0
            goto L53
        L51:
            r0 = 0
            goto L4f
        L53:
            r3 = 80
            r4 = r18
            r5 = r21
            r6 = r9
            r7 = r19
            com.android.internal.util.FrameworkStatsLog.write(r3, r4, r5, r6, r7, r8)
            r11 = 0
            r12 = 0
            java.lang.String r1 = "wtf"
            r4 = 0
            r5 = 0
            r6 = 0
            r8 = 0
            r13 = 0
            r14 = 0
            r16 = 0
            r0 = r17
            r2 = r15
            r3 = r9
            r7 = r21
            r9 = r13
            r10 = r22
            r13 = r14
            r14 = r16
            r0.addErrorToDropBox(r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14)
            return r15
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.handleApplicationWtfInner(int, int, android.os.IBinder, java.lang.String, android.app.ApplicationErrorReport$CrashInfo):com.android.server.am.ProcessRecord");
    }

    public final void handleBindApplicationTimeoutHard(ProcessRecord processRecord) {
        String str;
        synchronized (processRecord) {
            str = "Process " + processRecord + " failed to complete startup";
        }
        this.mAnrHelper.appNotResponding(processRecord, TimeoutRecord.forAppStart(str));
    }

    public final int handleIncomingUser(int i, int i2, int i3, boolean z, boolean z2, String str, String str2) {
        return this.mUserController.handleIncomingUser(i, i2, i3, z, z2 ? 2 : 0, str, str2);
    }

    public final void handleProcessStartOrKillTimeoutLocked(ProcessRecord processRecord, boolean z) {
        int i = processRecord.mPid;
        if (!z && !removePidLocked(i, processRecord)) {
            Slog.w("ActivityManager", "Spurious process start timeout - pid not known for " + processRecord);
            return;
        }
        if (z) {
            ProcessRecord processRecord2 = processRecord.mSuccessor;
            if (processRecord2 == null) {
                return;
            }
            Slog.wtf("ActivityManager", processRecord.toString() + " " + processRecord.mDyingPid + " refused to die while trying to launch " + processRecord2 + ", cancelling the process start");
            processRecord.mSuccessorStartRunnable = null;
            processRecord.mSuccessor = null;
            processRecord2.mPredecessor = null;
            processRecord = processRecord2;
        } else {
            String str = "Process " + processRecord + " failed to attach";
            Slog.w("ActivityManager", str);
            EventLog.writeEvent(30037, Integer.valueOf(processRecord.userId), Integer.valueOf(i), Integer.valueOf(processRecord.uid), processRecord.processName);
            if (processRecord.mInstr != null) {
                Bundle bundle = new Bundle();
                bundle.putString("shortMsg", "failed to attach");
                bundle.putString("longMsg", str);
                finishInstrumentationLocked(processRecord, 0, bundle);
            }
        }
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                this.mProcessList.removeProcessNameLocked(processRecord.uid, null, processRecord.processName);
                this.mAtmInternal.clearHeavyWeightProcessIfEquals(processRecord.mWindowProcessController);
                this.mCpHelper.cleanupAppInLaunchingProvidersLocked(processRecord, true);
                this.mServices.processStartTimedOutLocked(processRecord);
                this.mBroadcastQueue.onApplicationCleanupLocked(processRecord);
                if (!z) {
                    this.mBatteryStatsService.noteProcessFinish(processRecord.info.uid, processRecord.processName);
                    processRecord.killLocked(7, "start timeout");
                    this.mProcessList.removeLruProcessLocked(processRecord);
                }
                if (processRecord.isolated) {
                    this.mBatteryStatsService.removeIsolatedUid(processRecord.uid, processRecord.info.uid);
                    this.mProcessList.mAppExitInfoTracker.mIsolatedUidRecords.removeIsolatedUid(processRecord.uid, processRecord.info.uid);
                    getPackageManagerInternal().removeIsolatedUid(processRecord.uid);
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        BackupRecord backupRecord = (BackupRecord) this.mBackupTargets.get(processRecord.userId);
        if (z || backupRecord == null || backupRecord.app.mPid != i) {
            return;
        }
        Slog.w("ActivityManager", "Unattached app died before backup, skipping");
        final int i2 = processRecord.userId;
        final String str2 = processRecord.info.packageName;
        this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService.10
            @Override // java.lang.Runnable
            public final void run() {
                try {
                    IBackupManager.Stub.asInterface(ServiceManager.getService("backup")).agentDisconnectedForUser(i2, str2);
                } catch (RemoteException unused) {
                }
            }
        });
    }

    public final void hang(IBinder iBinder, boolean z) {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        AnonymousClass16 anonymousClass16 = new AnonymousClass16();
        try {
            iBinder.linkToDeath(anonymousClass16, 0);
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    Watchdog watchdog = Watchdog.getInstance();
                    synchronized (watchdog.mLock) {
                        watchdog.mAllowRestart = z;
                    }
                    Slog.i("ActivityManager", "Hanging system process at request of pid " + Binder.getCallingPid());
                    synchronized (anonymousClass16) {
                        while (iBinder.isBinderAlive()) {
                            try {
                                anonymousClass16.wait();
                            } catch (InterruptedException unused) {
                            }
                        }
                    }
                    Watchdog watchdog2 = Watchdog.getInstance();
                    synchronized (watchdog2.mLock) {
                        watchdog2.mAllowRestart = true;
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
        } catch (RemoteException unused2) {
            Slog.w("ActivityManager", "hang: given caller IBinder is already dead.");
        }
    }

    public final boolean hasServiceTimeLimitExceeded(ComponentName componentName, IBinder iBinder) {
        boolean hasServiceTimedOutLocked;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                hasServiceTimedOutLocked = this.mServices.hasServiceTimedOutLocked(componentName, iBinder);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return hasServiceTimedOutLocked;
    }

    public final boolean hasUsageStatsPermission(String str) {
        int callingUid = Binder.getCallingUid();
        int callingPid = Binder.getCallingPid();
        int opMode = this.mAppOpsService.noteOperation(43, callingUid, str, null, false, "", false).getOpMode();
        if (opMode == 3) {
            if (checkPermissionForDevice("android.permission.PACKAGE_USAGE_STATS", callingPid, callingUid, 0) == 0) {
                return true;
            }
        } else if (opMode == 0) {
            return true;
        }
        return false;
    }

    public final void holdLock(IBinder iBinder, int i) {
        if (this.mTestUtilityService == null) {
            this.mTestUtilityService = (TestUtilityService) LocalServices.getService(TestUtilityService.class);
        }
        ((PackageManagerService) this.mTestUtilityService).verifyHoldLockToken(iBinder);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                SystemClock.sleep(i);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void idleUids() {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mOomAdjuster.idleUidsLocked();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final boolean inputDispatchingTimedOut(ProcessRecord processRecord, String str, ApplicationInfo applicationInfo, String str2, WindowProcessController windowProcessController, boolean z, TimeoutRecord timeoutRecord) {
        try {
            Trace.traceBegin(64L, "inputDispatchingTimedOut()");
            if (checkCallingPermission("android.permission.FILTER_EVENTS") != 0) {
                throw new SecurityException("Requires permission android.permission.FILTER_EVENTS");
            }
            if (processRecord != null) {
                timeoutRecord.mLatencyTracker.waitingOnAMSLockStarted();
                boostPriorityForLockedSection();
                synchronized (this) {
                    try {
                        timeoutRecord.mLatencyTracker.waitingOnAMSLockEnded();
                        if (processRecord.mDebugging) {
                            resetPriorityAfterLockedSection();
                            return false;
                        }
                        if (processRecord.mInstr != null) {
                            Bundle bundle = new Bundle();
                            bundle.putString("shortMsg", "keyDispatchingTimedOut");
                            bundle.putString("longMsg", timeoutRecord.mReason);
                            finishInstrumentationLocked(processRecord, 0, bundle);
                            resetPriorityAfterLockedSection();
                            return true;
                        }
                        resetPriorityAfterLockedSection();
                        this.mAnrHelper.appNotResponding(processRecord, str, applicationInfo, str2, windowProcessController, z, timeoutRecord, true);
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                }
            }
            return true;
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public final void instrumentWithoutRestart(ActiveInstrumentation activeInstrumentation, ApplicationInfo applicationInfo) {
        ProcessRecord processRecordLocked;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                String str = applicationInfo.processName;
                processRecordLocked = this.mProcessList.getProcessRecordLocked(applicationInfo.uid, str);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        try {
            processRecordLocked.mThread.instrumentWithoutRestart(activeInstrumentation.mClass, activeInstrumentation.mArguments, activeInstrumentation.mWatcher, activeInstrumentation.mUiAutomationConnection, applicationInfo);
        } catch (RemoteException e) {
            Slog.i("ActivityManager", "RemoteException from instrumentWithoutRestart", e);
        }
    }

    public final FgsTempAllowListItem isAllowlistedForFgsStartLOSP(int i) {
        if (Arrays.binarySearch(this.mDeviceIdleExceptIdleAllowlist, UserHandle.getAppId(i)) >= 0) {
            return FAKE_TEMP_ALLOW_LIST_ITEM;
        }
        Pair pair = this.mFgsStartTempAllowList.get(i);
        if (pair == null) {
            return null;
        }
        return (FgsTempAllowListItem) pair.second;
    }

    public final boolean isAppFreezerEnabled() {
        return this.mOomAdjuster.mCachedAppOptimizer.useFreezer();
    }

    public final boolean isAppFreezerExemptInstPkg() {
        boolean z;
        CachedAppOptimizer cachedAppOptimizer = this.mOomAdjuster.mCachedAppOptimizer;
        synchronized (cachedAppOptimizer.mPhenotypeFlagLock) {
            try {
                z = cachedAppOptimizer.mUseFreezer && cachedAppOptimizer.mFreezerExemptInstPkg;
            } finally {
            }
        }
        return z;
    }

    public final boolean isAppFreezerSupported() {
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            return CachedAppOptimizer.isFreezerSupported();
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final boolean isBackgroundRestricted(String str) {
        int callingUid = Binder.getCallingUid();
        if (AppGlobals.getPackageManager().getPackageUid(str, 268435456L, UserHandle.getUserId(callingUid)) == callingUid) {
            return isBackgroundRestrictedNoCheck(callingUid, str);
        }
        throw new IllegalArgumentException("Uid " + callingUid + " cannot query restriction state for package " + str);
    }

    public boolean isBackgroundRestrictedNoCheck(int i, String str) {
        return getAppOpsManager$1().checkOpNoThrow(70, i, str) != 0;
    }

    public final boolean isFreezableUid(int i) {
        if (checkCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL") != 0) {
            Slog.d("ActivityManager", "isFreezableUid - permission is not granted. callingUid: " + Binder.getCallingUid());
            return false;
        }
        if (this.mWindowManager != null) {
            return !r1.hasFloatingOrOnScreenWindow(i);
        }
        return true;
    }

    public final boolean isHeapDumpAllowed() {
        if (!USER_BUILD || !SHIP_BUILD || "0x1".equals(SystemProperties.get("ro.boot.em.status", "0x0"))) {
            return true;
        }
        EngineeringModeManager engineeringModeManager = new EngineeringModeManager(this.mContext);
        if (engineeringModeManager.isConnected() && engineeringModeManager.getStatus(65) == 1) {
            return true;
        }
        Slog.i("ActivityManager", "heapdump is not allowed");
        return false;
    }

    public final boolean isInLockTaskMode() {
        return this.mActivityTaskManager.isInLockTaskMode();
    }

    public final boolean isInstantApp(int i, ProcessRecord processRecord, String str) {
        if (UserHandle.getAppId(i) < 10000) {
            return false;
        }
        if (processRecord != null) {
            return processRecord.info.isInstantApp();
        }
        IPackageManager packageManager = AppGlobals.getPackageManager();
        if (str == null) {
            try {
                String[] packagesForUid = packageManager.getPackagesForUid(i);
                if (packagesForUid == null || packagesForUid.length == 0) {
                    throw new IllegalArgumentException("Unable to determine caller package name");
                }
                str = packagesForUid[0];
            } catch (RemoteException e) {
                Slog.e("ActivityManager", "Error looking up if " + str + " is an instant app.", e);
                return true;
            }
        }
        this.mAppOpsService.checkPackage(i, str);
        return packageManager.isInstantApp(str, UserHandle.getUserId(i));
    }

    public final boolean isIntentSenderAnActivity(IIntentSender iIntentSender) {
        if (iIntentSender instanceof PendingIntentRecord) {
            return ((PendingIntentRecord) iIntentSender).key.type == 2;
        }
        return false;
    }

    public final boolean isIntentSenderTargetedToPackage(IIntentSender iIntentSender) {
        if (!(iIntentSender instanceof PendingIntentRecord)) {
            return false;
        }
        try {
            PendingIntentRecord pendingIntentRecord = (PendingIntentRecord) iIntentSender;
            if (pendingIntentRecord.key.allIntents == null) {
                return false;
            }
            int i = 0;
            while (true) {
                Intent[] intentArr = pendingIntentRecord.key.allIntents;
                if (i >= intentArr.length) {
                    return true;
                }
                Intent intent = intentArr[i];
                if (intent.getPackage() != null && intent.getComponent() != null) {
                    return false;
                }
                i++;
            }
        } catch (ClassCastException unused) {
            return false;
        }
    }

    public final boolean isOnDeviceIdleAllowlistLOSP(int i, boolean z) {
        PendingTempAllowlist pendingTempAllowlist;
        int appId = UserHandle.getAppId(i);
        if (Arrays.binarySearch(z ? this.mDeviceIdleExceptIdleAllowlist : this.mDeviceIdleAllowlist, appId) < 0 && Arrays.binarySearch(this.mDeviceIdleTempAllowlist, appId) < 0) {
            PendingTempAllowlists pendingTempAllowlists = this.mPendingTempAllowlist;
            synchronized (pendingTempAllowlists.mPendingTempAllowlist) {
                pendingTempAllowlist = (PendingTempAllowlist) pendingTempAllowlists.mPendingTempAllowlist.get(i);
            }
            if (pendingTempAllowlist == null) {
                return false;
            }
        }
        return true;
    }

    public final boolean isProcessFrozen(int i) {
        enforceCallingPermission("android.permission.DUMP", "isProcessFrozen()");
        return this.mOomAdjuster.mCachedAppOptimizer.isProcessFrozen(i);
    }

    public final boolean isProcessInStateToScheduleUserInitiatedJobsLocked(int i, long j, ProcessRecord processRecord) {
        if (processRecord == null) {
            return false;
        }
        if (processRecord.getBackgroundStartPrivileges().allowsBackgroundActivityStarts()) {
            return true;
        }
        ProcessStateRecord processStateRecord = processRecord.mState;
        int i2 = processStateRecord.mCurProcState;
        if (i2 <= 3 && doesReasonCodeAllowSchedulingUserInitiatedJobs(PowerExemptionManager.getReasonCodeFromProcState(i2), i)) {
            return true;
        }
        long j2 = processStateRecord.mLastInvisibleTime;
        if (j2 > 0 && j2 < Long.MAX_VALUE && j - j2 < this.mConstants.mVisibleToInvisibleUijScheduleGraceDurationMs) {
            return true;
        }
        ProcessServiceRecord processServiceRecord = processRecord.mServices;
        if (processServiceRecord != null && processServiceRecord.mHasForegroundServices) {
            for (int size = processServiceRecord.mServices.size() - 1; size >= 0; size--) {
                ServiceRecord runningServiceAt = processServiceRecord.getRunningServiceAt(size);
                if (runningServiceAt.isForeground && runningServiceAt.mAllowUiJobScheduling) {
                    return true;
                }
            }
        }
        return false;
    }

    public final boolean isTopActivityImmersive() {
        return this.mActivityTaskManager.isTopActivityImmersive();
    }

    public final boolean isTopOfTask(IBinder iBinder) {
        return ActivityClient.getInstance().isTopOfTask(iBinder);
    }

    public final boolean isUidActive(int i, String str) {
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "isUidActive");
        }
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                if (isUidActiveLOSP(i)) {
                    resetPriorityAfterProcLockedSection();
                    return true;
                }
                resetPriorityAfterProcLockedSection();
                return this.mInternal.isPendingTopUid(i);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public final boolean isUidActiveLOSP(int i) {
        UidRecord uidRecord = this.mProcessList.mActiveUids.get(i);
        return (uidRecord == null || uidRecord.mSetIdle) ? false : true;
    }

    public final boolean isUserAMonkey() {
        boolean z;
        boolean z2;
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                z = true;
                if (!this.mUserIsMonkey) {
                    ActivityTaskManagerService activityTaskManagerService = this.mActivityTaskManager;
                    WindowManagerGlobalLock windowManagerGlobalLock = activityTaskManagerService.mGlobalLock;
                    WindowManagerService.boostPriorityForLockedSection();
                    synchronized (windowManagerGlobalLock) {
                        try {
                            z2 = activityTaskManagerService.mController != null && activityTaskManagerService.mControllerIsAMonkey;
                        } catch (Throwable th) {
                            WindowManagerService.resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                    WindowManagerService.resetPriorityAfterLockedSection();
                    if (!z2) {
                        z = false;
                    }
                }
            } catch (Throwable th2) {
                resetPriorityAfterProcLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterProcLockedSection();
        return z;
    }

    public final boolean isUserRunning(int i, int i2) {
        if (this.mUserController.isSameProfileGroup(i, UserHandle.getCallingUserId()) || checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") == 0) {
            return this.mUserController.isUserRunning(i, i2);
        }
        throw new SecurityException(ActivityManagerService$$ExternalSyntheticOutline0.m(new StringBuilder("Permission Denial: isUserRunning() from pid="), ", uid=", " requires android.permission.INTERACT_ACROSS_USERS", "ActivityManager"));
    }

    public final boolean isVrModePackageEnabled(ComponentName componentName) {
        int isValid;
        this.mActivityTaskManager.enforceSystemHasVrFeature();
        VrManagerService.LocalService localService = (VrManagerService.LocalService) LocalServices.getService(VrManagerService.LocalService.class);
        int callingUserId = UserHandle.getCallingUserId();
        VrManagerService vrManagerService = VrManagerService.this;
        synchronized (vrManagerService.mLock) {
            isValid = vrManagerService.mComponentObserver.isValid(callingUserId, componentName);
        }
        return isValid == 0;
    }

    public final void killAllBackgroundProcesses() {
        if (checkCallingPermission("android.permission.KILL_ALL_BACKGROUND_PROCESSES") != 0) {
            throw new SecurityException(ActivityManagerService$$ExternalSyntheticOutline0.m(new StringBuilder("Permission Denial: killAllBackgroundProcesses() from pid="), ", uid=", " requires android.permission.KILL_ALL_BACKGROUND_PROCESSES", "ActivityManager"));
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    this.mAppProfiler.mAllowLowerMemLevel = true;
                    ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerProcLock) {
                        try {
                            this.mProcessList.killPackageProcessesLSP(null, -1, -1, FrameworkStatsLog.VPN_CONNECTION_STATE_CHANGED, false, true, true, false, false, false, 10, 24, "kill all background");
                        } catch (Throwable th) {
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    resetPriorityAfterProcLockedSection();
                    this.mAppProfiler.doLowMemReportIfNeededLocked(null);
                } catch (Throwable th2) {
                    resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final void killAllBackgroundProcessesExcept(int i, int i2) {
        if (checkCallingPermission("android.permission.KILL_ALL_BACKGROUND_PROCESSES") != 0) {
            throw new SecurityException(ActivityManagerService$$ExternalSyntheticOutline0.m(new StringBuilder("Permission Denial: killAllBackgroundProcessesExcept() from pid="), ", uid=", " requires android.permission.KILL_ALL_BACKGROUND_PROCESSES", "ActivityManager"));
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerProcLock) {
                        try {
                            this.mProcessList.killAllBackgroundProcessesExceptLSP(i, i2);
                        } catch (Throwable th) {
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    resetPriorityAfterProcLockedSection();
                } catch (Throwable th2) {
                    resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final void killAppAtUsersRequest(ProcessRecord processRecord) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mAppErrors.killAppAtUserRequestLocked(processRecord);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void killApplication(String str, int i, int i2, String str2, int i3) {
        if (str == null) {
            return;
        }
        if (i < 0) {
            Slog.w("ActivityManager", "Invalid appid specified for pkg : ".concat(str));
            return;
        }
        int callingUid = Binder.getCallingUid();
        if (UserHandle.getAppId(callingUid) != 1000) {
            throw new SecurityException(callingUid + " cannot kill pkg: " + str);
        }
        Message obtainMessage = this.mHandler.obtainMessage(22);
        obtainMessage.arg1 = i;
        obtainMessage.arg2 = i2;
        SomeArgs obtain = SomeArgs.obtain();
        obtain.arg1 = str;
        obtain.arg2 = str2;
        obtain.arg3 = Integer.valueOf(i3);
        obtainMessage.obj = obtain;
        this.mHandler.sendMessage(obtainMessage);
    }

    public final void killApplicationProcess(String str, int i) {
        IApplicationThread iApplicationThread;
        if (str == null) {
            return;
        }
        int callingUid = Binder.getCallingUid();
        if (callingUid != 1000) {
            throw new SecurityException(callingUid + " cannot kill app process: " + str);
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ProcessRecord processRecordLocked = this.mProcessList.getProcessRecordLocked(i, str);
                if (processRecordLocked == null || (iApplicationThread = processRecordLocked.mThread) == null) {
                    Slog.w("ActivityManager", "Process/uid not found attempting kill of " + str + " / " + i);
                } else {
                    try {
                        iApplicationThread.scheduleSuicide();
                    } catch (RemoteException unused) {
                    }
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    /* JADX WARN: Unsupported multi-entry loop pattern (BACK_EDGE: B:50:? -> B:45:0x0113). Please report as a decompilation issue!!! */
    public final void killBackgroundProcesses(String str, int i) {
        int[] users;
        int i2;
        ActivityManagerProcLock activityManagerProcLock;
        int i3;
        int i4;
        IPackageManager iPackageManager;
        int[] iArr;
        int i5;
        int i6;
        if (checkCallingPermission("android.permission.KILL_BACKGROUND_PROCESSES") != 0 && checkCallingPermission("android.permission.RESTART_PACKAGES") != 0) {
            throw new SecurityException(ActivityManagerService$$ExternalSyntheticOutline0.m(new StringBuilder("Permission Denial: killBackgroundProcesses() from pid="), ", uid=", " requires android.permission.KILL_BACKGROUND_PROCESSES", "ActivityManager"));
        }
        boolean z = checkCallingPermission("android.permission.KILL_ALL_BACKGROUND_PROCESSES") == 0;
        int callingUid = Binder.getCallingUid();
        int appId = UserHandle.getAppId(callingUid);
        EventLog.writeEvent(1000101, str, Integer.valueOf(i), Integer.valueOf(Binder.getCallingPid()));
        int handleIncomingUser = this.mUserController.handleIncomingUser(Binder.getCallingPid(), callingUid, i, true, 2, "killBackgroundProcesses", null);
        UserController userController = this.mUserController;
        int i7 = -1;
        if (handleIncomingUser != -1) {
            userController.getClass();
            users = new int[]{handleIncomingUser};
        } else {
            users = userController.getUsers();
        }
        int[] iArr2 = users;
        this.mActivityTaskManager.getClass();
        if (ActivityTaskManagerService.isForceStopDisabled(str, handleIncomingUser, null, null, null, false)) {
            return;
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            IPackageManager packageManager = AppGlobals.getPackageManager();
            int length = iArr2.length;
            int i8 = 0;
            while (i8 < length) {
                int i9 = iArr2[i8];
                try {
                    i2 = UserHandle.getAppId(packageManager.getPackageUid(str, 268435456L, i9));
                } catch (RemoteException unused) {
                    i2 = i7;
                }
                if (i2 == i7 || !(z || i2 == appId)) {
                    Slog.w("ActivityManager", "Invalid packageName: " + str);
                    return;
                }
                boostPriorityForLockedSection();
                synchronized (this) {
                    try {
                        ActivityManagerProcLock activityManagerProcLock2 = this.mProcLock;
                        boostPriorityForProcLockedSection();
                        synchronized (activityManagerProcLock2) {
                            try {
                                activityManagerProcLock = activityManagerProcLock2;
                                i3 = i8;
                                i4 = length;
                                iPackageManager = packageManager;
                                iArr = iArr2;
                                i5 = i7;
                                i6 = appId;
                            } catch (Throwable th) {
                                th = th;
                                activityManagerProcLock = activityManagerProcLock2;
                                resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                            try {
                                this.mProcessList.killPackageProcessesLSP(str, i2, i9, 500, false, true, true, false, false, false, 10, 24, "kill background");
                                resetPriorityAfterProcLockedSection();
                            } catch (Throwable th2) {
                                th = th2;
                                resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                        }
                    } catch (Throwable th3) {
                        resetPriorityAfterLockedSection();
                        throw th3;
                    }
                }
                resetPriorityAfterLockedSection();
                i8 = i3 + 1;
                packageManager = iPackageManager;
                iArr2 = iArr;
                i7 = i5;
                appId = i6;
                length = i4;
            }
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final boolean killGenieProcess(int i, int i2, String str) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ProcessRecord processRecordLocked = this.mProcessList.getProcessRecordLocked(i, str);
                if (processRecordLocked != null) {
                    int i3 = processRecordLocked.mPid;
                    int i4 = processRecordLocked.mState.mCurAdj;
                    Slog.d("GenIE", "genAIProcess to kill to check: " + i3 + ", oomadj:" + i4);
                    if (i4 >= i2) {
                        Process.killProcess(i3);
                        this.mProcessList.noteAppKill(processRecordLocked, 17, 1003, "GenAI unload policy");
                        resetPriorityAfterLockedSection();
                        return true;
                    }
                } else {
                    Slog.d("GenIE", "no proc record for  " + str + " and uid:" + i);
                }
                resetPriorityAfterLockedSection();
                return false;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final void killPackageDependents(String str, int i) {
        int i2;
        enforceCallingPermission("android.permission.KILL_UID", "killPackageDependents()");
        if (str == null) {
            throw new NullPointerException("Cannot kill the dependents of a package without its name.");
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            i2 = AppGlobals.getPackageManager().getPackageUid(str, 268435456L, i);
        } catch (RemoteException unused) {
            i2 = -1;
        }
        if (i != -1 && i2 == -1) {
            throw new IllegalArgumentException("Cannot kill dependents of non-existing package ".concat(str));
        }
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    try {
                        synchronized (activityManagerProcLock) {
                            try {
                                this.mProcessList.killPackageProcessesLSP(str, UserHandle.getAppId(i2), i, 0, false, true, true, false, false, false, 12, 0, "dep: ".concat(str));
                                resetPriorityAfterProcLockedSection();
                            } catch (Throwable th) {
                                th = th;
                                resetPriorityAfterProcLockedSection();
                                throw th;
                            }
                        }
                    } catch (Throwable th2) {
                        th = th2;
                    }
                } catch (Throwable th3) {
                    resetPriorityAfterLockedSection();
                    throw th3;
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final boolean killPids(int[] iArr, String str, boolean z) {
        boolean z2;
        int i;
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("killPids only available to the system");
        }
        if (str == null) {
            str = "Unknown";
        }
        ArrayList arrayList = new ArrayList();
        synchronized (this.mPidsSelfLocked) {
            int i2 = 0;
            for (int i3 : iArr) {
                try {
                    ProcessRecord processRecord = this.mPidsSelfLocked.get(i3);
                    if (processRecord != null && (i = processRecord.mState.mSetAdj) > i2) {
                        i2 = i;
                    }
                } catch (Throwable th) {
                    throw th;
                }
            }
            if (i2 < 999 && i2 > 900) {
                i2 = 900;
            }
            if (!z && i2 < 500) {
                i2 = 500;
            }
            Slog.w("ActivityManager", "Killing processes " + str + " at adjustment " + i2);
            z2 = false;
            for (int i4 : iArr) {
                ProcessRecord processRecord2 = this.mPidsSelfLocked.get(i4);
                if (processRecord2 != null && processRecord2.mState.mSetAdj >= i2 && !processRecord2.mKilledByAm) {
                    arrayList.add(processRecord2);
                    z2 = true;
                }
            }
        }
        if (!arrayList.isEmpty()) {
            this.mHandler.post(new ActivityManagerService$$ExternalSyntheticLambda15(this, arrayList, str));
        }
        return z2;
    }

    public final void killProcessForMARs(int i, int i2, String str, String str2, int i3, boolean z) {
        int appId = UserHandle.getAppId(i);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                try {
                    synchronized (activityManagerProcLock) {
                        try {
                            this.mProcessList.killPackageProcessesLSP(str, appId, i2, i3, false, z, true, false, false, false, 13, 1001, str2);
                            resetPriorityAfterProcLockedSection();
                        } catch (Throwable th) {
                            th = th;
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                } catch (Throwable th2) {
                    th = th2;
                }
            } catch (Throwable th3) {
                resetPriorityAfterLockedSection();
                throw th3;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final boolean killProcessesBelowForeground(String str) {
        boolean z;
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("killProcessesBelowForeground() only available to system");
        }
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("killProcessesBelowAdj() only available to system");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerProcLock) {
                    try {
                        synchronized (this.mPidsSelfLocked) {
                            try {
                                int size = ((SparseArray) this.mPidsSelfLocked.mPidMap).size();
                                z = false;
                                for (int i = 0; i < size; i++) {
                                    ((SparseArray) this.mPidsSelfLocked.mPidMap).keyAt(i);
                                    ProcessRecord valueAt = this.mPidsSelfLocked.valueAt(i);
                                    if (valueAt != null && valueAt.mState.mSetAdj > 0 && !valueAt.mKilledByAm) {
                                        valueAt.killLocked(8, str);
                                        z = true;
                                    }
                                }
                            } catch (Throwable th) {
                                throw th;
                            }
                        }
                    } catch (Throwable th2) {
                        resetPriorityAfterProcLockedSection();
                        throw th2;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th3) {
                resetPriorityAfterLockedSection();
                throw th3;
            }
        }
        resetPriorityAfterLockedSection();
        return z;
    }

    public final void killProcessesWhenImperceptible(int[] iArr, String str) {
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            throw new SecurityException("Requires permission android.permission.FORCE_STOP_PACKAGES");
        }
        int callingUid = Binder.getCallingUid();
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            this.mProcessList.killProcessesWhenImperceptible(callingUid, str, iArr);
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final void killUid(int i, int i2, int i3, int i4, String str) {
        enforceCallingPermission("android.permission.KILL_UID", "killUid");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerProcLock) {
                        try {
                            this.mProcessList.killPackageProcessesLSP(null, i, i2, -800, false, true, true, true, false, false, i3, i4, str != null ? str : "kill uid");
                        } catch (Throwable th) {
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    resetPriorityAfterProcLockedSection();
                } finally {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void killUid(int i, int i2, String str) {
        killUid(i, i2, 13, 11, str);
    }

    public final void killUidForPermissionChange(int i, int i2, String str) {
        enforceCallingPermission("android.permission.KILL_UID", "killUid");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
                    boostPriorityForProcLockedSection();
                    synchronized (activityManagerProcLock) {
                        try {
                            this.mProcessList.killPackageProcessesLSP(null, i, i2, -800, false, true, true, true, false, false, 8, 0, str != null ? str : "kill uid");
                        } catch (Throwable th) {
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                    resetPriorityAfterProcLockedSection();
                } finally {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                }
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final boolean launchBugReportHandlerApp() {
        long clearCallingIdentity;
        Context createContextAsUser = this.mContext.createContextAsUser(this.mUserController.getCurrentUser().getUserHandle(), 0);
        if (!createContextAsUser.getResources().getBoolean(R.bool.config_cameraDoubleTapPowerGestureEnabled)) {
            return false;
        }
        Slog.i("ActivityManager", "launchBugReportHandlerApp requested by UID " + Binder.getCallingUid());
        enforceCallingPermission("android.permission.DUMP", "launchBugReportHandlerApp");
        if (!createContextAsUser.getResources().getBoolean(R.bool.config_cameraDoubleTapPowerGestureEnabled)) {
            return false;
        }
        String stringForUser = Settings.Secure.getStringForUser(createContextAsUser.getContentResolver(), "custom_bugreport_handler_app", createContextAsUser.getUserId());
        if ("com.android.shell".equals(stringForUser)) {
            return false;
        }
        int intForUser = Settings.Secure.getIntForUser(createContextAsUser.getContentResolver(), "custom_bugreport_handler_user", -10000, createContextAsUser.getUserId());
        if (!TextUtils.isEmpty(stringForUser) && SystemConfig.getInstance().mBugreportWhitelistedPackages.contains(stringForUser)) {
            if (createContextAsUser.getPackageManager().queryBroadcastReceiversAsUser(ExplicitHealthCheckController$$ExternalSyntheticOutline0.m("com.android.internal.intent.action.BUGREPORT_REQUESTED", stringForUser), 1048576, intForUser).isEmpty()) {
                stringForUser = createContextAsUser.getResources().getString(R.string.date_picker_decrement_year_button);
                intForUser = createContextAsUser.getUserId();
                clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    Settings.Secure.putString(createContextAsUser.getContentResolver(), "custom_bugreport_handler_app", createContextAsUser.getResources().getString(R.string.date_picker_decrement_year_button));
                    Settings.Secure.putInt(createContextAsUser.getContentResolver(), "custom_bugreport_handler_user", createContextAsUser.getUserId());
                } finally {
                }
            }
        } else {
            stringForUser = createContextAsUser.getResources().getString(R.string.date_picker_decrement_year_button);
            intForUser = createContextAsUser.getUserId();
        }
        if ("com.android.shell".equals(stringForUser) || TextUtils.isEmpty(stringForUser) || !SystemConfig.getInstance().mBugreportWhitelistedPackages.contains(stringForUser)) {
            return false;
        }
        if (createContextAsUser.getPackageManager().queryBroadcastReceiversAsUser(ExplicitHealthCheckController$$ExternalSyntheticOutline0.m("com.android.internal.intent.action.BUGREPORT_REQUESTED", stringForUser), 1048576, intForUser).isEmpty()) {
            return false;
        }
        if (createContextAsUser.getPackageManager().queryBroadcastReceiversAsUser(ExplicitHealthCheckController$$ExternalSyntheticOutline0.m("com.android.internal.intent.action.GET_BUGREPORT_HANDLER_RESPONSE", stringForUser), 1048576, intForUser).isEmpty()) {
            BugReportHandlerUtil.launchBugReportHandlerApp(createContextAsUser, stringForUser, intForUser);
        } else {
            Slog.i("ActivityManager", "Getting response from bug report handler app: " + stringForUser);
            Intent intent = new Intent("com.android.internal.intent.action.GET_BUGREPORT_HANDLER_RESPONSE");
            intent.setPackage(stringForUser);
            intent.addFlags(268435456);
            intent.addFlags(16777216);
            clearCallingIdentity = Binder.clearCallingIdentity();
            try {
                createContextAsUser.sendOrderedBroadcastAsUser(intent, UserHandle.of(intForUser), "android.permission.DUMP", -1, null, new BugReportHandlerUtil.BugreportHandlerResponseBroadcastReceiver(stringForUser, intForUser), null, 0, null, null);
            } catch (RuntimeException e) {
                Slog.e("ActivityManager", "Error while trying to get response from bug report handler app.", e);
                return false;
            } finally {
            }
        }
        return true;
    }

    public final void logFgsApiBegin(int i, int i2, int i3) {
        enforceCallingPermission("android.permission.LOG_FOREGROUND_RESOURCE_USE", "logFgsApiBegin");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActiveServices activeServices = this.mServices;
                synchronized (activeServices.mFGSLogger) {
                    activeServices.mFGSLogger.logForegroundServiceApiEventBegin(i, i2, i3);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void logFgsApiEnd(int i, int i2, int i3) {
        enforceCallingPermission("android.permission.LOG_FOREGROUND_RESOURCE_USE", "logFgsApiEnd");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActiveServices activeServices = this.mServices;
                synchronized (activeServices.mFGSLogger) {
                    activeServices.mFGSLogger.logForegroundServiceApiEventEnd(i, i2, i3);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void logFgsApiStateChanged(int i, int i2, int i3, int i4) {
        enforceCallingPermission("android.permission.LOG_FOREGROUND_RESOURCE_USE", "logFgsApiEvent");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActiveServices activeServices = this.mServices;
                synchronized (activeServices.mFGSLogger) {
                    activeServices.mFGSLogger.logForegroundServiceApiStateChanged(i, i3, i2);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void makePackageIdle(String str, int i) {
        int i2;
        if (checkCallingPermission("android.permission.FORCE_STOP_PACKAGES") != 0) {
            throw new SecurityException(ActivityManagerService$$ExternalSyntheticOutline0.m(new StringBuilder("Permission Denial: makePackageIdle() from pid="), ", uid=", " requires android.permission.FORCE_STOP_PACKAGES", "ActivityManager"));
        }
        int handleIncomingUser = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), i, true, 2, "makePackageIdle", null);
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            try {
                i2 = AppGlobals.getPackageManager().getPackageUid(str, 268443648L, 0);
            } catch (RemoteException unused) {
                i2 = -1;
            }
            if (i2 == -1) {
                throw new IllegalArgumentException("Unknown package name " + str);
            }
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    try {
                        PowerManagerInternal powerManagerInternal = this.mLocalPowerManager;
                        if (powerManagerInternal != null) {
                            powerManagerInternal.startUidChanges();
                        }
                        int appId = UserHandle.getAppId(i2);
                        for (int size = this.mProcessList.mActiveUids.mActiveUids.size() - 1; size >= 0; size--) {
                            UidRecord valueAt = this.mProcessList.mActiveUids.valueAt(size);
                            if (valueAt.mLastBackgroundTime > 0 && !valueAt.mIdle) {
                                int i3 = valueAt.mUid;
                                if (UserHandle.getAppId(i3) == appId && (handleIncomingUser == -1 || handleIncomingUser == UserHandle.getUserId(i3))) {
                                    EventLog.writeEvent(30055, i3);
                                    ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
                                    boostPriorityForProcLockedSection();
                                    synchronized (activityManagerProcLock) {
                                        try {
                                            valueAt.mIdle = true;
                                            valueAt.mSetIdle = true;
                                        } finally {
                                        }
                                    }
                                    resetPriorityAfterProcLockedSection();
                                    Slog.w("ActivityManager", "Idling uid " + UserHandle.formatUid(i3) + " from package " + str + " user " + handleIncomingUser);
                                    doStopUidLocked(i3, valueAt);
                                }
                            }
                        }
                        PowerManagerInternal powerManagerInternal2 = this.mLocalPowerManager;
                        if (powerManagerInternal2 != null) {
                            powerManagerInternal2.finishUidChanges();
                        }
                    } catch (Throwable th) {
                        resetPriorityAfterLockedSection();
                        throw th;
                    }
                } catch (Throwable th2) {
                    PowerManagerInternal powerManagerInternal3 = this.mLocalPowerManager;
                    if (powerManagerInternal3 != null) {
                        powerManagerInternal3.finishUidChanges();
                    }
                    throw th2;
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final void maybeLogUserspaceRebootEvent() {
        int currentUserId;
        final int i = 0;
        if ((!PowerManager.isRebootingUserspaceSupportedImpl() ? false : SystemProperties.getBoolean("persist.sys.userspace_reboot.log.should_log", false)) && (currentUserId = this.mUserController.getCurrentUserId()) == 0) {
            boolean isCeStorageUnlocked = StorageManager.isCeStorageUnlocked(currentUserId);
            Executor executor = BackgroundThread.getExecutor();
            if (!PowerManager.isRebootingUserspaceSupportedImpl()) {
                Slog.wtf("UserspaceRebootLogger", "logEventAsync: Userspace reboot is not supported.");
                return;
            }
            if (SystemProperties.getLong("sys.userspace_reboot.log.last_started", -1L) != -1) {
                i = 1;
            } else {
                String emptyIfNull = TextUtils.emptyIfNull(SystemProperties.get("sys.boot.reason.last", ""));
                if (emptyIfNull.startsWith("reboot,")) {
                    emptyIfNull = emptyIfNull.substring(6);
                }
                if (emptyIfNull.startsWith("userspace_failed,watchdog_fork") || emptyIfNull.startsWith("userspace_failed,shutdown_aborted")) {
                    i = 2;
                } else if (emptyIfNull.startsWith("mount_userdata_failed") || emptyIfNull.startsWith("userspace_failed,init_user0") || emptyIfNull.startsWith("userspace_failed,enablefilecrypto")) {
                    i = 3;
                } else if (emptyIfNull.startsWith("userspace_failed,watchdog_triggered")) {
                    i = 4;
                }
            }
            final long j = i == 1 ? SystemProperties.getLong("sys.userspace_reboot.log.last_finished", 0L) - SystemProperties.getLong("sys.userspace_reboot.log.last_started", 0L) : 0L;
            final int i2 = isCeStorageUnlocked ? 1 : 2;
            executor.execute(new Runnable() { // from class: com.android.server.UserspaceRebootLogger$$ExternalSyntheticLambda1
                @Override // java.lang.Runnable
                public final void run() {
                    int i3 = i;
                    long j2 = j;
                    int i4 = i2;
                    StringBuilder m = UserspaceRebootLogger$$ExternalSyntheticOutline0.m(i3, "Logging UserspaceRebootReported atom: { outcome: ", j2, " durationMillis: ");
                    m.append(" encryptionState: ");
                    m.append(i4);
                    m.append(" }");
                    Slog.i("UserspaceRebootLogger", m.toString());
                    FrameworkStatsLog.write(243, i3, j2, i4);
                    SystemProperties.set("persist.sys.userspace_reboot.log.should_log", "");
                }
            });
        }
    }

    public final void maybeSendBootCompletedLocked(ProcessRecord processRecord, boolean z) {
        boolean z2;
        UserInfo userInfo;
        boolean z3 = true;
        if (com.android.internal.hidden_from_bootclasspath.android.os.Flags.allowPrivateProfile() && android.multiuser.Flags.enablePrivateSpaceFeatures() && (userInfo = ((UserManagerInternal) LocalServices.getService(UserManagerInternal.class)).getUserInfo(processRecord.userId)) != null && userInfo.isPrivateProfile() && !this.mPrivateSpaceBootCompletedPackages.contains(processRecord.info.packageName)) {
            this.mPrivateSpaceBootCompletedPackages.add(processRecord.info.packageName);
            z2 = true;
        } else {
            z2 = false;
        }
        if (!processRecord.mWasForceStopped && processRecord.mWindowProcessController.mStoppedState != 2) {
            z3 = false;
        }
        if (android.app.Flags.appRestrictionsApi() && z3) {
            noteAppRestrictionEnabled(processRecord.info.packageName, processRecord.uid, 60, false, 3, "unknown", 1, 0L);
        }
        if (z) {
            return;
        }
        if (z2 || (com.android.internal.hidden_from_bootclasspath.android.content.pm.Flags.stayStopped() && z3)) {
            if (processRecord.info.isEncryptionAware()) {
                sendBootBroadcastToAppLocked(processRecord, new Intent("android.intent.action.LOCKED_BOOT_COMPLETED"));
            }
            if (StorageManager.isCeStorageUnlocked(processRecord.userId)) {
                sendBootBroadcastToAppLocked(processRecord, new Intent("android.intent.action.BOOT_COMPLETED"));
            }
        }
    }

    @Override // com.android.server.Watchdog.Monitor
    public final void monitor() {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final boolean moveActivityTaskToBack(IBinder iBinder, boolean z) {
        return ActivityClient.getInstance().moveActivityTaskToBack(iBinder, z);
    }

    public final boolean moveTaskToBack(int i, boolean z) {
        return moveTaskToBackWithBundle(i, z, null);
    }

    public final boolean moveTaskToBackWithBundle(int i, boolean z, Bundle bundle) {
        enforceCallingPermission("android.permission.REORDER_TASKS", "moveTaskToBack()");
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            return this.mAtmInternal.moveTaskToBack(i, z, bundle);
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final void moveTaskToFront(IApplicationThread iApplicationThread, String str, int i, int i2, Bundle bundle) {
        this.mActivityTaskManager.moveTaskToFront(iApplicationThread, str, i, i2, bundle);
    }

    public final void moveTaskToRootTask(int i, int i2, boolean z) {
        this.mActivityTaskManager.moveTaskToRootTask(i, i2, z);
    }

    public final void noteAlarmFinish(IIntentSender iIntentSender, WorkSource workSource, int i, String str) {
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (i <= 0 && workSource == null) {
            if (iIntentSender == null || !(iIntentSender instanceof PendingIntentRecord)) {
                return;
            }
            int callingUid = Binder.getCallingUid();
            int i2 = ((PendingIntentRecord) iIntentSender).uid;
            if (i2 == callingUid) {
                i2 = 1000;
            }
            i = i2;
        }
        int i3 = i;
        BatteryStatsService batteryStatsService = this.mBatteryStatsService;
        batteryStatsService.mContext.enforceCallingOrSelfPermission("android.permission.UPDATE_DEVICE_STATS", "noteAlarmFinish");
        WorkSource workSource2 = workSource != null ? new WorkSource(workSource) : null;
        synchronized (batteryStatsService.mLock) {
            batteryStatsService.mHandler.post(new BatteryStatsService$$ExternalSyntheticLambda29(batteryStatsService, str, workSource2, i3, SystemClock.elapsedRealtime(), SystemClock.uptimeMillis(), 1));
        }
    }

    public final void noteAlarmStart(IIntentSender iIntentSender, WorkSource workSource, int i, String str) {
        if (workSource != null && workSource.isEmpty()) {
            workSource = null;
        }
        if (i <= 0 && workSource == null) {
            if (iIntentSender == null || !(iIntentSender instanceof PendingIntentRecord)) {
                return;
            }
            int callingUid = Binder.getCallingUid();
            int i2 = ((PendingIntentRecord) iIntentSender).uid;
            if (i2 == callingUid) {
                i2 = 1000;
            }
            i = i2;
        }
        int i3 = i;
        BatteryStatsService batteryStatsService = this.mBatteryStatsService;
        batteryStatsService.mContext.enforceCallingOrSelfPermission("android.permission.UPDATE_DEVICE_STATS", "noteAlarmStart");
        WorkSource workSource2 = workSource != null ? new WorkSource(workSource) : null;
        synchronized (batteryStatsService.mLock) {
            batteryStatsService.mHandler.post(new BatteryStatsService$$ExternalSyntheticLambda29(batteryStatsService, str, workSource2, i3, SystemClock.elapsedRealtime(), SystemClock.uptimeMillis(), 0));
        }
    }

    public final void noteAppRestrictionEnabled(String str, int i, int i2, boolean z, int i3, String str2, int i4, long j) {
        String str3 = str2;
        if (android.app.Flags.appRestrictionsApi()) {
            enforceCallingPermission("android.permission.DEVICE_POWER", "noteAppRestrictionEnabled()");
            int callingUserId = UserHandle.getCallingUserId();
            long clearCallingIdentity = Binder.clearCallingIdentity();
            int i5 = i;
            if (i5 == -1) {
                try {
                    i5 = this.mPackageManagerInt.getPackageUid(str, 0L, callingUserId);
                } catch (Throwable th) {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                    throw th;
                }
            }
            this.mAppRestrictionController.getClass();
            if (str3 != null && str2.length() > 16) {
                Slog.e("ActivityManager", "subReason is too long, truncating ".concat(str3));
                str3 = str3.substring(0, 16);
            }
            String str4 = str3;
            int i6 = 7;
            int i7 = i2 != 0 ? i2 != 10 ? i2 != 20 ? i2 != 30 ? i2 != 40 ? i2 != 50 ? i2 != 60 ? i2 != 70 ? 8 : 7 : 6 : 5 : 4 : 3 : 2 : 1 : 0;
            switch (i3) {
                case 1:
                    i6 = 1;
                    break;
                case 2:
                    i6 = 2;
                    break;
                case 3:
                    i6 = 3;
                    break;
                case 4:
                    i6 = 4;
                    break;
                case 5:
                    i6 = 6;
                    break;
                case 6:
                    break;
                default:
                    i6 = 8;
                    break;
            }
            FrameworkStatsLog.write(FrameworkStatsLog.APP_RESTRICTION_STATE_CHANGED, i5, i7, z, i6, str4, j, i4);
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final void noteUidProcessState(final int i, final int i2, int i3) {
        int i4;
        ActivityManagerService activityManagerService = this;
        BatteryStatsService batteryStatsService = activityManagerService.mBatteryStatsService;
        synchronized (batteryStatsService.mLock) {
            batteryStatsService.mHandler.post(new BatteryStatsService$$ExternalSyntheticLambda32(i, i2, 2, SystemClock.elapsedRealtime(), SystemClock.uptimeMillis(), batteryStatsService));
        }
        AppOpsService appOpsService = activityManagerService.mAppOpsService;
        synchronized (appOpsService) {
            ((AppOpsUidStateTrackerImpl) appOpsService.getUidStateTracker()).updateUidProcState(i, i2, i3);
        }
        boolean z = StatsPullAtomService.ENABLE_MOBILE_DATA_STATS_AGGREGATED_PULLER;
        if (z) {
            try {
                if (activityManagerService.mStatsPullAtomServiceInternal == null) {
                    activityManagerService.mStatsPullAtomServiceInternal = (StatsPullAtomService.StatsPullAtomServiceInternalImpl) LocalServices.getService(StatsPullAtomService.StatsPullAtomServiceInternalImpl.class);
                }
                StatsPullAtomService.StatsPullAtomServiceInternalImpl statsPullAtomServiceInternalImpl = activityManagerService.mStatsPullAtomServiceInternal;
                if (statsPullAtomServiceInternalImpl != null) {
                    statsPullAtomServiceInternalImpl.getClass();
                    if (z) {
                        StatsPullAtomService statsPullAtomService = StatsPullAtomService.this;
                        if (statsPullAtomService.mAggregatedMobileDataStatsPuller != null) {
                            SystemClock.elapsedRealtime();
                            SystemClock.uptimeMillis();
                            final AggregatedMobileDataStatsPuller aggregatedMobileDataStatsPuller = statsPullAtomService.mAggregatedMobileDataStatsPuller;
                            aggregatedMobileDataStatsPuller.mMobileDataStatsHandler.post(new Runnable() { // from class: com.android.server.stats.pull.AggregatedMobileDataStatsPuller$$ExternalSyntheticLambda1
                                @Override // java.lang.Runnable
                                public final void run() {
                                    AggregatedMobileDataStatsPuller aggregatedMobileDataStatsPuller2 = AggregatedMobileDataStatsPuller.this;
                                    int i5 = i;
                                    int i6 = i2;
                                    RateLimiter rateLimiter = aggregatedMobileDataStatsPuller2.mRateLimiter;
                                    Instant ofEpochMilli = Instant.ofEpochMilli(rateLimiter.mClock.currentTimeMillis());
                                    if (!rateLimiter.mNextPermit.isAfter(ofEpochMilli)) {
                                        rateLimiter.mNextPermit = ofEpochMilli.plus((TemporalAmount) rateLimiter.mWindow);
                                        NetworkStatsManager networkStatsManager = aggregatedMobileDataStatsPuller2.mNetworkStatsManager;
                                        if (networkStatsManager != null) {
                                            aggregatedMobileDataStatsPuller2.updateNetworkStats(networkStatsManager);
                                        } else {
                                            Slog.w("AggregatedMobileDataStatsPuller", "noteUidProcessStateLocked() can not get mNetworkStatsManager");
                                        }
                                    }
                                    aggregatedMobileDataStatsPuller2.mUidPreviousState.put(i5, i6);
                                }
                            });
                        }
                    }
                } else {
                    Slog.d("ActivityManager", "StatsPullAtomService not ready yet");
                }
            } catch (Exception e) {
                Slog.e("ActivityManager", "Exception during logging uid proc state change event", e);
            }
        }
        if (activityManagerService.mTrackingAssociations) {
            int size = activityManagerService.mAssociations.size();
            int i5 = 0;
            while (i5 < size) {
                ArrayMap arrayMap = (ArrayMap) activityManagerService.mAssociations.valueAt(i5);
                int size2 = arrayMap.size();
                int i6 = 0;
                while (i6 < size2) {
                    ArrayMap arrayMap2 = (ArrayMap) ((SparseArray) arrayMap.valueAt(i6)).get(i);
                    if (arrayMap2 != null) {
                        int size3 = arrayMap2.size();
                        int i7 = 0;
                        while (i7 < size3) {
                            Association association = (Association) arrayMap2.valueAt(i7);
                            if (association.mNesting >= 1) {
                                long uptimeMillis = SystemClock.uptimeMillis();
                                long[] jArr = association.mStateTimes;
                                int i8 = association.mLastState;
                                i4 = size;
                                jArr[i8] = (uptimeMillis - association.mLastStateUptime) + jArr[i8];
                                association.mLastState = i2;
                                association.mLastStateUptime = uptimeMillis;
                            } else {
                                i4 = size;
                            }
                            i7++;
                            size = i4;
                        }
                    }
                    i6++;
                    size = size;
                }
                i5++;
                activityManagerService = this;
            }
        }
    }

    public final void noteWakeupAlarm(IIntentSender iIntentSender, WorkSource workSource, int i, final String str, final String str2) {
        int i2;
        int i3;
        int i4;
        WorkSource workSource2 = (workSource == null || !workSource.isEmpty()) ? workSource : null;
        if (i > 0 || workSource2 != null) {
            i2 = i;
        } else {
            if (iIntentSender == null || !(iIntentSender instanceof PendingIntentRecord)) {
                return;
            }
            int callingUid = Binder.getCallingUid();
            int i5 = ((PendingIntentRecord) iIntentSender).uid;
            if (i5 == callingUid) {
                i5 = 1000;
            }
            i2 = i5;
        }
        final BatteryStatsService batteryStatsService = this.mBatteryStatsService;
        batteryStatsService.mContext.enforceCallingOrSelfPermission("android.permission.UPDATE_DEVICE_STATS", "noteWakupAlarm");
        final WorkSource workSource3 = workSource2 != null ? new WorkSource(workSource2) : null;
        synchronized (batteryStatsService.mLock) {
            final long elapsedRealtime = SystemClock.elapsedRealtime();
            final long uptimeMillis = SystemClock.uptimeMillis();
            final int i6 = i2;
            i3 = i2;
            batteryStatsService.mHandler.post(new Runnable() { // from class: com.android.server.am.BatteryStatsService$$ExternalSyntheticLambda100
                @Override // java.lang.Runnable
                public final void run() {
                    BatteryStatsService batteryStatsService2 = batteryStatsService;
                    String str3 = str;
                    int i7 = i6;
                    WorkSource workSource4 = workSource3;
                    String str4 = str2;
                    long j = elapsedRealtime;
                    long j2 = uptimeMillis;
                    synchronized (batteryStatsService2.mStats) {
                        batteryStatsService2.mStats.noteWakupAlarmLocked(str3, i7, workSource4, str4, j, j2);
                    }
                }
            });
        }
        if (workSource2 == null) {
            FrameworkStatsLog.write_non_chained(35, i3, (String) null, str2, str, this.mUsageStatsService != null ? this.mUsageStatsService.getAppStandbyBucket(UserHandle.getUserId(i3), str, SystemClock.elapsedRealtime()) : 0);
            return;
        }
        String packageName = workSource2.getPackageName(0);
        int attributionUid = workSource2.getAttributionUid();
        if (packageName == null) {
            i4 = i3;
            packageName = str;
        } else {
            i4 = attributionUid;
        }
        FrameworkStatsLog.write(35, workSource2, str2, str, this.mUsageStatsService != null ? this.mUsageStatsService.getAppStandbyBucket(UserHandle.getUserId(i4), packageName, SystemClock.elapsedRealtime()) : 0);
    }

    public final void notifyCleartextNetwork(int i, byte[] bArr) {
        this.mHandler.obtainMessage(49, i, 0, bArr).sendToTarget();
    }

    public final void notifyLockedProfile(final int i) {
        ActivityTaskManagerService.LocalService localService = (ActivityTaskManagerService.LocalService) this.mAtmInternal;
        localService.getClass();
        try {
            if (!AppGlobals.getPackageManager().isUidPrivileged(Binder.getCallingUid())) {
                throw new SecurityException("Only privileged app can call notifyLockedProfile");
            }
            WindowManagerGlobalLock windowManagerGlobalLock = ActivityTaskManagerService.this.mGlobalLock;
            WindowManagerService.boostPriorityForLockedSection();
            synchronized (windowManagerGlobalLock) {
                try {
                    long clearCallingIdentity = Binder.clearCallingIdentity();
                    try {
                        if (ActivityTaskManagerService.this.mAmInternal.shouldConfirmCredentials(i)) {
                            ActivityTaskManagerService.this.maybeHideLockedProfileActivityLocked();
                            final RootWindowContainer rootWindowContainer = ActivityTaskManagerService.this.mRootWindowContainer;
                            rootWindowContainer.getClass();
                            rootWindowContainer.forAllLeafTasks(new Consumer() { // from class: com.android.server.wm.RootWindowContainer$$ExternalSyntheticLambda25
                                @Override // java.util.function.Consumer
                                public final void accept(Object obj) {
                                    RootWindowContainer rootWindowContainer2 = RootWindowContainer.this;
                                    int i2 = i;
                                    Task task = (Task) obj;
                                    rootWindowContainer2.getClass();
                                    ActivityRecord activityRecord = task.topRunningActivity(false);
                                    if ((activityRecord == null || activityRecord.finishing || !"android.app.action.CONFIRM_DEVICE_CREDENTIAL_WITH_USER".equals(activityRecord.intent.getAction()) || !activityRecord.packageName.equals(rootWindowContainer2.mService.getSysUiServiceComponentLocked().getPackageName())) && task.getActivity(new RootWindowContainer$$ExternalSyntheticLambda13(i2, 1)) != null) {
                                        TaskChangeNotificationController taskChangeNotificationController = rootWindowContainer2.mService.mTaskChangeNotificationController;
                                        Message obtainMessage = taskChangeNotificationController.mHandler.obtainMessage(14, i2, 0, task.getTaskInfo());
                                        taskChangeNotificationController.forAllLocalListeners(taskChangeNotificationController.mNotifyTaskProfileLocked, obtainMessage);
                                        obtainMessage.sendToTarget();
                                    }
                                }
                            }, true);
                        }
                    } finally {
                        Binder.restoreCallingIdentity(clearCallingIdentity);
                    }
                } catch (Throwable th) {
                    WindowManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            WindowManagerService.resetPriorityAfterLockedSection();
        } catch (RemoteException e) {
            throw new SecurityException("Fail to check is caller a privileged app", e);
        }
    }

    public final void notifyPackageUse(String str, int i) {
        PackageManagerService.m758$$Nest$mnotifyPackageUseInternal(PackageManagerService.this, str, i);
    }

    /* JADX WARN: Multi-variable type inference failed */
    public final void onShellCommand(FileDescriptor fileDescriptor, FileDescriptor fileDescriptor2, FileDescriptor fileDescriptor3, String[] strArr, ShellCallback shellCallback, ResultReceiver resultReceiver) {
        int i;
        if (strArr != null && strArr.length > 0 && ("start".equals(strArr[0]) || "start-activity".equals(strArr[0]))) {
            this.mHandler.sendEmptyMessage(90);
        }
        int i2 = 1;
        boolean z = strArr != null && INetd.IF_FLAG_BROADCAST.equals(strArr[0]);
        StringBuilder sb = new StringBuilder();
        if (z) {
            while (true) {
                if (i2 < strArr.length) {
                    if ("-a".equals(strArr[i2]) && (i = i2 + 1) < strArr.length) {
                        sb.append("-a ");
                        sb.append(strArr[i]);
                        break;
                    }
                    i2++;
                } else {
                    break;
                }
            }
            sb.append(" from u ");
            sb.append(Binder.getCallingUid());
            sb.append(" p ");
            sb.append(Binder.getCallingPid());
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-HH-mm-ss");
            sb.append(" ");
            sb.append(simpleDateFormat.format(new Date(System.currentTimeMillis())));
            this.mPendingCmdBR.add(sb);
        }
        try {
            new ActivityManagerShellCommand(this, false).exec(this, fileDescriptor, fileDescriptor2, fileDescriptor3, strArr, shellCallback, resultReceiver);
        } finally {
            if (z) {
                this.mPendingCmdBR.remove(sb);
            }
        }
    }

    /* JADX WARN: Can't fix incorrect switch cases order, some code will duplicate */
    public final boolean onTransact(int i, Parcel parcel, Parcel parcel2, int i2) {
        boolean z;
        int i3 = 3;
        if (i == 1599295570) {
            ArrayList arrayList = new ArrayList();
            ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerProcLock) {
                try {
                    ArrayMap map = this.mProcessList.mProcessNames.getMap();
                    int size = map.size();
                    for (int i4 = 0; i4 < size; i4++) {
                        SparseArray sparseArray = (SparseArray) map.valueAt(i4);
                        int size2 = sparseArray.size();
                        for (int i5 = 0; i5 < size2; i5++) {
                            IApplicationThread iApplicationThread = ((ProcessRecord) sparseArray.valueAt(i5)).mThread;
                            if (iApplicationThread != null) {
                                arrayList.add(iApplicationThread.asBinder());
                            }
                        }
                    }
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            int size3 = arrayList.size();
            for (int i6 = 0; i6 < size3; i6++) {
                Parcel obtain = Parcel.obtain();
                try {
                    ((IBinder) arrayList.get(i6)).transact(1599295570, obtain, null, 1);
                } catch (RemoteException unused) {
                }
                obtain.recycle();
            }
        } else {
            if (i == 9513) {
                parcel.enforceInterface("android.app.IActivityManager");
                if (MARsPolicyManager.MARs_ENABLE) {
                    boolean z2 = FreecessController.IS_MINIMIZE_OLAF_LOCK;
                    FreecessController freecessController = FreecessController.FreecessControllerHolder.INSTANCE;
                    if (freecessController.mIsFreecessEnable) {
                        Slog.d("MARsPolicyManager", "Receive dump started from dumpstate");
                        if (!freecessController.mIsDumpstateWorking) {
                            freecessController.mIsDumpstateWorking = true;
                            freecessController.setFreecessEnableForSpecificReason(1, false);
                        }
                    }
                }
                parcel2.writeNoException();
                return true;
            }
            if (i == 9516) {
                parcel.enforceInterface("android.app.IActivityManager");
                int readInt = parcel.readInt();
                int readInt2 = parcel.readInt();
                int readInt3 = parcel.readInt();
                String readString = parcel.readString();
                String readString2 = parcel.readString();
                String str = "android.util.PerfLog.ACTION_BOTTLENECK_HINT";
                if ("RESOURCES".equals(readString)) {
                    str = "android.util.PerfLog.ACTION_RESOURCE_HINT";
                } else {
                    boolean z3 = FreecessController.IS_MINIMIZE_OLAF_LOCK;
                    FreecessController.FreecessControllerHolder.INSTANCE.enterOLAF(-1, 1000, null);
                    Intent intent = new Intent("com.samsung.BOTTLENECK_HINT_FOR_CHIMERA");
                    intent.setPackage("android");
                    this.mContext.sendBroadcast(intent);
                }
                StringBuilder m = Preconditions$$ExternalSyntheticOutline0.m(str, " onTransact() from uid = ");
                m.append(String.format("%d", Integer.valueOf(readInt)));
                m.append(" with avg = ");
                m.append(String.format("%d", Integer.valueOf(readInt2)));
                m.append(", reason = ");
                m.append(readString);
                m.append(", description = ");
                m.append(readString2);
                m.append(", jank = ");
                m.append(readInt3);
                Slog.d("ActivityManager", m.toString());
                Intent intent2 = new Intent(str);
                intent2.putExtra("avg", readInt2);
                intent2.putExtra("reason", readString);
                intent2.putExtra("description", readString2);
                intent2.putExtra("jank", readInt3);
                this.mContext.sendBroadcast(intent2);
                parcel2.writeNoException();
                MARsComponentTracker mARsComponentTracker = MARsComponentTracker.MARsComponentTrackerHolder.INSTANCE;
                readString.getClass();
                switch (readString.hashCode()) {
                    case -2130536998:
                        if (readString.equals("INPUTD")) {
                            z = false;
                            break;
                        }
                        z = -1;
                        break;
                    case 2269492:
                        if (readString.equals("JANK")) {
                            z = true;
                            break;
                        }
                        z = -1;
                        break;
                    case 1661058378:
                        if (readString.equals("MAINLOOPER")) {
                            z = 2;
                            break;
                        }
                        z = -1;
                        break;
                    case 2004112474:
                        if (readString.equals("LOCKCONTENTION")) {
                            z = 3;
                            break;
                        }
                        z = -1;
                        break;
                    default:
                        z = -1;
                        break;
                }
                switch (z) {
                    case false:
                        i3 = 2;
                        break;
                    case true:
                        break;
                    case true:
                        i3 = 0;
                        break;
                    case true:
                        i3 = 1;
                        break;
                    default:
                        i3 = -1;
                        break;
                }
                FrameworkStatsLog.write(FrameworkStatsLog.BOTTLENECK_HINT_REPORTED, readInt2, i3, readInt3, readString2);
                return true;
            }
            if (i == 9903 && !USER_BUILD) {
                parcel.enforceInterface("android.app.IActivityManager");
                try {
                    boolean z4 = this.mContext.getPackageManager().getApplicationInfo("com.samsung.android.game.gos", 0).enabled;
                } catch (PackageManager.NameNotFoundException e) {
                    e.printStackTrace();
                }
                this.mDssController.addPackageData(parcel.readString(), parcel.readFloat());
                parcel2.writeNoException();
                return true;
            }
        }
        try {
            return super.onTransact(i, parcel, parcel2, i2);
        } catch (RuntimeException e2) {
            if (e2 instanceof SecurityException) {
                throw e2;
            }
            if (e2 instanceof IllegalArgumentException) {
                throw e2;
            }
            if (e2 instanceof IllegalStateException) {
                throw e2;
            }
            Slog.wtf("ActivityManager", "Activity Manager Crash. UID:" + Binder.getCallingUid() + " PID:" + Binder.getCallingPid() + " TRANS:" + i, e2);
            throw e2;
        }
    }

    public final ParcelFileDescriptor openContentUri(String str) {
        enforceNotIsolatedCaller("openContentUri");
        int callingUserId = UserHandle.getCallingUserId();
        Uri parse = Uri.parse(str);
        String authority = parse.getAuthority();
        ContentProviderHolder contentProviderImpl = this.mCpHelper.getContentProviderImpl(null, authority, null, Binder.getCallingUid(), null, "*opencontent*", true, callingUserId, -1);
        if (contentProviderImpl == null) {
            DeviceIdleController$$ExternalSyntheticOutline0.m("Failed to get provider for authority '", authority, "'", "ActivityManager");
            return null;
        }
        try {
            int callingUid = Binder.getCallingUid();
            String resolvePackageName = AppOpsManager.resolvePackageName(callingUid, null);
            AndroidPackage androidPackage = resolvePackageName != null ? this.mPackageManagerInt.getPackage(resolvePackageName) : this.mPackageManagerInt.getPackage(callingUid);
            if (androidPackage == null) {
                Log.e("ActivityManager", "Cannot find package for uid: " + callingUid);
            } else {
                ApplicationInfo applicationInfo = this.mPackageManagerInt.getApplicationInfo(1000, 0, 0L, androidPackage.getPackageName());
                if (applicationInfo.isVendor() || applicationInfo.isSystemApp() || applicationInfo.isSystemExt() || applicationInfo.isProduct()) {
                    ParcelFileDescriptor openFile = contentProviderImpl.provider.openFile(new AttributionSource(Binder.getCallingUid(), androidPackage.getPackageName(), null), parse, "r", (ICancellationSignal) null);
                    this.mCpHelper.removeContentProviderExternalUnchecked(callingUserId, null, authority);
                    return openFile;
                }
                Log.e("ActivityManager", "openContentUri may only be used by vendor/system/product.");
            }
            this.mCpHelper.removeContentProviderExternalUnchecked(callingUserId, null, authority);
            return null;
        } catch (FileNotFoundException unused) {
            this.mCpHelper.removeContentProviderExternalUnchecked(callingUserId, null, authority);
            return null;
        } catch (Throwable th) {
            this.mCpHelper.removeContentProviderExternalUnchecked(callingUserId, null, authority);
            throw th;
        }
    }

    public final void overlaysInstallComplete(Configuration configuration, String str, String str2, int i, OverlayChangeObserver.AnonymousClass1 anonymousClass1) {
        Slog.e("ActivityManager", "LocaleChange End: Time = " + System.currentTimeMillis());
        if (anonymousClass1 != null) {
            this.mHandler.removeCallbacks(anonymousClass1);
        }
        Slog.d("ActivityManager", "overlaysInstallComplete() called with: configuration = [" + configuration + "], callingPackage = [" + str + "], callingAttributionTag = [" + str2 + "], timeoutRunnable = [" + anonymousClass1 + "]");
        if (isDeviceProvisioned(this.mContext)) {
            updatePersistentConfigurationWithAttribution(configuration, str, str2, i);
            return;
        }
        try {
            IShortcutService.Stub.asInterface(ServiceManager.getService("shortcut")).handleLocaleChanged(true);
        } catch (RemoteException e) {
            ActivityManagerService$$ExternalSyntheticOutline0.m(e, new StringBuilder("Unable to start ShortcutService: "), "ActivityManager");
        }
    }

    public final void parseDexKillProcessTimeout(ProcessRecord processRecord) {
        int parseKillTimeout;
        Bundle bundle;
        ApplicationInfo applicationInfo = processRecord.info;
        Bundle bundle2 = applicationInfo.metaData;
        if (bundle2 != null) {
            parseKillTimeout = parseKillTimeout(bundle2.getString("com.samsung.android.dex.kill_process_timeout", ""));
        } else {
            ActivityManagerServiceExt activityManagerServiceExt = this.mExt;
            String str = applicationInfo.packageName;
            ActivityManagerServiceExt.MetaDataCollector metaDataCollector = activityManagerServiceExt.mMetaDataCollector;
            metaDataCollector.getClass();
            String str2 = null;
            if (str != null) {
                Pair pair = new Pair(str, "com.samsung.android.dex.kill_process_timeout");
                synchronized (metaDataCollector) {
                    try {
                        if (metaDataCollector.mLoaded) {
                            str2 = (String) ((HashMap) metaDataCollector.mStringMetaDataMap).get(pair);
                        } else {
                            long clearCallingIdentity = Binder.clearCallingIdentity();
                            try {
                                try {
                                    ApplicationInfo applicationInfo2 = AppGlobals.getPackageManager().getApplicationInfo(str, 128L, ActivityManagerServiceExt.this.mContext.getUserId());
                                    if (applicationInfo2 != null && (bundle = applicationInfo2.metaData) != null) {
                                        str2 = bundle.getString("com.samsung.android.dex.kill_process_timeout");
                                    }
                                } catch (RemoteException e) {
                                    Slog.v("MetaDataCollector", "getApplicationInfo failed: " + e, e);
                                }
                            } finally {
                                Binder.restoreCallingIdentity(clearCallingIdentity);
                            }
                        }
                    } finally {
                    }
                }
            }
            parseKillTimeout = parseKillTimeout(str2);
        }
        if (parseKillTimeout != -1) {
            Slog.d("ActivityManager", "kill dex related process - setKillProcessTimeout : " + processRecord.processName + "(" + String.valueOf(parseKillTimeout) + ")");
            processRecord.mKillProcessTimeout = parseKillTimeout;
        }
    }

    public final IBinder peekService(Intent intent, String str, String str2) {
        IBinder peekServiceLocked;
        enforceNotIsolatedCaller("peekService");
        if (intent != null && intent.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        if (str2 == null) {
            throw new IllegalArgumentException("callingPackage cannot be null");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                peekServiceLocked = this.mServices.peekServiceLocked(intent, str, str2);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return peekServiceLocked;
    }

    public final void pendingScheduleServiceRestart(int i, ServiceRecord serviceRecord) {
        List list;
        StringBuilder m = BatteryService$$ExternalSyntheticOutline0.m(i, "pendingScheduleServiceRestart: u=", ", sr=");
        m.append(serviceRecord.toString());
        Slog.d("ActivityManager", m.toString());
        synchronized (this.mPendingSches) {
            try {
                if (((HashMap) this.mPendingSches).containsKey(Integer.valueOf(i))) {
                    list = (List) ((HashMap) this.mPendingSches).get(Integer.valueOf(i));
                } else {
                    list = new LinkedList();
                    ((HashMap) this.mPendingSches).put(Integer.valueOf(i), list);
                }
                list.add(serviceRecord);
            } catch (Throwable th) {
                throw th;
            }
        }
    }

    public final void performIdleMaintenance() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                final long uptimeMillis = SystemClock.uptimeMillis();
                final long j = uptimeMillis - this.mLastIdleTime;
                if (!com.android.server.flags.Flags.disableSystemCompaction()) {
                    CachedAppOptimizer cachedAppOptimizer = this.mOomAdjuster.mCachedAppOptimizer;
                    if (cachedAppOptimizer.useCompaction()) {
                        Trace.instantForTrack(64L, "Compaction", "compactAllSystem");
                        Handler handler = cachedAppOptimizer.mCompactionHandler;
                        handler.sendMessage(handler.obtainMessage(2));
                    }
                }
                final long lowRamTimeSinceIdleLPr = this.mAppProfiler.getLowRamTimeSinceIdleLPr(uptimeMillis);
                this.mLastIdleTime = uptimeMillis;
                AppProfiler appProfiler = this.mAppProfiler;
                appProfiler.getClass();
                if (appProfiler.mLowRamStartTime != 0) {
                    appProfiler.mLowRamStartTime = uptimeMillis;
                }
                StringBuilder sb = new StringBuilder(128);
                sb.append("Idle maintenance over ");
                TimeUtils.formatDuration(j, sb);
                sb.append(" low RAM for ");
                TimeUtils.formatDuration(lowRamTimeSinceIdleLPr, sb);
                Slog.i("ActivityManager", sb.toString());
                final boolean z = lowRamTimeSinceIdleLPr > j / 3;
                final long max = Math.max((Process.getTotalMemory() / 1000) / 100, 10000L);
                this.mProcessList.forEachLruProcessesLOSP(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda22
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        final long j2;
                        long j3;
                        long j4;
                        long j5;
                        final ActivityManagerService activityManagerService = ActivityManagerService.this;
                        boolean z2 = z;
                        long j6 = max;
                        long j7 = j;
                        long j8 = lowRamTimeSinceIdleLPr;
                        long j9 = uptimeMillis;
                        final ProcessRecord processRecord = (ProcessRecord) obj;
                        activityManagerService.getClass();
                        if (processRecord.mThread == null) {
                            return;
                        }
                        ProcessProfileRecord processProfileRecord = processRecord.mProfile;
                        ProcessStateRecord processStateRecord = processRecord.mState;
                        int i = processStateRecord.mSetProcState;
                        if (!processStateRecord.mNotCachedSinceIdle) {
                            if (i >= 14 || i < 0) {
                                return;
                            }
                            processStateRecord.mNotCachedSinceIdle = true;
                            synchronized (activityManagerService.mAppProfiler.mProfilerLock) {
                                processProfileRecord.mInitialIdlePssOrRss = 0L;
                                activityManagerService.mAppProfiler.updateNextPssTimeLPf(processStateRecord.mSetProcState, processRecord.mProfile, j9, true);
                            }
                            return;
                        }
                        if (i < 5 || i > 10) {
                            return;
                        }
                        synchronized (activityManagerService.mAppProfiler.mProfilerLock) {
                            j2 = processProfileRecord.mInitialIdlePssOrRss;
                            if (activityManagerService.mAppProfiler.isProfilingPss()) {
                                j4 = j8;
                                j3 = processProfileRecord.mLastPss;
                            } else {
                                j3 = processProfileRecord.mLastRss;
                                j4 = j8;
                            }
                            j5 = processProfileRecord.mLastSwapPss;
                        }
                        if (!z2 || j2 == 0 || j3 <= (3 * j2) / 2 || j3 <= j6 + j2) {
                            return;
                        }
                        StringBuilder m = BootReceiver$$ExternalSyntheticOutline0.m(128, "Kill");
                        m.append(processRecord.processName);
                        if (activityManagerService.mAppProfiler.isProfilingPss()) {
                            m.append(" in idle maint: pss=");
                        } else {
                            m.append(" in idle maint: rss=");
                        }
                        m.append(j3);
                        if (activityManagerService.mAppProfiler.isProfilingPss()) {
                            BootReceiver$$ExternalSyntheticOutline0.m(m, ", swapPss=", j5, ", initialPss=");
                        } else {
                            m.append(", initialRss=");
                        }
                        m.append(j2);
                        m.append(", period=");
                        TimeUtils.formatDuration(j7, m);
                        m.append(", lowRamPeriod=");
                        TimeUtils.formatDuration(j4, m);
                        Slog.wtfQuiet("ActivityManager", m.toString());
                        final long j10 = j3;
                        activityManagerService.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda23
                            @Override // java.lang.Runnable
                            public final void run() {
                                String str;
                                ActivityManagerService activityManagerService2 = ActivityManagerService.this;
                                ProcessRecord processRecord2 = processRecord;
                                long j11 = j10;
                                long j12 = j2;
                                activityManagerService2.getClass();
                                ActivityManagerService.boostPriorityForLockedSection();
                                synchronized (activityManagerService2) {
                                    try {
                                        if (activityManagerService2.mAppProfiler.isProfilingPss()) {
                                            str = "idle maint (pss ";
                                        } else {
                                            str = "idle maint (rss " + j11 + " from " + j12 + ")";
                                        }
                                        String str2 = str;
                                        processRecord2.killLocked(13, 6, str2, str2, true, true);
                                    } catch (Throwable th) {
                                        ActivityManagerService.resetPriorityAfterLockedSection();
                                        throw th;
                                    }
                                }
                                ActivityManagerService.resetPriorityAfterLockedSection();
                            }
                        });
                    }
                }, false);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public final void preloadBoosterAppsFromIpm(final List list, int i) {
        if (this.mDynamicHiddenApp == null) {
            return;
        }
        this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService.24
            @Override // java.lang.Runnable
            public final void run() {
                if (list == null) {
                    ActivityManagerService.this.mDynamicHiddenApp.mBGProtectManager.addAllowlistList(false);
                } else {
                    ActivityManagerService.this.mDynamicHiddenApp.getClass();
                    if (!BGProtectManager.allowListCleared) {
                        ActivityManagerService.this.mDynamicHiddenApp.mBGProtectManager.removeAllowlistByBUB();
                    }
                }
                ActivityManagerProcLock activityManagerProcLock = ActivityManagerService.this.mProcLock;
                ActivityManagerService.boostPriorityForProcLockedSection();
                synchronized (activityManagerProcLock) {
                    try {
                        ArrayList arrayList = ActivityManagerService.this.mProcessList.mLruProcesses;
                        for (int size = arrayList.size() - 1; size >= 0; size--) {
                            ProcessRecord processRecord = (ProcessRecord) arrayList.get(size);
                            DynamicHiddenApp dynamicHiddenApp = ActivityManagerService.this.mDynamicHiddenApp;
                            String str = processRecord.processName;
                            int i2 = processRecord.userId;
                            dynamicHiddenApp.mBGProtectManager.getClass();
                            if (BGProtectManager.appIsPickedProcess(i2, str) >= 0) {
                                processRecord.mIpmLaunchType = -1;
                            }
                            List list2 = list;
                            if (list2 != null) {
                                if (list2.contains(processRecord.userId + "_&_" + processRecord.processName)) {
                                    processRecord.mIpmLaunchType = 1;
                                }
                            }
                            if (list == null) {
                                ActivityManagerService.this.mDynamicHiddenApp.resetKillExceptFlag(processRecord);
                            } else {
                                ActivityManagerService.this.mDynamicHiddenApp.getClass();
                                if (!BGProtectManager.allowListCleared) {
                                    ActivityManagerService.this.mDynamicHiddenApp.resetKillExceptFlag(processRecord);
                                }
                            }
                        }
                    } catch (Throwable th) {
                        ActivityManagerService.resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                ActivityManagerService.resetPriorityAfterProcLockedSection();
                DynamicHiddenApp dynamicHiddenApp2 = ActivityManagerService.this.mDynamicHiddenApp;
                List list3 = list;
                dynamicHiddenApp2.mBGProtectManager.getClass();
                BGProtectManager.dha_MLexcept_map.clear();
                if (list3 != null) {
                    Iterator it = list3.iterator();
                    while (it.hasNext()) {
                        BGProtectManager.dha_MLexcept_map.add((String) it.next());
                    }
                }
                if (list == null) {
                    ActivityManagerService.this.mDynamicHiddenApp.getClass();
                    BGProtectManager.allowListCleared = false;
                    Slog.d("ActivityManager", "ALLOWLIST set in bootupbooster");
                } else {
                    ActivityManagerService.this.mDynamicHiddenApp.getClass();
                    if (BGProtectManager.allowListCleared) {
                        return;
                    }
                    ActivityManagerService.this.mDynamicHiddenApp.getClass();
                    BGProtectManager.allowListCleared = true;
                    Slog.d("ActivityManager", "ALLOWLIST clear in bootupbooster");
                }
            }
        });
    }

    public final boolean profileControl(String str, int i, boolean z, ProfilerInfo profilerInfo, int i2) {
        ProcessRecord findProcessLOSP;
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        if (z && (profilerInfo == null || profilerInfo.profileFd == null)) {
            throw new IllegalArgumentException("null profile info or fd");
        }
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            if (str != null) {
                try {
                    findProcessLOSP = findProcessLOSP(i, str, "profileControl");
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            } else {
                findProcessLOSP = null;
            }
            if (z && (findProcessLOSP == null || findProcessLOSP.mThread == null)) {
                throw new IllegalArgumentException("Unknown process: " + str);
            }
        }
        resetPriorityAfterProcLockedSection();
        synchronized (this.mAppProfiler.mProfilerLock) {
            this.mAppProfiler.profileControlLPf(findProcessLOSP, z, profilerInfo, i2);
        }
        return true;
    }

    public final void publishContentProviders(IApplicationThread iApplicationThread, List list) {
        ProviderInfo providerInfo;
        String str;
        if (Trace.isTagEnabled(64L)) {
            StringBuilder m = BootReceiver$$ExternalSyntheticOutline0.m(256, "publishContentProviders: ");
            if (list != null) {
                int size = list.size();
                boolean z = true;
                int i = 0;
                while (true) {
                    if (i >= size) {
                        break;
                    }
                    ContentProviderHolder contentProviderHolder = (ContentProviderHolder) list.get(i);
                    if (contentProviderHolder != null && (providerInfo = contentProviderHolder.info) != null && (str = providerInfo.authority) != null) {
                        if (m.length() + str.length() > 256) {
                            m.append("[[TRUNCATED]]");
                            break;
                        }
                        if (z) {
                            z = false;
                        } else {
                            m.append(';');
                        }
                        m.append(contentProviderHolder.info.authority);
                    }
                    i++;
                }
            }
            Trace.traceBegin(64L, m.toString());
        }
        try {
            this.mCpHelper.publishContentProviders(iApplicationThread, list);
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public final void publishService(IBinder iBinder, Intent intent, IBinder iBinder2) {
        if (intent != null && intent.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (!(iBinder instanceof ServiceRecord)) {
                    throw new IllegalArgumentException("Invalid service token");
                }
                this.mServices.publishServiceLocked((ServiceRecord) iBinder, intent, iBinder2);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void pushTempAllowlist() {
        int size;
        PendingTempAllowlist[] pendingTempAllowlistArr;
        int i;
        int indexOfKey;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerProcLock) {
                    try {
                        size = this.mPendingTempAllowlist.size();
                        pendingTempAllowlistArr = new PendingTempAllowlist[size];
                        for (int i2 = 0; i2 < size; i2++) {
                            pendingTempAllowlistArr[i2] = this.mPendingTempAllowlist.valueAt(i2);
                        }
                    } catch (Throwable th) {
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } finally {
            }
        }
        resetPriorityAfterLockedSection();
        if (this.mLocalDeviceIdleController != null) {
            for (int i3 = 0; i3 < size; i3++) {
                PendingTempAllowlist pendingTempAllowlist = pendingTempAllowlistArr[i3];
                this.mLocalDeviceIdleController.addPowerSaveTempWhitelistAppDirect(pendingTempAllowlist.targetUid, pendingTempAllowlist.duration, pendingTempAllowlist.type, false, pendingTempAllowlist.reasonCode, pendingTempAllowlist.tag, pendingTempAllowlist.callingUid);
            }
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActivityManagerProcLock activityManagerProcLock2 = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerProcLock2) {
                    for (i = 0; i < size; i++) {
                        try {
                            PendingTempAllowlist pendingTempAllowlist2 = pendingTempAllowlistArr[i];
                            PendingTempAllowlists pendingTempAllowlists = this.mPendingTempAllowlist;
                            int i4 = pendingTempAllowlist2.targetUid;
                            synchronized (pendingTempAllowlists.mPendingTempAllowlist) {
                                indexOfKey = pendingTempAllowlists.mPendingTempAllowlist.indexOfKey(i4);
                            }
                            if (indexOfKey >= 0 && this.mPendingTempAllowlist.valueAt(indexOfKey) == pendingTempAllowlist2) {
                                PendingTempAllowlists pendingTempAllowlists2 = this.mPendingTempAllowlist;
                                synchronized (pendingTempAllowlists2.mPendingTempAllowlist) {
                                    pendingTempAllowlists2.mPendingTempAllowlist.removeAt(indexOfKey);
                                }
                            }
                        } finally {
                            resetPriorityAfterProcLockedSection();
                        }
                    }
                }
                resetPriorityAfterProcLockedSection();
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public final ParceledListSlice queryIntentComponentsForIntentSender(IIntentSender iIntentSender, int i) {
        enforceCallingPermission("android.permission.GET_INTENT_SENDER_INTENT", "queryIntentComponentsForIntentSender()");
        Objects.requireNonNull(iIntentSender);
        try {
            PendingIntentRecord pendingIntentRecord = (PendingIntentRecord) iIntentSender;
            PendingIntentRecord.Key key = pendingIntentRecord.key;
            Intent intent = key.requestIntent;
            if (intent == null) {
                return null;
            }
            int i2 = pendingIntentRecord.uid;
            int i3 = key.userId;
            String str = key.requestResolvedType;
            int i4 = key.type;
            if (i4 == 1) {
                long j = i;
                PackageManagerService.PackageManagerInternalImpl packageManagerInternalImpl = (PackageManagerService.PackageManagerInternalImpl) this.mPackageManagerInt;
                return new ParceledListSlice(PackageManagerService.this.mResolveIntentHelper.queryIntentReceiversInternal(packageManagerInternalImpl.mService.snapshotComputer(), intent, str, j, i3, i2, -1, false));
            }
            if (i4 == 2) {
                return new ParceledListSlice(this.mPackageManagerInt.queryIntentActivities(intent, str, i, i2, i3));
            }
            if (i4 != 4 && i4 != 5) {
                throw new IllegalStateException("Unsupported intent sender type: " + pendingIntentRecord.key.type);
            }
            long j2 = i;
            PackageManagerService.PackageManagerInternalImpl packageManagerInternalImpl2 = (PackageManagerService.PackageManagerInternalImpl) this.mPackageManagerInt;
            return new ParceledListSlice(packageManagerInternalImpl2.mService.snapshotComputer().queryIntentServicesInternal(intent, intent.resolveTypeIfNeeded(PackageManagerService.this.mContext.getContentResolver()), j2, i3, i2, -1, false));
        } catch (ClassCastException unused) {
            return null;
        }
    }

    public final String[] queryRegisteredReceiverPackages(Intent intent, String str, int i) {
        String[] strArr;
        ActivityManagerServiceExt activityManagerServiceExt = this.mExt;
        activityManagerServiceExt.getClass();
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        int appId = UserHandle.getAppId(callingUid);
        if (appId != 1000 && appId != 1001 && appId != 2000 && appId != 1002 && appId != 1027 && callingUid != 0) {
            String str2 = "Permission Denial: not allowed to query registered receiver packages from pid=" + callingPid + ", uid=" + callingUid;
            Slog.w("ActivityManagerServiceExt", str2);
            throw new SecurityException(str2);
        }
        ActivityManagerService activityManagerService = activityManagerServiceExt.mService;
        boostPriorityForLockedSection();
        synchronized (activityManagerService) {
            try {
                strArr = new String[0];
                activityManagerServiceExt.mService.verifyBroadcastLocked(intent);
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    List queryIntent = activityManagerServiceExt.mService.mReceiverResolver.queryIntent(((PackageManagerService.PackageManagerInternalImpl) activityManagerServiceExt.mService.getPackageManagerInternal()).mService.snapshotComputer(), intent, str, false, activityManagerServiceExt.mService.mUserController.handleIncomingUser(callingPid, callingUid, i, true, 0, "queryRegisteredReceiverPackages", null), 0L);
                    if (queryIntent != null) {
                        ArraySet arraySet = new ArraySet();
                        for (int i2 = 0; i2 < queryIntent.size(); i2++) {
                            arraySet.add(((BroadcastFilter) queryIntent.get(i2)).packageName);
                        }
                        strArr = (String[]) arraySet.toArray(new String[arraySet.size()]);
                    }
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                } catch (Throwable th) {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                    throw th;
                }
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
        return strArr;
    }

    public final boolean refContentProvider(IBinder iBinder, int i, int i2) {
        ProviderInfo providerInfo;
        this.mCpHelper.getClass();
        try {
            ContentProviderConnection contentProviderConnection = (ContentProviderConnection) iBinder;
            if (contentProviderConnection == null) {
                throw new NullPointerException("connection is null");
            }
            ContentProviderRecord contentProviderRecord = contentProviderConnection.provider;
            traceBegin("refContentProvider: ", (contentProviderRecord == null || (providerInfo = contentProviderRecord.info) == null) ? "" : providerInfo.authority);
            try {
                contentProviderConnection.adjustCounts(i, i2);
                return !contentProviderConnection.dead;
            } finally {
                Trace.traceEnd(64L);
            }
        } catch (ClassCastException unused) {
            String str = "refContentProvider: " + iBinder + " not a ContentProviderConnection";
            Slog.w("ContentProviderHelper", str);
            throw new IllegalArgumentException(str);
        }
    }

    public final void registerDedicatedCallback(RemoteCallback remoteCallback, int i) {
        if (CoreRune.FW_DEDICATED_MEMORY) {
            checkLongLivePermissions("registerDedicatedCallback");
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    ActivityManagerServiceExt activityManagerServiceExt = this.mExt;
                    if (i == 1) {
                        ActivityTaskManagerService activityTaskManagerService = activityManagerServiceExt.mAtmService;
                        synchronized (activityTaskManagerService.mGlobalLockWithoutBoost) {
                            activityTaskManagerService.mCb4Task = Optional.ofNullable(remoteCallback);
                        }
                    } else {
                        activityManagerServiceExt.getClass();
                        if (i == 0) {
                            activityManagerServiceExt.mCb4Process = Optional.ofNullable(remoteCallback);
                        }
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
        }
    }

    public final boolean registerForegroundServiceObserver(IForegroundServiceObserver iForegroundServiceObserver) {
        boolean registerForegroundServiceObserverLocked;
        int callingUid = Binder.getCallingUid();
        int checkCallingPermission = checkCallingPermission("android.permission.MANAGE_ACTIVITY_TASKS");
        int checkCallingPermission2 = checkCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL");
        if (checkCallingPermission == 0 && checkCallingPermission2 == 0) {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    registerForegroundServiceObserverLocked = this.mServices.registerForegroundServiceObserverLocked(callingUid, iForegroundServiceObserver);
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            return registerForegroundServiceObserverLocked;
        }
        String str = "Permission Denial: registerForegroundServiceObserver() from pid=" + Binder.getCallingPid() + ", uid=" + callingUid + " requires android.permission.MANAGE_ACTIVITY_TASKS and android.permission.INTERACT_ACROSS_USERS_FULL";
        Slog.w("ActivityManager", str);
        throw new SecurityException(str);
    }

    public final boolean registerIntentSenderCancelListenerEx(IIntentSender iIntentSender, IResultReceiver iResultReceiver) {
        PendingIntentController pendingIntentController = this.mPendingIntentController;
        pendingIntentController.getClass();
        if (!(iIntentSender instanceof PendingIntentRecord)) {
            Slog.w("ActivityManager", "registerIntentSenderCancelListener called on non-PendingIntentRecord");
            return true;
        }
        synchronized (pendingIntentController.mLock) {
            try {
                PendingIntentRecord pendingIntentRecord = (PendingIntentRecord) iIntentSender;
                if (pendingIntentRecord.canceled) {
                    return false;
                }
                if (pendingIntentRecord.mCancelCallbacks == null) {
                    pendingIntentRecord.mCancelCallbacks = new RemoteCallbackList();
                }
                pendingIntentRecord.mCancelCallbacks.register(iResultReceiver);
                return true;
            } finally {
            }
        }
    }

    public final void registerProcessObserver(IProcessObserver iProcessObserver) {
        enforceCallingPermission("android.permission.SET_ACTIVITY_WATCHER", "registerProcessObserver()");
        this.mProcessList.mProcessObservers.register(iProcessObserver);
    }

    public final Intent registerReceiver(IApplicationThread iApplicationThread, String str, IIntentReceiver iIntentReceiver, IntentFilter intentFilter, String str2, int i, int i2) {
        return registerReceiverWithFeature(iApplicationThread, str, null, null, iIntentReceiver, intentFilter, str2, i, i2);
    }

    public final Intent registerReceiverWithFeature(IApplicationThread iApplicationThread, String str, String str2, String str3, IIntentReceiver iIntentReceiver, IntentFilter intentFilter, String str4, int i, int i2) {
        Flags.traceReceiverRegistration();
        if (Trace.isTagEnabled(64L)) {
            StringBuilder sb = new StringBuilder("registerReceiver: ");
            sb.append(Binder.getCallingUid());
            sb.append('/');
            sb.append(str3 == null ? "null" : str3);
            sb.append('/');
            int safeCountActions = intentFilter.safeCountActions();
            if (safeCountActions > 0) {
                for (int i3 = 0; i3 < safeCountActions; i3++) {
                    sb.append(intentFilter.getAction(i3));
                    if (i3 != safeCountActions - 1) {
                        sb.append(',');
                    }
                }
            } else {
                sb.append("null");
            }
            sb.append("/u");
            sb.append(i);
            sb.append('/');
            sb.append(iIntentReceiver != null ? iIntentReceiver.asBinder() : "null");
            Trace.traceBegin(64L, sb.toString());
        }
        try {
            Intent registerReceiverWithFeatureTraced = registerReceiverWithFeatureTraced(iApplicationThread, str, str2, str3, iIntentReceiver, intentFilter, str4, i, i2);
            Flags.traceReceiverRegistration();
            if (Trace.isTagEnabled(64L)) {
                Trace.traceEnd(64L);
            }
            return registerReceiverWithFeatureTraced;
        } finally {
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:245:0x021d, code lost:
    
        if ((r1 & 4) == 0) goto L118;
     */
    /* JADX WARN: Code restructure failed: missing block: B:247:0x0222, code lost:
    
        if ((r1 & 4) == 0) goto L118;
     */
    /* JADX WARN: Code restructure failed: missing block: B:49:0x0107, code lost:
    
        r14.setPriority(1000);
     */
    /* JADX WARN: Removed duplicated region for block: B:122:0x0228  */
    /* JADX WARN: Removed duplicated region for block: B:124:0x022f  */
    /* JADX WARN: Removed duplicated region for block: B:143:0x028c  */
    /* JADX WARN: Removed duplicated region for block: B:145:0x029b A[RETURN] */
    /* JADX WARN: Removed duplicated region for block: B:146:0x029c  */
    /* JADX WARN: Removed duplicated region for block: B:236:0x0297  */
    /* JADX WARN: Removed duplicated region for block: B:237:0x0288  */
    /* JADX WARN: Removed duplicated region for block: B:238:0x022b  */
    /* JADX WARN: Removed duplicated region for block: B:254:0x0123  */
    /* JADX WARN: Removed duplicated region for block: B:52:0x0113  */
    /* JADX WARN: Removed duplicated region for block: B:56:0x0132  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final android.content.Intent registerReceiverWithFeatureTraced(android.app.IApplicationThread r63, java.lang.String r64, java.lang.String r65, java.lang.String r66, android.content.IIntentReceiver r67, android.content.IntentFilter r68, java.lang.String r69, int r70, int r71) {
        /*
            Method dump skipped, instructions count: 1314
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.registerReceiverWithFeatureTraced(android.app.IApplicationThread, java.lang.String, java.lang.String, java.lang.String, android.content.IIntentReceiver, android.content.IntentFilter, java.lang.String, int, int):android.content.Intent");
    }

    public final synchronized void registerStrictModeCallback(IBinder iBinder) {
        boostPriorityForLockedSection();
        final int callingPid = Binder.getCallingPid();
        this.mStrictModeCallbacks.put(callingPid, IUnsafeIntentStrictModeCallback.Stub.asInterface(iBinder));
        try {
            iBinder.linkToDeath(new IBinder.DeathRecipient() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda8
                @Override // android.os.IBinder.DeathRecipient
                public final void binderDied() {
                    ActivityManagerService activityManagerService = ActivityManagerService.this;
                    int i = callingPid;
                    activityManagerService.getClass();
                    ActivityManagerService.boostPriorityForLockedSection();
                    synchronized (activityManagerService) {
                        try {
                            activityManagerService.mStrictModeCallbacks.remove(i);
                        } catch (Throwable th) {
                            ActivityManagerService.resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                    ActivityManagerService.resetPriorityAfterLockedSection();
                }
            }, 0);
        } catch (RemoteException unused) {
            this.mStrictModeCallbacks.remove(callingPid);
        }
        resetPriorityAfterLockedSection();
    }

    public final void registerTaskStackListener(ITaskStackListener iTaskStackListener) {
        this.mActivityTaskManager.registerTaskStackListener(iTaskStackListener);
    }

    public final void registerUidFrozenStateChangedCallback(IUidFrozenStateChangedCallback iUidFrozenStateChangedCallback) {
        Preconditions.checkNotNull(iUidFrozenStateChangedCallback, "callback cannot be null");
        enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "registerUidFrozenStateChangedCallback()");
        synchronized (this.mUidFrozenStateChangedCallbackList) {
            try {
                if (!this.mUidFrozenStateChangedCallbackList.register(iUidFrozenStateChangedCallback)) {
                    Slog.w("ActivityManager", "Failed to register with RemoteCallbackList!");
                }
            } catch (Throwable th) {
                throw th;
            }
        }
    }

    public final void registerUidObserver(IUidObserver iUidObserver, int i, int i2, String str) {
        registerUidObserverForUids(iUidObserver, i, i2, str, null);
    }

    public final IBinder registerUidObserverForUids(IUidObserver iUidObserver, int i, int i2, String str, int[] iArr) {
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "registerUidObserver");
        }
        return this.mUidObserverController.register(iUidObserver, i, i2, str, Binder.getCallingUid(), iArr);
    }

    public final void registerUserSwitchObserver(IUserSwitchObserver iUserSwitchObserver, String str) {
        UserController userController = this.mUserController;
        userController.getClass();
        Objects.requireNonNull(str, "Observer name cannot be null");
        userController.checkCallingHasOneOfThosePermissions("registerUserSwitchObserver", "android.permission.INTERACT_ACROSS_USERS_FULL");
        userController.mUserSwitchObservers.register(iUserSwitchObserver, str);
    }

    public final void removeApplicationStartInfoCompleteListener(IApplicationStartInfoCompleteListener iApplicationStartInfoCompleteListener, int i) {
        enforceNotIsolatedCaller("clearApplicationStartInfoCompleteListener");
        if (i == -1 || i == -2) {
            throw new IllegalArgumentException("Unsupported userId");
        }
        int callingUid = Binder.getCallingUid();
        this.mUserController.handleIncomingUser(Binder.getCallingPid(), callingUid, i, true, 0, "removeApplicationStartInfoCompleteListener", null);
        this.mProcessList.mAppStartInfoTracker.removeStartInfoCompleteListener(iApplicationStartInfoCompleteListener, UserHandle.getUid(i, UserHandle.getAppId(callingUid)), true);
    }

    public final void removeContentProvider(IBinder iBinder, boolean z) {
        ProviderInfo providerInfo;
        ContentProviderHelper contentProviderHelper = this.mCpHelper;
        contentProviderHelper.mService.getClass();
        enforceNotIsolatedCaller("removeContentProvider");
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            try {
                ContentProviderConnection contentProviderConnection = (ContentProviderConnection) iBinder;
                if (contentProviderConnection == null) {
                    throw new NullPointerException("connection is null");
                }
                ContentProviderRecord contentProviderRecord = contentProviderConnection.provider;
                traceBegin("removeContentProvider: ", (contentProviderRecord == null || (providerInfo = contentProviderRecord.info) == null) ? "" : providerInfo.authority);
                try {
                    ActivityManagerService activityManagerService = contentProviderHelper.mService;
                    boostPriorityForLockedSection();
                    synchronized (activityManagerService) {
                        try {
                            contentProviderHelper.decProviderCountLocked(contentProviderConnection, null, null, z, true, true);
                        } catch (Throwable th) {
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                    resetPriorityAfterLockedSection();
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                } finally {
                    Trace.traceEnd(64L);
                }
            } catch (ClassCastException unused) {
                String str = "removeContentProvider: " + iBinder + " not a ContentProviderConnection";
                Slog.w("ContentProviderHelper", str);
                throw new IllegalArgumentException(str);
            }
        } catch (Throwable th2) {
            Binder.restoreCallingIdentity(clearCallingIdentity);
            throw th2;
        }
    }

    public final void removeContentProviderExternal(String str, IBinder iBinder) {
        traceBegin("removeContentProviderExternal: ", str);
        try {
            removeContentProviderExternalAsUser(str, iBinder, UserHandle.getCallingUserId());
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public final void removeContentProviderExternalAsUser(String str, IBinder iBinder, int i) {
        traceBegin("removeContentProviderExternalAsUser: ", str);
        try {
            ContentProviderHelper contentProviderHelper = this.mCpHelper;
            contentProviderHelper.mService.enforceCallingPermission("android.permission.ACCESS_CONTENT_PROVIDERS_EXTERNALLY", "Do not have permission in call removeContentProviderExternal()");
            long clearCallingIdentity = Binder.clearCallingIdentity();
            try {
                contentProviderHelper.removeContentProviderExternalUnchecked(i, iBinder, str);
            } finally {
                Binder.restoreCallingIdentity(clearCallingIdentity);
            }
        } finally {
            Trace.traceEnd(64L);
        }
    }

    public final boolean removeLongLiveApp(String str) {
        if (!CoreRune.FW_DEDICATED_MEMORY) {
            return false;
        }
        checkLongLivePermissions("removeLongLiveApp");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (!this.mExt.removeLongLivePackageLocked(str)) {
                    resetPriorityAfterLockedSection();
                    return false;
                }
                updateOomAdjLocked(0);
                resetPriorityAfterLockedSection();
                return true;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final void removeOverridePermissionState(int i, int i2, String str) {
        ArrayMap arrayMap;
        AccessCheckDelegateHelper accessCheckDelegateHelper = getAccessCheckDelegateHelper();
        accessCheckDelegateHelper.getClass();
        if (UserHandle.getCallingAppId() != 0) {
            throw new SecurityException("Only root can override permissions.");
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = accessCheckDelegateHelper.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                AccessCheckDelegate$AccessCheckDelegateImpl accessCheckDelegate$AccessCheckDelegateImpl = accessCheckDelegateHelper.mAccessCheckDelegate;
                if (accessCheckDelegate$AccessCheckDelegateImpl == null) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                if (!accessCheckDelegate$AccessCheckDelegateImpl.isDelegateAndOwnerUid(i)) {
                    if (accessCheckDelegate$AccessCheckDelegateImpl.mOverridePermissionStates != null) {
                        throw new SecurityException("Only the granter of current overrides can remove them.");
                    }
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                SparseArray sparseArray = accessCheckDelegate$AccessCheckDelegateImpl.mOverridePermissionStates;
                if (sparseArray != null && (arrayMap = (ArrayMap) sparseArray.get(i2)) != null) {
                    arrayMap.remove(str);
                    PackageManager.invalidatePackageInfoCache();
                    if (arrayMap.isEmpty()) {
                        accessCheckDelegate$AccessCheckDelegateImpl.mOverridePermissionStates.remove(i2);
                    }
                    if (accessCheckDelegate$AccessCheckDelegateImpl.mOverridePermissionStates.size() == 0) {
                        accessCheckDelegate$AccessCheckDelegateImpl.mOverridePermissionStates = null;
                    }
                }
                if (!accessCheckDelegate$AccessCheckDelegateImpl.hasDelegateOrOverrides()) {
                    accessCheckDelegateHelper.removeAccessCheckDelegateLPr();
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public final boolean removePidLocked(int i, ProcessRecord processRecord) {
        boolean z;
        synchronized (this.mPidsSelfLocked) {
            PidMap pidMap = this.mPidsSelfLocked;
            ProcessRecord processRecord2 = (ProcessRecord) ((SparseArray) pidMap.mPidMap).get(i);
            if (processRecord2 == null || processRecord2.mStartSeq != processRecord.mStartSeq) {
                z = false;
            } else {
                ((SparseArray) pidMap.mPidMap).remove(i);
                z = true;
            }
        }
        if (z) {
            SparseArray sparseArray = sActiveProcessInfoSelfLocked;
            synchronized (sparseArray) {
                sparseArray.remove(i);
            }
            ActivityTaskManagerService.LocalService localService = (ActivityTaskManagerService.LocalService) this.mAtmInternal;
            WindowManagerGlobalLock windowManagerGlobalLock = ActivityTaskManagerService.this.mGlobalLock;
            WindowManagerService.boostPriorityForLockedSection();
            synchronized (windowManagerGlobalLock) {
                try {
                    WindowProcessControllerMap windowProcessControllerMap = ActivityTaskManagerService.this.mProcessMap;
                    WindowProcessController windowProcessController = (WindowProcessController) windowProcessControllerMap.mPidMap.get(i);
                    if (windowProcessController != null) {
                        windowProcessControllerMap.mPidMap.remove(i);
                        windowProcessControllerMap.removeProcessFromUidMap(windowProcessController);
                        windowProcessController.unregisterConfigurationListeners();
                    }
                } catch (Throwable th) {
                    WindowManagerService.resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            WindowManagerService.resetPriorityAfterLockedSection();
        }
        return z;
    }

    public final void removeReceiverLocked(ReceiverList receiverList) {
        this.mRegisteredReceivers.remove(receiverList.receiver.asBinder());
        for (int size = receiverList.size() - 1; size >= 0; size--) {
            this.mReceiverResolver.removeFilter((BroadcastFilter) receiverList.get(size));
        }
    }

    public final boolean removeTask(int i) {
        return this.mActivityTaskManager.removeTask(i);
    }

    public final void removeUidFromObserver(IBinder iBinder, String str, int i) {
        if (!hasUsageStatsPermission(str)) {
            enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "registerUidObserver");
        }
        Handler handler = this.mUidObserverController.mHandler;
        handler.sendMessage(Message.obtain(handler, 81, i, 0, iBinder));
    }

    public final void reportAbnormalUsage(int i, int i2) {
        ProcessRecord processRecord;
        int callingPid = Binder.getCallingPid();
        if (Binder.getCallingUid() != 1000 && callingPid != i) {
            Slog.e("ActivityManager", "PID mismatch: PID=" + i + ", CallingPid=" + callingPid);
            return;
        }
        synchronized (this.mPidsSelfLocked) {
            processRecord = this.mPidsSelfLocked.get(i);
        }
        if (processRecord == null) {
            NandswapManager$$ExternalSyntheticOutline0.m(i, "Invalid PID: ", "ActivityManager");
            return;
        }
        Slog.i("ActivityManager", "excessive resource usage reported: " + processRecord.toShortString() + ", type: " + i2);
        AbnormalUsageService abnormalUsageService = this.mAbnormalUsageService;
        abnormalUsageService.getClass();
        if (i2 == 1) {
            processRecord.mExcessiveResourceUsage = true;
            String str = processRecord.info.packageName;
            Slog.i("AbnormalUsageService", "print memory info about excessive memory usage for " + str);
            int[] iArr = {i};
            Debug.MemoryInfo[] processMemoryInfo = abnormalUsageService.mAm.getProcessMemoryInfo(iArr);
            StringBuilder sb = new StringBuilder("[pid] : ");
            sb.append(iArr[0]);
            sb.append("[process name] : ");
            sb.append(str);
            Slog.i("AbnormalUsageService", sb.toString());
            for (Debug.MemoryInfo memoryInfo : processMemoryInfo) {
                Slog.i("AbnormalUsageService", "[MemoryInfo] TotalPss: " + memoryInfo.getTotalPss() + ", NativePss: " + memoryInfo.nativePss + ", DalvikPss: " + memoryInfo.dalvikPss);
            }
        }
    }

    public final void reportGlobalUsageEvent(int i) {
        int currentUserId = this.mUserController.getCurrentUserId();
        this.mUsageStatsService.reportEvent(currentUserId, i, "android");
        int[] currentProfileIds = this.mUserController.getCurrentProfileIds();
        if (currentProfileIds != null) {
            for (int length = currentProfileIds.length - 1; length >= 0; length--) {
                if (currentProfileIds[length] != currentUserId) {
                    this.mUsageStatsService.reportEvent(currentProfileIds[length], i, "android");
                }
            }
        }
    }

    public final void reportStartInfoViewTimestamps(long j, long j2) {
        int callingUid = Binder.getCallingUid();
        int userId = UserHandle.getUserId(callingUid);
        addStartInfoTimestampInternal(6, userId, callingUid, j);
        addStartInfoTimestampInternal(7, userId, callingUid, j2);
    }

    public final void reportStartInstrumentationFailureLocked(IInstrumentationWatcher iInstrumentationWatcher, ComponentName componentName, String str) {
        Slog.w("ActivityManager", str);
        if (iInstrumentationWatcher != null) {
            Bundle bundle = new Bundle();
            bundle.putString("id", "ActivityManagerService");
            bundle.putString("Error", str);
            InstrumentationReporter instrumentationReporter = this.mInstrumentationReporter;
            instrumentationReporter.getClass();
            instrumentationReporter.report(new InstrumentationReporter.Report(0, iInstrumentationWatcher, componentName, -1, bundle));
        }
    }

    public final void reportUidInfoMessageLocked(int i, String str) {
        Slog.i("ActivityManager", str);
        synchronized (this.mOomAdjObserverLock) {
            try {
                if (this.mCurOomAdjObserver != null && i == this.mCurOomAdjUid) {
                    this.mUiHandler.obtainMessage(70, str).sendToTarget();
                }
            } catch (Throwable th) {
                throw th;
            }
        }
    }

    public final void requestBugReport(int i) {
        requestBugReportWithDescription(null, null, i, 0L, null, false);
    }

    public final void requestBugReportWithDescription(String str, String str2, int i) {
        requestBugReportWithDescription(str, str2, i, 0L, null, false);
    }

    public final void requestBugReportWithDescription(String str, String str2, int i, long j, Uri uri, boolean z) {
        String str3;
        if (i == 0) {
            str3 = "bugreportfull";
        } else if (i == 1) {
            str3 = "bugreportplus";
        } else if (i == 2) {
            str3 = "bugreportremote";
        } else if (i == 3) {
            str3 = "bugreportwear";
        } else if (i == 4) {
            str3 = "bugreporttelephony";
        } else if (i == 5) {
            str3 = "bugreportwifi";
        } else {
            if (i != 7) {
                throw new IllegalArgumentException(VibrationParam$1$$ExternalSyntheticOutline0.m(i, "Provided bugreport type is not correct, value: "));
            }
            str3 = "bugreportonboarding";
        }
        StringBuilder m = Preconditions$$ExternalSyntheticOutline0.m(str3, " requested by UID ");
        m.append(Binder.getCallingUid());
        Slog.i("ActivityManager", m.toString());
        enforceCallingPermission("android.permission.DUMP", "requestBugReport");
        if (!TextUtils.isEmpty(str)) {
            if (str.length() > 100) {
                throw new IllegalArgumentException("shareTitle should be less than 100 characters");
            }
            if (!TextUtils.isEmpty(str2) && str2.length() > 150) {
                throw new IllegalArgumentException("shareDescription should be less than 150 characters");
            }
            GmsAlarmManager$$ExternalSyntheticOutline0.m("Bugreport notification title ", str, " description ", str2, "ActivityManager");
        }
        Intent intent = new Intent();
        intent.setAction("com.android.internal.intent.action.BUGREPORT_REQUESTED");
        intent.setPackage("com.android.shell");
        intent.putExtra("android.intent.extra.BUGREPORT_TYPE", i);
        intent.putExtra("android.intent.extra.BUGREPORT_NONCE", j);
        if (uri != null) {
            intent.putExtra("android.intent.extra.EXTRA_ATTACHMENT_URI", uri);
            intent.addFlags(1);
        }
        intent.addFlags(268435456);
        intent.addFlags(16777216);
        intent.putExtra("android.intent.extra.USE_CUSTOM_BUGREPORT", z);
        if (str != null) {
            intent.putExtra("android.intent.extra.TITLE", str);
        }
        if (str2 != null) {
            intent.putExtra("android.intent.extra.DESCRIPTION", str2);
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            if (i == 2) {
                this.mContext.sendBroadcastAsUser(intent, UserHandle.SYSTEM);
            } else {
                this.mContext.sendBroadcastAsUser(intent, this.mUserController.getCurrentUser().getUserHandle());
            }
            Binder.restoreCallingIdentity(clearCallingIdentity);
        } catch (Throwable th) {
            Binder.restoreCallingIdentity(clearCallingIdentity);
            throw th;
        }
    }

    public final void requestBugReportWithExtraAttachment(Uri uri) {
        requestBugReportWithDescription(null, null, 1, 0L, uri, false);
    }

    public final void requestFullBugReport() {
        requestBugReportWithDescription(null, null, 0);
    }

    public final void requestInteractiveBugReport() {
        requestBugReportWithDescription(null, null, 1);
    }

    public final void requestInteractiveBugReportWithDescription(String str, String str2) {
        requestBugReportWithDescription(str, str2, 1);
    }

    public final void requestRemoteBugReport(long j) {
        requestBugReportWithDescription(null, null, 2, j, null, false);
    }

    public final void requestSystemServerHeapDump() {
        ProcessRecord processRecord;
        if (!Build.IS_DEBUGGABLE) {
            Slog.wtf("ActivityManager", "requestSystemServerHeapDump called on a user build");
            return;
        }
        if (Binder.getCallingUid() != 1000) {
            throw new SecurityException("Only the system process is allowed to request a system heap dump");
        }
        synchronized (this.mPidsSelfLocked) {
            processRecord = this.mPidsSelfLocked.get(Process.myPid());
        }
        if (processRecord == null) {
            Slog.w("ActivityManager", "system process not in mPidsSelfLocked: " + Process.myPid());
        } else {
            synchronized (this.mAppProfiler.mProfilerLock) {
                this.mAppProfiler.startHeapDumpLPf(processRecord.mProfile, true);
            }
        }
    }

    public final void requestTelephonyBugReport(String str, String str2) {
        requestBugReportWithDescription(str, str2, 4);
    }

    public final void requestWifiBugReport(String str, String str2) {
        requestBugReportWithDescription(str, str2, 5);
    }

    public final void resetAbnormalList() {
        if (checkCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL") != 0) {
            Slog.d("ActivityManager", "resetAbnormalList - permission is not granted. callingUid: " + Binder.getCallingUid());
            return;
        }
        ProcessCpusetController processCpusetController = this.mProcessCpusetController;
        if (processCpusetController != null) {
            ActivityManagerService activityManagerService = processCpusetController.mAm;
            boostPriorityForLockedSection();
            synchronized (activityManagerService) {
                try {
                    for (int size = processCpusetController.mAm.mProcessList.mLruProcesses.size() - 1; size >= 0; size--) {
                        ((ProcessRecord) processCpusetController.mAm.mProcessList.mLruProcesses.get(size)).mState.mSlowAbnormal = false;
                    }
                    processCpusetController.mAm.updateOomAdjLocked(24);
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
        }
    }

    public final void resetAppErrors() {
        enforceCallingPermission("android.permission.RESET_APP_ERRORS", "resetAppErrors");
        AppErrors appErrors = this.mAppErrors;
        appErrors.getClass();
        Slog.i("ActivityManager", "Resetting AppErrors");
        synchronized (appErrors.mBadProcessLock) {
            appErrors.mAppsNotReportingCrashes.clear();
            appErrors.mProcessCrashTimes.clear();
            appErrors.mProcessCrashTimesPersistent.clear();
            appErrors.mProcessCrashShowDialogTimes.clear();
            appErrors.mProcessCrashCounts.clear();
            appErrors.mBadProcesses = new ProcessMap();
        }
    }

    public final void resizeTask(int i, Rect rect, int i2) {
        this.mActivityTaskManager.resizeTask(i, rect, i2);
    }

    public final void restart() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        Log.i("ActivityManager", "Sending shutdown broadcast...");
        AnonymousClass11 anonymousClass11 = new AnonymousClass11(this, 1);
        Intent intent = new Intent("android.intent.action.ACTION_SHUTDOWN");
        intent.addFlags(268435456);
        intent.putExtra("android.intent.extra.SHUTDOWN_USERSPACE_ONLY", true);
        anonymousClass11.onReceive(this.mContext, intent);
    }

    public final int restartUserInBackground(int i, int i2) {
        UserController userController = this.mUserController;
        userController.getClass();
        return userController.stopUser(i, true, false, null, userController.new AnonymousClass4(i2));
    }

    public final boolean restrict(int i, int i2, boolean z, String str, int i3) {
        boolean z2 = MARsPolicyManager.MARs_ENABLE;
        return MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE.restrictBySEP(i, i2, str, i3, z);
    }

    public final void resumeAppSwitches() {
        this.mActivityTaskManager.resumeAppSwitches();
    }

    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:113:0x0137 A[Catch: all -> 0x0127, TryCatch #0 {all -> 0x0127, blocks: (B:38:0x00fd, B:49:0x012a, B:51:0x0134, B:53:0x013a, B:55:0x0151, B:56:0x0165, B:57:0x0182, B:113:0x0137, B:115:0x011a), top: B:37:0x00fd }] */
    /* JADX WARN: Removed duplicated region for block: B:115:0x011a A[Catch: all -> 0x0127, TryCatch #0 {all -> 0x0127, blocks: (B:38:0x00fd, B:49:0x012a, B:51:0x0134, B:53:0x013a, B:55:0x0151, B:56:0x0165, B:57:0x0182, B:113:0x0137, B:115:0x011a), top: B:37:0x00fd }] */
    /* JADX WARN: Removed duplicated region for block: B:46:0x0113  */
    /* JADX WARN: Removed duplicated region for block: B:51:0x0134 A[Catch: all -> 0x0127, TryCatch #0 {all -> 0x0127, blocks: (B:38:0x00fd, B:49:0x012a, B:51:0x0134, B:53:0x013a, B:55:0x0151, B:56:0x0165, B:57:0x0182, B:113:0x0137, B:115:0x011a), top: B:37:0x00fd }] */
    /* JADX WARN: Removed duplicated region for block: B:55:0x0151 A[Catch: all -> 0x0127, TryCatch #0 {all -> 0x0127, blocks: (B:38:0x00fd, B:49:0x012a, B:51:0x0134, B:53:0x013a, B:55:0x0151, B:56:0x0165, B:57:0x0182, B:113:0x0137, B:115:0x011a), top: B:37:0x00fd }] */
    /* JADX WARN: Type inference failed for: r3v25 */
    /* JADX WARN: Type inference failed for: r3v27 */
    /* JADX WARN: Type inference failed for: r3v5, types: [boolean] */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final void retrieveSettings() {
        /*
            Method dump skipped, instructions count: 811
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.retrieveSettings():void");
    }

    public final void revokeUriPermission(IApplicationThread iApplicationThread, String str, Uri uri, int i, int i2) {
        ProviderInfo providerInfo;
        enforceNotIsolatedCaller("revokeUriPermission");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ProcessRecord recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                if (recordForAppLOSP == null) {
                    throw new SecurityException("Unable to find app for caller " + iApplicationThread + " when revoking permission to uri " + uri);
                }
                if (uri == null) {
                    Slog.w("ActivityManager", "revokeUriPermission: null uri");
                    resetPriorityAfterLockedSection();
                    return;
                }
                if (!Intent.isAccessUriMode(i)) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                String authority = uri.getAuthority();
                ContentProviderRecord providerByName = this.mCpHelper.mProviderMap.getProviderByName(i2, authority);
                if (providerByName != null) {
                    providerInfo = providerByName.info;
                } else {
                    try {
                        providerInfo = AppGlobals.getPackageManager().resolveContentProvider(authority, 788480, i2);
                    } catch (RemoteException unused) {
                        providerInfo = null;
                    }
                }
                if (providerInfo == null) {
                    Slog.w("ActivityManager", "No content provider found for permission revoke: " + uri.toSafeString());
                    resetPriorityAfterLockedSection();
                    return;
                }
                ((UriGrantsManagerService.LocalService) this.mUgmInternal).revokeUriPermission(recordForAppLOSP.uid, i, new GrantUri(i2, i, uri), str);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final void rotateBroadcastStatsIfNeededLocked() {
        long elapsedRealtime = SystemClock.elapsedRealtime();
        BroadcastStats broadcastStats = this.mCurBroadcastStats;
        if (broadcastStats == null || broadcastStats.mStartRealtime + BackupManagerConstants.DEFAULT_FULL_BACKUP_INTERVAL_MILLISECONDS < elapsedRealtime) {
            this.mLastBroadcastStats = broadcastStats;
            if (broadcastStats != null) {
                broadcastStats.mEndRealtime = SystemClock.elapsedRealtime();
                this.mLastBroadcastStats.mEndUptime = SystemClock.uptimeMillis();
            }
            this.mCurBroadcastStats = new BroadcastStats();
        }
    }

    public final void scheduleApplicationInfoChanged(List list, int i) {
        boolean z;
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "scheduleApplicationInfoChanged()");
        if (list.contains("framework-res")) {
            list.remove("framework-res");
            list.add("android");
            z = true;
        } else {
            z = false;
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            boolean contains = list.contains("android");
            ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerProcLock) {
                try {
                    updateApplicationInfoLOSP(list, contains, i, z);
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterProcLockedSection();
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    Iterator it = list.iterator();
                    while (it.hasNext()) {
                        String str = (String) it.next();
                        try {
                            ApplicationInfo applicationInfo = AppGlobals.getPackageManager().getApplicationInfo(str, 1024L, i);
                            if (applicationInfo != null) {
                                this.mServices.updateServiceApplicationInfoLocked(applicationInfo);
                            }
                        } catch (RemoteException unused) {
                            Slog.w("ActivityManager", "Failed to update " + str + " ApplicationInfo");
                        }
                    }
                } catch (Throwable th2) {
                    resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            resetPriorityAfterLockedSection();
            AppWidgetManagerInternal appWidgetManagerInternal = (AppWidgetManagerInternal) LocalServices.getService(AppWidgetManagerInternal.class);
            if (appWidgetManagerInternal != null) {
                appWidgetManagerInternal.applyResourceOverlaysToWidgets(new HashSet(list), i, contains);
            }
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final void schedulePendingSystemServerWtfs(final LinkedList linkedList) {
        this.mHandler.post(new Runnable() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda24
            @Override // java.lang.Runnable
            public final void run() {
                ProcessRecord processRecord;
                ActivityManagerService activityManagerService = ActivityManagerService.this;
                LinkedList linkedList2 = linkedList;
                synchronized (activityManagerService.mPidsSelfLocked) {
                    processRecord = activityManagerService.mPidsSelfLocked.get(ActivityManagerService.MY_PID);
                }
                Pair pair = (Pair) linkedList2.poll();
                while (pair != null) {
                    LinkedList linkedList3 = linkedList2;
                    activityManagerService.addErrorToDropBox("wtf", processRecord, "system_server", null, null, null, (String) pair.first, null, null, (ApplicationErrorReport.CrashInfo) pair.second, null, null, null, null);
                    pair = (Pair) linkedList3.poll();
                    linkedList2 = linkedList3;
                }
            }
        });
    }

    public final void sendBootBroadcastToAppLocked(ProcessRecord processRecord, Intent intent) {
        intent.setPackage(processRecord.info.packageName);
        intent.putExtra("android.intent.extra.user_handle", processRecord.userId);
        intent.addFlags(150994976);
        int i = MY_PID;
        broadcastIntentLocked(intent, null, new String[]{"android.permission.RECEIVE_BOOT_COMPLETED"}, null, true, i, 1000, i, processRecord.userId);
    }

    public final void sendIdleJobTrigger() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            broadcastIntent(null, new Intent("com.android.server.ACTION_TRIGGER_IDLE").setPackage("android").addFlags(1073741824), null, null, 0, null, null, null, -1, null, false, false, -1);
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final int sendIntentSender(IApplicationThread iApplicationThread, IIntentSender iIntentSender, IBinder iBinder, int i, Intent intent, String str, IIntentReceiver iIntentReceiver, String str2, Bundle bundle) {
        return sendIntentSender(iApplicationThread, iIntentSender, iBinder, i, intent, str, iIntentReceiver, str2, bundle, -1, -1);
    }

    public final void sendPackageBroadcastLocked(int i, int i2, String[] strArr) {
        ProcessList processList = this.mProcessList;
        boolean z = false;
        for (int size = processList.mLruProcesses.size() - 1; size >= 0; size--) {
            ProcessRecord processRecord = (ProcessRecord) processList.mLruProcesses.get(size);
            IApplicationThread iApplicationThread = processRecord.mThread;
            if (iApplicationThread != null && (i2 == -1 || processRecord.userId == i2)) {
                try {
                    for (int length = strArr.length - 1; length >= 0 && !z; length--) {
                        if (strArr[length].equals(processRecord.info.packageName)) {
                            z = true;
                        }
                    }
                    iApplicationThread.dispatchPackageBroadcast(i, strArr);
                } catch (RemoteException unused) {
                }
            }
        }
        if (z) {
            return;
        }
        try {
            AppGlobals.getPackageManager().notifyPackagesReplacedReceived(strArr);
        } catch (RemoteException unused2) {
        }
    }

    public final void serviceDoneExecuting(IBinder iBinder, int i, int i2, int i3, Intent intent) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (!(iBinder instanceof ServiceRecord)) {
                    Slog.e("ActivityManager", "serviceDoneExecuting: Invalid service token=" + iBinder);
                    throw new IllegalArgumentException("Invalid service token");
                }
                this.mServices.serviceDoneExecutingLocked((ServiceRecord) iBinder, i, i2, i3);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void setActivityController(IActivityController iActivityController, boolean z) {
        if (iActivityController != null) {
            Binder.allowBlocking(iActivityController.asBinder());
        }
        this.mActivityTaskManager.setActivityController(iActivityController, z);
    }

    public final void setActivityLocusContext(ComponentName componentName, LocusId locusId, IBinder iBinder) {
        int callingUid = Binder.getCallingUid();
        int callingUserId = UserHandle.getCallingUserId();
        if (getPackageManagerInternal().getPackageUid(componentName.getPackageName(), 0L, callingUserId) != callingUid) {
            StringBuilder m = BatteryService$$ExternalSyntheticOutline0.m(callingUid, "Calling uid ", " cannot set locusIdfor package ");
            m.append(componentName.getPackageName());
            throw new SecurityException(m.toString());
        }
        WindowManagerGlobalLock windowManagerGlobalLock = this.mActivityTaskManager.mGlobalLock;
        WindowManagerService.boostPriorityForLockedSection();
        synchronized (windowManagerGlobalLock) {
            try {
                ActivityRecord isInRootTaskLocked = ActivityRecord.isInRootTaskLocked(iBinder);
                if (isInRootTaskLocked != null && !Objects.equals(locusId, isInRootTaskLocked.mLocusId)) {
                    isInRootTaskLocked.mLocusId = locusId;
                    Task task = isInRootTaskLocked.task;
                    if (task != null) {
                        task.dispatchTaskInfoChangedIfNeeded(false);
                    }
                }
            } catch (Throwable th) {
                WindowManagerService.resetPriorityAfterLockedSection();
                throw th;
            }
        }
        WindowManagerService.resetPriorityAfterLockedSection();
        if (this.mUsageStatsService != null) {
            UsageStatsService.LocalService localService = (UsageStatsService.LocalService) this.mUsageStatsService;
            localService.getClass();
            if (locusId == null) {
                return;
            }
            UsageEvents.Event event = new UsageEvents.Event(30, SystemClock.elapsedRealtime());
            event.mLocusId = locusId.getId();
            event.mPackage = componentName.getPackageName();
            event.mClass = componentName.getClassName();
            event.mInstanceId = iBinder.hashCode();
            UsageStatsService.this.reportEventOrAddToQueue(callingUserId, event);
        }
    }

    public final void setAgentApp(String str, String str2) {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        synchronized (this.mAppProfiler.mProfilerLock) {
            this.mAppProfiler.setAgentAppLPf(str, str2);
        }
    }

    public final void setAlwaysFinish(boolean z) {
        enforceCallingPermission("android.permission.SET_ALWAYS_FINISH", "setAlwaysFinish()");
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            Settings.Global.putInt(this.mContext.getContentResolver(), "always_finish_activities", z ? 1 : 0);
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    this.mAlwaysFinishActivities = z;
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final void setDebugApp(String str, boolean z, boolean z2) {
        setDebugApp(str, z, z2, false);
    }

    public final void setDebugApp(String str, boolean z, boolean z2, boolean z3) {
        enforceCallingPermission("android.permission.SET_DEBUG_APP", "setDebugApp()");
        long clearCallingIdentity = Binder.clearCallingIdentity();
        if (z2) {
            try {
                ContentResolver contentResolver = this.mContext.getContentResolver();
                Settings.Global.putString(contentResolver, "debug_app", str);
                Settings.Global.putInt(contentResolver, "wait_for_debugger", z ? 1 : 0);
            } catch (Throwable th) {
                Binder.restoreCallingIdentity(clearCallingIdentity);
                throw th;
            }
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            if (!z2) {
                try {
                    this.mOrigDebugApp = this.mDebugApp;
                    this.mOrigWaitForDebugger = this.mWaitForDebugger;
                } catch (Throwable th2) {
                    resetPriorityAfterLockedSection();
                    throw th2;
                }
            }
            this.mDebugApp = str;
            this.mWaitForDebugger = z;
            this.mSuspendUponWait = z3;
            this.mDebugTransient = !z2;
            if (str != null) {
                forceStopPackageLocked(str, -1, false, false, true, true, false, false, -1, "set debug app", 10);
            }
        }
        resetPriorityAfterLockedSection();
        Binder.restoreCallingIdentity(clearCallingIdentity);
    }

    public final void setDeterministicUidIdle(boolean z) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mDeterministicUidIdle = z;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void setDumpHeapDebugLimit(String str, int i, long j, String str2) {
        String str3;
        int i2;
        if (str != null) {
            enforceCallingPermission("android.permission.SET_DEBUG_APP", "setDumpHeapDebugLimit()");
        } else {
            synchronized (this.mPidsSelfLocked) {
                try {
                    ProcessRecord processRecord = this.mPidsSelfLocked.get(Binder.getCallingPid());
                    if (processRecord == null) {
                        throw new SecurityException("No process found for calling pid " + Binder.getCallingPid());
                    }
                    enforceDebuggable(processRecord);
                    str3 = processRecord.processName;
                    i2 = processRecord.uid;
                    if (str2 != null && !processRecord.mPkgList.containsKey(str2)) {
                        throw new SecurityException("Package " + str2 + " is not running in " + processRecord);
                    }
                } finally {
                }
            }
            str = str3;
            i = i2;
        }
        AppProfiler appProfiler = this.mAppProfiler;
        synchronized (appProfiler.mProfilerLock) {
            try {
                if (j > 0) {
                    appProfiler.mMemWatchProcesses.put(str, i, new Pair(Long.valueOf(j), str2));
                } else if (i != 0) {
                    appProfiler.mMemWatchProcesses.remove(str, i);
                } else {
                    appProfiler.mMemWatchProcesses.getMap().remove(str);
                }
            } finally {
            }
        }
    }

    public final boolean setFGSFilter(int i, boolean z) {
        boolean z2 = false;
        if (checkCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL") != 0) {
            Slog.d("ActivityManager", "setFGSFilter - permission is not granted. callingUid: " + Binder.getCallingUid());
            return false;
        }
        ProcessCpusetController processCpusetController = this.mProcessCpusetController;
        if (processCpusetController == null) {
            return false;
        }
        ActivityManagerService activityManagerService = processCpusetController.mAm;
        boostPriorityForLockedSection();
        synchronized (activityManagerService) {
            try {
                UidRecord uidRecord = processCpusetController.mAm.mProcessList.mActiveUids.get(i);
                if (uidRecord != null && uidRecord.mCurProcState == 4) {
                    uidRecord.mFGSFilter = z;
                    processCpusetController.mAm.updateOomAdjLocked(25);
                    z2 = true;
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return z2;
    }

    public final void setFocusedRootTask(int i) {
        this.mActivityTaskManager.setFocusedRootTask(i);
    }

    public final void setHasTopUi(boolean z) {
        boolean z2;
        if (checkCallingPermission("android.permission.INTERNAL_SYSTEM_WINDOW") != 0) {
            throw new SecurityException(ActivityManagerService$$ExternalSyntheticOutline0.m(new StringBuilder("Permission Denial: setHasTopUi() from pid="), ", uid=", " requires android.permission.INTERNAL_SYSTEM_WINDOW", "ActivityManager"));
        }
        int callingPid = Binder.getCallingPid();
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    synchronized (this.mPidsSelfLocked) {
                        ProcessRecord processRecord = this.mPidsSelfLocked.get(callingPid);
                        if (processRecord == null) {
                            Slog.w("ActivityManager", "setHasTopUi called on unknown pid: " + callingPid);
                            resetPriorityAfterLockedSection();
                            return;
                        }
                        ProcessStateRecord processStateRecord = processRecord.mState;
                        if (processStateRecord.mHasTopUi != z) {
                            processStateRecord.mHasTopUi = z;
                            processStateRecord.mApp.mWindowProcessController.mHasTopUi = z;
                            z2 = true;
                        } else {
                            z2 = false;
                        }
                        if (z2) {
                            updateOomAdjLocked(9, processRecord);
                        }
                        resetPriorityAfterLockedSection();
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final boolean setLongLiveApp(String str) {
        checkLongLivePermissions("setLongLiveApp");
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (!this.mExt.setLongLivePackageLocked(str)) {
                    resetPriorityAfterLockedSection();
                    return false;
                }
                updateOomAdjLocked(0);
                resetPriorityAfterLockedSection();
                return true;
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final boolean setLongLiveTask(int i) {
        if (!CoreRune.FW_DEDICATED_MEMORY) {
            return false;
        }
        checkLongLivePermissions("setLongLiveTask");
        this.mExt.setLongLiveTask(i, true);
        return true;
    }

    public final void setMemFactorOverride(int i) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (i == this.mAppProfiler.getLastMemoryLevelLocked()) {
                    resetPriorityAfterLockedSection();
                    return;
                }
                this.mAppProfiler.mMemFactorOverride = i;
                updateOomAdjLocked(16);
                resetPriorityAfterLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final void setPackageScreenCompatMode(String str, int i) {
        this.mActivityTaskManager.setPackageScreenCompatMode(str, i);
    }

    public final void setPersistentVrThread(int i) {
        this.mActivityTaskManager.setPersistentVrThread(i);
    }

    /* JADX WARN: Removed duplicated region for block: B:35:0x008a A[Catch: all -> 0x0044, TryCatch #4 {, blocks: (B:7:0x0020, B:10:0x002a, B:11:0x003b, B:16:0x0047, B:20:0x0056, B:70:0x005a, B:22:0x0069, B:24:0x006d, B:27:0x0073, B:28:0x0075, B:30:0x007c, B:35:0x008a, B:37:0x0091, B:39:0x0096, B:40:0x0099, B:42:0x00a0, B:43:0x00a2, B:44:0x00b2, B:60:0x0094, B:62:0x00a9, B:64:0x00ae, B:67:0x00ac, B:71:0x005d, B:74:0x0060, B:77:0x0064, B:78:0x0067), top: B:6:0x0020, outer: #1 }] */
    /* JADX WARN: Removed duplicated region for block: B:46:0x00b5 A[Catch: all -> 0x0041, TRY_ENTER, TRY_LEAVE, TryCatch #1 {all -> 0x0041, blocks: (B:4:0x001d, B:5:0x001f, B:12:0x003c, B:46:0x00b5, B:50:0x00be, B:53:0x00c3, B:54:0x00c6, B:55:0x00c7, B:84:0x00cd, B:49:0x00bb, B:7:0x0020, B:10:0x002a, B:11:0x003b, B:16:0x0047, B:20:0x0056, B:70:0x005a, B:22:0x0069, B:24:0x006d, B:27:0x0073, B:28:0x0075, B:30:0x007c, B:35:0x008a, B:37:0x0091, B:39:0x0096, B:40:0x0099, B:42:0x00a0, B:43:0x00a2, B:44:0x00b2, B:60:0x0094, B:62:0x00a9, B:64:0x00ae, B:67:0x00ac, B:71:0x005d, B:74:0x0060, B:77:0x0064, B:78:0x0067), top: B:3:0x001d, inners: #2, #4 }] */
    /* JADX WARN: Removed duplicated region for block: B:61:0x00a7  */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final void setProcessImportant(android.os.IBinder r10, int r11, boolean r12, java.lang.String r13) {
        /*
            Method dump skipped, instructions count: 211
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.setProcessImportant(android.os.IBinder, int, boolean, java.lang.String):void");
    }

    public final void setProcessLimit(int i) {
        RestrictionPolicy restrictionPolicy;
        enforceCallingPermission("android.permission.SET_PROCESS_LIMIT", "setProcessLimit()");
        Slog.v("ActivityManager", "setProcessLimit: " + i + " from uid " + Binder.getCallingUid() + " pid " + Binder.getCallingPid());
        if (i >= 0 && (restrictionPolicy = this.mRestrictionPolicy) != null && !restrictionPolicy.isBackgroundProcessLimitAllowed()) {
            Slog.v("ActivityManager", "setProcessLimit: denied");
            return;
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActivityManagerConstants activityManagerConstants = this.mConstants;
                activityManagerConstants.mOverrideMaxCachedProcesses = i;
                activityManagerConstants.updateMaxCachedProcesses();
                trimApplicationsLocked(12, true);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final boolean setProcessMemoryTrimLevel(String str, int i, int i2) {
        int callingUid = Binder.getCallingUid();
        if (callingUid != 2000 && callingUid != 0) {
            throw new SecurityException("Only shell can call it");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ProcessRecord findProcessLOSP = findProcessLOSP(i, str, "setProcessMemoryTrimLevel");
                if (findProcessLOSP == null) {
                    throw new IllegalArgumentException("Unknown process: " + str);
                }
                IApplicationThread iApplicationThread = findProcessLOSP.mThread;
                if (iApplicationThread == null) {
                    throw new IllegalArgumentException("Process has no app thread");
                }
                if (findProcessLOSP.mProfile.mTrimMemoryLevel >= i2) {
                    throw new IllegalArgumentException("Unable to set a higher trim level than current level");
                }
                if (i2 >= 20 && findProcessLOSP.mState.mCurProcState <= 6) {
                    throw new IllegalArgumentException("Unable to set a background trim level on a foreground process");
                }
                boolean z = UnifiedMemoryReclaimer.MODEL_UMR_ENABLED;
                KernelMemoryProxy$ReclaimerLog.write("B|scheduleTrimMemory: Trimming memory of force " + findProcessLOSP.processName + " to " + i2, false);
                iApplicationThread.scheduleTrimMemory(i2);
                KernelMemoryProxy$ReclaimerLog.write("E|scheduleTrimMemory", false);
                ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerProcLock) {
                    try {
                        findProcessLOSP.mProfile.mTrimMemoryLevel = i2;
                    } catch (Throwable th) {
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
        return true;
    }

    public final boolean setProcessSlowdown(int i, boolean z) {
        ProcessStateRecord processStateRecord;
        if (checkCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL") != 0) {
            Slog.d("ActivityManager", "setProcessSlowdown - permission is not granted. callingUid: " + Binder.getCallingUid());
            return false;
        }
        ProcessCpusetController processCpusetController = this.mProcessCpusetController;
        if (processCpusetController == null) {
            return false;
        }
        ActivityManagerService activityManagerService = processCpusetController.mAm;
        boostPriorityForLockedSection();
        synchronized (activityManagerService) {
            try {
                int size = processCpusetController.mAm.mProcessList.mLruProcesses.size() - 1;
                while (true) {
                    if (size < 0) {
                        processStateRecord = null;
                        break;
                    }
                    ProcessRecord processRecord = (ProcessRecord) processCpusetController.mAm.mProcessList.mLruProcesses.get(size);
                    if (processRecord.mPid == i) {
                        processStateRecord = processRecord.mState;
                        break;
                    }
                    size--;
                }
            } catch (Throwable th) {
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        if (processStateRecord == null) {
            BrailleDisplayConnection$$ExternalSyntheticOutline0.m(i, "Slowdown: pid ", " is nonexistent", "ProcessCpusetController");
            return false;
        }
        processStateRecord.mSlowAbnormal = z;
        ActivityManagerService activityManagerService2 = processCpusetController.mAm;
        boostPriorityForLockedSection();
        synchronized (activityManagerService2) {
            try {
                processCpusetController.mAm.updateOomAdjLocked(24);
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
        return true;
    }

    public final void setProcessStateSummary(byte[] bArr) {
        if (bArr != null && bArr.length > 128) {
            throw new IllegalArgumentException("Data size is too large");
        }
        this.mProcessList.mAppExitInfoTracker.setProcessStateSummary(Binder.getCallingUid(), Binder.getCallingPid(), bArr);
    }

    public final void setProfileApp(ApplicationInfo applicationInfo, String str, ProfilerInfo profilerInfo, ApplicationInfo applicationInfo2) {
        ParcelFileDescriptor parcelFileDescriptor;
        synchronized (this.mAppProfiler.mProfilerLock) {
            try {
                if (!Build.IS_DEBUGGABLE) {
                    boolean z = true;
                    boolean z2 = (applicationInfo.flags & 2) != 0;
                    boolean isProfileableByShell = applicationInfo.isProfileableByShell();
                    if (applicationInfo2 != null) {
                        if ((applicationInfo2.flags & 2) == 0) {
                            z = false;
                        }
                        z2 |= z;
                        isProfileableByShell |= applicationInfo2.isProfileableByShell();
                    }
                    if (!z2 && !isProfileableByShell) {
                        throw new SecurityException("Process not debuggable, and not profileable by shell: " + applicationInfo.packageName);
                    }
                }
                AppProfiler appProfiler = this.mAppProfiler;
                AppProfiler.ProfileData profileData = appProfiler.mProfileData;
                profileData.setProfileApp(str);
                ProfilerInfo profilerInfo2 = profileData.mProfilerInfo;
                if (profilerInfo2 != null && (parcelFileDescriptor = profilerInfo2.profileFd) != null) {
                    try {
                        parcelFileDescriptor.close();
                    } catch (IOException unused) {
                    }
                }
                profileData.setProfilerInfo(new ProfilerInfo(profilerInfo));
                appProfiler.mProfileType = 0;
            } catch (Throwable th) {
                throw th;
            }
        }
    }

    public final void setRenderThread(int i) {
        ProcessRecord processRecord;
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                int callingPid = Binder.getCallingPid();
                if (callingPid == Process.myPid()) {
                    Process.setThreadPriority(i, 10);
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                synchronized (this.mPidsSelfLocked) {
                    processRecord = this.mPidsSelfLocked.get(callingPid);
                }
                if (processRecord != null && processRecord.mRenderThreadTid == 0 && i > 0) {
                    if (!Process.isThreadInProcess(callingPid, i)) {
                        throw new IllegalArgumentException("Render thread does not belong to process");
                    }
                    processRecord.mRenderThreadTid = i;
                    if (processRecord.mState.mCurSchedGroup == 3) {
                        if (processRecord.useFifoUiScheduling()) {
                            Process.setThreadScheduler(processRecord.mRenderThreadTid, 1073741825, 1);
                        } else {
                            Process.setThreadPriority(processRecord.mRenderThreadTid, -10);
                        }
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public final void setRequestedOrientation(IBinder iBinder, int i) {
        ActivityClient.getInstance().setRequestedOrientation(iBinder, i);
    }

    public final void setServiceForeground(ComponentName componentName, IBinder iBinder, int i, Notification notification, int i2, int i3) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mServices.setServiceForegroundLocked(componentName, iBinder, i, notification, i2, i3);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void setStopUserOnSwitch(int i) {
        UserController userController = this.mUserController;
        if (userController.mInjector.mService.checkCallingPermission("android.permission.MANAGE_USERS") == -1 && userController.mInjector.mService.checkCallingPermission("android.permission.INTERACT_ACROSS_USERS") == -1) {
            throw new SecurityException("You either need MANAGE_USERS or INTERACT_ACROSS_USERS permission to call setStopUserOnSwitch()");
        }
        synchronized (userController.mLock) {
            Slogf.i("ActivityManager", "setStopUserOnSwitch(): %d -> %d", Integer.valueOf(userController.mStopUserOnSwitch), Integer.valueOf(i));
            userController.mStopUserOnSwitch = i;
        }
    }

    public final void setTTSPkgInfo(int i) {
        if (MARsPolicyManager.MARs_ENABLE) {
            MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE.getClass();
            ActiveMusicRecordFilter activeMusicRecordFilter = ActiveMusicRecordFilter.ActiveMusicRecordFilterHolder.INSTANCE;
            Integer valueOf = Integer.valueOf(i);
            synchronized (activeMusicRecordFilter.mTTSPkgsUid) {
                try {
                    if (!activeMusicRecordFilter.mTTSPkgsUid.contains(valueOf)) {
                        activeMusicRecordFilter.mTTSPkgsUid.add(valueOf);
                    }
                } catch (Throwable th) {
                    throw th;
                }
            }
            AnyMotionDetector$$ExternalSyntheticOutline0.m(i, "setTTSPkgInfo : ", "MARsPolicyManager");
        }
    }

    public final void setTaskResizeable(int i, int i2) {
        this.mActivityTaskManager.setTaskResizeable(i, i2);
    }

    public final void setThemeOverlayReady(int i) {
        com.android.systemui.shared.Flags.enableHomeDelay();
        Slog.d("ActivityManager", "ThemeHomeDelay: Home launch is not delayable, ignoring setThemeOverlayReady() call");
    }

    public final void setUidTempAllowlistStateLSP(int i, boolean z) {
        OomAdjuster oomAdjuster = this.mOomAdjuster;
        UidRecord uidRecord = oomAdjuster.mActiveUids.get(i);
        if (uidRecord == null || uidRecord.mCurAllowList == z) {
            return;
        }
        uidRecord.mCurAllowList = z;
        Flags.migrateFullOomadjUpdates();
        for (int size = uidRecord.mProcRecords.size() - 1; size >= 0; size--) {
            ProcessRecord processRecord = (ProcessRecord) uidRecord.mProcRecords.valueAt(size);
            if (processRecord != null && processRecord.mState.mMaxAdj > 0) {
                oomAdjuster.mPendingProcessSet.add(processRecord);
            }
        }
        oomAdjuster.updateOomAdjPendingTargetsLocked(10);
    }

    public final void setUserIsMonkey(boolean z) {
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                synchronized (this.mPidsSelfLocked) {
                    int callingPid = Binder.getCallingPid();
                    ProcessRecord processRecord = this.mPidsSelfLocked.get(callingPid);
                    if (processRecord == null) {
                        throw new SecurityException("Unknown process: " + callingPid);
                    }
                    ActiveInstrumentation activeInstrumentation = processRecord.mInstr;
                    if (activeInstrumentation == null || activeInstrumentation.mUiAutomationConnection == null) {
                        throw new SecurityException("Only an instrumentation process with a UiAutomation can call setUserIsMonkey");
                    }
                }
                this.mUserIsMonkey = z;
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public final void setWindowManager(WindowManagerService windowManagerService) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mWindowManager = windowManagerService;
                this.mWmInternal = (WindowManagerInternal) LocalServices.getService(WindowManagerInternal.class);
                this.mActivityTaskManager.setWindowManager(windowManagerService);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final boolean shouldServiceTimeOut(ComponentName componentName, IBinder iBinder) {
        boolean shouldServiceTimeOutLocked;
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                shouldServiceTimeOutLocked = this.mServices.shouldServiceTimeOutLocked(componentName, iBinder);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
        return shouldServiceTimeOutLocked;
    }

    public final void showBootMessage(CharSequence charSequence, boolean z) {
        if (Binder.getCallingUid() != Process.myUid()) {
            throw new SecurityException();
        }
        this.mWindowManager.showBootMessage(charSequence, z, 0);
    }

    public final void showRescuePartyDialog() {
        if ("emergency".equals(SystemProperties.get("persist.sys.emergency_reset", ""))) {
            ActivityTaskManagerService.LocalService localService = (ActivityTaskManagerService.LocalService) this.mAtmInternal;
            ActivityTaskManagerService.this.mUiHandler.post(new ActivityTaskManagerService$LocalService$$ExternalSyntheticLambda0(localService, 1));
        }
    }

    public final void showSafeModeOverlay() {
        View inflate = LayoutInflater.from(this.mContext).inflate(R.layout.simple_dropdown_item_2line, (ViewGroup) null);
        WindowManager.LayoutParams layoutParams = new WindowManager.LayoutParams();
        layoutParams.type = 2015;
        layoutParams.width = -2;
        layoutParams.height = -2;
        layoutParams.gravity = 8388691;
        layoutParams.format = inflate.getBackground().getOpacity();
        layoutParams.flags = 24;
        layoutParams.privateFlags |= 16;
        ((WindowManager) this.mContext.getSystemService("window")).addView(inflate, layoutParams);
    }

    public final void showWaitingForDebugger(IApplicationThread iApplicationThread, boolean z) {
        ProcessRecord recordForAppLOSP;
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            if (iApplicationThread != null) {
                try {
                    recordForAppLOSP = getRecordForAppLOSP(iApplicationThread);
                } catch (Throwable th) {
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            } else {
                recordForAppLOSP = null;
            }
            if (recordForAppLOSP == null) {
                resetPriorityAfterProcLockedSection();
                return;
            }
            Message obtain = Message.obtain();
            obtain.what = 6;
            obtain.obj = recordForAppLOSP;
            obtain.arg1 = z ? 1 : 0;
            this.mUiHandler.sendMessage(obtain);
            resetPriorityAfterProcLockedSection();
        }
    }

    public final boolean shutdown(int i) {
        boolean z;
        boolean z2 = true;
        if (checkCallingPermission("android.permission.SHUTDOWN") != 0) {
            throw new SecurityException("Requires permission android.permission.SHUTDOWN");
        }
        if (CoreRune.MNO_TMO_DEVICE_REPORTING) {
            Slog.d("ActivityManager", "TMO shutdown");
            AppStateBroadcaster.mIsBroadcastEnabled = false;
            AppStateBroadcaster.mLastFocusAppName = null;
            AppStateBroadcaster.mObjHandler = null;
            HashMap hashMap = AppStateBroadcaster.sKnownRunningPackages;
            synchronized (hashMap) {
                hashMap.clear();
            }
            DeviceReportingSecurityChecker.disable();
        }
        ShutdownThread.get();
        ShutdownThread.MYLOG.i("ActivityManager", "!@AMS down AtmInternal...");
        ActivityTaskManagerInternal activityTaskManagerInternal = this.mAtmInternal;
        boolean z3 = this.mBooted;
        ActivityTaskManagerService.LocalService localService = (ActivityTaskManagerService.LocalService) activityTaskManagerInternal;
        ActivityTaskManagerService.this.mShuttingDown = true;
        WindowManagerGlobalLock windowManagerGlobalLock = ActivityTaskManagerService.this.mGlobalLock;
        WindowManagerService.boostPriorityForLockedSection();
        synchronized (windowManagerGlobalLock) {
            try {
                RootWindowContainer rootWindowContainer = ActivityTaskManagerService.this.mRootWindowContainer;
                for (int i2 = 0; i2 < rootWindowContainer.getChildCount(); i2++) {
                    rootWindowContainer.createSleepToken(((DisplayContent) rootWindowContainer.getChildAt(i2)).mDisplayId, "shutdown", false);
                }
                ActivityTaskManagerService activityTaskManagerService = ActivityTaskManagerService.this;
                activityTaskManagerService.mWindowManager.setEventDispatching(z3 && !activityTaskManagerService.mShuttingDown);
                ActivityTaskManagerService.this.notifyTaskPersisterLocked(null, true);
                ActivityTaskSupervisor activityTaskSupervisor = ActivityTaskManagerService.this.mTaskSupervisor;
                activityTaskSupervisor.goingToSleepLocked();
                long currentTimeMillis = System.currentTimeMillis() + i;
                while (true) {
                    RootWindowContainer rootWindowContainer2 = activityTaskSupervisor.mRootWindowContainer;
                    rootWindowContainer2.getClass();
                    boolean[] zArr = {true};
                    rootWindowContainer2.forAllRootTasks(new RootWindowContainer$$ExternalSyntheticLambda44(z2, zArr, z2));
                    if (zArr[0]) {
                        z = false;
                        break;
                    }
                    long currentTimeMillis2 = currentTimeMillis - System.currentTimeMillis();
                    if (currentTimeMillis2 <= 0) {
                        Slog.w("ActivityTaskManager", "Activity manager shutdown timed out");
                        z = true;
                        break;
                    }
                    try {
                        activityTaskSupervisor.mService.mGlobalLock.wait(currentTimeMillis2);
                    } catch (InterruptedException unused) {
                    }
                }
                activityTaskSupervisor.checkReadyForSleepLocked(false);
            } catch (Throwable th) {
                WindowManagerService.resetPriorityAfterLockedSection();
                throw th;
            }
        }
        WindowManagerService.resetPriorityAfterLockedSection();
        ShutdownThread.get();
        ShutdownThread.MYLOG.i("ActivityManager", "!@AMS down AppOpsService...");
        this.mAppOpsService.shutdown();
        if (this.mUsageStatsService != null) {
            ShutdownThread.get();
            ShutdownThread.MYLOG.i("ActivityManager", "!@AMS down UsageStatsService...");
            UsageStatsService usageStatsService = UsageStatsService.this;
            synchronized (usageStatsService.mLock) {
                usageStatsService.mHandler.removeMessages(0);
                UsageEvents.Event event = new UsageEvents.Event(26, SystemClock.elapsedRealtime());
                event.mPackage = "android";
                event.mFlags = 1;
                int size = usageStatsService.mUserState.size();
                for (int i3 = 0; i3 < size; i3++) {
                    UsageEvents.Event event2 = new UsageEvents.Event(event);
                    UserUsageStatsService userUsageStatsServiceLocked = usageStatsService.getUserUsageStatsServiceLocked(usageStatsService.mUserState.keyAt(i3));
                    if (userUsageStatsServiceLocked == null) {
                        break;
                    }
                    IntervalStats intervalStats = userUsageStatsServiceLocked.mCurrentStats[0];
                    if (intervalStats != null) {
                        event2.mTimeStamp = intervalStats.endTime;
                        intervalStats.addEvent(event2);
                    }
                }
                usageStatsService.reportEventToAllUserId(event);
                usageStatsService.flushToDiskLocked();
                usageStatsService.persistGlobalComponentUsageLocked();
            }
            usageStatsService.mAppStandby.flushToDisk();
        }
        ShutdownThread.get();
        ShutdownThread.MYLOG.i("ActivityManager", "!@AMS down BatteryStatsService...");
        this.mBatteryStatsService.shutdown();
        ShutdownThread.get();
        ShutdownThread.MYLOG.i("ActivityManager", "!@AMS down ProcessStats...");
        ProcessStatsService processStatsService = this.mProcessStats;
        processStatsService.getClass();
        Slog.w("ProcessStatsService", "Writing process stats before shutdown...");
        synchronized (processStatsService.mLock) {
            processStatsService.mProcessStats.mFlags |= 2;
            processStatsService.writeStateLocked(true);
            processStatsService.mShuttingDown = true;
        }
        if (this.mBinderStatsService == null) {
            this.mBinderStatsService = (BinderCallsStatsService.Internal) LocalServices.getService(BinderCallsStatsService.Internal.class);
        }
        this.mBinderStatsService.shutdown();
        return z;
    }

    public final void signalPersistentProcesses(final int i) {
        if (i != 10) {
            throw new SecurityException("Only SIGNAL_USR1 is allowed");
        }
        if (checkCallingPermission("android.permission.SIGNAL_PERSISTENT_PROCESSES") != 0) {
            throw new SecurityException("Requires permission android.permission.SIGNAL_PERSISTENT_PROCESSES");
        }
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                this.mProcessList.forEachLruProcessesLOSP(new Consumer() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda13
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        int i2 = i;
                        ProcessRecord processRecord = (ProcessRecord) obj;
                        if (processRecord.mThread == null || !processRecord.mPersistent) {
                            return;
                        }
                        Process.sendSignal(processRecord.mPid, i2);
                    }
                }, false);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public final int startActivity(IApplicationThread iApplicationThread, String str, Intent intent, String str2, IBinder iBinder, String str3, int i, int i2, ProfilerInfo profilerInfo, Bundle bundle) {
        return this.mActivityTaskManager.startActivity(iApplicationThread, str, null, intent, str2, iBinder, str3, i, i2, profilerInfo, bundle);
    }

    public final int startActivityAsUser(IApplicationThread iApplicationThread, String str, Intent intent, String str2, IBinder iBinder, String str3, int i, int i2, ProfilerInfo profilerInfo, Bundle bundle, int i3) {
        return startActivityAsUserWithFeature(iApplicationThread, str, null, intent, str2, iBinder, str3, i, i2, profilerInfo, bundle, i3);
    }

    public final int startActivityAsUserWithFeature(IApplicationThread iApplicationThread, String str, String str2, Intent intent, String str3, IBinder iBinder, String str4, int i, int i2, ProfilerInfo profilerInfo, Bundle bundle, int i3) {
        return this.mActivityTaskManager.startActivityAsUser(iApplicationThread, str, str2, intent, str3, iBinder, str4, i, i2, profilerInfo, bundle, i3, true);
    }

    public final int startActivityFromRecents(int i, Bundle bundle) {
        return this.mActivityTaskManager.startActivityFromRecents(i, bundle);
    }

    public final int startActivityWithFeature(IApplicationThread iApplicationThread, String str, String str2, Intent intent, String str3, IBinder iBinder, String str4, int i, int i2, ProfilerInfo profilerInfo, Bundle bundle) {
        return this.mActivityTaskManager.startActivity(iApplicationThread, str, str2, intent, str3, iBinder, str4, i, i2, profilerInfo, bundle);
    }

    public final void startAssociationLocked(int i, String str, int i2, int i3, ComponentName componentName, String str2) {
        if (this.mTrackingAssociations) {
            ArrayMap arrayMap = (ArrayMap) this.mAssociations.get(i3);
            if (arrayMap == null) {
                arrayMap = new ArrayMap();
                this.mAssociations.put(i3, arrayMap);
            }
            SparseArray sparseArray = (SparseArray) arrayMap.get(componentName);
            if (sparseArray == null) {
                sparseArray = new SparseArray();
                arrayMap.put(componentName, sparseArray);
            }
            ArrayMap arrayMap2 = (ArrayMap) sparseArray.get(i);
            if (arrayMap2 == null) {
                arrayMap2 = new ArrayMap();
                sparseArray.put(i, arrayMap2);
            }
            Association association = (Association) arrayMap2.get(str);
            if (association == null) {
                association = new Association(i, i3, str, str2, componentName);
                arrayMap2.put(str, association);
            }
            association.mCount++;
            int i4 = association.mNesting + 1;
            association.mNesting = i4;
            if (i4 == 1) {
                long uptimeMillis = SystemClock.uptimeMillis();
                association.mLastStateUptime = uptimeMillis;
                association.mStartTime = uptimeMillis;
                association.mLastState = i2;
            }
        }
    }

    public final boolean startBinderTracking() {
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                this.mBinderTransactionTrackingEnabled = true;
                this.mProcessList.forEachLruProcessesLOSP(new ActivityManagerService$$ExternalSyntheticLambda14(0, this), true);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
        return true;
    }

    public final void startConfirmDeviceCredentialIntent(Intent intent, Bundle bundle) {
        ActivityTaskManagerService.LocalService localService = (ActivityTaskManagerService.LocalService) this.mAtmInternal;
        localService.getClass();
        ActivityTaskManagerService.enforceTaskPermission("startConfirmDeviceCredentialIntent");
        WindowManagerGlobalLock windowManagerGlobalLock = ActivityTaskManagerService.this.mGlobalLock;
        WindowManagerService.boostPriorityForLockedSection();
        synchronized (windowManagerGlobalLock) {
            try {
                long clearCallingIdentity = Binder.clearCallingIdentity();
                try {
                    intent.addFlags(276824064);
                    ActivityTaskManagerService.this.mContext.startActivityAsUser(intent, (bundle != null ? new ActivityOptions(bundle) : ActivityOptions.makeBasic()).toBundle(), UserHandle.CURRENT);
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                } catch (Throwable th) {
                    Binder.restoreCallingIdentity(clearCallingIdentity);
                    throw th;
                }
            } catch (Throwable th2) {
                WindowManagerService.resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        WindowManagerService.resetPriorityAfterLockedSection();
    }

    public final void startDelegateShellPermissionIdentity(int i, String[] strArr) {
        AccessCheckDelegateHelper accessCheckDelegateHelper = getAccessCheckDelegateHelper();
        accessCheckDelegateHelper.getClass();
        if (UserHandle.getCallingAppId() != 2000 && UserHandle.getCallingAppId() != 0) {
            throw new SecurityException("Only the shell can delegate its permissions");
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = accessCheckDelegateHelper.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                AccessCheckDelegate$AccessCheckDelegateImpl accessCheckDelegate$AccessCheckDelegateImpl = accessCheckDelegateHelper.mAccessCheckDelegate;
                if (accessCheckDelegate$AccessCheckDelegateImpl != null && !accessCheckDelegate$AccessCheckDelegateImpl.isDelegateAndOwnerUid(i)) {
                    throw new SecurityException("Shell can delegate permissions only to one instrumentation at a time");
                }
                int size = accessCheckDelegateHelper.mActiveInstrumentation.size();
                for (int i2 = 0; i2 < size; i2++) {
                    ActiveInstrumentation activeInstrumentation = (ActiveInstrumentation) accessCheckDelegateHelper.mActiveInstrumentation.get(i2);
                    ApplicationInfo applicationInfo = activeInstrumentation.mTargetInfo;
                    if (applicationInfo.uid == i) {
                        if (activeInstrumentation.mUiAutomationConnection == null) {
                            throw new SecurityException("Shell can delegate its permissions only to an instrumentation started from the shell");
                        }
                        String str = applicationInfo.packageName;
                        AccessCheckDelegate$AccessCheckDelegateImpl accessCheckDelegateLPr = accessCheckDelegateHelper.getAccessCheckDelegateLPr();
                        accessCheckDelegateLPr.mDelegateAndOwnerUid = i;
                        accessCheckDelegateLPr.mDelegatePackage = str;
                        accessCheckDelegateLPr.mDelegatePermissions = strArr;
                        accessCheckDelegateLPr.mDelegateAllPermissions = strArr == null;
                        PackageManager.invalidatePackageInfoCache();
                        resetPriorityAfterProcLockedSection();
                        return;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    /* JADX WARN: Can't wrap try/catch for region: R(20:(2:18|19)|(5:172|173|174|175|176)(6:21|22|23|24|25|(5:157|158|159|160|161)(17:27|28|(1:(4:31|32|33|34))(2:151|(4:153|154|155|156))|35|36|(2:40|(2:46|47)(1:45))|48|(2:(1:56)(2:60|192)|(2:58|59))|74|(7:79|(4:84|(1:146)|87|(6:89|(1:91)(1:96)|92|93|94|95)(8:97|(1:99)(2:142|(1:144)(1:145))|100|(1:102)(1:141)|103|(1:105)(1:140)|106|2ba))|147|(0)|146|87|(0)(0))|148|(6:81|84|(0)|146|87|(0)(0))|147|(0)|146|87|(0)(0)))|164|165|28|(0)(0)|35|36|(5:38|40|(0)|46|47)|48|(4:51|53|(0)(0)|(0))|74|(8:76|79|(0)|147|(0)|146|87|(0)(0))|148|(0)|147|(0)|146|87|(0)(0)) */
    /* JADX WARN: Code restructure failed: missing block: B:150:0x010a, code lost:
    
        r1 = -3;
     */
    /* JADX WARN: Multi-variable type inference failed */
    /* JADX WARN: Removed duplicated region for block: B:151:0x00e5 A[Catch: all -> 0x0091, TRY_ENTER, TryCatch #1 {all -> 0x0091, blocks: (B:19:0x0076, B:173:0x007c, B:174:0x008b, B:22:0x009a, B:25:0x00a0, B:158:0x00a6, B:159:0x00b7, B:28:0x00cf, B:31:0x00db, B:32:0x00e0, B:36:0x0101, B:40:0x0110, B:43:0x0116, B:45:0x011a, B:46:0x013d, B:47:0x017d, B:48:0x017e, B:58:0x01a6, B:59:0x01e4, B:60:0x0190, B:61:0x0192, B:73:0x01e7, B:74:0x01e8, B:76:0x01ee, B:81:0x01fb, B:87:0x0211, B:89:0x0215, B:92:0x021e, B:93:0x023b, B:97:0x0240, B:99:0x024d, B:100:0x026f, B:103:0x0293, B:106:0x02ab, B:107:0x02ba, B:115:0x0337, B:117:0x033e, B:118:0x0357, B:120:0x035c, B:121:0x035f, B:135:0x0366, B:136:0x0369, B:142:0x0254, B:144:0x025c, B:145:0x0262, B:146:0x0209, B:151:0x00e5, B:153:0x00eb, B:154:0x00fc, B:63:0x0193, B:65:0x019b, B:68:0x01a2), top: B:18:0x0076, inners: #3 }] */
    /* JADX WARN: Removed duplicated region for block: B:30:0x00d9  */
    /* JADX WARN: Removed duplicated region for block: B:38:0x010d  */
    /* JADX WARN: Removed duplicated region for block: B:50:0x0182 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:56:0x018e  */
    /* JADX WARN: Removed duplicated region for block: B:58:0x01a6 A[Catch: all -> 0x0091, TRY_ENTER, TryCatch #1 {all -> 0x0091, blocks: (B:19:0x0076, B:173:0x007c, B:174:0x008b, B:22:0x009a, B:25:0x00a0, B:158:0x00a6, B:159:0x00b7, B:28:0x00cf, B:31:0x00db, B:32:0x00e0, B:36:0x0101, B:40:0x0110, B:43:0x0116, B:45:0x011a, B:46:0x013d, B:47:0x017d, B:48:0x017e, B:58:0x01a6, B:59:0x01e4, B:60:0x0190, B:61:0x0192, B:73:0x01e7, B:74:0x01e8, B:76:0x01ee, B:81:0x01fb, B:87:0x0211, B:89:0x0215, B:92:0x021e, B:93:0x023b, B:97:0x0240, B:99:0x024d, B:100:0x026f, B:103:0x0293, B:106:0x02ab, B:107:0x02ba, B:115:0x0337, B:117:0x033e, B:118:0x0357, B:120:0x035c, B:121:0x035f, B:135:0x0366, B:136:0x0369, B:142:0x0254, B:144:0x025c, B:145:0x0262, B:146:0x0209, B:151:0x00e5, B:153:0x00eb, B:154:0x00fc, B:63:0x0193, B:65:0x019b, B:68:0x01a2), top: B:18:0x0076, inners: #3 }] */
    /* JADX WARN: Removed duplicated region for block: B:60:0x0190 A[Catch: all -> 0x0091, TryCatch #1 {all -> 0x0091, blocks: (B:19:0x0076, B:173:0x007c, B:174:0x008b, B:22:0x009a, B:25:0x00a0, B:158:0x00a6, B:159:0x00b7, B:28:0x00cf, B:31:0x00db, B:32:0x00e0, B:36:0x0101, B:40:0x0110, B:43:0x0116, B:45:0x011a, B:46:0x013d, B:47:0x017d, B:48:0x017e, B:58:0x01a6, B:59:0x01e4, B:60:0x0190, B:61:0x0192, B:73:0x01e7, B:74:0x01e8, B:76:0x01ee, B:81:0x01fb, B:87:0x0211, B:89:0x0215, B:92:0x021e, B:93:0x023b, B:97:0x0240, B:99:0x024d, B:100:0x026f, B:103:0x0293, B:106:0x02ab, B:107:0x02ba, B:115:0x0337, B:117:0x033e, B:118:0x0357, B:120:0x035c, B:121:0x035f, B:135:0x0366, B:136:0x0369, B:142:0x0254, B:144:0x025c, B:145:0x0262, B:146:0x0209, B:151:0x00e5, B:153:0x00eb, B:154:0x00fc, B:63:0x0193, B:65:0x019b, B:68:0x01a2), top: B:18:0x0076, inners: #3 }] */
    /* JADX WARN: Removed duplicated region for block: B:76:0x01ee A[Catch: all -> 0x0091, TryCatch #1 {all -> 0x0091, blocks: (B:19:0x0076, B:173:0x007c, B:174:0x008b, B:22:0x009a, B:25:0x00a0, B:158:0x00a6, B:159:0x00b7, B:28:0x00cf, B:31:0x00db, B:32:0x00e0, B:36:0x0101, B:40:0x0110, B:43:0x0116, B:45:0x011a, B:46:0x013d, B:47:0x017d, B:48:0x017e, B:58:0x01a6, B:59:0x01e4, B:60:0x0190, B:61:0x0192, B:73:0x01e7, B:74:0x01e8, B:76:0x01ee, B:81:0x01fb, B:87:0x0211, B:89:0x0215, B:92:0x021e, B:93:0x023b, B:97:0x0240, B:99:0x024d, B:100:0x026f, B:103:0x0293, B:106:0x02ab, B:107:0x02ba, B:115:0x0337, B:117:0x033e, B:118:0x0357, B:120:0x035c, B:121:0x035f, B:135:0x0366, B:136:0x0369, B:142:0x0254, B:144:0x025c, B:145:0x0262, B:146:0x0209, B:151:0x00e5, B:153:0x00eb, B:154:0x00fc, B:63:0x0193, B:65:0x019b, B:68:0x01a2), top: B:18:0x0076, inners: #3 }] */
    /* JADX WARN: Removed duplicated region for block: B:81:0x01fb A[Catch: all -> 0x0091, TryCatch #1 {all -> 0x0091, blocks: (B:19:0x0076, B:173:0x007c, B:174:0x008b, B:22:0x009a, B:25:0x00a0, B:158:0x00a6, B:159:0x00b7, B:28:0x00cf, B:31:0x00db, B:32:0x00e0, B:36:0x0101, B:40:0x0110, B:43:0x0116, B:45:0x011a, B:46:0x013d, B:47:0x017d, B:48:0x017e, B:58:0x01a6, B:59:0x01e4, B:60:0x0190, B:61:0x0192, B:73:0x01e7, B:74:0x01e8, B:76:0x01ee, B:81:0x01fb, B:87:0x0211, B:89:0x0215, B:92:0x021e, B:93:0x023b, B:97:0x0240, B:99:0x024d, B:100:0x026f, B:103:0x0293, B:106:0x02ab, B:107:0x02ba, B:115:0x0337, B:117:0x033e, B:118:0x0357, B:120:0x035c, B:121:0x035f, B:135:0x0366, B:136:0x0369, B:142:0x0254, B:144:0x025c, B:145:0x0262, B:146:0x0209, B:151:0x00e5, B:153:0x00eb, B:154:0x00fc, B:63:0x0193, B:65:0x019b, B:68:0x01a2), top: B:18:0x0076, inners: #3 }] */
    /* JADX WARN: Removed duplicated region for block: B:86:0x0207 A[ADDED_TO_REGION] */
    /* JADX WARN: Removed duplicated region for block: B:89:0x0215 A[Catch: all -> 0x0091, TryCatch #1 {all -> 0x0091, blocks: (B:19:0x0076, B:173:0x007c, B:174:0x008b, B:22:0x009a, B:25:0x00a0, B:158:0x00a6, B:159:0x00b7, B:28:0x00cf, B:31:0x00db, B:32:0x00e0, B:36:0x0101, B:40:0x0110, B:43:0x0116, B:45:0x011a, B:46:0x013d, B:47:0x017d, B:48:0x017e, B:58:0x01a6, B:59:0x01e4, B:60:0x0190, B:61:0x0192, B:73:0x01e7, B:74:0x01e8, B:76:0x01ee, B:81:0x01fb, B:87:0x0211, B:89:0x0215, B:92:0x021e, B:93:0x023b, B:97:0x0240, B:99:0x024d, B:100:0x026f, B:103:0x0293, B:106:0x02ab, B:107:0x02ba, B:115:0x0337, B:117:0x033e, B:118:0x0357, B:120:0x035c, B:121:0x035f, B:135:0x0366, B:136:0x0369, B:142:0x0254, B:144:0x025c, B:145:0x0262, B:146:0x0209, B:151:0x00e5, B:153:0x00eb, B:154:0x00fc, B:63:0x0193, B:65:0x019b, B:68:0x01a2), top: B:18:0x0076, inners: #3 }] */
    /* JADX WARN: Removed duplicated region for block: B:97:0x0240 A[Catch: all -> 0x0091, TRY_ENTER, TryCatch #1 {all -> 0x0091, blocks: (B:19:0x0076, B:173:0x007c, B:174:0x008b, B:22:0x009a, B:25:0x00a0, B:158:0x00a6, B:159:0x00b7, B:28:0x00cf, B:31:0x00db, B:32:0x00e0, B:36:0x0101, B:40:0x0110, B:43:0x0116, B:45:0x011a, B:46:0x013d, B:47:0x017d, B:48:0x017e, B:58:0x01a6, B:59:0x01e4, B:60:0x0190, B:61:0x0192, B:73:0x01e7, B:74:0x01e8, B:76:0x01ee, B:81:0x01fb, B:87:0x0211, B:89:0x0215, B:92:0x021e, B:93:0x023b, B:97:0x0240, B:99:0x024d, B:100:0x026f, B:103:0x0293, B:106:0x02ab, B:107:0x02ba, B:115:0x0337, B:117:0x033e, B:118:0x0357, B:120:0x035c, B:121:0x035f, B:135:0x0366, B:136:0x0369, B:142:0x0254, B:144:0x025c, B:145:0x0262, B:146:0x0209, B:151:0x00e5, B:153:0x00eb, B:154:0x00fc, B:63:0x0193, B:65:0x019b, B:68:0x01a2), top: B:18:0x0076, inners: #3 }] */
    /* JADX WARN: Type inference failed for: r8v10 */
    /* JADX WARN: Type inference failed for: r8v11 */
    /* JADX WARN: Type inference failed for: r8v2, types: [com.android.server.am.ActivityManagerProcLock] */
    /* JADX WARN: Type inference failed for: r8v3 */
    /* JADX WARN: Type inference failed for: r8v6 */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final boolean startInstrumentation(android.content.ComponentName r28, java.lang.String r29, int r30, android.os.Bundle r31, android.app.IInstrumentationWatcher r32, android.app.IUiAutomationConnection r33, int r34, java.lang.String r35) {
        /*
            Method dump skipped, instructions count: 879
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.startInstrumentation(android.content.ComponentName, java.lang.String, int, android.os.Bundle, android.app.IInstrumentationWatcher, android.app.IUiAutomationConnection, int, java.lang.String):boolean");
    }

    public final boolean startInstrumentationOfSdkSandbox(ComponentName componentName, String str, Bundle bundle, IInstrumentationWatcher iInstrumentationWatcher, IUiAutomationConnection iUiAutomationConnection, int i, String str2, InstrumentationInfo instrumentationInfo, ApplicationInfo applicationInfo, boolean z, boolean z2, boolean z3, boolean z4) {
        ApplicationInfo applicationInfoAsUser;
        String sdkSandboxProcessNameForInstrumentation;
        if (z) {
            reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Instrumenting sdk sandbox with --no-restart flag is not supported");
            return false;
        }
        SdkSandboxManagerLocal sdkSandboxManagerLocal = (SdkSandboxManagerLocal) LocalManagerRegistry.getManager(SdkSandboxManagerLocal.class);
        if (sdkSandboxManagerLocal == null) {
            reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Can't locate SdkSandboxManagerLocal");
            return false;
        }
        try {
            if (com.android.sdksandbox.flags.Flags.sdkSandboxInstrumentationInfo()) {
                applicationInfoAsUser = sdkSandboxManagerLocal.getSdkSandboxApplicationInfoForInstrumentation(applicationInfo, z4);
                sdkSandboxProcessNameForInstrumentation = applicationInfoAsUser.processName;
            } else {
                PackageManager packageManager = this.mContext.getPackageManager();
                applicationInfoAsUser = packageManager.getApplicationInfoAsUser(packageManager.getSdkSandboxPackageName(), 0, i);
                sdkSandboxProcessNameForInstrumentation = sdkSandboxManagerLocal.getSdkSandboxProcessNameForInstrumentation(applicationInfo);
                applicationInfoAsUser.uid = Process.toSdkSandboxUid(applicationInfo.uid);
            }
            ApplicationInfo applicationInfo2 = applicationInfoAsUser;
            String str3 = sdkSandboxProcessNameForInstrumentation;
            ActiveInstrumentation activeInstrumentation = new ActiveInstrumentation(this);
            activeInstrumentation.mClass = componentName;
            activeInstrumentation.mTargetProcesses = new String[]{str3};
            activeInstrumentation.mTargetInfo = applicationInfo2;
            activeInstrumentation.mIsSdkInSandbox = z4;
            activeInstrumentation.mProfileFile = str;
            activeInstrumentation.mArguments = bundle;
            activeInstrumentation.mWatcher = iInstrumentationWatcher;
            activeInstrumentation.mUiAutomationConnection = iUiAutomationConnection;
            activeInstrumentation.mHasBackgroundActivityStartsPermission = z4 && checkComponentPermission(Binder.getCallingPid(), Binder.getCallingUid(), "android.permission.START_ACTIVITIES_FROM_SDK_SANDBOX", 0, -1, true) == 0;
            activeInstrumentation.mHasBackgroundForegroundServiceStartsPermission = false;
            activeInstrumentation.mNoRestart = false;
            int callingUid = Binder.getCallingUid();
            long clearCallingIdentity = Binder.clearCallingIdentity();
            try {
                sdkSandboxManagerLocal.notifyInstrumentationStarted(applicationInfo.packageName, applicationInfo.uid);
                ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerProcLock) {
                    try {
                        try {
                            forceStopPackageLocked(instrumentationInfo.targetPackage, -1, true, false, true, true, false, i, "start instr");
                            ProcessRecord addAppLocked = addAppLocked(applicationInfo2, str3, true, applicationInfo2.uid, applicationInfo.packageName, z2, z3, str2, 0);
                            addAppLocked.setActiveInstrumentation(activeInstrumentation);
                            activeInstrumentation.mFinished = false;
                            activeInstrumentation.mSourceUid = callingUid;
                            activeInstrumentation.mRunningProcesses.add(addAppLocked);
                            if (!this.mActiveInstrumentation.contains(activeInstrumentation)) {
                                this.mActiveInstrumentation.add(activeInstrumentation);
                            }
                            addAppLocked.mProfile.addHostingComponentType(8);
                            resetPriorityAfterProcLockedSection();
                            return true;
                        } catch (Throwable th) {
                            th = th;
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    } catch (Throwable th2) {
                        th = th2;
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
            } finally {
                Binder.restoreCallingIdentity(clearCallingIdentity);
            }
        } catch (PackageManager.NameNotFoundException unused) {
            reportStartInstrumentationFailureLocked(iInstrumentationWatcher, componentName, "Can't find SdkSandbox package");
            return false;
        }
    }

    public final void startPersistentApps(int i) {
        if (this.mFactoryTest == 1) {
            return;
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                try {
                    for (ApplicationInfo applicationInfo : AppGlobals.getPackageManager().getPersistentApplications(i | 1024).getList()) {
                        if (!"android".equals(applicationInfo.packageName)) {
                            addAppLocked(applicationInfo, null, false, 0, null, false, false, null, 2).mProfile.addHostingComponentType(2);
                        }
                    }
                } catch (RemoteException unused) {
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final ProcessRecord startProcessLocked(String str, ApplicationInfo applicationInfo, boolean z, int i, HostingRecord hostingRecord, int i2, boolean z2, boolean z3) {
        return this.mProcessList.startProcessLocked(str, applicationInfo, z, i, hostingRecord, i2, z2, z3, 0, false, 0, null, null, null, null, null, false, -1);
    }

    public final boolean startProfile(int i) {
        return this.mUserController.startProfile(i, false, null);
    }

    public final boolean startProfileWithListener(int i, IProgressListener iProgressListener) {
        return this.mUserController.startProfile(i, false, iProgressListener);
    }

    public final ComponentName startService(IApplicationThread iApplicationThread, Intent intent, String str, boolean z, String str2, String str3, int i) {
        return startService(iApplicationThread, intent, str, z, str2, str3, i, false, -1, null, null);
    }

    public final ComponentName startService(IApplicationThread iApplicationThread, Intent intent, String str, boolean z, String str2, String str3, int i, boolean z2, int i2, String str4, String str5) {
        enforceNotIsolatedCaller("startService");
        enforceAllowedToStartOrBindServiceIfSdkSandbox(intent);
        if (intent != null) {
            if (intent.hasFileDescriptors()) {
                throw new IllegalArgumentException("File descriptors passed in Intent");
            }
            intent.removeExtendedFlags(1);
        }
        if (str2 == null) {
            throw new IllegalArgumentException("callingPackage cannot be null");
        }
        if (z2 && str5 == null) {
            throw new IllegalArgumentException("No instance name provided for SDK sandbox process");
        }
        if (str5 != null && !str5.matches("[a-zA-Z0-9_.]+")) {
            throw new IllegalArgumentException("Illegal instanceName");
        }
        int callingPid = Binder.getCallingPid();
        int callingUid = Binder.getCallingUid();
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            if (Trace.isTagEnabled(64L)) {
                Trace.traceBegin(64L, "startService: intent=" + intent + ", caller=" + str2 + ", fgRequired=" + z);
            }
            boostPriorityForLockedSection();
            try {
                try {
                    synchronized (this) {
                        try {
                            ActiveServices activeServices = this.mServices;
                            activeServices.getClass();
                            ComponentName startServiceLocked = activeServices.startServiceLocked(iApplicationThread, intent, str, callingPid, callingUid, z, str2, str3, i, BackgroundStartPrivileges.NONE, z2, i2, str4, str5);
                            resetPriorityAfterLockedSection();
                            Trace.traceEnd(64L);
                            Binder.restoreCallingIdentity(clearCallingIdentity);
                            return startServiceLocked;
                        } catch (Throwable th) {
                            th = th;
                            resetPriorityAfterLockedSection();
                            throw th;
                        }
                    }
                } catch (Throwable th2) {
                    th = th2;
                }
            } catch (Throwable th3) {
                th = th3;
                Trace.traceEnd(64L);
                Binder.restoreCallingIdentity(clearCallingIdentity);
                throw th;
            }
        } catch (Throwable th4) {
            th = th4;
        }
    }

    public final void startSystemLockTaskMode(int i) {
        RestrictionPolicy restrictionPolicy = this.mRestrictionPolicy;
        if (restrictionPolicy == null || restrictionPolicy.isScreenPinningAllowed()) {
            this.mActivityTaskManager.startSystemLockTaskMode(i);
        }
    }

    public final boolean startUserInBackground(int i) {
        return startUserInBackgroundWithListener(i, null);
    }

    public final boolean startUserInBackgroundVisibleOnDisplay(int i, int i2, IProgressListener iProgressListener) {
        int[] displayIdsForStartingVisibleBackgroundUsers = getDisplayIdsForStartingVisibleBackgroundUsers();
        if (displayIdsForStartingVisibleBackgroundUsers != null) {
            for (int i3 : displayIdsForStartingVisibleBackgroundUsers) {
                if (i2 == i3) {
                    UserController userController = this.mInjector.mUserController;
                    userController.checkCallingHasOneOfThosePermissions("startUserOnDisplay", "android.permission.MANAGE_USERS", "android.permission.INTERACT_ACROSS_USERS");
                    try {
                        return userController.startUserNoChecks(i, i2, 3, iProgressListener);
                    } catch (RuntimeException e) {
                        Slogf.e("ActivityManager", "startUserOnSecondaryDisplay(%d, %d) failed: %s", Integer.valueOf(i), Integer.valueOf(i2), e);
                        return false;
                    }
                }
            }
        }
        StringBuilder m = BatteryService$$ExternalSyntheticOutline0.m(i2, "Invalid display (", ") to start user. Valid options are: ");
        m.append(Arrays.toString(displayIdsForStartingVisibleBackgroundUsers));
        throw new IllegalArgumentException(m.toString());
    }

    public final boolean startUserInBackgroundWithListener(int i, IProgressListener iProgressListener) {
        UserController userController = this.mUserController;
        userController.checkCallingHasOneOfThosePermissions("startUser", "android.permission.INTERACT_ACROSS_USERS_FULL");
        return userController.startUserNoChecks(i, 0, 2, iProgressListener);
    }

    public final boolean startUserInForegroundWithListener(int i, IProgressListener iProgressListener) {
        UserController userController = this.mUserController;
        userController.checkCallingHasOneOfThosePermissions("startUser", "android.permission.INTERACT_ACROSS_USERS_FULL");
        return userController.startUserNoChecks(i, 0, 1, iProgressListener);
    }

    public final void stopAppForUser(String str, int i) {
        if (checkCallingPermission("android.permission.MANAGE_ACTIVITY_TASKS") != 0) {
            throw new SecurityException(ActivityManagerService$$ExternalSyntheticOutline0.m(new StringBuilder("Permission Denial: stopAppForUser() from pid="), ", uid=", " requires android.permission.MANAGE_ACTIVITY_TASKS", "ActivityManager"));
        }
        int handleIncomingUser = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), i, true, 2, "stopAppForUser", null);
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            stopAppForUserInternal(handleIncomingUser, str);
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final void stopAppForUserInternal(int i, String str) {
        int packageUid = getPackageManagerInternal().getPackageUid(str, 272629760L, i);
        if (packageUid < 0) {
            Slog.w("ActivityManager", AppStateTrackerImpl$MyHandler$$ExternalSyntheticOutline0.m(i, "Asked to stop ", str, "/u", " but does not exist in that user"));
            return;
        }
        if (PackageManagerService.this.mProtectedPackages.isPackageStateProtected(i, str)) {
            Slog.w("ActivityManager", AppStateTrackerImpl$MyHandler$$ExternalSyntheticOutline0.m(i, "Asked to stop ", str, "/u", " but it is protected"));
            return;
        }
        this.mActivityTaskManager.getClass();
        if (ActivityTaskManagerService.isForceStopDisabled(str, i, null, null, null, true)) {
            Slog.w("ActivityManager", AppStateTrackerImpl$MyHandler$$ExternalSyntheticOutline0.m(i, "Asked to stop ", str, "/u", " but it is protected by knox policy"));
            return;
        }
        Slog.i("ActivityManager", "Stopping app for user: " + str + "/" + i);
        int appId = UserHandle.getAppId(packageUid);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                try {
                    synchronized (activityManagerProcLock) {
                        try {
                            this.mAtmInternal.onForceStopPackage(str, true, false, i);
                            this.mProcessList.killPackageProcessesLSP(str, appId, i, -10000, true, false, true, false, true, false, 10, 23, "fully stop " + str + "/" + i + " by user request");
                            resetPriorityAfterProcLockedSection();
                            this.mServices.bringDownDisabledPackageServicesLocked(i, str, null, false, true, true);
                            this.mServices.mTimeLimitedFgsInfo.delete(packageUid);
                            if (this.mBooted) {
                                this.mAtmInternal.resumeTopActivities(true);
                            }
                        } catch (Throwable th) {
                            th = th;
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        }
                    }
                } catch (Throwable th2) {
                    th = th2;
                }
            } catch (Throwable th3) {
                resetPriorityAfterLockedSection();
                throw th3;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void stopAppSwitches() {
        this.mActivityTaskManager.stopAppSwitches();
    }

    public final void stopAssociationLocked(ComponentName componentName, String str, int i, int i2) {
        ArrayMap arrayMap;
        SparseArray sparseArray;
        ArrayMap arrayMap2;
        Association association;
        int i3;
        if (!this.mTrackingAssociations || (arrayMap = (ArrayMap) this.mAssociations.get(i2)) == null || (sparseArray = (SparseArray) arrayMap.get(componentName)) == null || (arrayMap2 = (ArrayMap) sparseArray.get(i)) == null || (association = (Association) arrayMap2.get(str)) == null || (i3 = association.mNesting) <= 0) {
            return;
        }
        int i4 = i3 - 1;
        association.mNesting = i4;
        if (i4 == 0) {
            long uptimeMillis = SystemClock.uptimeMillis();
            association.mTime = (uptimeMillis - association.mStartTime) + association.mTime;
            int i5 = association.mLastState;
            long[] jArr = association.mStateTimes;
            jArr[i5] = (uptimeMillis - association.mLastStateUptime) + jArr[i5];
            association.mLastState = 22;
        }
    }

    public final boolean stopBinderTrackingAndDump(ParcelFileDescriptor parcelFileDescriptor) {
        int i = 0;
        if (checkCallingPermission("android.permission.SET_ACTIVITY_WATCHER") != 0) {
            throw new SecurityException("Requires permission android.permission.SET_ACTIVITY_WATCHER");
        }
        int i2 = 1;
        try {
            ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
            boostPriorityForProcLockedSection();
            synchronized (activityManagerProcLock) {
                try {
                    try {
                        if (parcelFileDescriptor == null) {
                            throw new IllegalArgumentException("null fd");
                        }
                        this.mBinderTransactionTrackingEnabled = false;
                        FastPrintWriter fastPrintWriter = new FastPrintWriter(new FileOutputStream(parcelFileDescriptor.getFileDescriptor()));
                        fastPrintWriter.println("Binder transaction traces for all processes.\n");
                        boolean z = FreecessController.IS_MINIMIZE_OLAF_LOCK;
                        if (FreecessController.FreecessControllerHolder.INSTANCE.mIsFreecessEnable) {
                            Slog.w("ActivityManager", "!@ unFreezeAllPackages for BinderTracker");
                            FreecessHandler.FreecessHandlerHolder.INSTANCE.sendResetAllStateMsg("BinderTracker");
                        }
                        this.mProcessList.forEachLruProcessesLOSP(new ActivityManagerService$$ExternalSyntheticLambda20(this, fastPrintWriter, parcelFileDescriptor, i), true);
                        resetPriorityAfterProcLockedSection();
                        return true;
                    } catch (Throwable th) {
                        th = th;
                        i = 1;
                        try {
                            resetPriorityAfterProcLockedSection();
                            throw th;
                        } catch (Throwable th2) {
                            th = th2;
                            i2 = i;
                            if (parcelFileDescriptor != null && i2 != 0) {
                                try {
                                    parcelFileDescriptor.close();
                                } catch (IOException unused) {
                                }
                            }
                            throw th;
                        }
                    }
                } catch (Throwable th3) {
                    th = th3;
                    resetPriorityAfterProcLockedSection();
                    throw th;
                }
            }
        } catch (Throwable th4) {
            th = th4;
        }
    }

    public final void stopDelegateShellPermissionIdentity() {
        AccessCheckDelegateHelper accessCheckDelegateHelper = getAccessCheckDelegateHelper();
        accessCheckDelegateHelper.getClass();
        if (UserHandle.getCallingAppId() != 2000 && UserHandle.getCallingAppId() != 0) {
            throw new SecurityException("Only the shell can delegate its permissions");
        }
        ActivityManagerGlobalLock activityManagerGlobalLock = accessCheckDelegateHelper.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                AccessCheckDelegate$AccessCheckDelegateImpl accessCheckDelegate$AccessCheckDelegateImpl = accessCheckDelegateHelper.mAccessCheckDelegate;
                if (accessCheckDelegate$AccessCheckDelegateImpl == null) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                if (!accessCheckDelegate$AccessCheckDelegateImpl.mDelegateAllPermissions && accessCheckDelegate$AccessCheckDelegateImpl.mDelegatePermissions == null) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                accessCheckDelegate$AccessCheckDelegateImpl.mDelegatePackage = null;
                accessCheckDelegate$AccessCheckDelegateImpl.mDelegatePermissions = null;
                accessCheckDelegate$AccessCheckDelegateImpl.mDelegateAllPermissions = false;
                PackageManager.invalidatePackageInfoCache();
                if (!accessCheckDelegate$AccessCheckDelegateImpl.hasDelegateOrOverrides()) {
                    accessCheckDelegateHelper.removeAccessCheckDelegateLPr();
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public final boolean stopProfile(int i) {
        boolean z;
        UserController userController = this.mUserController;
        if (userController.mInjector.mService.checkCallingPermission("android.permission.MANAGE_USERS") == -1 && userController.mInjector.mService.checkCallingPermission("android.permission.INTERACT_ACROSS_USERS_FULL") == -1) {
            throw new SecurityException("You either need MANAGE_USERS or INTERACT_ACROSS_USERS_FULL permission to stop a profile");
        }
        UserInfo userInfo = userController.getUserInfo(i);
        if (userInfo == null || !userInfo.isProfile()) {
            throw new IllegalArgumentException(BinaryTransparencyService$$ExternalSyntheticOutline0.m(i, "User ", " is not a profile"));
        }
        userController.enforceShellRestriction(i);
        synchronized (userController.mLock) {
            z = userController.stopUsersLU(i, true, false, null, null) == 0;
        }
        return z;
    }

    public final int stopService(IApplicationThread iApplicationThread, Intent intent, String str, int i) {
        return stopService(iApplicationThread, intent, str, i, false, -1, null, null);
    }

    public final int stopService(IApplicationThread iApplicationThread, Intent intent, String str, int i, boolean z, int i2, String str2, String str3) {
        int stopServiceLocked;
        enforceNotIsolatedCaller("stopService");
        if (intent != null && intent.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        try {
            if (Trace.isTagEnabled(64L)) {
                Trace.traceBegin(64L, "stopService: " + intent);
            }
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    stopServiceLocked = this.mServices.stopServiceLocked(iApplicationThread, intent, str, i, z, i2, str2, str3);
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
            resetPriorityAfterLockedSection();
            Trace.traceEnd(64L);
            return stopServiceLocked;
        } catch (Throwable th2) {
            Trace.traceEnd(64L);
            throw th2;
        }
    }

    public final boolean stopServiceToken(ComponentName componentName, IBinder iBinder, int i) {
        boolean stopServiceTokenLocked;
        String str;
        try {
            if (Trace.isTagEnabled(64L)) {
                StringBuilder sb = new StringBuilder("stopServiceToken: ");
                if (componentName != null) {
                    str = componentName.toShortString();
                } else {
                    str = "from " + Binder.getCallingPid();
                }
                sb.append(str);
                Trace.traceBegin(64L, sb.toString());
            }
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    stopServiceTokenLocked = this.mServices.stopServiceTokenLocked(i, iBinder, componentName);
                } finally {
                }
            }
            resetPriorityAfterLockedSection();
            Trace.traceEnd(64L);
            return stopServiceTokenLocked;
        } catch (Throwable th) {
            Trace.traceEnd(64L);
            throw th;
        }
    }

    public final int stopUser(int i, boolean z, IStopUserCallback iStopUserCallback) {
        return stopUserExceptCertainProfiles(i, z, iStopUserCallback);
    }

    public final int stopUserExceptCertainProfiles(int i, boolean z, IStopUserCallback iStopUserCallback) {
        return this.mUserController.stopUser(i, z, false, iStopUserCallback, null);
    }

    public final int stopUserWithCallback(int i, IStopUserCallback iStopUserCallback) {
        return this.mUserController.stopUser(i, true, false, iStopUserCallback, null);
    }

    public final int stopUserWithDelayedLocking(int i, IStopUserCallback iStopUserCallback) {
        return this.mUserController.stopUser(i, true, true, iStopUserCallback, null);
    }

    public final void suppressResizeConfigChanges(boolean z) {
        this.mActivityTaskManager.suppressResizeConfigChanges(z);
    }

    public final boolean switchUser(int i) {
        if (UserManager.getMaxSupportedUsers() <= 1 || MultiUserManager.getInstance(this.mContext).multipleUsersAllowed(true)) {
            return this.mUserController.switchUser(i);
        }
        Slog.w("ActivityManager", "MDM blocks multiuser mode");
        return false;
    }

    /* JADX WARN: Finally extract failed */
    public final void systemReady(SystemServer$$ExternalSyntheticLambda7 systemServer$$ExternalSyntheticLambda7, TimingsTraceAndSlog timingsTraceAndSlog) {
        ArrayList arrayList;
        Object obj;
        CharSequence text;
        timingsTraceAndSlog.traceBegin("PhaseActivityManagerReady");
        EventLogTags.writeBootProgressAmsState(0, -1, 0, "systemReady", "NULL");
        SystemServiceManager systemServiceManager = this.mSystemServiceManager;
        systemServiceManager.getClass();
        systemServiceManager.mUserManagerInternal = (UserManagerInternal) LocalServices.getService(UserManagerInternal.class);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                if (this.mSystemReady) {
                    systemServer$$ExternalSyntheticLambda7.run();
                    EventLogTags.writeBootProgressAmsState(0, -1, 2, "systemReady", "finish goingCallback");
                    timingsTraceAndSlog.traceEnd();
                    resetPriorityAfterLockedSection();
                    return;
                }
                timingsTraceAndSlog.traceBegin("controllersReady");
                this.mLocalDeviceIdleController = (DeviceIdleInternal) LocalServices.getService(DeviceIdleInternal.class);
                this.mActivityTaskManager.onSystemReady();
                UserController userController = this.mUserController;
                userController.mInjector.getUserManagerInternal().addUserLifecycleListener(userController.mUserLifecycleListener);
                userController.updateProfileRelatedCaches();
                ActivityManagerService activityManagerService = userController.mInjector.mService;
                activityManagerService.reportGlobalUsageEvent(activityManagerService.mWakefulness.get() == 1 ? 15 : 16);
                this.mAppOpsService.systemReady();
                this.mProcessList.onSystemReady();
                this.mAppRestrictionController.onSystemReady();
                AppProfiler appProfiler = this.mAppProfiler;
                appProfiler.getClass();
                appProfiler.mChimera = (ChimeraManagerService) ServiceManager.getService("ChimeraManagerService");
                this.mSystemReady = true;
                timingsTraceAndSlog.traceEnd();
                resetPriorityAfterLockedSection();
                try {
                    sTheRealBuildSerial = IDeviceIdentifiersPolicyService.Stub.asInterface(ServiceManager.getService("device_identifiers")).getSerial();
                } catch (RemoteException unused) {
                }
                timingsTraceAndSlog.traceBegin("killProcesses");
                synchronized (this.mPidsSelfLocked) {
                    try {
                        arrayList = null;
                        for (int size = ((SparseArray) this.mPidsSelfLocked.mPidMap).size() - 1; size >= 0; size--) {
                            ProcessRecord valueAt = this.mPidsSelfLocked.valueAt(size);
                            if (!isAllowedWhileBooting(valueAt.info)) {
                                if (arrayList == null) {
                                    arrayList = new ArrayList();
                                }
                                arrayList.add(valueAt);
                            }
                        }
                    } finally {
                    }
                }
                boostPriorityForLockedSection();
                synchronized (this) {
                    if (arrayList != null) {
                        try {
                            for (int size2 = arrayList.size() - 1; size2 >= 0; size2 += -1) {
                                ProcessRecord processRecord = (ProcessRecord) arrayList.get(size2);
                                Slog.i("ActivityManager", "Removing system update proc: " + processRecord);
                                obj = "system update done";
                                this.mProcessList.removeProcessLocked(processRecord, true, false, 13, 8, "system update done", true);
                            }
                        } finally {
                            resetPriorityAfterLockedSection();
                        }
                    }
                    this.mProcessesReady = true;
                }
                resetPriorityAfterLockedSection();
                timingsTraceAndSlog.traceEnd();
                Slog.i("ActivityManager", "System now ready");
                Slog.i("ActivityManager", "!@Boot_EBS_F: boot_progress_ams_ready");
                EventLog.writeEvent(3040, SystemClock.uptimeMillis());
                EnterpriseDeviceManager enterpriseDeviceManager = EnterpriseDeviceManager.getInstance(this.mContext);
                if (enterpriseDeviceManager != null) {
                    this.mRestrictionPolicy = enterpriseDeviceManager.getRestrictionPolicy();
                }
                timingsTraceAndSlog.traceBegin("updateTopComponentForFactoryTest");
                ActivityTaskManagerService.LocalService localService = (ActivityTaskManagerService.LocalService) this.mAtmInternal;
                WindowManagerGlobalLock windowManagerGlobalLock = ActivityTaskManagerService.this.mGlobalLock;
                WindowManagerService.boostPriorityForLockedSection();
                synchronized (windowManagerGlobalLock) {
                    try {
                        ActivityTaskManagerService activityTaskManagerService = ActivityTaskManagerService.this;
                        if (activityTaskManagerService.mFactoryTest != 1) {
                            WindowManagerService.resetPriorityAfterLockedSection();
                        } else {
                            ResolveInfo resolveActivity = activityTaskManagerService.mContext.getPackageManager().resolveActivity(new Intent("android.intent.action.FACTORY_TEST"), 1024);
                            if (resolveActivity != null) {
                                ActivityInfo activityInfo = resolveActivity.activityInfo;
                                ApplicationInfo applicationInfo = activityInfo.applicationInfo;
                                if ((applicationInfo.flags & 1) != 0) {
                                    ActivityTaskManagerService activityTaskManagerService2 = ActivityTaskManagerService.this;
                                    activityTaskManagerService2.mTopAction = "android.intent.action.FACTORY_TEST";
                                    activityTaskManagerService2.mTopComponent = new ComponentName(applicationInfo.packageName, activityInfo.name);
                                    text = null;
                                } else {
                                    text = ActivityTaskManagerService.this.mContext.getResources().getText(R.string.lockscreen_failed_attempts_almost_glogin);
                                }
                            } else {
                                text = ActivityTaskManagerService.this.mContext.getResources().getText(R.string.lockscreen_failed_attempts_almost_at_wipe);
                            }
                            if (text == null) {
                                WindowManagerService.resetPriorityAfterLockedSection();
                            } else {
                                ActivityTaskManagerService activityTaskManagerService3 = ActivityTaskManagerService.this;
                                activityTaskManagerService3.mTopAction = null;
                                activityTaskManagerService3.mTopComponent = null;
                                activityTaskManagerService3.mUiHandler.post(new ActivityTaskManagerService$$ExternalSyntheticLambda5(2, localService, text));
                                WindowManagerService.resetPriorityAfterLockedSection();
                            }
                        }
                    } finally {
                        WindowManagerService.resetPriorityAfterLockedSection();
                    }
                }
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("registerActivityLaunchObserver");
                LaunchObserverRegistryImpl launchObserverRegistry = this.mAtmInternal.getLaunchObserverRegistry();
                launchObserverRegistry.mHandler.sendMessage(PooledLambda.obtainMessage(new LaunchObserverRegistryImpl$$ExternalSyntheticLambda0(1), launchObserverRegistry, this.mActivityLaunchObserver));
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("watchDeviceProvisioning");
                Context context = this.mContext;
                if (isDeviceProvisioned(context)) {
                    SystemProperties.set("persist.sys.device_provisioned", "1");
                } else {
                    context.getContentResolver().registerContentObserver(Settings.Global.getUriFor("device_provisioned"), false, new AnonymousClass18(new Handler(Looper.getMainLooper()), context));
                }
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("retrieveSettings");
                retrieveSettings();
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("Ugm.onSystemReady");
                UriGrantsManagerService.LocalService localService2 = (UriGrantsManagerService.LocalService) this.mUgmInternal;
                synchronized (UriGrantsManagerService.this.mLock) {
                    UriGrantsManagerService.m1003$$Nest$mreadGrantedUriPermissionsLocked(UriGrantsManagerService.this);
                }
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("updateForceBackgroundCheck");
                PowerManagerInternal powerManagerInternal = (PowerManagerInternal) LocalServices.getService(PowerManagerInternal.class);
                if (powerManagerInternal != null) {
                    powerManagerInternal.registerLowPowerModeObserver(12, new ActivityManagerService$$ExternalSyntheticLambda14(1, this));
                    updateForceBackgroundCheck(powerManagerInternal.getLowPowerState(12).batterySaverEnabled);
                } else {
                    Slog.wtf("ActivityManager", "PowerManagerInternal not found.");
                }
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("earlyPhoneStart");
                try {
                    if ("true".equals(SystemProperties.get("sys.config.phone_start_early", "true")) && !AppGlobals.getPackageManager().isFirstBoot() && !AppGlobals.getPackageManager().isDeviceUpgrading()) {
                        Slog.d("ActivityManager", "Phone app starts early due to booting performance");
                        boostPriorityForLockedSection();
                        synchronized (this) {
                            try {
                                ApplicationInfo applicationInfo2 = AppGlobals.getPackageManager().getApplicationInfo("com.android.phone", 1024L, UserHandle.getCallingUserId());
                                if (applicationInfo2 != null) {
                                    Slog.i("ActivityManager", "!@Boot_EBS_N: addAppLocked com.android.phone");
                                    addAppLocked(applicationInfo2, 2);
                                }
                                resetPriorityAfterLockedSection();
                            } catch (Throwable th) {
                                throw th;
                            }
                        }
                    }
                } catch (RemoteException unused2) {
                    Slog.e("ActivityManager", "Failed to get metadata of Phone app");
                }
                timingsTraceAndSlog.traceEnd();
                systemServer$$ExternalSyntheticLambda7.run();
                timingsTraceAndSlog.traceBegin("getCurrentUser");
                int currentUserId = this.mUserController.getCurrentUserId();
                HermesService$3$$ExternalSyntheticOutline0.m(currentUserId, "Current user:", "ActivityManager");
                if (currentUserId != 0 && !this.mUserController.isSystemUserStarted()) {
                    throw new RuntimeException(VibrationParam$1$$ExternalSyntheticOutline0.m(currentUserId, "System user not started while current user is:"));
                }
                timingsTraceAndSlog.traceEnd();
                timingsTraceAndSlog.traceBegin("ActivityManagerStartApps");
                BatteryStatsService batteryStatsService = this.mBatteryStatsService;
                batteryStatsService.mStats.onSystemReady(batteryStatsService.mContext);
                PowerStatsScheduler powerStatsScheduler = batteryStatsService.mPowerStatsScheduler;
                boolean streamlinedBatteryStats = com.android.internal.hidden_from_bootclasspath.com.android.server.power.optimization.Flags.streamlinedBatteryStats();
                powerStatsScheduler.getClass();
                if (streamlinedBatteryStats) {
                    powerStatsScheduler.schedulePowerStatsAggregation();
                    powerStatsScheduler.scheduleNextPowerStatsAggregation();
                }
                this.mBatteryStatsService.noteEvent(32775, Integer.toString(currentUserId), currentUserId);
                this.mBatteryStatsService.noteEvent(32776, Integer.toString(currentUserId), currentUserId);
                UserController userController2 = this.mUserController;
                userController2.mInjector.getClass();
                if (!UserManager.isHeadlessSystemUserMode()) {
                    userController2.mInjector.onUserStarting(0);
                    userController2.mInjector.getUserManagerInternal().onSystemUserVisibilityChanged();
                }
                boostPriorityForLockedSection();
                synchronized (this) {
                    try {
                        timingsTraceAndSlog.traceBegin("startPersistentApps");
                        startPersistentApps(524288);
                        timingsTraceAndSlog.traceEnd();
                        EventLogTags.writeBootProgressAmsState(currentUserId, -1, 1, "systemReady", "startPersistentApps MATCH_DIRECT_BOOT_AWARE");
                        this.mBooting = true;
                        if (SystemProperties.getBoolean("ro.system_user_home_needed", false)) {
                            timingsTraceAndSlog.traceBegin("enableHomeActivity");
                            try {
                                AppGlobals.getPackageManager().setComponentEnabledSetting(new ComponentName(this.mContext, (Class<?>) SystemUserHomeActivity.class), 1, 0, 0, "am");
                                timingsTraceAndSlog.traceEnd();
                            } catch (RemoteException e) {
                                throw e.rethrowAsRuntimeException();
                            }
                        }
                        boolean z = currentUserId == 0;
                        if (z && !UserManager.isHeadlessSystemUserMode()) {
                            timingsTraceAndSlog.traceBegin("startHomeOnAllDisplays");
                            ActivityTaskManagerService.LocalService localService3 = (ActivityTaskManagerService.LocalService) this.mAtmInternal;
                            Object obj2 = ActivityTaskManagerService.this.mGlobalLock;
                            WindowManagerService.boostPriorityForLockedSection();
                            try {
                                synchronized (obj2) {
                                    try {
                                        RootWindowContainer rootWindowContainer = ActivityTaskManagerService.this.mRootWindowContainer;
                                        int childCount = rootWindowContainer.getChildCount() - 1;
                                        while (childCount >= 0) {
                                            int i = childCount;
                                            Object obj3 = obj2;
                                            rootWindowContainer.startHomeOnDisplay("systemReady", currentUserId, ((DisplayContent) rootWindowContainer.getChildAt(childCount)).mDisplayId, false, false);
                                            childCount = i - 1;
                                            obj2 = obj3;
                                        }
                                        WindowManagerService.resetPriorityAfterLockedSection();
                                        timingsTraceAndSlog.traceEnd();
                                    } catch (Throwable th2) {
                                        th = th2;
                                        obj = obj2;
                                        throw th;
                                    }
                                }
                            } catch (Throwable th3) {
                                th = th3;
                            }
                        }
                        UiHandler uiHandler = this.mHandler;
                        ActivityTaskManagerInternal activityTaskManagerInternal = this.mAtmInternal;
                        Objects.requireNonNull(activityTaskManagerInternal);
                        uiHandler.post(new ActivityManagerService$$ExternalSyntheticLambda9(2, activityTaskManagerInternal));
                        if (z) {
                            timingsTraceAndSlog.traceBegin("sendUserStartBroadcast");
                            int callingUid = Binder.getCallingUid();
                            int callingPid = Binder.getCallingPid();
                            long clearCallingIdentity = Binder.clearCallingIdentity();
                            try {
                                this.mUserController.sendUserStartedBroadcast(currentUserId, callingUid, callingPid);
                                EventLogTags.writeBootProgressAmsState(currentUserId, -1, 1, "systemReady", "send USER STARTED");
                                this.mUserController.sendUserStartingBroadcast(currentUserId, callingUid, callingPid);
                                EventLogTags.writeBootProgressAmsState(currentUserId, -1, 1, "systemReady", "send USER STARTING");
                            } finally {
                                try {
                                    timingsTraceAndSlog.traceEnd();
                                } finally {
                                }
                            }
                            timingsTraceAndSlog.traceEnd();
                        } else {
                            Slog.i("ActivityManager", "Not sending multi-user broadcasts for non-system user " + currentUserId);
                        }
                        timingsTraceAndSlog.traceBegin("resumeTopActivities");
                        this.mAtmInternal.resumeTopActivities(false);
                        timingsTraceAndSlog.traceEnd();
                        if (z) {
                            timingsTraceAndSlog.traceBegin("sendUserSwitchBroadcasts");
                            this.mUserController.sendUserSwitchBroadcasts(-1, currentUserId);
                            timingsTraceAndSlog.traceEnd();
                        }
                        timingsTraceAndSlog.traceBegin("setBinderProxies");
                        BinderInternal.nSetBinderProxyCountWatermarks(6000, 5500, 5750);
                        BinderInternal.nSetBinderProxyCountEnabled(true);
                        BinderInternal.setBinderProxyCountCallback(new MyBinderProxyCountEventListener(), this.mHandler);
                        timingsTraceAndSlog.traceEnd();
                        timingsTraceAndSlog.traceEnd();
                        timingsTraceAndSlog.traceBegin("componentAlias");
                        this.mComponentAliasResolver.onSystemReady(this.mConstants.mComponentAliasOverrides, this.mConstants.mEnableComponentAlias);
                        timingsTraceAndSlog.traceEnd();
                        BackgroundThread.getHandler().post(new ActivityManagerService$$ExternalSyntheticLambda11(this, 3));
                        BackgroundThread.getHandler().post(new ActivityManagerService$$ExternalSyntheticLambda11(this, 4));
                        EventLogTags.writeBootProgressAmsState(0, -1, 2, "systemReady", "NULL");
                        timingsTraceAndSlog.traceEnd();
                        resetPriorityAfterLockedSection();
                        updateExtraFreeKbytes();
                        new AnonymousClass18();
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                }
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
    }

    public final void tempAllowlistForPendingIntentLocked(int i, int i2, int i3, long j, int i4, int i5, String str) {
        synchronized (this.mPidsSelfLocked) {
            try {
                ProcessRecord processRecord = this.mPidsSelfLocked.get(i);
                if (processRecord == null) {
                    Slog.w("ActivityManager", "tempAllowlistForPendingIntentLocked() no ProcessRecord for pid " + i);
                } else if (processRecord.mServices.mAllowlistManager || checkComponentPermission(i, i2, "android.permission.CHANGE_DEVICE_IDLE_TEMP_WHITELIST", 0, -1, true) == 0 || checkComponentPermission(i, i2, "android.permission.START_ACTIVITIES_FROM_BACKGROUND", 0, -1, true) == 0 || checkComponentPermission(i, i2, "android.permission.START_FOREGROUND_SERVICES_FROM_BACKGROUND", 0, -1, true) == 0) {
                    tempAllowlistUidLocked(i3, i5, str, i4, j, i2);
                }
            } catch (Throwable th) {
                throw th;
            }
        }
    }

    public final void tempAllowlistUidLocked(int i, int i2, String str, int i3, long j, int i4) {
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                DeviceIdleInternal deviceIdleInternal = this.mLocalDeviceIdleController;
                int tempAllowListType = deviceIdleInternal != null ? deviceIdleInternal.getTempAllowListType(i2, i3) : i3;
                if (tempAllowListType == -1) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                PendingTempAllowlists pendingTempAllowlists = this.mPendingTempAllowlist;
                PendingTempAllowlist pendingTempAllowlist = new PendingTempAllowlist(i, i2, str, tempAllowListType, j, i4);
                synchronized (pendingTempAllowlists.mPendingTempAllowlist) {
                    pendingTempAllowlists.mPendingTempAllowlist.put(i, pendingTempAllowlist);
                }
                setUidTempAllowlistStateLSP(i, true);
                this.mUiHandler.obtainMessage(68).sendToTarget();
                if (tempAllowListType == 0) {
                    this.mFgsStartTempAllowList.add(i, j, new FgsTempAllowListItem(i2, i4, j, str));
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public final void trimApplicationsLocked(int i, boolean z) {
        boolean z2 = false;
        for (int size = this.mProcessList.mRemovedProcesses.size() - 1; size >= 0; size--) {
            ProcessRecord processRecord = (ProcessRecord) this.mProcessList.mRemovedProcesses.get(size);
            if (!processRecord.hasActivitiesOrRecentTasks() && processRecord.mReceivers.mCurReceiversSize == 0 && processRecord.mServices.mServices.size() == 0) {
                IApplicationThread iApplicationThread = processRecord.mThread;
                StringBuilder sb = new StringBuilder("Exiting empty application process ");
                sb.append(processRecord.toShortString());
                sb.append(" (");
                sb.append(iApplicationThread != null ? iApplicationThread.asBinder() : null);
                sb.append(")\n");
                Slog.i("ActivityManager", sb.toString());
                int i2 = processRecord.mPid;
                if (i2 > 0 && i2 != MY_PID) {
                    processRecord.killLocked(13, 4, "empty", "empty", false, true);
                } else if (iApplicationThread != null) {
                    try {
                        iApplicationThread.scheduleExit();
                    } catch (Exception unused) {
                    }
                }
                cleanUpApplicationRecordLocked(processRecord, i2, false, true, false, false);
                this.mProcessList.mRemovedProcesses.remove(size);
                if (processRecord.mPersistent) {
                    addAppLocked(processRecord.info, 2);
                    processRecord.mProfile.addHostingComponentType(2);
                }
                z2 = true;
            }
        }
        if (z2 || z) {
            updateOomAdjLocked(i);
        } else {
            updateOomAdjPendingTargetsLocked(i);
        }
    }

    public final void unbindBackupAgent(ApplicationInfo applicationInfo) {
        enforceCallingPermission("android.permission.CONFIRM_FULL_BACKUP", "unbindBackupAgent");
        if (applicationInfo == null) {
            Slog.w("ActivityManager", "unbind backup agent for null app");
            return;
        }
        int userId = UserHandle.getUserId(applicationInfo.uid);
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                BackupRecord backupRecord = (BackupRecord) this.mBackupTargets.get(userId);
                String str = backupRecord == null ? null : backupRecord.appInfo.packageName;
                try {
                    if (str == null) {
                        Slog.w("ActivityManager", "Unbinding backup agent with no active backup");
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    if (!str.equals(applicationInfo.packageName)) {
                        Slog.e("ActivityManager", "Unbind of " + applicationInfo + " but is not the current backup target");
                        resetPriorityAfterLockedSection();
                        return;
                    }
                    ProcessRecord processRecord = backupRecord.app;
                    updateOomAdjLocked(15, processRecord);
                    processRecord.mInFullBackup = false;
                    processRecord.mProfile.clearHostingComponentType(4);
                    int i = backupRecord.appInfo.uid;
                    IApplicationThread iApplicationThread = processRecord.mThread;
                    if (iApplicationThread != null) {
                        try {
                            iApplicationThread.scheduleDestroyBackupAgent(applicationInfo, userId);
                        } catch (Exception e) {
                            Slog.e("ActivityManager", "Exception when unbinding backup agent:");
                            e.printStackTrace();
                        }
                    }
                    resetPriorityAfterLockedSection();
                    if (i != -1) {
                        ((JobSchedulerInternal) LocalServices.getService(JobSchedulerInternal.class)).removeBackingUpUid(i);
                    }
                } finally {
                    this.mBackupTargets.delete(userId);
                }
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
    }

    public final void unbindFinished(IBinder iBinder, Intent intent, boolean z) {
        if (intent != null && intent.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mServices.unbindFinishedLocked((ServiceRecord) iBinder, intent);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final boolean unbindService(IServiceConnection iServiceConnection) {
        boolean unbindServiceLocked;
        try {
            if (Trace.isTagEnabled(64L)) {
                Trace.traceBegin(64L, "unbindService");
            }
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    unbindServiceLocked = this.mServices.unbindServiceLocked(iServiceConnection);
                } finally {
                }
            }
            resetPriorityAfterLockedSection();
            Trace.traceEnd(64L);
            return unbindServiceLocked;
        } catch (Throwable th) {
            Trace.traceEnd(64L);
            throw th;
        }
    }

    public final void unbroadcastIntent(IApplicationThread iApplicationThread, Intent intent, int i) {
        if (intent != null && intent.hasFileDescriptors()) {
            throw new IllegalArgumentException("File descriptors passed in Intent");
        }
        int handleIncomingUser = this.mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(), i, true, 0, "removeStickyBroadcast", null);
        if (checkCallingPermission("android.permission.BROADCAST_STICKY") != 0) {
            throw new SecurityException(ActivityManagerService$$ExternalSyntheticOutline0.m(new StringBuilder("Permission Denial: unbroadcastIntent() from pid="), ", uid=", " requires android.permission.BROADCAST_STICKY", "ActivityManager"));
        }
        synchronized (this.mStickyBroadcasts) {
            try {
                ArrayMap arrayMap = (ArrayMap) this.mStickyBroadcasts.get(handleIncomingUser);
                if (arrayMap != null) {
                    ArrayList arrayList = (ArrayList) arrayMap.get(intent.getAction());
                    if (arrayList != null) {
                        int size = arrayList.size();
                        int i2 = 0;
                        while (true) {
                            if (i2 >= size) {
                                break;
                            }
                            if (intent.filterEquals(((StickyBroadcast) arrayList.get(i2)).intent)) {
                                arrayList.remove(i2);
                                break;
                            }
                            i2++;
                        }
                        if (arrayList.size() <= 0) {
                            arrayMap.remove(intent.getAction());
                        }
                    }
                    if (arrayMap.size() <= 0) {
                        this.mStickyBroadcasts.remove(handleIncomingUser);
                    }
                }
            } catch (Throwable th) {
                throw th;
            }
        }
    }

    public final void unhandledBack() {
        this.mActivityTaskManager.unhandledBack();
    }

    public final boolean unlockUser(int i, byte[] bArr, byte[] bArr2, IProgressListener iProgressListener) {
        return this.mUserController.unlockUser(i, iProgressListener);
    }

    public final boolean unlockUser2(int i, IProgressListener iProgressListener) {
        EventLogTags.writeBootProgressAmsState(i, -1, 0, "AMS.unlockUser2", "NULL");
        return this.mUserController.unlockUser(i, iProgressListener);
    }

    public final void unregisterIntentSenderCancelListener(IIntentSender iIntentSender, IResultReceiver iResultReceiver) {
        PendingIntentController pendingIntentController = this.mPendingIntentController;
        pendingIntentController.getClass();
        if (iIntentSender instanceof PendingIntentRecord) {
            synchronized (pendingIntentController.mLock) {
                PendingIntentRecord pendingIntentRecord = (PendingIntentRecord) iIntentSender;
                RemoteCallbackList remoteCallbackList = pendingIntentRecord.mCancelCallbacks;
                if (remoteCallbackList != null) {
                    remoteCallbackList.unregister(iResultReceiver);
                    if (pendingIntentRecord.mCancelCallbacks.getRegisteredCallbackCount() <= 0) {
                        pendingIntentRecord.mCancelCallbacks = null;
                    }
                }
            }
        }
    }

    public final void unregisterProcessObserver(IProcessObserver iProcessObserver) {
        this.mProcessList.mProcessObservers.unregister(iProcessObserver);
    }

    public final void unregisterReceiver(IIntentReceiver iIntentReceiver) {
        Flags.traceReceiverRegistration();
        if (Trace.isTagEnabled(64L)) {
            Trace.traceBegin(64L, TextUtils.formatSimple("unregisterReceiver: %d/%s", new Object[]{Integer.valueOf(Binder.getCallingUid()), iIntentReceiver == null ? "null" : iIntentReceiver.asBinder()}));
        }
        try {
            unregisterReceiverTraced(iIntentReceiver);
        } finally {
            Flags.traceReceiverRegistration();
            if (Trace.isTagEnabled(64L)) {
                Trace.traceEnd(64L);
            }
        }
    }

    public final void unregisterReceiverTraced(IIntentReceiver iIntentReceiver) {
        boolean z;
        long clearCallingIdentity = Binder.clearCallingIdentity();
        try {
            boostPriorityForLockedSection();
            synchronized (this) {
                try {
                    ReceiverList receiverList = (ReceiverList) this.mRegisteredReceivers.get(iIntentReceiver.asBinder());
                    if (receiverList != null) {
                        BroadcastRecord broadcastRecord = receiverList.curBroadcast;
                        z = broadcastRecord != null && broadcastRecord.queue.finishReceiverLocked(receiverList.app, broadcastRecord.resultCode, broadcastRecord.resultData, broadcastRecord.resultExtras, broadcastRecord.resultAbort);
                        ProcessRecord processRecord = receiverList.app;
                        if (processRecord != null) {
                            processRecord.mReceivers.mReceivers.remove(receiverList);
                        }
                        removeReceiverLocked(receiverList);
                        if (receiverList.linkedToDeath) {
                            receiverList.linkedToDeath = false;
                            receiverList.receiver.asBinder().unlinkToDeath(receiverList, 0);
                        }
                    } else {
                        z = false;
                    }
                    if (!z) {
                        resetPriorityAfterLockedSection();
                    } else {
                        trimApplicationsLocked(2, false);
                        resetPriorityAfterLockedSection();
                    }
                } catch (Throwable th) {
                    resetPriorityAfterLockedSection();
                    throw th;
                }
            }
        } finally {
            Binder.restoreCallingIdentity(clearCallingIdentity);
        }
    }

    public final void unregisterTaskStackListener(ITaskStackListener iTaskStackListener) {
        this.mActivityTaskManager.unregisterTaskStackListener(iTaskStackListener);
    }

    public final void unregisterUidFrozenStateChangedCallback(IUidFrozenStateChangedCallback iUidFrozenStateChangedCallback) {
        Preconditions.checkNotNull(iUidFrozenStateChangedCallback, "callback cannot be null");
        enforceCallingPermission("android.permission.PACKAGE_USAGE_STATS", "unregisterUidFrozenStateChangedCallback()");
        synchronized (this.mUidFrozenStateChangedCallbackList) {
            this.mUidFrozenStateChangedCallbackList.unregister(iUidFrozenStateChangedCallback);
        }
    }

    public final void unregisterUidObserver(IUidObserver iUidObserver) {
        UidObserverController uidObserverController = this.mUidObserverController;
        synchronized (uidObserverController.mLock) {
            uidObserverController.mUidObservers.unregister(iUidObserver);
        }
    }

    public final void unregisterUserSwitchObserver(IUserSwitchObserver iUserSwitchObserver) {
        this.mUserController.mUserSwitchObservers.unregister(iUserSwitchObserver);
    }

    public final void unstableProviderDied(IBinder iBinder) {
        IContentProvider iContentProvider;
        ProviderInfo providerInfo;
        ContentProviderHelper contentProviderHelper = this.mCpHelper;
        contentProviderHelper.getClass();
        try {
            ContentProviderConnection contentProviderConnection = (ContentProviderConnection) iBinder;
            if (contentProviderConnection == null) {
                throw new NullPointerException("connection is null");
            }
            ContentProviderRecord contentProviderRecord = contentProviderConnection.provider;
            traceBegin("unstableProviderDied: ", (contentProviderRecord == null || (providerInfo = contentProviderRecord.info) == null) ? "" : providerInfo.authority);
            try {
                ActivityManagerService activityManagerService = contentProviderHelper.mService;
                boostPriorityForLockedSection();
                synchronized (activityManagerService) {
                    try {
                        iContentProvider = contentProviderConnection.provider.provider;
                    } finally {
                        resetPriorityAfterLockedSection();
                    }
                }
                resetPriorityAfterLockedSection();
                if (iContentProvider != null) {
                    if (iContentProvider.asBinder().pingBinder()) {
                        ActivityManagerService activityManagerService2 = contentProviderHelper.mService;
                        boostPriorityForLockedSection();
                        synchronized (activityManagerService2) {
                            try {
                                Slog.w("ContentProviderHelper", "unstableProviderDied: caller " + Binder.getCallingUid() + " says " + contentProviderConnection + " died, but we don't agree");
                            } finally {
                            }
                        }
                    } else {
                        ActivityManagerService activityManagerService3 = contentProviderHelper.mService;
                        boostPriorityForLockedSection();
                        synchronized (activityManagerService3) {
                            try {
                                ContentProviderRecord contentProviderRecord2 = contentProviderConnection.provider;
                                if (contentProviderRecord2.provider == iContentProvider) {
                                    ProcessRecord processRecord = contentProviderRecord2.proc;
                                    if (processRecord != null && processRecord.mThread != null) {
                                        contentProviderHelper.mService.reportUidInfoMessageLocked(processRecord.info.uid, "Process " + processRecord.processName + " (pid " + processRecord.mPid + ") early provider death");
                                        long clearCallingIdentity = Binder.clearCallingIdentity();
                                        try {
                                            ActivityManagerService activityManagerService4 = contentProviderHelper.mService;
                                            activityManagerService4.getClass();
                                            activityManagerService4.appDiedLocked(processRecord, processRecord.mPid, processRecord.mThread, false, "unstable content provider");
                                            resetPriorityAfterLockedSection();
                                        } finally {
                                            Binder.restoreCallingIdentity(clearCallingIdentity);
                                        }
                                    }
                                }
                            } catch (Throwable th) {
                                resetPriorityAfterLockedSection();
                                throw th;
                            }
                        }
                    }
                }
                Trace.traceEnd(64L);
            } catch (Throwable th2) {
                Trace.traceEnd(64L);
                throw th2;
            }
        } catch (ClassCastException unused) {
            String str = "refContentProvider: " + iBinder + " not a ContentProviderConnection";
            Slog.w("ContentProviderHelper", str);
            throw new IllegalArgumentException(str);
        }
    }

    /* JADX WARN: Code restructure failed: missing block: B:99:0x0198, code lost:
    
        if (r20 == 24) goto L89;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final void updateActivityUsageStats(android.content.ComponentName r18, int r19, int r20, android.os.IBinder r21, android.content.ComponentName r22, android.app.assist.ActivityId r23, android.content.Intent r24) {
        /*
            Method dump skipped, instructions count: 436
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.updateActivityUsageStats(android.content.ComponentName, int, int, android.os.IBinder, android.content.ComponentName, android.app.assist.ActivityId, android.content.Intent):void");
    }

    public final void updateApplicationInfoLOSP(final List list, boolean z, int i, final boolean z2) {
        if (z) {
            ParsingPackageUtils.readConfigUseRoundIcon((Resources) null);
        }
        ProcessList processList = this.mProcessList;
        processList.getClass();
        boolean z3 = z && !z2;
        final ArrayList arrayList = new ArrayList();
        for (int size = processList.mLruProcesses.size() - 1; size >= 0; size--) {
            final ProcessRecord processRecord = (ProcessRecord) processList.mLruProcesses.get(size);
            if (processRecord.mThread != null && (i == -1 || processRecord.userId == i)) {
                final boolean z4 = z3;
                processRecord.mPkgList.forEachPackage(new Consumer() { // from class: com.android.server.am.ProcessList$$ExternalSyntheticLambda2
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        boolean z5 = z4;
                        List list2 = list;
                        ProcessRecord processRecord2 = processRecord;
                        boolean z6 = z2;
                        ArrayList arrayList2 = arrayList;
                        String str = (String) obj;
                        if (z5 || list2.contains(str)) {
                            try {
                                ApplicationInfo applicationInfo = AppGlobals.getPackageManager().getApplicationInfo(str, 1024L, processRecord2.userId);
                                if (applicationInfo != null) {
                                    if (applicationInfo.packageName.equals(processRecord2.info.packageName)) {
                                        processRecord2.info = applicationInfo;
                                        PlatformCompatCache platformCompatCache = PlatformCompatCache.getInstance();
                                        for (int size2 = platformCompatCache.mCaches.size() - 1; size2 >= 0; size2--) {
                                            PlatformCompatCache.CacheItem cacheItem = (PlatformCompatCache.CacheItem) platformCompatCache.mCaches.valueAt(size2);
                                            synchronized (cacheItem.mLock) {
                                                try {
                                                    int indexOfKey = cacheItem.mCache.indexOfKey(applicationInfo.packageName);
                                                    if (indexOfKey >= 0) {
                                                        cacheItem.fetchLocked(applicationInfo, indexOfKey);
                                                    }
                                                } catch (Throwable th) {
                                                    throw th;
                                                }
                                            }
                                        }
                                    }
                                    if (z6) {
                                        processRecord2.mWindowProcessController.updateActivityInfo(applicationInfo);
                                    }
                                    processRecord2.mThread.scheduleApplicationInfoChanged(applicationInfo);
                                    arrayList2.add(processRecord2.mWindowProcessController);
                                }
                            } catch (RemoteException unused) {
                                Slog.w("ActivityManager", "Failed to update " + str + " ApplicationInfo for " + processRecord2);
                            }
                        }
                    }
                });
            }
        }
        ActivityTaskManagerService activityTaskManagerService = processList.mService.mActivityTaskManager;
        WindowManagerGlobalLock windowManagerGlobalLock = activityTaskManagerService.mGlobalLock;
        WindowManagerService.boostPriorityForLockedSection();
        synchronized (windowManagerGlobalLock) {
            try {
                int i2 = activityTaskManagerService.mGlobalAssetsSeq + 1;
                activityTaskManagerService.mGlobalAssetsSeq = i2;
                int max = Math.max(i2, 1);
                activityTaskManagerService.mGlobalAssetsSeq = max;
                if (z) {
                    activityTaskManagerService.mMultiTaskingAppCompatController.mSizeCompatModePolicy.mAvoidAppCompatDisplayInsets = true;
                    Configuration configuration = new Configuration();
                    configuration.assetsSeq = max;
                    activityTaskManagerService.updateConfiguration(configuration);
                    activityTaskManagerService.mMultiTaskingAppCompatController.mSizeCompatModePolicy.mAvoidAppCompatDisplayInsets = false;
                }
                for (int size2 = arrayList.size() - 1; size2 >= 0; size2--) {
                    WindowProcessController windowProcessController = (WindowProcessController) arrayList.get(size2);
                    windowProcessController.updateAssetConfiguration(max);
                    ArrayList arrayList2 = new ArrayList();
                    for (int size3 = windowProcessController.mActivities.size() - 1; size3 >= 0; size3--) {
                        Task task = ((ActivityRecord) windowProcessController.mActivities.get(size3)).task;
                        if (task != null && !arrayList2.contains(Integer.valueOf(task.mTaskId))) {
                            arrayList2.add(Integer.valueOf(task.mTaskId));
                        }
                    }
                    Slog.e("ActivityTaskManager", "Removing snapshot from cache for " + windowProcessController.mInfo.packageName + " " + arrayList2);
                    for (int size4 = arrayList2.size() - 1; size4 >= 0; size4--) {
                        TaskSnapshotController taskSnapshotController = activityTaskManagerService.mWindowManager.mTaskSnapshotController;
                        Integer num = (Integer) arrayList2.get(size4);
                        num.getClass();
                        ((TaskSnapshotCache) taskSnapshotController.mCache).removeRunningEntry(num);
                    }
                }
            } catch (Throwable th) {
                WindowManagerService.resetPriorityAfterLockedSection();
                throw th;
            }
        }
        WindowManagerService.resetPriorityAfterLockedSection();
        if (z) {
            Executor executor = ActivityThread.currentActivityThread().getExecutor();
            DisplayManagerInternal displayManagerInternal = (DisplayManagerInternal) LocalServices.getService(DisplayManagerInternal.class);
            if (displayManagerInternal != null) {
                executor.execute(new ActivityManagerService$$ExternalSyntheticLambda9(0, displayManagerInternal));
            }
            WindowManagerService windowManagerService = this.mWindowManager;
            if (windowManagerService != null) {
                Objects.requireNonNull(windowManagerService);
                executor.execute(new ActivityManagerService$$ExternalSyntheticLambda9(1, windowManagerService));
            }
        }
    }

    public final boolean updateConfiguration(Configuration configuration) {
        return this.mActivityTaskManager.updateConfiguration(configuration);
    }

    public final void updateCpuStats() {
        AppProfiler appProfiler = this.mAppProfiler;
        appProfiler.getClass();
        if (appProfiler.mLastCpuTime.get() < SystemClock.uptimeMillis() - 5000 && appProfiler.mProcessCpuMutexFree.compareAndSet(true, false)) {
            synchronized (appProfiler.mProcessCpuThread) {
                appProfiler.mProcessCpuThread.notify();
            }
        }
    }

    public final void updateCpuStatsNow() {
        this.mAppProfiler.updateCpuStatsNow();
    }

    public final void updateExtraFreeKbytes() {
        AnyMotionDetector$$ExternalSyntheticOutline0.m("ActivityManager", new StringBuilder("updateExtraFreeKbytes before : "), this.mProcessList.mIsDisplayChanged);
        if (this.mWindowManager != null) {
            this.mProcessList.mIsDisplayChanged = true;
            AnyMotionDetector$$ExternalSyntheticOutline0.m("ActivityManager", new StringBuilder("updateExtraFreeKbytes after : "), this.mProcessList.mIsDisplayChanged);
            this.mProcessList.applyDisplaySize(this.mWindowManager);
        }
    }

    public final void updateFlingerFlag(int i, String str) {
        IApplicationThread iApplicationThread;
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                synchronized (this.mPidsSelfLocked) {
                    ProcessRecord processRecord = this.mPidsSelfLocked.get(i);
                    if (processRecord != null && (iApplicationThread = processRecord.mThread) != null) {
                        try {
                            iApplicationThread.setFlingerFlag(str);
                        } catch (RemoteException e) {
                            Slog.w("ActivityManager", "updateFlingerFlag exception", e);
                        }
                    }
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public final void updateForceBackgroundCheck(boolean z) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerProcLock) {
                    try {
                        if (this.mForceBackgroundCheck != z) {
                            this.mForceBackgroundCheck = z;
                            if (z) {
                                ProcessList processList = this.mProcessList;
                                int size = processList.mActiveUids.mActiveUids.size();
                                for (int i = 0; i < size; i++) {
                                    if (!UserHandle.isCore(processList.mActiveUids.mActiveUids.keyAt(i))) {
                                        UidRecord valueAt = processList.mActiveUids.valueAt(i);
                                        if (valueAt.mIdle) {
                                            processList.mService.doStopUidLocked(valueAt.mUid, valueAt);
                                        }
                                    }
                                }
                            }
                        }
                    } catch (Throwable th) {
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final void updateForegroundServiceUsageStats(int i, ComponentName componentName, boolean z) {
        if (this.mUsageStatsService != null) {
            UsageStatsManagerInternal usageStatsManagerInternal = this.mUsageStatsService;
            int i2 = z ? 19 : 20;
            UsageStatsService.LocalService localService = (UsageStatsService.LocalService) usageStatsManagerInternal;
            localService.getClass();
            if (componentName == null) {
                Slog.w("UsageStatsService", "Event reported without a component name");
                return;
            }
            UsageEvents.Event event = new UsageEvents.Event(i2, SystemClock.elapsedRealtime());
            event.mPackage = componentName.getPackageName();
            event.mClass = componentName.getClassName();
            event.mInstanceId = 0;
            event.mTaskRootPackage = null;
            event.mTaskRootClass = null;
            UsageStatsService.this.reportEventOrAddToQueue(i, event);
        }
    }

    public final void updateLockTaskPackages(int i, String[] strArr) {
        this.mActivityTaskManager.updateLockTaskPackages(i, strArr);
    }

    public final void updateLruProcessLocked(ProcessRecord processRecord, ProcessRecord processRecord2, boolean z) {
        this.mProcessList.updateLruProcessLocked(processRecord, processRecord2, z);
    }

    public final boolean updateMccMncConfiguration(String str, String str2) {
        try {
            int parseInt = Integer.parseInt(str);
            int parseInt2 = Integer.parseInt(str2);
            Configuration configuration = new Configuration();
            configuration.mcc = parseInt;
            if (parseInt2 == 0) {
                parseInt2 = GnssNative.GNSS_AIDING_TYPE_ALL;
            }
            configuration.mnc = parseInt2;
            return this.mActivityTaskManager.updateConfiguration(configuration);
        } catch (NumberFormatException | StringIndexOutOfBoundsException e) {
            StringBuilder m = InitialConfiguration$$ExternalSyntheticOutline0.m("Error parsing mcc: ", str, " mnc: ", str2, ". ex=");
            m.append(e);
            Slog.e("ActivityManager", m.toString());
            return false;
        }
    }

    public final void updateOomAdjLocked(int i) {
        OomAdjuster oomAdjuster = this.mOomAdjuster;
        ActivityManagerGlobalLock activityManagerGlobalLock = oomAdjuster.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            try {
                oomAdjuster.updateOomAdjLSP(i);
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public final boolean updateOomAdjLocked(int i, ProcessRecord processRecord) {
        OomAdjuster oomAdjuster = this.mOomAdjuster;
        ActivityManagerGlobalLock activityManagerGlobalLock = oomAdjuster.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerGlobalLock) {
            if (processRecord != null) {
                try {
                    if (oomAdjuster.mConstants.OOMADJ_UPDATE_QUICK) {
                        if (oomAdjuster.mOomAdjUpdateOngoing) {
                            oomAdjuster.mPendingProcessSet.add(processRecord);
                        } else {
                            try {
                                oomAdjuster.mOomAdjUpdateOngoing = true;
                                oomAdjuster.performUpdateOomAdjLSP(i, processRecord);
                                oomAdjuster.mOomAdjUpdateOngoing = false;
                                oomAdjuster.updateOomAdjPendingTargetsLocked(i);
                            } catch (Throwable th) {
                                oomAdjuster.mOomAdjUpdateOngoing = false;
                                oomAdjuster.updateOomAdjPendingTargetsLocked(i);
                                throw th;
                            }
                        }
                    }
                } catch (Throwable th2) {
                    resetPriorityAfterProcLockedSection();
                    throw th2;
                }
            }
            oomAdjuster.updateOomAdjLSP(i);
        }
        resetPriorityAfterProcLockedSection();
        return true;
    }

    public final void updateOomAdjPendingTargetsLocked(int i) {
        this.mOomAdjuster.updateOomAdjPendingTargetsLocked(i);
    }

    public final void updatePersistentConfiguration(Configuration configuration) {
        updatePersistentConfigurationWithAttribution(configuration, Settings.getPackageNameForUid(this.mContext, Binder.getCallingUid()), null);
    }

    public final void updatePersistentConfigurationAndLocaleOverlays(Configuration configuration, String str, String str2, LocaleList localeList) {
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "updatePersistentConfiguration()");
        enforceWriteSettingsPermission(str, str2);
        if (configuration == null) {
            throw new NullPointerException("Configuration must not be null");
        }
        if (!isDeviceProvisioned(this.mContext)) {
            updatePersistentConfigurationWithAttribution(configuration, str, str2);
        }
        int callingPid = Binder.getCallingPid();
        Slog.e("ActivityManager", "LocaleChange Start: Locale List = " + localeList + ", Time = " + System.currentTimeMillis());
        int callingUserId = UserHandle.getCallingUserId();
        if (localeList == null || localeList.isEmpty()) {
            Slog.e("ActivityManager", "updateLocaleOverlays() called with null localelist");
            overlaysInstallComplete(configuration, str, str2, callingPid, null);
            return;
        }
        LocaleOverlayManagerWrapper localeOverlayManagerWrapper = LocaleOverlayManagerWrapper.getInstance(this.mContext);
        try {
            OverlayChangeObserverImpl overlayChangeObserverImpl = new OverlayChangeObserverImpl(configuration, str, str2, callingUserId, callingPid, this);
            this.mHandler.postDelayed(overlayChangeObserverImpl.mTimeoutRunnable, 30000L);
            localeOverlayManagerWrapper.applyLocales(localeList, callingUserId, overlayChangeObserverImpl);
        } catch (Exception e) {
            overlaysInstallComplete(configuration, str, str2, callingPid, null);
            e.printStackTrace();
        }
    }

    public final void updatePersistentConfigurationWithAttribution(Configuration configuration, String str, String str2) {
        updatePersistentConfigurationWithAttribution(configuration, str, str2, Binder.getCallingPid());
    }

    public final void updatePersistentConfigurationWithAttribution(Configuration configuration, String str, String str2, int i) {
        enforceCallingPermission("android.permission.CHANGE_CONFIGURATION", "updatePersistentConfiguration()");
        enforceWriteSettingsPermission(str, str2);
        if (configuration == null) {
            throw new NullPointerException("Configuration must not be null");
        }
        int callingUserId = UserHandle.getCallingUserId();
        if (!UserManager.isVisibleBackgroundUsersEnabled() || callingUserId == getCurrentUserId()) {
            this.mActivityTaskManager.updatePersistentConfiguration(configuration, callingUserId);
            return;
        }
        Slog.w("ActivityManager", "Only current user is allowed to update persistent configuration if visible background users are enabled. Current User" + getCurrentUserId() + ". Calling User: " + callingUserId);
        throw new SecurityException("Only current user is allowed to update persistent configuration.");
    }

    /* JADX WARN: Code restructure failed: missing block: B:10:0x0018, code lost:
    
        if (r0.mHasTypeNoneFgs == r11) goto L39;
     */
    /*
        Code decompiled incorrectly, please refer to instructions dump.
        To view partially-correct code enable 'Show inconsistent code' option in preferences
    */
    public final void updateProcessForegroundLocked(int r8, com.android.server.am.ProcessRecord r9, boolean r10, boolean r11, boolean r12) {
        /*
            Method dump skipped, instructions count: 279
            To view this dump change 'Code comments level' option to 'DEBUG'
        */
        throw new UnsupportedOperationException("Method not decompiled: com.android.server.am.ActivityManagerService.updateProcessForegroundLocked(int, com.android.server.am.ProcessRecord, boolean, boolean, boolean):void");
    }

    public final void updateProxyPacConfigurationForKnoxVpn(HashMap hashMap, int i, ProxyInfo proxyInfo, HashSet hashSet) {
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                try {
                    for (int size = this.mProcessList.mLruProcesses.size() - 1; size >= 0; size--) {
                        ProcessRecord processRecord = (ProcessRecord) this.mProcessList.mLruProcesses.get(size);
                        if (processRecord.uid != i || processRecord.mThread == null) {
                            Iterator it = hashSet.iterator();
                            while (true) {
                                if (it.hasNext()) {
                                    if (processRecord.uid == ((Integer) it.next()).intValue()) {
                                        Log.d("ActivityManager", "knox vpn pac proxy setting is not going to be set for the exempted uid in AMS" + processRecord.uid);
                                        break;
                                    }
                                } else if (processRecord.mThread != null && hashMap.containsKey(Integer.valueOf(processRecord.uid))) {
                                    Log.d("ActivityManager", "knox vpn pac proxy setting has been set for the uid of the knox vpn application in AMS " + processRecord.uid);
                                    processRecord.mThread.setHttpProxyInfo(new ProxyInfoWrapper(proxyInfo));
                                } else if (processRecord.mThread != null && hashMap.containsKey(Integer.valueOf(processRecord.userId))) {
                                    Log.d("ActivityManager", "knox vpn pac proxy setting has been set for the user in AMS " + processRecord.userId + " and the uid is " + processRecord.uid);
                                    processRecord.mThread.setHttpProxyInfo(new ProxyInfoWrapper(proxyInfo));
                                }
                            }
                        } else {
                            Log.d("ActivityManager", "knox vpn pac proxy setting is not going to be set for the uid in AMS" + processRecord.uid);
                        }
                    }
                } catch (Exception e) {
                    Log.e("ActivityManager", "Exception occurred while updating the proxy configuration for knox vpn profile " + Log.getStackTraceString(e));
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
        resetPriorityAfterProcLockedSection();
    }

    public final boolean updateRestrictionInfo(SemAppRestrictionManager.RestrictionInfo restrictionInfo, List list) {
        boolean z = MARsPolicyManager.MARs_ENABLE;
        return MARsPolicyManager.MARsPolicyManagerHolder.INSTANCE.updateRestrictionInfo(restrictionInfo, list);
    }

    public final void updateServiceGroup(IServiceConnection iServiceConnection, int i, int i2) {
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                this.mServices.updateServiceGroupLocked(iServiceConnection, i, i2);
            } catch (Throwable th) {
                resetPriorityAfterLockedSection();
                throw th;
            }
        }
        resetPriorityAfterLockedSection();
    }

    public final boolean validateAssociationAllowedLocked(int i, int i2, String str, String str2) {
        ensureAllowedAssociations();
        if (i != i2 && UserHandle.getAppId(i) != 1000 && UserHandle.getAppId(i2) != 1000) {
            PackageAssociationInfo packageAssociationInfo = (PackageAssociationInfo) this.mAllowedAssociations.get(str);
            if (packageAssociationInfo != null && !packageAssociationInfo.mIsDebuggable && !packageAssociationInfo.mAllowedPackageAssociations.contains(str2)) {
                return false;
            }
            PackageAssociationInfo packageAssociationInfo2 = (PackageAssociationInfo) this.mAllowedAssociations.get(str2);
            if (packageAssociationInfo2 != null && !packageAssociationInfo2.mIsDebuggable && !packageAssociationInfo2.mAllowedPackageAssociations.contains(str)) {
                return false;
            }
        }
        return true;
    }

    public final void verifyBroadcastLocked(Intent intent) {
        int callingUid;
        if (intent != null) {
            if (intent.hasFileDescriptors()) {
                throw new IllegalArgumentException("File descriptors passed in Intent");
            }
            intent.removeExtendedFlags(1);
        }
        int flags = intent.getFlags();
        if (!this.mProcessesReady && (67108864 & flags) == 0 && (1073741824 & flags) == 0) {
            Slog.e("ActivityManager", "Attempt to launch receivers of broadcast intent " + intent + " before boot completion");
            throw new IllegalStateException("Cannot broadcast before boot completed");
        }
        if ((33554432 & flags) != 0) {
            throw new IllegalArgumentException("Can't use FLAG_RECEIVER_BOOT_UPGRADE here");
        }
        if ((flags & 4194304) == 0 || (callingUid = Binder.getCallingUid()) == 0 || callingUid == 2000) {
            return;
        }
        Slog.w("ActivityManager", "Removing FLAG_RECEIVER_FROM_SHELL because caller is UID " + Binder.getCallingUid());
        intent.removeFlags(4194304);
    }

    public final void waitForApplicationBarrier(PrintWriter printWriter) {
        ArrayMap arrayMap;
        int i;
        SparseArray sparseArray;
        final CountDownLatch countDownLatch = new CountDownLatch(1);
        int i2 = 0;
        final AtomicInteger atomicInteger = new AtomicInteger(0);
        final AtomicInteger atomicInteger2 = new AtomicInteger(0);
        RemoteCallback remoteCallback = new RemoteCallback(new RemoteCallback.OnResultListener() { // from class: com.android.server.am.ActivityManagerService$$ExternalSyntheticLambda6
            public final void onResult(Bundle bundle) {
                AtomicInteger atomicInteger3 = atomicInteger2;
                AtomicInteger atomicInteger4 = atomicInteger;
                CountDownLatch countDownLatch2 = countDownLatch;
                if (atomicInteger3.incrementAndGet() == atomicInteger4.get()) {
                    countDownLatch2.countDown();
                }
            }
        });
        atomicInteger.incrementAndGet();
        boostPriorityForLockedSection();
        synchronized (this) {
            try {
                ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
                boostPriorityForProcLockedSection();
                synchronized (activityManagerProcLock) {
                    try {
                        ArrayMap map = this.mProcessList.mProcessNames.getMap();
                        int size = map.size();
                        int i3 = 0;
                        while (i3 < size) {
                            SparseArray sparseArray2 = (SparseArray) map.valueAt(i3);
                            int size2 = sparseArray2.size();
                            int i4 = i2;
                            while (i4 < size2) {
                                ProcessRecord processRecord = (ProcessRecord) sparseArray2.valueAt(i4);
                                IApplicationThread iApplicationThread = processRecord.mOnewayThread;
                                if (iApplicationThread != null) {
                                    CachedAppOptimizer cachedAppOptimizer = this.mOomAdjuster.mCachedAppOptimizer;
                                    arrayMap = map;
                                    i = size;
                                    sparseArray = sparseArray2;
                                    cachedAppOptimizer.unfreezeTemporarily(15, cachedAppOptimizer.mFreezerDebounceTimeout, processRecord);
                                    atomicInteger.incrementAndGet();
                                    try {
                                        iApplicationThread.schedulePing(remoteCallback);
                                    } catch (RemoteException unused) {
                                        remoteCallback.sendResult((Bundle) null);
                                    }
                                } else {
                                    arrayMap = map;
                                    i = size;
                                    sparseArray = sparseArray2;
                                }
                                i4++;
                                map = arrayMap;
                                size = i;
                                sparseArray2 = sparseArray;
                            }
                            i3++;
                            i2 = 0;
                        }
                    } catch (Throwable th) {
                        resetPriorityAfterProcLockedSection();
                        throw th;
                    }
                }
                resetPriorityAfterProcLockedSection();
            } catch (Throwable th2) {
                resetPriorityAfterLockedSection();
                throw th2;
            }
        }
        resetPriorityAfterLockedSection();
        remoteCallback.sendResult((Bundle) null);
        for (int i5 = 0; i5 < 30; i5++) {
            if (countDownLatch.await(1L, TimeUnit.SECONDS)) {
                printWriter.println("Finished application barriers!");
                printWriter.flush();
                return;
            }
            printWriter.println("Waiting for application barriers, at " + atomicInteger2.get() + " of " + atomicInteger.get() + "...");
            printWriter.flush();
        }
        printWriter.println("Gave up waiting for application barriers!");
        printWriter.flush();
    }

    public final void waitForBroadcastBarrier() {
        waitForBroadcastBarrier(ActivityManagerDebugConfig.LOG_WRITER_INFO, false, false);
    }

    public final void waitForBroadcastBarrier(final PrintWriter printWriter, boolean z, boolean z2) {
        BroadcastQueueModernImpl$$ExternalSyntheticLambda1 broadcastQueueModernImpl$$ExternalSyntheticLambda1;
        enforceCallingPermission("android.permission.DUMP", "waitForBroadcastBarrier()");
        if (z) {
            BroadcastLoopers.waitForCondition(printWriter, new BroadcastLoopers$$ExternalSyntheticLambda0(1));
        }
        final BroadcastQueueModernImpl broadcastQueueModernImpl = this.mBroadcastQueue;
        broadcastQueueModernImpl.getClass();
        final long uptimeMillis = SystemClock.uptimeMillis();
        ActivityManagerService activityManagerService = broadcastQueueModernImpl.mService;
        boostPriorityForLockedSection();
        synchronized (activityManagerService) {
            try {
                broadcastQueueModernImpl$$ExternalSyntheticLambda1 = BroadcastQueueModernImpl.QUEUE_PREDICATE_ANY;
                final int i = 0;
                broadcastQueueModernImpl.forEachMatchingQueue(broadcastQueueModernImpl$$ExternalSyntheticLambda1, new Consumer() { // from class: com.android.server.am.BroadcastQueueModernImpl$$ExternalSyntheticLambda20
                    @Override // java.util.function.Consumer
                    public final void accept(Object obj) {
                        BroadcastProcessQueue broadcastProcessQueue = (BroadcastProcessQueue) obj;
                        switch (i) {
                            case 0:
                                broadcastProcessQueue.addPrioritizeEarliestRequest();
                                break;
                            default:
                                int i2 = broadcastProcessQueue.mCountPrioritizeEarliestRequests - 1;
                                broadcastProcessQueue.mCountPrioritizeEarliestRequests = i2;
                                if (i2 != 0) {
                                    if (i2 < 0) {
                                        broadcastProcessQueue.mCountPrioritizeEarliestRequests = 0;
                                        break;
                                    }
                                } else {
                                    broadcastProcessQueue.mRunnableAtInvalidated = true;
                                    break;
                                }
                                break;
                        }
                    }
                });
            } finally {
                resetPriorityAfterLockedSection();
            }
        }
        resetPriorityAfterLockedSection();
        try {
            broadcastQueueModernImpl.waitFor(new BooleanSupplier() { // from class: com.android.server.am.BroadcastQueueModernImpl$$ExternalSyntheticLambda21
                @Override // java.util.function.BooleanSupplier
                public final boolean getAsBoolean() {
                    BroadcastQueueModernImpl broadcastQueueModernImpl2 = BroadcastQueueModernImpl.this;
                    final long j = uptimeMillis;
                    PrintWriter printWriter2 = printWriter;
                    broadcastQueueModernImpl2.getClass();
                    return broadcastQueueModernImpl2.testAllProcessQueues(new Predicate() { // from class: com.android.server.am.BroadcastQueueModernImpl$$ExternalSyntheticLambda25
                        @Override // java.util.function.Predicate
                        public final boolean test(Object obj) {
                            long j2 = j;
                            BroadcastProcessQueue broadcastProcessQueue = (BroadcastProcessQueue) obj;
                            SomeArgs someArgs = (SomeArgs) broadcastProcessQueue.mPending.peekFirst();
                            SomeArgs someArgs2 = (SomeArgs) broadcastProcessQueue.mPendingUrgent.peekFirst();
                            SomeArgs someArgs3 = (SomeArgs) broadcastProcessQueue.mPendingOffload.peekFirst();
                            BroadcastRecord broadcastRecord = broadcastProcessQueue.mActive;
                            return ((broadcastRecord == null || (broadcastRecord.enqueueTime > j2 ? 1 : (broadcastRecord.enqueueTime == j2 ? 0 : -1)) > 0) && (someArgs == null || (((BroadcastRecord) someArgs.arg1).enqueueTime > j2 ? 1 : (((BroadcastRecord) someArgs.arg1).enqueueTime == j2 ? 0 : -1)) > 0) && (someArgs2 == null || (((BroadcastRecord) someArgs2.arg1).enqueueTime > j2 ? 1 : (((BroadcastRecord) someArgs2.arg1).enqueueTime == j2 ? 0 : -1)) > 0) && (someArgs3 == null || (((BroadcastRecord) someArgs3.arg1).enqueueTime > j2 ? 1 : (((BroadcastRecord) someArgs3.arg1).enqueueTime == j2 ? 0 : -1)) > 0)) || broadcastProcessQueue.isDeferredUntilActive();
                        }
                    }, "barrier", printWriter2);
                }
            });
            ActivityManagerService activityManagerService2 = broadcastQueueModernImpl.mService;
            boostPriorityForLockedSection();
            synchronized (activityManagerService2) {
                try {
                    final int i2 = 1;
                    broadcastQueueModernImpl.forEachMatchingQueue(broadcastQueueModernImpl$$ExternalSyntheticLambda1, new Consumer() { // from class: com.android.server.am.BroadcastQueueModernImpl$$ExternalSyntheticLambda20
                        @Override // java.util.function.Consumer
                        public final void accept(Object obj) {
                            BroadcastProcessQueue broadcastProcessQueue = (BroadcastProcessQueue) obj;
                            switch (i2) {
                                case 0:
                                    broadcastProcessQueue.addPrioritizeEarliestRequest();
                                    break;
                                default:
                                    int i22 = broadcastProcessQueue.mCountPrioritizeEarliestRequests - 1;
                                    broadcastProcessQueue.mCountPrioritizeEarliestRequests = i22;
                                    if (i22 != 0) {
                                        if (i22 < 0) {
                                            broadcastProcessQueue.mCountPrioritizeEarliestRequests = 0;
                                            break;
                                        }
                                    } else {
                                        broadcastProcessQueue.mRunnableAtInvalidated = true;
                                        break;
                                    }
                                    break;
                            }
                        }
                    });
                } finally {
                }
            }
            resetPriorityAfterLockedSection();
            if (z2) {
                waitForApplicationBarrier(printWriter);
            }
        } catch (Throwable th) {
            ActivityManagerService activityManagerService3 = broadcastQueueModernImpl.mService;
            boostPriorityForLockedSection();
            synchronized (activityManagerService3) {
                try {
                    final int i3 = 1;
                    broadcastQueueModernImpl.forEachMatchingQueue(BroadcastQueueModernImpl.QUEUE_PREDICATE_ANY, new Consumer() { // from class: com.android.server.am.BroadcastQueueModernImpl$$ExternalSyntheticLambda20
                        @Override // java.util.function.Consumer
                        public final void accept(Object obj) {
                            BroadcastProcessQueue broadcastProcessQueue = (BroadcastProcessQueue) obj;
                            switch (i3) {
                                case 0:
                                    broadcastProcessQueue.addPrioritizeEarliestRequest();
                                    break;
                                default:
                                    int i22 = broadcastProcessQueue.mCountPrioritizeEarliestRequests - 1;
                                    broadcastProcessQueue.mCountPrioritizeEarliestRequests = i22;
                                    if (i22 != 0) {
                                        if (i22 < 0) {
                                            broadcastProcessQueue.mCountPrioritizeEarliestRequests = 0;
                                            break;
                                        }
                                    } else {
                                        broadcastProcessQueue.mRunnableAtInvalidated = true;
                                        break;
                                    }
                                    break;
                            }
                        }
                    });
                    resetPriorityAfterLockedSection();
                    throw th;
                } finally {
                }
            }
        }
    }

    public final void waitForBroadcastIdle() {
        waitForBroadcastIdle(ActivityManagerDebugConfig.LOG_WRITER_INFO, false);
    }

    public final void waitForBroadcastIdle(final PrintWriter printWriter, boolean z) {
        enforceCallingPermission("android.permission.DUMP", "waitForBroadcastIdle()");
        if (z) {
            BroadcastLoopers.waitForCondition(printWriter, new BroadcastLoopers$$ExternalSyntheticLambda0(0));
        }
        final BroadcastQueueModernImpl broadcastQueueModernImpl = this.mBroadcastQueue;
        broadcastQueueModernImpl.getClass();
        broadcastQueueModernImpl.waitFor(new BooleanSupplier() { // from class: com.android.server.am.BroadcastQueueModernImpl$$ExternalSyntheticLambda0
            @Override // java.util.function.BooleanSupplier
            public final boolean getAsBoolean() {
                BroadcastQueueModernImpl broadcastQueueModernImpl2 = BroadcastQueueModernImpl.this;
                PrintWriter printWriter2 = printWriter;
                broadcastQueueModernImpl2.getClass();
                return broadcastQueueModernImpl2.testAllProcessQueues(new BroadcastQueueModernImpl$$ExternalSyntheticLambda1(1), "idle", printWriter2);
            }
        });
        printWriter.println("All broadcast queues are idle!");
        printWriter.flush();
    }

    public final void waitForNetworkStateUpdate(long j) {
        int callingUid = Binder.getCallingUid();
        ActivityManagerProcLock activityManagerProcLock = this.mProcLock;
        boostPriorityForProcLockedSection();
        synchronized (activityManagerProcLock) {
            try {
                UidRecord uidRecord = this.mProcessList.mActiveUids.get(callingUid);
                if (uidRecord == null) {
                    resetPriorityAfterProcLockedSection();
                    return;
                }
                resetPriorityAfterProcLockedSection();
                synchronized (uidRecord.networkStateLock) {
                    if (uidRecord.lastNetworkUpdatedProcStateSeq >= j) {
                        return;
                    }
                    try {
                        long uptimeMillis = SystemClock.uptimeMillis();
                        uidRecord.procStateSeqWaitingForNetwork = j;
                        uidRecord.networkStateLock.wait(this.mConstants.mNetworkAccessTimeoutMs);
                        uidRecord.procStateSeqWaitingForNetwork = 0L;
                        long uptimeMillis2 = SystemClock.uptimeMillis() - uptimeMillis;
                        if (uptimeMillis2 >= this.mConstants.mNetworkAccessTimeoutMs) {
                            Slog.wtf("ActivityManager_Network", "Total time waited for network rules to get updated: " + uptimeMillis2 + ". Uid: " + callingUid + " procStateSeq: " + j + " UidRec: " + uidRecord + " validateUidRec: " + this.mUidObserverController.mValidateUids.get(callingUid));
                        }
                    } catch (InterruptedException unused) {
                        Thread.currentThread().interrupt();
                    }
                }
            } catch (Throwable th) {
                resetPriorityAfterProcLockedSection();
                throw th;
            }
        }
    }

    public final void writeBroadcastsToProtoLocked(ProtoOutputStream protoOutputStream) {
        BroadcastHistory broadcastHistory;
        long j;
        int i = -1;
        long j2 = 2246267895809L;
        if (this.mRegisteredReceivers.size() > 0) {
            for (ReceiverList receiverList : this.mRegisteredReceivers.values()) {
                receiverList.getClass();
                long start = protoOutputStream.start(j2);
                ProcessRecord processRecord = receiverList.app;
                if (processRecord != null) {
                    processRecord.dumpDebug(protoOutputStream, 1146756268033L, -1);
                    protoOutputStream.write(1120986464265L, receiverList.app.mReceivers.mReceivers.size());
                }
                protoOutputStream.write(1120986464258L, receiverList.pid);
                protoOutputStream.write(1120986464259L, receiverList.uid);
                protoOutputStream.write(1120986464260L, receiverList.userId);
                BroadcastRecord broadcastRecord = receiverList.curBroadcast;
                if (broadcastRecord != null) {
                    broadcastRecord.dumpDebug(protoOutputStream, 1146756268037L);
                }
                protoOutputStream.write(1133871366150L, receiverList.linkedToDeath);
                int size = receiverList.size();
                for (int i2 = 0; i2 < size; i2++) {
                    ((BroadcastFilter) receiverList.get(i2)).dumpDebug(protoOutputStream, 2246267895815L);
                }
                protoOutputStream.write(1138166333448L, Integer.toHexString(System.identityHashCode(receiverList)));
                protoOutputStream.end(start);
                j2 = 2246267895809L;
            }
        }
        AnonymousClass3 anonymousClass3 = this.mReceiverResolver;
        anonymousClass3.getClass();
        long start2 = protoOutputStream.start(1146756268034L);
        IntentResolver.writeProtoMap(protoOutputStream, 2246267895809L, anonymousClass3.mTypeToFilter);
        IntentResolver.writeProtoMap(protoOutputStream, 2246267895810L, anonymousClass3.mBaseTypeToFilter);
        IntentResolver.writeProtoMap(protoOutputStream, 2246267895811L, anonymousClass3.mWildTypeToFilter);
        IntentResolver.writeProtoMap(protoOutputStream, 2246267895812L, anonymousClass3.mSchemeToFilter);
        IntentResolver.writeProtoMap(protoOutputStream, 2246267895813L, anonymousClass3.mActionToFilter);
        long j3 = 2246267895814L;
        IntentResolver.writeProtoMap(protoOutputStream, 2246267895814L, anonymousClass3.mTypedActionToFilter);
        protoOutputStream.end(start2);
        BroadcastQueueModernImpl broadcastQueueModernImpl = this.mBroadcastQueue;
        broadcastQueueModernImpl.getClass();
        long start3 = protoOutputStream.start(2246267895811L);
        protoOutputStream.write(1138166333441L, broadcastQueueModernImpl.mQueueName);
        int i3 = 0;
        while (true) {
            broadcastHistory = broadcastQueueModernImpl.mHistory;
            if (i3 >= broadcastHistory.mPendingBroadcasts.size()) {
                break;
            }
            ((BroadcastRecord) broadcastHistory.mPendingBroadcasts.get(i3)).dumpDebug(protoOutputStream, 2246267895815L);
            i3++;
        }
        for (int i4 = 0; i4 < broadcastHistory.mFrozenBroadcasts.size(); i4++) {
            ((BroadcastRecord) broadcastHistory.mFrozenBroadcasts.get(i4)).dumpDebug(protoOutputStream, 2246267895816L);
        }
        int i5 = broadcastHistory.mHistoryNext;
        int i6 = i5;
        while (true) {
            i6 = BroadcastHistory.ringAdvance(i6, -1, broadcastHistory.MAX_BROADCAST_HISTORY);
            BroadcastRecord broadcastRecord2 = broadcastHistory.mBroadcastHistory[i6];
            if (broadcastRecord2 != null) {
                broadcastRecord2.dumpDebug(protoOutputStream, 2246267895813L);
            }
            if (i6 == i5) {
                break;
            } else {
                j3 = 2246267895814L;
            }
        }
        int i7 = broadcastHistory.mSummaryHistoryNext;
        int i8 = i7;
        while (true) {
            int ringAdvance = BroadcastHistory.ringAdvance(i8, i, broadcastHistory.MAX_BROADCAST_SUMMARY_HISTORY);
            Intent intent = broadcastHistory.mBroadcastSummaryHistory[ringAdvance];
            if (intent == null) {
                j = start3;
            } else {
                long start4 = protoOutputStream.start(j3);
                j = start3;
                intent.dumpDebug(protoOutputStream, 1146756268033L, false, true, true, false);
                protoOutputStream.write(1112396529666L, broadcastHistory.mSummaryHistoryEnqueueTime[ringAdvance]);
                protoOutputStream.write(1112396529667L, broadcastHistory.mSummaryHistoryDispatchTime[ringAdvance]);
                protoOutputStream.write(1112396529668L, broadcastHistory.mSummaryHistoryFinishTime[ringAdvance]);
                protoOutputStream.end(start4);
            }
            if (ringAdvance == i7) {
                break;
            }
            i8 = ringAdvance;
            start3 = j;
            i = -1;
            j3 = 2246267895814L;
        }
        protoOutputStream.end(j);
        synchronized (this.mStickyBroadcasts) {
            for (int i9 = 0; i9 < this.mStickyBroadcasts.size(); i9++) {
                try {
                    long start5 = protoOutputStream.start(2246267895812L);
                    protoOutputStream.write(1120986464257L, this.mStickyBroadcasts.keyAt(i9));
                    for (Map.Entry entry : ((ArrayMap) this.mStickyBroadcasts.valueAt(i9)).entrySet()) {
                        long j4 = 2246267895810L;
                        long start6 = protoOutputStream.start(2246267895810L);
                        protoOutputStream.write(1138166333441L, (String) entry.getKey());
                        Iterator it = ((ArrayList) entry.getValue()).iterator();
                        while (it.hasNext()) {
                            ((StickyBroadcast) it.next()).intent.dumpDebug(protoOutputStream, 2246267895810L, false, true, true, false);
                            start6 = start6;
                            j4 = j4;
                        }
                        protoOutputStream.end(start6);
                    }
                    protoOutputStream.end(start5);
                } catch (Throwable th) {
                    throw th;
                }
            }
        }
        long start7 = protoOutputStream.start(1146756268037L);
        protoOutputStream.write(1138166333441L, this.mHandler.toString());
        this.mHandler.getLooper().dumpDebug(protoOutputStream, 1146756268034L);
        protoOutputStream.end(start7);
    }
}
