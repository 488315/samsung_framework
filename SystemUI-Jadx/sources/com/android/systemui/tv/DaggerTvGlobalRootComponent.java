package com.android.systemui.tv;

import android.app.ActivityManager;
import android.app.ActivityTaskManager;
import android.app.AlarmManager;
import android.app.AppOpsManager;
import android.app.IActivityManager;
import android.app.IActivityTaskManager;
import android.app.INotificationManager;
import android.app.IWallpaperManager;
import android.app.KeyguardManager;
import android.app.NotificationManager;
import android.app.StatsManager;
import android.app.UiModeManager;
import android.app.WallpaperManager;
import android.app.admin.DevicePolicyManager;
import android.app.job.JobScheduler;
import android.app.role.RoleManager;
import android.app.smartspace.SmartspaceManager;
import android.app.trust.TrustManager;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothManager;
import android.content.ComponentName;
import android.content.ContentResolver;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.om.OverlayManager;
import android.content.pm.IPackageManager;
import android.content.pm.LauncherApps;
import android.content.pm.PackageManager;
import android.content.pm.ShortcutManager;
import android.content.res.Resources;
import android.hardware.Sensor;
import android.hardware.SensorManager;
import android.hardware.SensorPrivacyManager;
import android.hardware.biometrics.BiometricManager;
import android.hardware.camera2.CameraManager;
import android.hardware.devicestate.DeviceStateManager;
import android.hardware.display.AmbientDisplayConfiguration;
import android.hardware.display.ColorDisplayManager;
import android.hardware.display.DisplayManager;
import android.hardware.display.NightDisplayListener;
import android.hardware.face.FaceManager;
import android.hardware.fingerprint.FingerprintManager;
import android.hardware.input.InputManager;
import android.media.AudioManager;
import android.media.IAudioService;
import android.media.MediaRouter2Manager;
import android.media.projection.MediaProjectionManager;
import android.media.session.MediaSessionManager;
import android.net.ConnectivityManager;
import android.net.NetworkScoreManager;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.os.Looper;
import android.os.PowerExemptionManager;
import android.os.PowerManager;
import android.os.ServiceManager;
import android.os.UserHandle;
import android.os.UserManager;
import android.os.Vibrator;
import android.os.storage.StorageManager;
import android.permission.PermissionManager;
import android.safetycenter.SafetyCenterManager;
import android.service.dreams.IDreamManager;
import android.service.notification.StatusBarNotification;
import android.service.quickaccesswallet.QuickAccessWalletClient;
import android.service.quicksettings.IQSService;
import android.telecom.TelecomManager;
import android.telephony.CarrierConfigManager;
import android.telephony.SubscriptionManager;
import android.telephony.TelephonyManager;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.TypedValue;
import android.view.Choreographer;
import android.view.CrossWindowBlurListeners;
import android.view.GestureDetector;
import android.view.IWindowManager;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.WindowManagerGlobal;
import android.view.accessibility.AccessibilityManager;
import android.view.accessibility.CaptioningManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.FrameLayout;
import androidx.asynclayoutinflater.view.AsyncLayoutInflater;
import androidx.constraintlayout.motion.widget.MotionLayout;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.lifecycle.Lifecycle;
import androidx.lifecycle.LifecycleOwner;
import androidx.lifecycle.ViewModelStore;
import com.android.app.motiontool.DdmHandleMotionTool;
import com.android.app.motiontool.MotionToolManager;
import com.android.dream.lowlight.LowLightTransitionCoordinator;
import com.android.dream.lowlight.dagger.LowLightDreamModule;
import com.android.internal.app.AssistUtils;
import com.android.internal.app.IBatteryStats;
import com.android.internal.config.sysui.SystemUiSystemPropertiesFlags;
import com.android.internal.jank.InteractionJankMonitor;
import com.android.internal.logging.MetricsLogger;
import com.android.internal.logging.UiEventLogger;
import com.android.internal.logging.UiEventLoggerImpl;
import com.android.internal.statusbar.IStatusBarService;
import com.android.internal.util.LatencyTracker;
import com.android.internal.util.NotificationMessagingUtil;
import com.android.internal.widget.LockPatternUtils;
import com.android.keyguard.ActiveUnlockConfig;
import com.android.keyguard.AdminSecondaryLockScreenController;
import com.android.keyguard.CarrierText;
import com.android.keyguard.CarrierTextController;
import com.android.keyguard.CarrierTextManager;
import com.android.keyguard.ClockEventController;
import com.android.keyguard.DualDarInnerLockScreenController;
import com.android.keyguard.EmergencyButtonController;
import com.android.keyguard.FaceWakeUpTriggersConfig;
import com.android.keyguard.KeyguardArrowView;
import com.android.keyguard.KeyguardArrowViewController;
import com.android.keyguard.KeyguardCarrierTextView;
import com.android.keyguard.KeyguardCarrierTextViewController;
import com.android.keyguard.KeyguardClockSwitch;
import com.android.keyguard.KeyguardClockSwitchController;
import com.android.keyguard.KeyguardDisplayManager;
import com.android.keyguard.KeyguardDisplayManager_Factory;
import com.android.keyguard.KeyguardInputViewController;
import com.android.keyguard.KeyguardInputViewController_Factory_Factory;
import com.android.keyguard.KeyguardMessageAreaController;
import com.android.keyguard.KeyguardPluginControllerImpl;
import com.android.keyguard.KeyguardPresentationDisabler;
import com.android.keyguard.KeyguardSecSecurityContainer;
import com.android.keyguard.KeyguardSecSecurityContainerController;
import com.android.keyguard.KeyguardSecSecurityContainerController_Factory;
import com.android.keyguard.KeyguardSecUpdateMonitorImpl;
import com.android.keyguard.KeyguardSecurityContainer;
import com.android.keyguard.KeyguardSecurityModel;
import com.android.keyguard.KeyguardSecurityModel_Factory;
import com.android.keyguard.KeyguardSecurityViewFlipper;
import com.android.keyguard.KeyguardSecurityViewFlipperController;
import com.android.keyguard.KeyguardSliceView;
import com.android.keyguard.KeyguardSliceViewController;
import com.android.keyguard.KeyguardStatusView;
import com.android.keyguard.KeyguardStatusViewController;
import com.android.keyguard.KeyguardStatusViewController_Factory;
import com.android.keyguard.KeyguardUnfoldTransition;
import com.android.keyguard.KeyguardUpdateMonitor;
import com.android.keyguard.KeyguardViewController;
import com.android.keyguard.LiftToActivateListener;
import com.android.keyguard.SecLockIconView;
import com.android.keyguard.SecLockIconViewController;
import com.android.keyguard.SecRotationWatcher;
import com.android.keyguard.ViewMediatorCallback;
import com.android.keyguard.WifiTextManager;
import com.android.keyguard.biometrics.KeyguardBiometricView;
import com.android.keyguard.biometrics.KeyguardBiometricViewController;
import com.android.keyguard.clock.ClockManager;
import com.android.keyguard.clock.ClockOptionsProvider;
import com.android.keyguard.dagger.ClockRegistryModule_GetClockRegistryFactory;
import com.android.keyguard.dagger.KeyguardBouncerComponent;
import com.android.keyguard.dagger.KeyguardBouncerModule_ProvidesKeyguardSecSecurityContainerFactory;
import com.android.keyguard.dagger.KeyguardBouncerModule_ProvidesKeyguardSecurityContainerFactory;
import com.android.keyguard.dagger.KeyguardQsUserSwitchComponent;
import com.android.keyguard.dagger.KeyguardStatusBarViewComponent;
import com.android.keyguard.dagger.KeyguardStatusBarViewModule_ProvideNetspeedViewControllerFactory;
import com.android.keyguard.dagger.KeyguardStatusViewComponent;
import com.android.keyguard.dagger.KeyguardUserSwitcherComponent;
import com.android.keyguard.emm.EngineeringModeManagerWrapper;
import com.android.keyguard.logging.BiometricUnlockLogger;
import com.android.keyguard.logging.CarrierTextManagerLogger;
import com.android.keyguard.logging.FaceMessageDeferralLogger;
import com.android.keyguard.logging.KeyguardLogger;
import com.android.keyguard.logging.KeyguardUpdateMonitorLogger;
import com.android.keyguard.logging.TrustRepositoryLogger;
import com.android.keyguard.mediator.ScreenOnCoordinator;
import com.android.keyguard.punchhole.C0158KeyguardPunchHoleVIViewController_Factory;
import com.android.keyguard.punchhole.KeyguardPunchHoleVIView;
import com.android.keyguard.punchhole.KeyguardPunchHoleVIViewController;
import com.android.launcher3.icons.IconFactory;
import com.android.launcher3.icons.IconProvider;
import com.android.settingslib.bluetooth.LocalBluetoothManager;
import com.android.settingslib.devicestate.DeviceStateRotationLockSettingsManager;
import com.android.settingslib.users.CreateUserDialogController;
import com.android.systemui.ActivityIntentHelper;
import com.android.systemui.BasicRune;
import com.android.systemui.BinderProxyDumpHelper;
import com.android.systemui.BootAnimationFinishedCache;
import com.android.systemui.BootAnimationFinishedCacheImpl;
import com.android.systemui.BootAnimationFinishedTrigger;
import com.android.systemui.BootCompleteCache;
import com.android.systemui.BootCompleteCacheImpl;
import com.android.systemui.Dependency;
import com.android.systemui.Dependency_Factory;
import com.android.systemui.ForegroundServiceController;
import com.android.systemui.ForegroundServiceNotificationListener;
import com.android.systemui.ForegroundServicesDialog;
import com.android.systemui.ForegroundServicesDialog_Factory;
import com.android.systemui.GuestResetOrExitSessionReceiver;
import com.android.systemui.GuestResumeSessionReceiver;
import com.android.systemui.GuestSessionNotification;
import com.android.systemui.HeapDumpHelper;
import com.android.systemui.InitController;
import com.android.systemui.LsRuneWrapper;
import com.android.systemui.R;
import com.android.systemui.Rune;
import com.android.systemui.ShelfToolTipManager;
import com.android.systemui.SliceBroadcastRelayHandler;
import com.android.systemui.SystemUIAppComponentFactoryBase;
import com.android.systemui.SystemUIService;
import com.android.systemui.UiOffloadThread;
import com.android.systemui.accessibility.AccessibilityButtonModeObserver;
import com.android.systemui.accessibility.AccessibilityButtonTargetsObserver;
import com.android.systemui.accessibility.AccessibilityLogger;
import com.android.systemui.accessibility.ModeSwitchesController;
import com.android.systemui.accessibility.SystemActions;
import com.android.systemui.accessibility.WindowMagnification;
import com.android.systemui.accessibility.data.repository.AccessibilityRepository;
import com.android.systemui.accessibility.data.repository.AccessibilityRepositoryImpl;
import com.android.systemui.accessibility.data.repository.AccessibilityRepositoryModule;
import com.android.systemui.accessibility.domain.interactor.AccessibilityInteractor;
import com.android.systemui.accessibility.floatingmenu.AccessibilityFloatingMenuController;
import com.android.systemui.animation.ActivityLaunchAnimator;
import com.android.systemui.animation.AnimationFeatureFlags;
import com.android.systemui.animation.DialogLaunchAnimator;
import com.android.systemui.aod.AODAmbientWallpaperHelper;
import com.android.systemui.aod.AODTouchModeManager;
import com.android.systemui.appops.AppOpsController;
import com.android.systemui.appops.AppOpsControllerImpl;
import com.android.systemui.assist.AssistLogger;
import com.android.systemui.assist.AssistManager;
import com.android.systemui.assist.AssistModule_ProvideAssistUtilsFactory;
import com.android.systemui.assist.PhoneStateMonitor;
import com.android.systemui.assist.ui.DefaultUiController;
import com.android.systemui.basic.util.CoverUtilWrapper;
import com.android.systemui.basic.util.LogWrapper;
import com.android.systemui.basic.util.ModuleType;
import com.android.systemui.battery.BatteryMeterView;
import com.android.systemui.battery.BatteryMeterViewController;
import com.android.systemui.biometrics.AuthController;
import com.android.systemui.biometrics.AuthDialogPanelInteractionDetector;
import com.android.systemui.biometrics.AuthRippleController;
import com.android.systemui.biometrics.AuthRippleView;
import com.android.systemui.biometrics.FaceHelpMessageDeferral;
import com.android.systemui.biometrics.SideFpsController;
import com.android.systemui.biometrics.UdfpsController;
import com.android.systemui.biometrics.UdfpsHapticsSimulator;
import com.android.systemui.biometrics.UdfpsLogger;
import com.android.systemui.biometrics.UdfpsShell;
import com.android.systemui.biometrics.dagger.BiometricsModule;
import com.android.systemui.biometrics.dagger.BiometricsModule_Companion_ProvidesUdfpsUtilsFactory;
import com.android.systemui.biometrics.dagger.UdfpsModule_Companion_ProvidesOverlapDetectorFactory;
import com.android.systemui.biometrics.data.repository.PromptRepository;
import com.android.systemui.biometrics.data.repository.PromptRepositoryImpl;
import com.android.systemui.biometrics.data.repository.RearDisplayStateRepository;
import com.android.systemui.biometrics.data.repository.RearDisplayStateRepositoryImpl;
import com.android.systemui.biometrics.domain.interactor.CredentialInteractor;
import com.android.systemui.biometrics.domain.interactor.CredentialInteractorImpl;
import com.android.systemui.biometrics.domain.interactor.DisplayStateInteractor;
import com.android.systemui.biometrics.domain.interactor.DisplayStateInteractorImpl;
import com.android.systemui.biometrics.domain.interactor.LogContextInteractor;
import com.android.systemui.biometrics.domain.interactor.LogContextInteractorImpl;
import com.android.systemui.biometrics.domain.interactor.PromptCredentialInteractor;
import com.android.systemui.biometrics.domain.interactor.PromptSelectorInteractor;
import com.android.systemui.biometrics.domain.interactor.PromptSelectorInteractorImpl;
import com.android.systemui.biometrics.domain.interactor.UdfpsOverlayInteractor;
import com.android.systemui.biometrics.udfps.OverlapDetector;
import com.android.systemui.biometrics.udfps.SinglePointerTouchProcessor;
import com.android.systemui.biometrics.ui.viewmodel.AuthBiometricFingerprintViewModel;
import com.android.systemui.biometrics.ui.viewmodel.CredentialViewModel;
import com.android.systemui.biometrics.ui.viewmodel.PromptViewModel;
import com.android.systemui.bixby2.SystemUICommandActionHandler;
import com.android.systemui.bixby2.controller.AppController;
import com.android.systemui.bixby2.controller.DeviceController;
import com.android.systemui.bixby2.controller.MWBixbyController;
import com.android.systemui.bixby2.controller.NotificationController;
import com.android.systemui.bixby2.controller.ScreenController;
import com.android.systemui.bixby2.interactor.AppControlActionInteractor;
import com.android.systemui.bixby2.interactor.DeviceControlActionInteractor;
import com.android.systemui.bixby2.interactor.MusicControlActionInteractor;
import com.android.systemui.bixby2.interactor.NotificationControlActionInteractor;
import com.android.systemui.bixby2.interactor.ScreenControlActionInteractor;
import com.android.systemui.bixby2.interactor.ShareViaActionInteractor;
import com.android.systemui.bixby2.util.ActivityLauncher;
import com.android.systemui.bluetooth.BluetoothLogger;
import com.android.systemui.blur.SecQpBlurController;
import com.android.systemui.broadcast.BroadcastDispatcher;
import com.android.systemui.broadcast.BroadcastDispatcherStartable;
import com.android.systemui.broadcast.BroadcastSender;
import com.android.systemui.broadcast.PendingRemovalStore;
import com.android.systemui.broadcast.logging.BroadcastDispatcherLogger;
import com.android.systemui.camera.CameraGestureHelper;
import com.android.systemui.camera.CameraIntentsWrapper;
import com.android.systemui.charging.WiredChargingRippleController;
import com.android.systemui.classifier.BrightLineFalsingManager;
import com.android.systemui.classifier.DiagonalClassifier;
import com.android.systemui.classifier.DistanceClassifier;
import com.android.systemui.classifier.DoubleTapClassifier;
import com.android.systemui.classifier.FalsingA11yDelegate;
import com.android.systemui.classifier.FalsingClassifier;
import com.android.systemui.classifier.FalsingCollector;
import com.android.systemui.classifier.FalsingCollectorImpl_Factory;
import com.android.systemui.classifier.FalsingDataProvider;
import com.android.systemui.classifier.FalsingManagerProxy;
import com.android.systemui.classifier.FalsingModule;
import com.android.systemui.classifier.FalsingModule_ProvidesBrightLineGestureClassifiersFactory;
import com.android.systemui.classifier.HistoryTracker;
import com.android.systemui.classifier.HistoryTracker_Factory;
import com.android.systemui.classifier.LongTapClassifier;
import com.android.systemui.classifier.PointerCountClassifier;
import com.android.systemui.classifier.ProximityClassifier;
import com.android.systemui.classifier.SingleTapClassifier;
import com.android.systemui.classifier.TypeClassifier;
import com.android.systemui.classifier.ZigZagClassifier;
import com.android.systemui.colorextraction.SysuiColorExtractor;
import com.android.systemui.common.ui.data.repository.ConfigurationRepository;
import com.android.systemui.common.ui.data.repository.ConfigurationRepositoryImpl;
import com.android.systemui.complication.Complication;
import com.android.systemui.complication.ComplicationCollectionLiveData;
import com.android.systemui.complication.ComplicationCollectionViewModel;
import com.android.systemui.complication.ComplicationHostViewController;
import com.android.systemui.complication.ComplicationId;
import com.android.systemui.complication.ComplicationLayoutEngine;
import com.android.systemui.complication.ComplicationViewModel;
import com.android.systemui.complication.ComplicationViewModelProvider;
import com.android.systemui.complication.ComplicationViewModelTransformer;
import com.android.systemui.complication.dagger.ComplicationComponent;
import com.android.systemui.complication.dagger.ComplicationHostViewModule_ProvidesComplicationHostViewFactory;
import com.android.systemui.complication.dagger.ComplicationModule_ProvidesComplicationCollectionViewModelFactory;
import com.android.systemui.complication.dagger.ComplicationViewModelComponent;
import com.android.systemui.contrast.ContrastDialogActivity;
import com.android.systemui.controls.ControlsMetricsLogger;
import com.android.systemui.controls.ControlsMetricsLoggerImpl;
import com.android.systemui.controls.CustomIconCache;
import com.android.systemui.controls.controller.ControlsBindingController;
import com.android.systemui.controls.controller.ControlsBindingControllerImpl;
import com.android.systemui.controls.controller.ControlsController;
import com.android.systemui.controls.controller.ControlsControllerImpl;
import com.android.systemui.controls.controller.CustomControlsBindingController;
import com.android.systemui.controls.controller.CustomControlsController;
import com.android.systemui.controls.controller.CustomDeviceControlsController;
import com.android.systemui.controls.controller.CustomDeviceControlsControllerImpl;
import com.android.systemui.controls.controller.PackageUpdateMonitor;
import com.android.systemui.controls.controller.util.BadgeProvider;
import com.android.systemui.controls.controller.util.BadgeProviderImpl;
import com.android.systemui.controls.controller.util.BadgeSubject;
import com.android.systemui.controls.dagger.ControlsComponent;
import com.android.systemui.controls.dagger.ControlsModule;
import com.android.systemui.controls.management.ControlsEditingActivity;
import com.android.systemui.controls.management.ControlsListingController;
import com.android.systemui.controls.management.ControlsListingControllerImpl;
import com.android.systemui.controls.management.ControlsReorderActivity;
import com.android.systemui.controls.management.ControlsRequestDialog;
import com.android.systemui.controls.management.ControlsRequestReceiver;
import com.android.systemui.controls.management.CustomControlsFavoritingActivity;
import com.android.systemui.controls.management.CustomControlsProviderSelectorActivity;
import com.android.systemui.controls.panels.AuthorizedPanelsRepositoryImpl;
import com.android.systemui.controls.panels.CustomSelectedComponentRepository;
import com.android.systemui.controls.panels.CustomSelectedComponentRepositoryImpl;
import com.android.systemui.controls.panels.SelectedComponentRepository;
import com.android.systemui.controls.panels.SelectedComponentRepositoryImpl;
import com.android.systemui.controls.settings.ControlsSettingsDialogManager;
import com.android.systemui.controls.settings.ControlsSettingsDialogManagerImpl;
import com.android.systemui.controls.settings.ControlsSettingsRepository;
import com.android.systemui.controls.settings.ControlsSettingsRepositoryImpl;
import com.android.systemui.controls.ui.ControlActionCoordinator;
import com.android.systemui.controls.ui.ControlActionCoordinatorImpl;
import com.android.systemui.controls.ui.ControlsSettingActivity;
import com.android.systemui.controls.ui.ControlsUiController;
import com.android.systemui.controls.ui.CustomControlActionCoordinator;
import com.android.systemui.controls.ui.CustomControlsActivity;
import com.android.systemui.controls.ui.CustomControlsUiController;
import com.android.systemui.controls.ui.CustomControlsUiControllerImpl;
import com.android.systemui.controls.ui.fragment.ControlsFragmentFactory;
import com.android.systemui.controls.ui.util.AUIFacade;
import com.android.systemui.controls.ui.util.AUIFacadeImpl;
import com.android.systemui.controls.ui.util.BlurFacade;
import com.android.systemui.controls.ui.util.BlurFacadeImpl;
import com.android.systemui.controls.ui.util.ControlsActivityStarter;
import com.android.systemui.controls.ui.util.ControlsActivityStarterImpl;
import com.android.systemui.controls.ui.util.ControlsUtil;
import com.android.systemui.controls.ui.util.DesktopManagerWrapper;
import com.android.systemui.controls.ui.util.DesktopManagerWrapperImpl;
import com.android.systemui.controls.ui.util.LayoutUtil;
import com.android.systemui.controls.ui.util.SALogger;
import com.android.systemui.controls.ui.util.SystemUIAnalyticsWrapper;
import com.android.systemui.controls.util.ControlsBackupRestoreReceiver;
import com.android.systemui.controls.util.ControlsFileLoader;
import com.android.systemui.controls.util.ControlsLogger;
import com.android.systemui.controls.util.ControlsRuneWrapper;
import com.android.systemui.controls.util.ControlsRuneWrapperImpl;
import com.android.systemui.controls.util.EncryptDecryptWrapper;
import com.android.systemui.cover.CoverHomeActivity;
import com.android.systemui.cover.CoverHost;
import com.android.systemui.cover.CoverScreenManager;
import com.android.systemui.cover.SysUICoverService;
import com.android.systemui.dagger.AndroidInternalsModule;
import com.android.systemui.dagger.ContextComponentHelper;
import com.android.systemui.dagger.ContextComponentResolver_Factory;
import com.android.systemui.dagger.DependencyProvider;
import com.android.systemui.dagger.DependencyProvider_ProviderSubscreenQsPanelControllerFactory;
import com.android.systemui.dagger.FrameworkServicesModule;
import com.android.systemui.dagger.FrameworkServicesModule_ProvideINotificationManagerFactory;
import com.android.systemui.dagger.FrameworkServicesModule_ProvideOptionalTelecomManagerFactory;
import com.android.systemui.dagger.FrameworkServicesModule_ProvideOptionalVibratorFactory;
import com.android.systemui.dagger.FrameworkServicesModule_ProvidePermissionManagerFactory;
import com.android.systemui.dagger.FrameworkServicesModule_ProvideSatelliteManagerFactory;
import com.android.systemui.dagger.FrameworkServicesModule_ProvideSharePreferencesFactory;
import com.android.systemui.dagger.GlobalModule;
import com.android.systemui.dagger.GlobalRootComponent;
import com.android.systemui.dagger.NightDisplayListenerModule;
import com.android.systemui.dagger.SamsungServicesModule_ProvideBinderProxyDumpHelperFactory;
import com.android.systemui.dagger.SamsungServicesModule_ProvideDesktopManagerFactory;
import com.android.systemui.dagger.SamsungServicesModule_ProvideDesktopSystemUiBinderFactory;
import com.android.systemui.dagger.SamsungServicesModule_ProvideKeyguardEditModeControllerFactory;
import com.android.systemui.dagger.SamsungServicesModule_ProvideKeyguardIndicationControllerFactory;
import com.android.systemui.dagger.SamsungServicesModule_ProvideNavbarBgHandlerFactory;
import com.android.systemui.dagger.SamsungServicesModule_ProvideSearcleManagerFactory;
import com.android.systemui.dagger.SamsungServicesModule_ProvidesBandAidPackFactoryFactory;
import com.android.systemui.dagger.SamsungServicesModule_ProvidesLayoutProviderContainerFactory;
import com.android.systemui.dagger.SamsungServicesModule_ProvidesNavBarStoreFactory;
import com.android.systemui.dagger.SharedLibraryModule;
import com.android.systemui.dagger.SysUIComponent;
import com.android.systemui.dagger.SystemPropertiesFlagsModule;
import com.android.systemui.dagger.SystemUIModule_ProvideBubblesManagerFactory;
import com.android.systemui.dagger.SystemUIModule_ProvideVisualInterruptionDecisionProviderFactory;
import com.android.systemui.dagger.WMComponent;
import com.android.systemui.demomode.DemoModeController;
import com.android.systemui.demomode.dagger.DemoModeModule_ProvideDemoModeControllerFactory;
import com.android.systemui.dock.DockManager;
import com.android.systemui.dock.DockManagerImpl;
import com.android.systemui.doze.AODIntentService;
import com.android.systemui.doze.AODMachine;
import com.android.systemui.doze.AODScreenBrightness;
import com.android.systemui.doze.AODUi;
import com.android.systemui.doze.AlwaysOnDisplayPolicy;
import com.android.systemui.doze.DozeAuthRemover;
import com.android.systemui.doze.DozeDockHandler;
import com.android.systemui.doze.DozeFalsingManagerAdapter;
import com.android.systemui.doze.DozeHost;
import com.android.systemui.doze.DozeLog;
import com.android.systemui.doze.DozeLogger;
import com.android.systemui.doze.DozeMachine;
import com.android.systemui.doze.DozePauser;
import com.android.systemui.doze.DozeScreenBrightness;
import com.android.systemui.doze.DozeScreenState;
import com.android.systemui.doze.DozeScreenState_Factory;
import com.android.systemui.doze.DozeService;
import com.android.systemui.doze.DozeService_Factory;
import com.android.systemui.doze.DozeSuppressor;
import com.android.systemui.doze.DozeTransitionListener;
import com.android.systemui.doze.DozeTriggers;
import com.android.systemui.doze.DozeUi;
import com.android.systemui.doze.DozeWallpaperState;
import com.android.systemui.doze.PluginAODManager;
import com.android.systemui.doze.PluginAODManager_Factory;
import com.android.systemui.doze.dagger.DozeComponent;
import com.android.systemui.doze.dagger.DozeModule_ProvidesBrightnessSensorsFactory;
import com.android.systemui.doze.dagger.DozeModule_ProvidesWrappedServiceFactory;
import com.android.systemui.doze.util.BurnInHelperWrapper;
import com.android.systemui.dreams.DreamLogger;
import com.android.systemui.dreams.DreamOverlayAnimationsController;
import com.android.systemui.dreams.DreamOverlayCallbackController;
import com.android.systemui.dreams.DreamOverlayContainerView;
import com.android.systemui.dreams.DreamOverlayContainerViewController;
import com.android.systemui.dreams.DreamOverlayLifecycleOwner;
import com.android.systemui.dreams.DreamOverlayService;
import com.android.systemui.dreams.DreamOverlayStateController;
import com.android.systemui.dreams.DreamOverlayStatusBarItemsProvider;
import com.android.systemui.dreams.DreamOverlayStatusBarView;
import com.android.systemui.dreams.DreamOverlayStatusBarViewController;
import com.android.systemui.dreams.complication.HideComplicationTouchHandler;
import com.android.systemui.dreams.complication.dagger.ComplicationComponent;
import com.android.systemui.dreams.complication.dagger.ComplicationModule;
import com.android.systemui.dreams.dagger.DreamModule;
import com.android.systemui.dreams.dagger.DreamModule_ProvidesDreamOverlayEnabledFactory;
import com.android.systemui.dreams.dagger.DreamOverlayComponent;
import com.android.systemui.dreams.dagger.DreamOverlayModule_ProvidesDreamOverlayContainerViewFactory;
import com.android.systemui.dreams.dagger.DreamOverlayModule_ProvidesDreamOverlayContentViewFactory;
import com.android.systemui.dreams.dagger.DreamOverlayModule_ProvidesDreamOverlayStatusBarViewFactory;
import com.android.systemui.dreams.touch.BouncerSwipeTouchHandler;
import com.android.systemui.dreams.touch.DreamOverlayTouchMonitor;
import com.android.systemui.dreams.touch.DreamTouchHandler;
import com.android.systemui.dreams.touch.InputSession;
import com.android.systemui.dreams.touch.ShadeTouchHandler;
import com.android.systemui.dreams.touch.dagger.BouncerSwipeModule$$ExternalSyntheticLambda0;
import com.android.systemui.dreams.touch.dagger.BouncerSwipeModule_ProvidesSwipeToBouncerFlingAnimationUtilsClosingFactory;
import com.android.systemui.dreams.touch.dagger.BouncerSwipeModule_ProvidesSwipeToBouncerFlingAnimationUtilsOpeningFactory;
import com.android.systemui.dreams.touch.dagger.InputSessionComponent;
import com.android.systemui.dreams.touch.scrim.BouncerScrimController;
import com.android.systemui.dreams.touch.scrim.BouncerlessScrimController;
import com.android.systemui.dreams.touch.scrim.ScrimManager;
import com.android.systemui.dump.DumpHandler;
import com.android.systemui.dump.DumpManager;
import com.android.systemui.dump.LogBufferEulogizer;
import com.android.systemui.dump.LogBufferFreezer;
import com.android.systemui.dump.SystemUIAuxiliaryDumpService;
import com.android.systemui.facewidget.FaceWidgetNotificationController;
import com.android.systemui.facewidget.plugin.ExternalClockProvider;
import com.android.systemui.facewidget.plugin.FaceWidgetColorSchemeControllerWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetContainerWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetDisplayLifeCycleWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetKeyguardStatusCallbackWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetKeyguardUpdateMonitorWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetKnoxStateMonitorWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetLockPatternUtilsWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetModule_ProvideKeyguardClockPositionAlgorithmFactory;
import com.android.systemui.facewidget.plugin.FaceWidgetNotificationControllerWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetPluginControllerImpl;
import com.android.systemui.facewidget.plugin.FaceWidgetPluginLockManagerWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetWakefulnessLifecycleWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetWallpaperUtilsWrapper;
import com.android.systemui.facewidget.plugin.PluginFaceWidgetManager;
import com.android.systemui.flags.ConditionalRestarter;
import com.android.systemui.flags.FeatureFlags;
import com.android.systemui.flags.FeatureFlagsRelease;
import com.android.systemui.flags.FeatureFlagsReleaseStartable;
import com.android.systemui.flags.Flags;
import com.android.systemui.flags.FlagsCommonModule_ProvidesAllFlagsFactory;
import com.android.systemui.flags.FlagsModule;
import com.android.systemui.flags.PluggedInCondition;
import com.android.systemui.flags.ScreenIdleCondition;
import com.android.systemui.flags.ServerFlagReader;
import com.android.systemui.flags.ServerFlagReaderImpl;
import com.android.systemui.flags.ServerFlagReaderModule;
import com.android.systemui.flags.SystemExitRestarter;
import com.android.systemui.flags.SystemPropertiesHelper;
import com.android.systemui.fragments.FragmentHostManager;
import com.android.systemui.fragments.FragmentService;
import com.android.systemui.globalactions.GlobalActionsComponent;
import com.android.systemui.globalactions.GlobalActionsDialogLite;
import com.android.systemui.globalactions.GlobalActionsImpl;
import com.android.systemui.hdmi.HdmiCecSetMenuLanguageActivity;
import com.android.systemui.hdmi.HdmiCecSetMenuLanguageHelper;
import com.android.systemui.indexsearch.SystemUIIndexMediator;
import com.android.systemui.keyboard.KeyboardUI;
import com.android.systemui.keyguard.DismissCallbackRegistry;
import com.android.systemui.keyguard.DisplayLifecycle;
import com.android.systemui.keyguard.KeyguardEditModeController;
import com.android.systemui.keyguard.KeyguardFastBioUnlockController;
import com.android.systemui.keyguard.KeyguardFixedRotationMonitor;
import com.android.systemui.keyguard.KeyguardFoldController;
import com.android.systemui.keyguard.KeyguardFoldControllerConfig;
import com.android.systemui.keyguard.KeyguardFoldControllerConfigImpl;
import com.android.systemui.keyguard.KeyguardFoldControllerDependency;
import com.android.systemui.keyguard.KeyguardFoldControllerDependencyImpl;
import com.android.systemui.keyguard.KeyguardFoldControllerImpl;
import com.android.systemui.keyguard.KeyguardLifecyclesDispatcher;
import com.android.systemui.keyguard.KeyguardSecLegacyUnlockAnimationControllerImpl;
import com.android.systemui.keyguard.KeyguardService;
import com.android.systemui.keyguard.KeyguardSliceProvider;
import com.android.systemui.keyguard.KeyguardSurfaceControllerImpl;
import com.android.systemui.keyguard.KeyguardSysDumpTrigger;
import com.android.systemui.keyguard.KeyguardUnlockAnimationController;
import com.android.systemui.keyguard.KeyguardViewMediator;
import com.android.systemui.keyguard.KeyguardViewMediatorHelper;
import com.android.systemui.keyguard.KeyguardViewMediatorHelperImpl;
import com.android.systemui.keyguard.KeyguardVisibilityMonitor;
import com.android.systemui.keyguard.LifecycleScreenStatusProvider;
import com.android.systemui.keyguard.ResourceTrimmer;
import com.android.systemui.keyguard.ScreenLifecycle;
import com.android.systemui.keyguard.SurfaceVisibilityController;
import com.android.systemui.keyguard.WakefulnessLifecycle;
import com.android.systemui.keyguard.WindowVisibilityController;
import com.android.systemui.keyguard.WorkLockActivity;
import com.android.systemui.keyguard.animator.KeyguardTouchAnimator;
import com.android.systemui.keyguard.animator.KeyguardTouchDymLockInjector;
import com.android.systemui.keyguard.animator.KeyguardTouchLoggingInjector;
import com.android.systemui.keyguard.animator.KeyguardTouchSecurityInjector;
import com.android.systemui.keyguard.animator.KeyguardTouchSwipeDetector;
import com.android.systemui.keyguard.bouncer.data.factory.BouncerMessageFactory;
import com.android.systemui.keyguard.bouncer.data.repository.BouncerMessageRepository;
import com.android.systemui.keyguard.bouncer.data.repository.BouncerMessageRepositoryImpl;
import com.android.systemui.keyguard.bouncer.domain.interactor.BouncerMessageAuditLogger;
import com.android.systemui.keyguard.bouncer.domain.interactor.BouncerMessageInteractor;
import com.android.systemui.keyguard.bouncer.domain.interactor.CountDownTimerUtil;
import com.android.systemui.keyguard.dagger.KeyguardModule;
import com.android.systemui.keyguard.dagger.KeyguardModule_NewKeyguardViewMediatorFactory;
import com.android.systemui.keyguard.dagger.KeyguardModule_ProvideKeyguardUnlockAnimationExecutorFactory;
import com.android.systemui.keyguard.dagger.KeyguardModule_ProvideStatusBarKeyguardViewManagerFactory;
import com.android.systemui.keyguard.data.BouncerView;
import com.android.systemui.keyguard.data.BouncerViewImpl;
import com.android.systemui.keyguard.data.quickaffordance.CameraQuickAffordanceConfig;
import com.android.systemui.keyguard.data.quickaffordance.DoNotDisturbQuickAffordanceConfig;
import com.android.systemui.keyguard.data.quickaffordance.FlashlightQuickAffordanceConfig;
import com.android.systemui.keyguard.data.quickaffordance.HomeControlsKeyguardQuickAffordanceConfig;
import com.android.systemui.keyguard.data.quickaffordance.KeyguardDataQuickAffordanceModule_Companion_QuickAffordanceConfigsFactory;
import com.android.systemui.keyguard.data.quickaffordance.KeyguardQuickAffordanceConfig;
import com.android.systemui.keyguard.data.quickaffordance.KeyguardQuickAffordanceLegacySettingSyncer;
import com.android.systemui.keyguard.data.quickaffordance.KeyguardQuickAffordanceLocalUserSelectionManager;
import com.android.systemui.keyguard.data.quickaffordance.KeyguardQuickAffordanceProviderClientFactoryImpl;
import com.android.systemui.keyguard.data.quickaffordance.KeyguardQuickAffordanceRemoteUserSelectionManager;
import com.android.systemui.keyguard.data.quickaffordance.MuteQuickAffordanceConfig;
import com.android.systemui.keyguard.data.quickaffordance.QrCodeScannerKeyguardQuickAffordanceConfig;
import com.android.systemui.keyguard.data.quickaffordance.QuickAccessWalletKeyguardQuickAffordanceConfig;
import com.android.systemui.keyguard.data.quickaffordance.VideoCameraQuickAffordanceConfig;
import com.android.systemui.keyguard.data.repository.BiometricSettingsRepository;
import com.android.systemui.keyguard.data.repository.BiometricSettingsRepositoryImpl;
import com.android.systemui.keyguard.data.repository.DeviceEntryFaceAuthRepository;
import com.android.systemui.keyguard.data.repository.DeviceEntryFaceAuthRepositoryImpl;
import com.android.systemui.keyguard.data.repository.DeviceEntryFingerprintAuthRepository;
import com.android.systemui.keyguard.data.repository.DeviceEntryFingerprintAuthRepositoryImpl;
import com.android.systemui.keyguard.data.repository.DevicePostureRepository;
import com.android.systemui.keyguard.data.repository.DevicePostureRepositoryImpl;
import com.android.systemui.keyguard.data.repository.KeyguardBouncerRepository;
import com.android.systemui.keyguard.data.repository.KeyguardBouncerRepositoryImpl;
import com.android.systemui.keyguard.data.repository.KeyguardFaceAuthModule;
import com.android.systemui.keyguard.data.repository.KeyguardQuickAffordanceRepository;
import com.android.systemui.keyguard.data.repository.KeyguardRepository;
import com.android.systemui.keyguard.data.repository.KeyguardRepositoryImpl;
import com.android.systemui.keyguard.data.repository.KeyguardTransitionRepository;
import com.android.systemui.keyguard.data.repository.KeyguardTransitionRepositoryImpl;
import com.android.systemui.keyguard.data.repository.LightRevealScrimRepository;
import com.android.systemui.keyguard.data.repository.LightRevealScrimRepositoryImpl;
import com.android.systemui.keyguard.data.repository.TrustRepository;
import com.android.systemui.keyguard.data.repository.TrustRepositoryImpl;
import com.android.systemui.keyguard.domain.interactor.AlternateBouncerInteractor;
import com.android.systemui.keyguard.domain.interactor.BurnInInteractor;
import com.android.systemui.keyguard.domain.interactor.DozeInteractor;
import com.android.systemui.keyguard.domain.interactor.FromAlternateBouncerTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.FromAodTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.FromDozingTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.FromDreamingTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.FromGoneTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.FromLockscreenTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.FromOccludedTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.FromPrimaryBouncerTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardBottomAreaInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardFaceAuthInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardLongPressInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardQuickAffordanceInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardTransitionAuditLogger;
import com.android.systemui.keyguard.domain.interactor.KeyguardTransitionCoreStartable;
import com.android.systemui.keyguard.domain.interactor.KeyguardTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.LightRevealScrimInteractor;
import com.android.systemui.keyguard.domain.interactor.PrimaryBouncerCallbackInteractor;
import com.android.systemui.keyguard.domain.interactor.PrimaryBouncerInteractor;
import com.android.systemui.keyguard.domain.interactor.SystemUIKeyguardFaceAuthInteractor;
import com.android.systemui.keyguard.domain.interactor.TransitionInteractor;
import com.android.systemui.keyguard.domain.quickaffordance.KeyguardQuickAffordanceRegistryImpl;
import com.android.systemui.keyguard.shared.quickaffordance.KeyguardQuickAffordancesMetricsLoggerImpl;
import com.android.systemui.keyguard.ui.viewmodel.DreamingToLockscreenTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.GoneToDreamingTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.KeyguardBottomAreaViewModel;
import com.android.systemui.keyguard.ui.viewmodel.KeyguardBouncerViewModel;
import com.android.systemui.keyguard.ui.viewmodel.KeyguardLongPressViewModel;
import com.android.systemui.keyguard.ui.viewmodel.KeyguardSettingsMenuViewModel;
import com.android.systemui.keyguard.ui.viewmodel.LightRevealScrimViewModel;
import com.android.systemui.keyguard.ui.viewmodel.LockscreenToDreamingTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.LockscreenToOccludedTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.OccludedToLockscreenTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.PrimaryBouncerToGoneTransitionViewModel;
import com.android.systemui.keyguardimage.WallpaperImageInjectCreator;
import com.android.systemui.knox.KnoxStateMonitor;
import com.android.systemui.knox.KnoxStateMonitorImpl;
import com.android.systemui.lockstar.PluginLockStarManager;
import com.android.systemui.log.FaceAuthenticationLogger;
import com.android.systemui.log.LogBuffer;
import com.android.systemui.log.LogBufferFactory;
import com.android.systemui.log.LogcatEchoTracker;
import com.android.systemui.log.MediaLogWriter;
import com.android.systemui.log.MediaLogger;
import com.android.systemui.log.MediaLoggerImpl;
import com.android.systemui.log.NoLogcatEchoTracker;
import com.android.systemui.log.SamsungServiceLogger;
import com.android.systemui.log.SamsungServiceLoggerImpl;
import com.android.systemui.log.SecPanelLogWriter;
import com.android.systemui.log.SecPanelLogger;
import com.android.systemui.log.SecPanelLoggerImpl;
import com.android.systemui.log.SessionTracker;
import com.android.systemui.log.dagger.LogModule_ProvideLogcatEchoTrackerFactory;
import com.android.systemui.log.table.TableLogBuffer;
import com.android.systemui.log.table.TableLogBufferFactory;
import com.android.systemui.logging.NotiCinemaLogger;
import com.android.systemui.logging.PanelScreenShotBufferLogger;
import com.android.systemui.mdm.MdmOverlayContainer;
import com.android.systemui.media.MediaBluetoothHelper;
import com.android.systemui.media.MediaOutputHelper;
import com.android.systemui.media.MediaProjectionAppSelectorActivity;
import com.android.systemui.media.MediaProjectionPermissionActivity;
import com.android.systemui.media.RingtonePlayer;
import com.android.systemui.media.SecMediaControlPanel;
import com.android.systemui.media.SecMediaHost;
import com.android.systemui.media.SecMediaPlayerData;
import com.android.systemui.media.SecSeekBarViewModel;
import com.android.systemui.media.SubscreenMusicWidgetController;
import com.android.systemui.media.controls.models.recommendation.SmartspaceMediaDataProvider;
import com.android.systemui.media.controls.pipeline.LocalMediaManagerFactory;
import com.android.systemui.media.controls.pipeline.MediaDataCombineLatest;
import com.android.systemui.media.controls.pipeline.MediaDataFilter;
import com.android.systemui.media.controls.pipeline.MediaDataManager;
import com.android.systemui.media.controls.pipeline.MediaDeviceManager;
import com.android.systemui.media.controls.pipeline.MediaSessionBasedFilter;
import com.android.systemui.media.controls.pipeline.MediaTimeoutListener;
import com.android.systemui.media.controls.pipeline.MediaTimeoutLogger;
import com.android.systemui.media.controls.resume.MediaBrowserFactory;
import com.android.systemui.media.controls.resume.MediaResumeListener;
import com.android.systemui.media.controls.resume.ResumeMediaBrowserFactory;
import com.android.systemui.media.controls.resume.ResumeMediaBrowserLogger;
import com.android.systemui.media.controls.ui.KeyguardMediaController;
import com.android.systemui.media.controls.util.MediaControllerFactory;
import com.android.systemui.media.controls.util.MediaFeatureFlag;
import com.android.systemui.media.controls.util.MediaFlags;
import com.android.systemui.media.controls.util.MediaUiEventLogger;
import com.android.systemui.media.dagger.MediaModule_ProvidesMediaMuteAwaitConnectionCliFactory;
import com.android.systemui.media.dagger.MediaModule_ProvidesNearbyMediaDevicesManagerFactory;
import com.android.systemui.media.dialog.MediaOutputBroadcastDialogFactory;
import com.android.systemui.media.dialog.MediaOutputDialogFactory;
import com.android.systemui.media.dialog.MediaOutputDialogReceiver;
import com.android.systemui.media.muteawait.MediaMuteAwaitConnectionCli;
import com.android.systemui.media.muteawait.MediaMuteAwaitConnectionManagerFactory;
import com.android.systemui.media.muteawait.MediaMuteAwaitLogger;
import com.android.systemui.media.nearby.NearbyMediaDevicesLogger;
import com.android.systemui.media.nearby.NearbyMediaDevicesManager;
import com.android.systemui.media.systemsounds.HomeSoundEffectController;
import com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorComponent;
import com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorController;
import com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorModule;
import com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorModule_Companion_HostUserHandleFactory;
import com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorModule_Companion_ProvideCoroutineScopeFactory;
import com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorResultHandler;
import com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorView;
import com.android.systemui.mediaprojection.appselector.MediaProjectionBlockerEmptyStateProvider;
import com.android.systemui.mediaprojection.appselector.data.ActivityTaskManagerLabelLoader;
import com.android.systemui.mediaprojection.appselector.data.ActivityTaskManagerThumbnailLoader;
import com.android.systemui.mediaprojection.appselector.data.AppIconLoader;
import com.android.systemui.mediaprojection.appselector.data.IconLoaderLibAppIconLoader;
import com.android.systemui.mediaprojection.appselector.data.RecentTask;
import com.android.systemui.mediaprojection.appselector.data.RecentTaskLabelLoader;
import com.android.systemui.mediaprojection.appselector.data.RecentTaskListProvider;
import com.android.systemui.mediaprojection.appselector.data.RecentTaskThumbnailLoader;
import com.android.systemui.mediaprojection.appselector.data.ShellRecentTaskListProvider;
import com.android.systemui.mediaprojection.appselector.view.MediaProjectionRecentsViewController;
import com.android.systemui.mediaprojection.appselector.view.RecentTaskViewHolder;
import com.android.systemui.mediaprojection.appselector.view.RecentTasksAdapter;
import com.android.systemui.mediaprojection.appselector.view.TaskPreviewSizeProvider;
import com.android.systemui.mediaprojection.devicepolicy.MediaProjectionDevicePolicyModule;
import com.android.systemui.mediaprojection.devicepolicy.ScreenCaptureDevicePolicyResolver;
import com.android.systemui.model.SysUiState;
import com.android.systemui.motiontool.MotionToolModule;
import com.android.systemui.motiontool.MotionToolModule_Companion_ProvideDdmHandleMotionToolFactory;
import com.android.systemui.motiontool.MotionToolModule_Companion_ProvideMotionToolManagerFactory;
import com.android.systemui.motiontool.MotionToolStartable;
import com.android.systemui.multishade.data.remoteproxy.MultiShadeInputProxy;
import com.android.systemui.multishade.data.repository.MultiShadeRepository;
import com.android.systemui.multishade.domain.interactor.MultiShadeInteractor;
import com.android.systemui.multishade.domain.interactor.MultiShadeMotionEventInteractor;
import com.android.systemui.navigationbar.NavBarHelper;
import com.android.systemui.navigationbar.NavigationBar;
import com.android.systemui.navigationbar.NavigationBarComponent;
import com.android.systemui.navigationbar.NavigationBarController;
import com.android.systemui.navigationbar.NavigationBarFrame;
import com.android.systemui.navigationbar.NavigationBarModule_ProvideNavigationBarFrameFactory;
import com.android.systemui.navigationbar.NavigationBarModule_ProvideNavigationBarviewFactory;
import com.android.systemui.navigationbar.NavigationBarTransitions;
import com.android.systemui.navigationbar.NavigationBarView;
import com.android.systemui.navigationbar.NavigationBar_Factory;
import com.android.systemui.navigationbar.NavigationModeController;
import com.android.systemui.navigationbar.TaskbarDelegate;
import com.android.systemui.navigationbar.bandaid.BandAidPackFactoryBase;
import com.android.systemui.navigationbar.buttons.DeadZone;
import com.android.systemui.navigationbar.gestural.BackPanelController;
import com.android.systemui.navigationbar.gestural.EdgeBackGestureHandler;
import com.android.systemui.navigationbar.gestural.GestureHintAnimator;
import com.android.systemui.navigationbar.gestural.GestureModule_ProvidsBackGestureTfClassifierProviderFactory;
import com.android.systemui.navigationbar.gestural.NavigationBarEdgePanel;
import com.android.systemui.navigationbar.interactor.InteractorFactory;
import com.android.systemui.navigationbar.remoteview.NavBarRemoteViewManager;
import com.android.systemui.navigationbar.store.NavBarStore;
import com.android.systemui.navigationbar.util.StoreLogUtil;
import com.android.systemui.notetask.LaunchNotesRoleSettingsTrampolineActivity;
import com.android.systemui.notetask.NoteTaskController;
import com.android.systemui.notetask.NoteTaskControllerUpdateService;
import com.android.systemui.notetask.NoteTaskEventLogger;
import com.android.systemui.notetask.NoteTaskInfoResolver;
import com.android.systemui.notetask.NoteTaskInitializer;
import com.android.systemui.notetask.NoteTaskModule;
import com.android.systemui.notetask.quickaffordance.NoteTaskQuickAffordanceConfig;
import com.android.systemui.notetask.shortcut.CreateNoteTaskShortcutActivity;
import com.android.systemui.notetask.shortcut.LaunchNoteTaskActivity;
import com.android.systemui.notetask.shortcut.LaunchNoteTaskManagedProfileProxyActivity;
import com.android.systemui.notification.FullExpansionPanelNotiAlphaController;
import com.android.systemui.notification.NotificationBackupRestoreManager;
import com.android.systemui.people.PeopleProvider;
import com.android.systemui.people.PeopleSpaceActivity;
import com.android.systemui.people.data.repository.PeopleTileRepository;
import com.android.systemui.people.data.repository.PeopleTileRepositoryImpl;
import com.android.systemui.people.data.repository.PeopleWidgetRepository;
import com.android.systemui.people.data.repository.PeopleWidgetRepositoryImpl;
import com.android.systemui.people.ui.viewmodel.PeopleViewModel;
import com.android.systemui.people.widget.LaunchConversationActivity;
import com.android.systemui.people.widget.PeopleSpaceWidgetManager;
import com.android.systemui.people.widget.PeopleSpaceWidgetPinnedReceiver;
import com.android.systemui.people.widget.PeopleSpaceWidgetProvider;
import com.android.systemui.people.widget.PeopleSpaceWidgetProvider_Factory;
import com.android.systemui.plank.ApiLogger;
import com.android.systemui.plank.command.PlankDispatcherFactory;
import com.android.systemui.plank.dagger.PlankComponent;
import com.android.systemui.plank.dagger.PlankModule;
import com.android.systemui.plank.monitor.TestInputMonitor;
import com.android.systemui.plank.protocol.Protocol;
import com.android.systemui.plank.protocol.ProtocolManagerImpl;
import com.android.systemui.plank.protocol.TestProtocolProvider;
import com.android.systemui.pluginlock.PluginLockData;
import com.android.systemui.pluginlock.PluginLockDataImpl;
import com.android.systemui.pluginlock.PluginLockDelegateApp;
import com.android.systemui.pluginlock.PluginLockDelegateSysUi;
import com.android.systemui.pluginlock.PluginLockInstancePolicy;
import com.android.systemui.pluginlock.PluginLockManager;
import com.android.systemui.pluginlock.PluginLockManagerImpl;
import com.android.systemui.pluginlock.PluginLockMediator;
import com.android.systemui.pluginlock.PluginLockMediatorImpl;
import com.android.systemui.pluginlock.PluginLockUtils;
import com.android.systemui.pluginlock.PluginWallpaperManager;
import com.android.systemui.pluginlock.PluginWallpaperManagerImpl;
import com.android.systemui.pluginlock.utils.DumpUtils;
import com.android.systemui.plugins.ActivityStarter;
import com.android.systemui.plugins.BcSmartspaceDataPlugin;
import com.android.systemui.plugins.DarkIconDispatcher;
import com.android.systemui.plugins.FalsingManager;
import com.android.systemui.plugins.GlobalActions;
import com.android.systemui.plugins.PluginDependencyProvider;
import com.android.systemui.plugins.PluginEnablerImpl;
import com.android.systemui.plugins.PluginManager;
import com.android.systemui.plugins.PluginsModule_ProvidePluginInstanceManagerFactoryFactory;
import com.android.systemui.plugins.PluginsModule_ProvidesPluginDebugFactory;
import com.android.systemui.plugins.PluginsModule_ProvidesPluginExecutorFactory;
import com.android.systemui.plugins.PluginsModule_ProvidesPluginInstanceFactoryFactory;
import com.android.systemui.plugins.PluginsModule_ProvidesPluginManagerFactory;
import com.android.systemui.plugins.PluginsModule_ProvidesPluginPrefsFactory;
import com.android.systemui.plugins.PluginsModule_ProvidesPrivilegedPluginsFactory;
import com.android.systemui.plugins.VolumeDialog;
import com.android.systemui.plugins.VolumeDialogController;
import com.android.systemui.plugins.qs.QSFactory;
import com.android.systemui.plugins.statusbar.StatusBarStateController;
import com.android.systemui.popup.SamsungScreenPinningRequest;
import com.android.systemui.power.EnhancedEstimates;
import com.android.systemui.power.EnhancedEstimatesImpl;
import com.android.systemui.power.PowerNotificationWarnings;
import com.android.systemui.power.PowerUI;
import com.android.systemui.privacy.AppOpsPrivacyItemMonitor;
import com.android.systemui.privacy.MediaProjectionPrivacyItemMonitor;
import com.android.systemui.privacy.OngoingPrivacyChip;
import com.android.systemui.privacy.PrivacyConfig;
import com.android.systemui.privacy.PrivacyDialogController;
import com.android.systemui.privacy.PrivacyItemController;
import com.android.systemui.privacy.PrivacyItemMonitor;
import com.android.systemui.privacy.logging.PrivacyLogger;
import com.android.systemui.privacy.television.TvPrivacyChipsController;
import com.android.systemui.qp.SubroomQuickSettingsBaseView;
import com.android.systemui.qp.SubscreenQsPanelController;
import com.android.systemui.qp.qs.tiles.SWBlueLightFilterTile;
import com.android.systemui.qp.qs.tiles.SWBlueLightFilterTile_Factory;
import com.android.systemui.qp.util.AnimationUtils;
import com.android.systemui.qp.util.SubscreenUtil;
import com.android.systemui.qrcodescanner.controller.QRCodeScannerController;
import com.android.systemui.qs.AutoAddTracker;
import com.android.systemui.qs.FgsManagerController;
import com.android.systemui.qs.FgsManagerControllerImpl;
import com.android.systemui.qs.FooterActionsController;
import com.android.systemui.qs.HeaderPrivacyIconsController;
import com.android.systemui.qs.InjectionInflationController;
import com.android.systemui.qs.QSBackupRestoreManager;
import com.android.systemui.qs.QSButtonGridController;
import com.android.systemui.qs.QSContainerImpl;
import com.android.systemui.qs.QSContainerImplController;
import com.android.systemui.qs.QSFragment;
import com.android.systemui.qs.QSFragmentDisableFlagsLogger;
import com.android.systemui.qs.QSFragmentStartable;
import com.android.systemui.qs.QSHost;
import com.android.systemui.qs.QSHostAdapter;
import com.android.systemui.qs.QSPanelHost;
import com.android.systemui.qs.QSSecurityFooter;
import com.android.systemui.qs.QSSecurityFooterUtils;
import com.android.systemui.qs.QSSecurityFooterUtils_Factory;
import com.android.systemui.qs.QSSquishinessController;
import com.android.systemui.qs.QSTileHost;
import com.android.systemui.qs.QsEventLogger;
import com.android.systemui.qs.QsEventLoggerImpl;
import com.android.systemui.qs.ReduceBrightColorsController;
import com.android.systemui.qs.SecAutoTileManager;
import com.android.systemui.qs.SecQSDetailDisplayer;
import com.android.systemui.qs.SecQSPanel;
import com.android.systemui.qs.SecQSPanelController;
import com.android.systemui.qs.SecQSPanelController_Factory;
import com.android.systemui.qs.SecQSPanelResourcePicker;
import com.android.systemui.qs.SecQuickQSPanel;
import com.android.systemui.qs.SecQuickQSPanelController;
import com.android.systemui.qs.SecQuickQSPanelController_Factory;
import com.android.systemui.qs.SecQuickStatusBarHeader;
import com.android.systemui.qs.SecQuickStatusBarHeaderController;
import com.android.systemui.qs.animator.QsExpandAnimator;
import com.android.systemui.qs.animator.QsOpenAnimator;
import com.android.systemui.qs.animator.QsTransitionAnimator;
import com.android.systemui.qs.animator.SecQSFragmentAnimatorManager;
import com.android.systemui.qs.bar.BarController;
import com.android.systemui.qs.bar.BarFactory;
import com.android.systemui.qs.bar.BottomLargeTileBar;
import com.android.systemui.qs.bar.BrightnessBar;
import com.android.systemui.qs.bar.BrightnessMediaDevicesBar;
import com.android.systemui.qs.bar.BudsBar;
import com.android.systemui.qs.bar.MediaDevicesBar;
import com.android.systemui.qs.bar.MultiSIMPreferredSlotBar;
import com.android.systemui.qs.bar.PagedTileLayoutBar;
import com.android.systemui.qs.bar.QSMediaPlayerBar;
import com.android.systemui.qs.bar.SecurityFooterBar;
import com.android.systemui.qs.bar.TopLargeTileBar;
import com.android.systemui.qs.bar.VideoCallMicModeBar;
import com.android.systemui.qs.bar.soundcraft.di.vm.SoundCraftViewModelProvider;
import com.android.systemui.qs.bar.soundcraft.interfaces.audio.AudioPlaybackManager;
import com.android.systemui.qs.bar.soundcraft.interfaces.connectivity.BluetoothDeviceManager;
import com.android.systemui.qs.bar.soundcraft.interfaces.routine.manager.RoutineManager;
import com.android.systemui.qs.bar.soundcraft.interfaces.settings.SoundCraftSettings;
import com.android.systemui.qs.bar.soundcraft.interfaces.wearable.WearableManager;
import com.android.systemui.qs.bar.soundcraft.model.ModelProvider;
import com.android.systemui.qs.bar.soundcraft.view.SoundCraftQpDetailAdapter;
import com.android.systemui.qs.bar.soundcraft.viewmodel.SoundCraftViewModel;
import com.android.systemui.qs.bar.soundcraft.viewmodel.actionbar.SoundCraftActionBarViewModel;
import com.android.systemui.qs.bar.soundcraft.viewmodel.audioeffect.AudioEffectBoxViewModel;
import com.android.systemui.qs.bar.soundcraft.viewmodel.audioeffect.AudioEffectHeaderViewModel;
import com.android.systemui.qs.bar.soundcraft.viewmodel.audioeffect.EqualizerViewModel;
import com.android.systemui.qs.bar.soundcraft.viewmodel.audioeffect.SpatialAudioViewModel;
import com.android.systemui.qs.bar.soundcraft.viewmodel.audioeffect.VoiceBoostViewModel;
import com.android.systemui.qs.bar.soundcraft.viewmodel.audioeffect.VolumeNormalizationViewModel;
import com.android.systemui.qs.bar.soundcraft.viewmodel.noisecontrol.ActiveNoiseCancelingViewModel;
import com.android.systemui.qs.bar.soundcraft.viewmodel.noisecontrol.AdaptiveViewModel;
import com.android.systemui.qs.bar.soundcraft.viewmodel.noisecontrol.AmbientSoundViewModel;
import com.android.systemui.qs.bar.soundcraft.viewmodel.noisecontrol.NoiseCancelingLevelViewModel;
import com.android.systemui.qs.bar.soundcraft.viewmodel.noisecontrol.NoiseCancelingSwitchBarViewModel;
import com.android.systemui.qs.bar.soundcraft.viewmodel.noisecontrol.NoiseControlBoxViewModel;
import com.android.systemui.qs.bar.soundcraft.viewmodel.noisecontrol.NoiseControlEffectBoxViewModel;
import com.android.systemui.qs.bar.soundcraft.viewmodel.noisecontrol.NoiseControlOffViewModel;
import com.android.systemui.qs.bar.soundcraft.viewmodel.routine.RoutineTestViewModel;
import com.android.systemui.qs.bar.soundcraft.viewmodel.wearable.WearableLinkBoxViewModel;
import com.android.systemui.qs.buttons.QSButtonsContainer;
import com.android.systemui.qs.buttons.QSButtonsContainerController;
import com.android.systemui.qs.cinema.QSCinemaCompany;
import com.android.systemui.qs.cinema.QSCinemaDirector;
import com.android.systemui.qs.cinema.QSCinemaLogger;
import com.android.systemui.qs.cinema.QSCinemaProvider;
import com.android.systemui.qs.customize.QSCustomizer;
import com.android.systemui.qs.customize.QSCustomizerController;
import com.android.systemui.qs.customize.QSCustomizerController_Factory;
import com.android.systemui.qs.customize.TileAdapter;
import com.android.systemui.qs.customize.TileQueryHelper;
import com.android.systemui.qs.customize.setting.SecQSSettingEditDirectlyActivity;
import com.android.systemui.qs.customize.setting.SecQSSettingEditMainActivity;
import com.android.systemui.qs.customize.setting.SecQSSettingEditResources;
import com.android.systemui.qs.customize.setting.SecQSSettingEditTilesActivity;
import com.android.systemui.qs.dagger.QSFlagsModule;
import com.android.systemui.qs.dagger.QSFragmentComponent;
import com.android.systemui.qs.dagger.QSFragmentModule_ProvidesHeaderQSPanelHostFactory;
import com.android.systemui.qs.dagger.QSFragmentModule_ProvidesPanelQSPanelHostFactory;
import com.android.systemui.qs.dagger.QSHostModule;
import com.android.systemui.qs.external.CustomTile;
import com.android.systemui.qs.external.CustomTileStatePersister;
import com.android.systemui.qs.external.PackageManagerAdapter;
import com.android.systemui.qs.external.TileLifecycleManager;
import com.android.systemui.qs.external.TileServiceRequestController;
import com.android.systemui.qs.external.TileServices;
import com.android.systemui.qs.footer.data.repository.ForegroundServicesRepository;
import com.android.systemui.qs.footer.data.repository.ForegroundServicesRepositoryImpl;
import com.android.systemui.qs.footer.data.repository.UserSwitcherRepository;
import com.android.systemui.qs.footer.data.repository.UserSwitcherRepositoryImpl;
import com.android.systemui.qs.footer.domain.interactor.FooterActionsInteractor;
import com.android.systemui.qs.footer.domain.interactor.FooterActionsInteractorImpl;
import com.android.systemui.qs.footer.ui.binder.FooterActionsViewBinder;
import com.android.systemui.qs.footer.ui.viewmodel.FooterActionsViewModel$Factory;
import com.android.systemui.qs.logging.QSLogger;
import com.android.systemui.qs.pipeline.dagger.QSPipelineModule;
import com.android.systemui.qs.pipeline.data.repository.AutoAddRepository;
import com.android.systemui.qs.pipeline.data.repository.AutoAddSettingRepository;
import com.android.systemui.qs.pipeline.data.repository.CustomTileAddedRepository;
import com.android.systemui.qs.pipeline.data.repository.CustomTileAddedSharedPrefsRepository;
import com.android.systemui.qs.pipeline.data.repository.InstalledTilesComponentRepository;
import com.android.systemui.qs.pipeline.data.repository.InstalledTilesComponentRepositoryImpl;
import com.android.systemui.qs.pipeline.data.repository.TileSpecRepository;
import com.android.systemui.qs.pipeline.data.repository.TileSpecSettingsRepository;
import com.android.systemui.qs.pipeline.domain.interactor.CurrentTilesInteractor;
import com.android.systemui.qs.pipeline.domain.interactor.CurrentTilesInteractorImpl;
import com.android.systemui.qs.pipeline.domain.interactor.PanelInteractor;
import com.android.systemui.qs.pipeline.domain.interactor.PanelInteractorImpl;
import com.android.systemui.qs.pipeline.prototyping.PrototypeCoreStartable;
import com.android.systemui.qs.pipeline.shared.logging.QSPipelineLogger;
import com.android.systemui.qs.tileimpl.QSFactoryImpl;
import com.android.systemui.qs.tiles.AirplaneModeTile;
import com.android.systemui.qs.tiles.AlarmTile;
import com.android.systemui.qs.tiles.BlueLightFilterTile;
import com.android.systemui.qs.tiles.CameraToggleTile_Factory;
import com.android.systemui.qs.tiles.CastTile;
import com.android.systemui.qs.tiles.ColorAdjustmentTile;
import com.android.systemui.qs.tiles.ColorCorrectionTile;
import com.android.systemui.qs.tiles.ColorInversionTile;
import com.android.systemui.qs.tiles.ColorLensTile;
import com.android.systemui.qs.tiles.DataSaverTile;
import com.android.systemui.qs.tiles.DeviceControlTile;
import com.android.systemui.qs.tiles.DndTile;
import com.android.systemui.qs.tiles.DreamTile;
import com.android.systemui.qs.tiles.FlashlightTile;
import com.android.systemui.qs.tiles.FontScalingTile;
import com.android.systemui.qs.tiles.HighContrastFontTile;
import com.android.systemui.qs.tiles.HotspotTile;
import com.android.systemui.qs.tiles.LocationTile;
import com.android.systemui.qs.tiles.MicrophoneToggleTile_Factory;
import com.android.systemui.qs.tiles.MobileDataTile;
import com.android.systemui.qs.tiles.NfcTile;
import com.android.systemui.qs.tiles.NightDisplayTile;
import com.android.systemui.qs.tiles.OneHandedModeTile;
import com.android.systemui.qs.tiles.QRCodeScannerTile;
import com.android.systemui.qs.tiles.QuickAccessWalletTile;
import com.android.systemui.qs.tiles.ReduceBrightColorsTile;
import com.android.systemui.qs.tiles.SBluetoothTile;
import com.android.systemui.qs.tiles.SWorkModeTile;
import com.android.systemui.qs.tiles.ScreenCaptureTile;
import com.android.systemui.qs.tiles.ScreenRecordTile;
import com.android.systemui.qs.tiles.SoundModeTile;
import com.android.systemui.qs.tiles.SyncTile;
import com.android.systemui.qs.tiles.UiModeNightTile;
import com.android.systemui.qs.tiles.UserDetailView;
import com.android.systemui.qs.tiles.WifiTile;
import com.android.systemui.qs.tiles.dialog.InternetDialogController;
import com.android.systemui.qs.tiles.dialog.InternetDialogFactory;
import com.android.systemui.qs.tiles.dialog.WifiStateWorker;
import com.android.systemui.qs.user.UserSwitchDialogController;
import com.android.systemui.recents.OverviewProxyRecentsImpl;
import com.android.systemui.recents.OverviewProxyService;
import com.android.systemui.recents.Recents;
import com.android.systemui.recents.RecentsImplementation;
import com.android.systemui.recents.RecentsModule_ProvideRecentsImplFactory;
import com.android.systemui.recents.ScreenPinningRequest;
import com.android.systemui.retail.data.repository.RetailModeRepository;
import com.android.systemui.retail.data.repository.RetailModeSettingsRepository;
import com.android.systemui.screenrecord.RecordingController;
import com.android.systemui.screenrecord.RecordingService;
import com.android.systemui.screenshot.ActionIntentExecutor;
import com.android.systemui.screenshot.ActionProxyReceiver;
import com.android.systemui.screenshot.AssistContentRequester;
import com.android.systemui.screenshot.DeleteScreenshotReceiver;
import com.android.systemui.screenshot.ImageCapture;
import com.android.systemui.screenshot.ImageCaptureImpl;
import com.android.systemui.screenshot.ImageExporter;
import com.android.systemui.screenshot.ImageTileSet;
import com.android.systemui.screenshot.LongScreenshotActivity;
import com.android.systemui.screenshot.LongScreenshotData;
import com.android.systemui.screenshot.MessageContainerController;
import com.android.systemui.screenshot.ReferenceScreenshotModule_ProvidesScrnshtNotifSmartActionsProviderFactory;
import com.android.systemui.screenshot.RequestProcessor;
import com.android.systemui.screenshot.ScreenshotController;
import com.android.systemui.screenshot.ScreenshotController_Factory;
import com.android.systemui.screenshot.ScreenshotDetectionController;
import com.android.systemui.screenshot.ScreenshotNotificationSmartActionsProvider;
import com.android.systemui.screenshot.ScreenshotNotificationsController;
import com.android.systemui.screenshot.ScreenshotPolicy;
import com.android.systemui.screenshot.ScreenshotPolicyImpl;
import com.android.systemui.screenshot.ScreenshotProxyService;
import com.android.systemui.screenshot.ScreenshotSmartActions;
import com.android.systemui.screenshot.ScrollCaptureClient;
import com.android.systemui.screenshot.ScrollCaptureController;
import com.android.systemui.screenshot.SmartActionsReceiver;
import com.android.systemui.screenshot.SmartActionsReceiver_Factory;
import com.android.systemui.screenshot.TakeScreenshotService;
import com.android.systemui.screenshot.TimeoutHandler;
import com.android.systemui.screenshot.WorkProfileMessageController;
import com.android.systemui.screenshot.appclips.AppClipsActivity;
import com.android.systemui.screenshot.appclips.AppClipsCrossProcessHelper;
import com.android.systemui.screenshot.appclips.AppClipsCrossProcessHelper_Factory;
import com.android.systemui.screenshot.appclips.AppClipsScreenshotHelperService;
import com.android.systemui.screenshot.appclips.AppClipsService;
import com.android.systemui.screenshot.appclips.AppClipsTrampolineActivity;
import com.android.systemui.screenshot.appclips.AppClipsViewModel;
import com.android.systemui.screenshot.sep.ScreenshotErrorController;
import com.android.systemui.screenshot.sep.SemImageCaptureImpl;
import com.android.systemui.scrim.ScrimView;
import com.android.systemui.searcle.SearcleManager;
import com.android.systemui.security.data.repository.SecurityRepository;
import com.android.systemui.security.data.repository.SecurityRepositoryImpl;
import com.android.systemui.sensor.PickupController;
import com.android.systemui.sensorprivacy.SensorUseStartedActivity;
import com.android.systemui.sensorprivacy.SubscreenSensorUseUtil;
import com.android.systemui.sensorprivacy.television.TvSensorPrivacyChangedActivity;
import com.android.systemui.sensorprivacy.television.TvUnblockSensorActivity;
import com.android.systemui.settings.DisplayTracker;
import com.android.systemui.settings.UserContextProvider;
import com.android.systemui.settings.UserFileManager;
import com.android.systemui.settings.UserFileManagerImpl;
import com.android.systemui.settings.UserTracker;
import com.android.systemui.settings.brightness.BrightnessController;
import com.android.systemui.settings.brightness.BrightnessDialog;
import com.android.systemui.settings.brightness.BrightnessSliderController;
import com.android.systemui.settings.dagger.MultiUserUtilsModule_ProvideDisplayTrackerFactory;
import com.android.systemui.settings.dagger.MultiUserUtilsModule_ProvideUserTrackerFactory;
import com.android.systemui.settings.multisim.MultiSIMController;
import com.android.systemui.settings.multisim.MultiSIMPreferredSlotView;
import com.android.systemui.shade.CameraLauncher;
import com.android.systemui.shade.CombinedShadeHeadersConstraintManager;
import com.android.systemui.shade.CombinedShadeHeadersConstraintManagerImpl;
import com.android.systemui.shade.NotificationPanelUnfoldAnimationController;
import com.android.systemui.shade.NotificationPanelView;
import com.android.systemui.shade.NotificationPanelViewController;
import com.android.systemui.shade.NotificationPanelViewController_Factory;
import com.android.systemui.shade.NotificationShadeWindowControllerImpl;
import com.android.systemui.shade.NotificationShadeWindowView;
import com.android.systemui.shade.NotificationShadeWindowViewController;
import com.android.systemui.shade.NotificationShadeWindowViewController_Factory;
import com.android.systemui.shade.NotificationsQSContainerController;
import com.android.systemui.shade.NotificationsQuickSettingsContainer;
import com.android.systemui.shade.PulsingGestureListener;
import com.android.systemui.shade.QsBatteryModeController;
import com.android.systemui.shade.QuickSettingsController;
import com.android.systemui.shade.SecHideInformationMirroringController;
import com.android.systemui.shade.SecHideInformationMirroringModel;
import com.android.systemui.shade.SecNotificationShadeWindowControllerHelperImpl;
import com.android.systemui.shade.SecPanelBlockExpandingHelper;
import com.android.systemui.shade.SecPanelConfigurationBellTower;
import com.android.systemui.shade.SecPanelExpansionStateNotifier;
import com.android.systemui.shade.SecPanelPolicy;
import com.android.systemui.shade.SecPanelTouchProximityHelper;
import com.android.systemui.shade.ShadeController;
import com.android.systemui.shade.ShadeControllerImpl;
import com.android.systemui.shade.ShadeExpansionStateManager;
import com.android.systemui.shade.ShadeHeaderColorPicker;
import com.android.systemui.shade.ShadeHeaderController;
import com.android.systemui.shade.ShadeLogger;
import com.android.systemui.shade.ShadeModule;
import com.android.systemui.shade.ShadeModule_Companion_ProvideStatusIconContainerControllerFactory;
import com.android.systemui.shade.ShadeModule_Companion_ProvidesBatteryMeterViewControllerFactory;
import com.android.systemui.shade.ShadeModule_Companion_ProvidesNotificationShadeWindowViewFactory;
import com.android.systemui.shade.ShadeModule_Companion_ProvidesShadeHeaderViewFactory;
import com.android.systemui.shade.ShadeStateEvents;
import com.android.systemui.shade.ShadeViewController;
import com.android.systemui.shade.ShadeViewStateProvider;
import com.android.systemui.shade.ShadeWindowLogger;
import com.android.systemui.shade.carrier.CarrierTextUtil;
import com.android.systemui.shade.carrier.LatinNetworkNameProviderImpl;
import com.android.systemui.shade.carrier.ShadeCarrierGroupController;
import com.android.systemui.shade.data.repository.ShadeRepository;
import com.android.systemui.shade.data.repository.ShadeRepositoryImpl;
import com.android.systemui.shade.transition.LargeScreenPortraitShadeInterpolator;
import com.android.systemui.shade.transition.LargeScreenShadeInterpolator;
import com.android.systemui.shade.transition.LargeScreenShadeInterpolatorImpl;
import com.android.systemui.shade.transition.ScrimShadeTransitionController;
import com.android.systemui.shade.transition.ShadeTransitionController;
import com.android.systemui.shade.transition.SplitShadeInterpolator;
import com.android.systemui.shared.clocks.ClockRegistry;
import com.android.systemui.shared.plugins.PluginActionManager;
import com.android.systemui.shared.plugins.PluginEnabler;
import com.android.systemui.shared.plugins.PluginInstance;
import com.android.systemui.shared.plugins.PluginPrefs;
import com.android.systemui.shared.system.ActivityManagerWrapper;
import com.android.systemui.shared.system.DevicePolicyManagerWrapper;
import com.android.systemui.shared.system.InputChannelCompat$InputEventListener;
import com.android.systemui.shared.system.PackageManagerWrapper;
import com.android.systemui.shared.system.TaskStackChangeListeners;
import com.android.systemui.shared.system.UncaughtExceptionPreHandlerManager;
import com.android.systemui.shortcut.ShortcutKeyDispatcher;
import com.android.systemui.slimindicator.SlimIndicatorKeyguardCarrierTextHelper;
import com.android.systemui.slimindicator.SlimIndicatorViewMediator;
import com.android.systemui.slimindicator.SlimIndicatorViewMediatorImpl;
import com.android.systemui.statusbar.ActionClickLogger;
import com.android.systemui.statusbar.BlurUtils;
import com.android.systemui.statusbar.CommandQueue;
import com.android.systemui.statusbar.HeadsUpStatusBarView;
import com.android.systemui.statusbar.KeyguardIndicationController;
import com.android.systemui.statusbar.KeyguardSecAffordanceView;
import com.android.systemui.statusbar.KeyguardShortcutManager;
import com.android.systemui.statusbar.LegacyNotificationShelfControllerImpl;
import com.android.systemui.statusbar.LightRevealScrim;
import com.android.systemui.statusbar.LockscreenNotificationManager;
import com.android.systemui.statusbar.LockscreenNotificationManagerLogger;
import com.android.systemui.statusbar.LockscreenShadeKeyguardTransitionController;
import com.android.systemui.statusbar.LockscreenShadeQsTransitionController;
import com.android.systemui.statusbar.LockscreenShadeScrimTransitionController;
import com.android.systemui.statusbar.LockscreenShadeTransitionController;
import com.android.systemui.statusbar.MediaArtworkProcessor;
import com.android.systemui.statusbar.NotificationClickNotifier;
import com.android.systemui.statusbar.NotificationInsetsController;
import com.android.systemui.statusbar.NotificationInsetsImpl;
import com.android.systemui.statusbar.NotificationInteractionTracker;
import com.android.systemui.statusbar.NotificationListener;
import com.android.systemui.statusbar.NotificationLockscreenUserManager;
import com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl;
import com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl_Factory;
import com.android.systemui.statusbar.NotificationMediaManager;
import com.android.systemui.statusbar.NotificationPresenter;
import com.android.systemui.statusbar.NotificationRemoteInputManager;
import com.android.systemui.statusbar.NotificationShadeDepthController;
import com.android.systemui.statusbar.NotificationShadeWindowController;
import com.android.systemui.statusbar.NotificationShelf;
import com.android.systemui.statusbar.NotificationShelfController;
import com.android.systemui.statusbar.NotificationShelfManager;
import com.android.systemui.statusbar.OperatorNameViewController$Factory;
import com.android.systemui.statusbar.PulseExpansionHandler;
import com.android.systemui.statusbar.QsFrameTranslateController;
import com.android.systemui.statusbar.QsFrameTranslateImpl;
import com.android.systemui.statusbar.RemoteInputController;
import com.android.systemui.statusbar.RemoteInputNotificationRebuilder;
import com.android.systemui.statusbar.SecLightRevealScrimHelper;
import com.android.systemui.statusbar.SingleShadeLockScreenOverScroller;
import com.android.systemui.statusbar.SmartReplyController;
import com.android.systemui.statusbar.SplitShadeLockScreenOverScroller;
import com.android.systemui.statusbar.StatusBarStateControllerImpl;
import com.android.systemui.statusbar.StatusBarStateControllerImpl_Factory;
import com.android.systemui.statusbar.SysuiStatusBarStateController;
import com.android.systemui.statusbar.VibratorHelper;
import com.android.systemui.statusbar.commandline.CommandRegistry;
import com.android.systemui.statusbar.connectivity.AccessPointController;
import com.android.systemui.statusbar.connectivity.AccessPointControllerImpl;
import com.android.systemui.statusbar.connectivity.CallbackHandler;
import com.android.systemui.statusbar.connectivity.CallbackHandler_Factory;
import com.android.systemui.statusbar.connectivity.MobileSignalControllerFactory;
import com.android.systemui.statusbar.connectivity.NetworkController;
import com.android.systemui.statusbar.connectivity.NetworkControllerImpl;
import com.android.systemui.statusbar.connectivity.SubRoomNetworkInfo;
import com.android.systemui.statusbar.connectivity.WifiStatusTrackerFactory;
import com.android.systemui.statusbar.connectivity.ui.MobileContextProvider;
import com.android.systemui.statusbar.core.StatusBarInitializer;
import com.android.systemui.statusbar.dagger.CentralSurfacesDependenciesModule$1;
import com.android.systemui.statusbar.dagger.CentralSurfacesDependenciesModule_ProvideActivityLaunchAnimatorFactory;
import com.android.systemui.statusbar.dagger.CentralSurfacesDependenciesModule_ProvideAnimationFeatureFlagsFactory;
import com.android.systemui.statusbar.dagger.CentralSurfacesDependenciesModule_ProvideNotificationMediaManagerFactory;
import com.android.systemui.statusbar.dagger.CentralSurfacesDependenciesModule_ProvideNotificationRemoteInputManagerFactory;
import com.android.systemui.statusbar.dagger.CentralSurfacesDependenciesModule_ProvideOngoingCallControllerFactory;
import com.android.systemui.statusbar.dagger.CentralSurfacesDependenciesModule_ProvideSmartReplyControllerFactory;
import com.android.systemui.statusbar.dagger.CentralSurfacesDependenciesModule_ProvideStatusBarIconListFactory;
import com.android.systemui.statusbar.disableflags.DisableFlagsLogger;
import com.android.systemui.statusbar.events.PrivacyDotViewController;
import com.android.systemui.statusbar.events.StatusBarEventsModule_Companion_ProvideSystemStatusAnimationSchedulerFactory;
import com.android.systemui.statusbar.events.SystemEventChipAnimationController;
import com.android.systemui.statusbar.events.SystemEventCoordinator;
import com.android.systemui.statusbar.events.SystemStatusAnimationScheduler;
import com.android.systemui.statusbar.gesture.SwipeStatusBarAwayGestureHandler;
import com.android.systemui.statusbar.gesture.SwipeUpGestureLogger;
import com.android.systemui.statusbar.iconsOnly.LockscreenNotificationIconsOnlyController;
import com.android.systemui.statusbar.iconsOnly.NotificationIconTransitionController;
import com.android.systemui.statusbar.lockscreen.LockscreenSmartspaceController;
import com.android.systemui.statusbar.logging.IndicatorLogger;
import com.android.systemui.statusbar.notification.AnimatedImageNotificationManager;
import com.android.systemui.statusbar.notification.AssistantFeedbackController;
import com.android.systemui.statusbar.notification.ConversationNotificationManager;
import com.android.systemui.statusbar.notification.ConversationNotificationProcessor;
import com.android.systemui.statusbar.notification.DynamicPrivacyController;
import com.android.systemui.statusbar.notification.DynamicPrivacyController_Factory;
import com.android.systemui.statusbar.notification.InstantAppNotifier;
import com.android.systemui.statusbar.notification.NotifPipelineFlags;
import com.android.systemui.statusbar.notification.NotificationActivityStarter;
import com.android.systemui.statusbar.notification.NotificationClicker;
import com.android.systemui.statusbar.notification.NotificationClickerLogger;
import com.android.systemui.statusbar.notification.NotificationLaunchAnimatorControllerProvider;
import com.android.systemui.statusbar.notification.NotificationSectionsFeatureManager;
import com.android.systemui.statusbar.notification.NotificationWakeUpCoordinator;
import com.android.systemui.statusbar.notification.NotificationWakeUpCoordinatorLogger;
import com.android.systemui.statusbar.notification.RemoteInputControllerLogger;
import com.android.systemui.statusbar.notification.SubscreenNotificationController;
import com.android.systemui.statusbar.notification.SubscreenNotificationIntelligenceStartActivity;
import com.android.systemui.statusbar.notification.SubscreenNotificationReplyActivity;
import com.android.systemui.statusbar.notification.VisibilityLocationProvider;
import com.android.systemui.statusbar.notification.collection.NotifCollection;
import com.android.systemui.statusbar.notification.collection.NotifInflaterImpl;
import com.android.systemui.statusbar.notification.collection.NotifLiveDataStore;
import com.android.systemui.statusbar.notification.collection.NotifLiveDataStoreImpl;
import com.android.systemui.statusbar.notification.collection.NotifPipeline;
import com.android.systemui.statusbar.notification.collection.NotifPipelineChoreographer;
import com.android.systemui.statusbar.notification.collection.NotifPipelineChoreographerImpl_Factory;
import com.android.systemui.statusbar.notification.collection.NotificationEntry;
import com.android.systemui.statusbar.notification.collection.ShadeListBuilder;
import com.android.systemui.statusbar.notification.collection.TargetSdkResolver;
import com.android.systemui.statusbar.notification.collection.coalescer.GroupCoalescer;
import com.android.systemui.statusbar.notification.collection.coalescer.GroupCoalescerLogger;
import com.android.systemui.statusbar.notification.collection.coordinator.AppOpsCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.BubbleCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.ConversationCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.DataStoreCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.DebugModeCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.DeviceProvisionedCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.DismissibilityCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.EdgeLightingCoordnator;
import com.android.systemui.statusbar.notification.collection.coordinator.GroupCountCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.GroupWhenCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.GutsCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.GutsCoordinatorLogger;
import com.android.systemui.statusbar.notification.collection.coordinator.HeadsUpCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.HeadsUpCoordinatorLogger;
import com.android.systemui.statusbar.notification.collection.coordinator.HideLocallyDismissedNotifsCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.HideNotifsForOtherUsersCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.KeyguardCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.KeyguardCoordinatorLogger;
import com.android.systemui.statusbar.notification.collection.coordinator.LockScreenNotiIconCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.LockScreenNotiIconCoordinator_Factory;
import com.android.systemui.statusbar.notification.collection.coordinator.MediaCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.NotifCoordinators;
import com.android.systemui.statusbar.notification.collection.coordinator.NotifCoordinatorsImpl;
import com.android.systemui.statusbar.notification.collection.coordinator.NotifCounterCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.NotifHeaderCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.NotifTimeSortCoordnator;
import com.android.systemui.statusbar.notification.collection.coordinator.NotificationControlActionCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.NotilusCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.PreparationCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.PreparationCoordinatorLogger;
import com.android.systemui.statusbar.notification.collection.coordinator.RankingCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.RemoteInputCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.RowAppearanceCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.SemPriorityCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.SensitiveContentCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.SensitiveContentCoordinatorImpl;
import com.android.systemui.statusbar.notification.collection.coordinator.SettingsChangedCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.ShadeEventCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.ShadeEventCoordinatorLogger;
import com.android.systemui.statusbar.notification.collection.coordinator.SmartspaceDedupingCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.StackCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.SubscreenQuickReplyCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.ViewConfigCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.VisualStabilityCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.dagger.CoordinatorsModule;
import com.android.systemui.statusbar.notification.collection.coordinator.dagger.CoordinatorsSubcomponent;
import com.android.systemui.statusbar.notification.collection.inflation.BindEventManager;
import com.android.systemui.statusbar.notification.collection.inflation.BindEventManagerImpl;
import com.android.systemui.statusbar.notification.collection.inflation.NotifInflater;
import com.android.systemui.statusbar.notification.collection.inflation.NotifUiAdjustmentProvider;
import com.android.systemui.statusbar.notification.collection.inflation.NotificationRowBinderImpl;
import com.android.systemui.statusbar.notification.collection.inflation.OnUserInteractionCallbackImpl;
import com.android.systemui.statusbar.notification.collection.init.NotifPipelineInitializer;
import com.android.systemui.statusbar.notification.collection.listbuilder.ShadeListBuilderLogger;
import com.android.systemui.statusbar.notification.collection.notifcollection.CommonNotifCollection;
import com.android.systemui.statusbar.notification.collection.notifcollection.NotifCollectionLogger;
import com.android.systemui.statusbar.notification.collection.provider.DebugModeFilterProvider;
import com.android.systemui.statusbar.notification.collection.provider.HighPriorityProvider;
import com.android.systemui.statusbar.notification.collection.provider.LaunchFullScreenIntentProvider;
import com.android.systemui.statusbar.notification.collection.provider.NotificationDismissibilityProvider;
import com.android.systemui.statusbar.notification.collection.provider.NotificationDismissibilityProviderImpl;
import com.android.systemui.statusbar.notification.collection.provider.NotificationVisibilityProviderImpl;
import com.android.systemui.statusbar.notification.collection.provider.SectionHeaderVisibilityProvider;
import com.android.systemui.statusbar.notification.collection.provider.SectionStyleProvider;
import com.android.systemui.statusbar.notification.collection.provider.SeenNotificationsProvider;
import com.android.systemui.statusbar.notification.collection.provider.SeenNotificationsProviderImpl;
import com.android.systemui.statusbar.notification.collection.provider.VisibilityLocationProviderDelegator;
import com.android.systemui.statusbar.notification.collection.provider.VisualStabilityProvider;
import com.android.systemui.statusbar.notification.collection.render.GroupExpansionManager;
import com.android.systemui.statusbar.notification.collection.render.GroupExpansionManagerImpl;
import com.android.systemui.statusbar.notification.collection.render.GroupMembershipManager;
import com.android.systemui.statusbar.notification.collection.render.MediaContainerController;
import com.android.systemui.statusbar.notification.collection.render.NodeController;
import com.android.systemui.statusbar.notification.collection.render.NodeSpecBuilderLogger;
import com.android.systemui.statusbar.notification.collection.render.NotifGutsViewManager;
import com.android.systemui.statusbar.notification.collection.render.NotifShadeEventSource;
import com.android.systemui.statusbar.notification.collection.render.NotifStackController;
import com.android.systemui.statusbar.notification.collection.render.NotifViewBarn;
import com.android.systemui.statusbar.notification.collection.render.NotificationVisibilityProvider;
import com.android.systemui.statusbar.notification.collection.render.RenderStageManager;
import com.android.systemui.statusbar.notification.collection.render.SectionHeaderController;
import com.android.systemui.statusbar.notification.collection.render.SectionHeaderNodeControllerImpl;
import com.android.systemui.statusbar.notification.collection.render.ShadeViewDifferLogger;
import com.android.systemui.statusbar.notification.collection.render.ShadeViewManager;
import com.android.systemui.statusbar.notification.collection.render.ShadeViewManagerFactory;
import com.android.systemui.statusbar.notification.dagger.NotificationSectionHeadersModule;
import com.android.systemui.statusbar.notification.dagger.NotificationSectionHeadersModule_ProvidesAlertingHeaderSubcomponentFactory;
import com.android.systemui.statusbar.notification.dagger.NotificationSectionHeadersModule_ProvidesIncomingHeaderSubcomponentFactory;
import com.android.systemui.statusbar.notification.dagger.NotificationSectionHeadersModule_ProvidesPeopleHeaderSubcomponentFactory;
import com.android.systemui.statusbar.notification.dagger.NotificationSectionHeadersModule_ProvidesSilentHeaderSubcomponentFactory;
import com.android.systemui.statusbar.notification.dagger.NotificationsModule_ProvideGroupMembershipManagerFactory;
import com.android.systemui.statusbar.notification.dagger.NotificationsModule_ProvideNotificationLoggerFactory;
import com.android.systemui.statusbar.notification.dagger.NotificationsModule_ProvideNotificationPanelLoggerFactory;
import com.android.systemui.statusbar.notification.dagger.NotificationsModule_ProvideNotificationsControllerFactory;
import com.android.systemui.statusbar.notification.dagger.SectionHeaderControllerSubcomponent;
import com.android.systemui.statusbar.notification.icon.ConversationIconManager;
import com.android.systemui.statusbar.notification.icon.IconBuilder;
import com.android.systemui.statusbar.notification.icon.IconManager;
import com.android.systemui.statusbar.notification.init.NotificationsController;
import com.android.systemui.statusbar.notification.init.NotificationsControllerImpl;
import com.android.systemui.statusbar.notification.init.NotificationsControllerStub;
import com.android.systemui.statusbar.notification.interruption.HeadsUpViewBinder;
import com.android.systemui.statusbar.notification.interruption.HeadsUpViewBinderLogger;
import com.android.systemui.statusbar.notification.interruption.HeadsUpViewBinder_Factory;
import com.android.systemui.statusbar.notification.interruption.KeyguardNotificationVisibilityProvider;
import com.android.systemui.statusbar.notification.interruption.KeyguardNotificationVisibilityProviderImpl_Factory;
import com.android.systemui.statusbar.notification.interruption.NotificationInterruptLogger;
import com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProvider;
import com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProviderImpl;
import com.android.systemui.statusbar.notification.interruption.VisualInterruptionDecisionProvider;
import com.android.systemui.statusbar.notification.logging.NotificationLogger;
import com.android.systemui.statusbar.notification.logging.NotificationMemoryDumper;
import com.android.systemui.statusbar.notification.logging.NotificationMemoryLogger;
import com.android.systemui.statusbar.notification.logging.NotificationMemoryMonitor;
import com.android.systemui.statusbar.notification.logging.NotificationPanelLogger;
import com.android.systemui.statusbar.notification.people.NotificationPersonExtractor;
import com.android.systemui.statusbar.notification.people.NotificationPersonExtractorPluginBoundary;
import com.android.systemui.statusbar.notification.people.PeopleNotificationIdentifier;
import com.android.systemui.statusbar.notification.people.PeopleNotificationIdentifierImpl;
import com.android.systemui.statusbar.notification.row.ActivatableNotificationViewController;
import com.android.systemui.statusbar.notification.row.ChannelEditorDialog;
import com.android.systemui.statusbar.notification.row.ChannelEditorDialogController;
import com.android.systemui.statusbar.notification.row.ExpandableNotificationRow;
import com.android.systemui.statusbar.notification.row.ExpandableNotificationRowController;
import com.android.systemui.statusbar.notification.row.ExpandableNotificationRowDragController;
import com.android.systemui.statusbar.notification.row.ExpandableOutlineViewController;
import com.android.systemui.statusbar.notification.row.ExpandableViewController;
import com.android.systemui.statusbar.notification.row.NotifBindPipeline;
import com.android.systemui.statusbar.notification.row.NotifBindPipelineInitializer;
import com.android.systemui.statusbar.notification.row.NotifBindPipelineLogger;
import com.android.systemui.statusbar.notification.row.NotifInflationErrorManager;
import com.android.systemui.statusbar.notification.row.NotifRemoteViewCache;
import com.android.systemui.statusbar.notification.row.NotifRemoteViewCacheImpl_Factory;
import com.android.systemui.statusbar.notification.row.NotificationContentInflater;
import com.android.systemui.statusbar.notification.row.NotificationGutsManager;
import com.android.systemui.statusbar.notification.row.NotificationRowContentBinder;
import com.android.systemui.statusbar.notification.row.NotificationRowLogger;
import com.android.systemui.statusbar.notification.row.OnUserInteractionCallback;
import com.android.systemui.statusbar.notification.row.RowContentBindStage;
import com.android.systemui.statusbar.notification.row.RowContentBindStageLogger;
import com.android.systemui.statusbar.notification.row.RowContentBindStage_Factory;
import com.android.systemui.statusbar.notification.row.RowInflaterTask;
import com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent;
import com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent_ExpandableNotificationRowModule_ProvideAppNameFactory;
import com.android.systemui.statusbar.notification.row.dagger.NotificationShelfComponent;
import com.android.systemui.statusbar.notification.row.ui.viewmodel.ActivatableNotificationViewModel;
import com.android.systemui.statusbar.notification.row.ui.viewmodel.ActivatableNotificationViewModelImpl;
import com.android.systemui.statusbar.notification.row.ui.viewmodel.ActivatableNotificationViewModelModule;
import com.android.systemui.statusbar.notification.shelf.domain.interactor.NotificationShelfInteractor;
import com.android.systemui.statusbar.notification.shelf.ui.viewbinder.NotificationShelfViewBinderWrapperControllerImpl;
import com.android.systemui.statusbar.notification.shelf.ui.viewmodel.NotificationShelfViewModel;
import com.android.systemui.statusbar.notification.stack.AmbientState;
import com.android.systemui.statusbar.notification.stack.NotificationListContainer;
import com.android.systemui.statusbar.notification.stack.NotificationRoundnessManager;
import com.android.systemui.statusbar.notification.stack.NotificationRoundnessManager_Factory;
import com.android.systemui.statusbar.notification.stack.NotificationSectionsManager;
import com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout;
import com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayoutController;
import com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayoutController_Factory;
import com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayoutListContainerModule_ProvideListContainerFactory;
import com.android.systemui.statusbar.notification.stack.NotificationStackScrollLogger;
import com.android.systemui.statusbar.notification.stack.NotificationStackSizeCalculator;
import com.android.systemui.statusbar.notification.stack.NotificationSwipeHelper;
import com.android.systemui.statusbar.notification.stack.NotificationTargetsHelper;
import com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm;
import com.android.systemui.statusbar.notification.stack.StackStateLogger;
import com.android.systemui.statusbar.notification.stack.ui.viewmodel.NotificationListViewModel;
import com.android.systemui.statusbar.notification.stack.ui.viewmodel.NotificationListViewModelModule;
import com.android.systemui.statusbar.phone.ActivityStarterImpl;
import com.android.systemui.statusbar.phone.AutoHideController;
import com.android.systemui.statusbar.phone.BiometricUnlockController;
import com.android.systemui.statusbar.phone.CapturedBlurContainer;
import com.android.systemui.statusbar.phone.CapturedBlurContainerController;
import com.android.systemui.statusbar.phone.CarrierHomeLogoViewController;
import com.android.systemui.statusbar.phone.CentralSurfaces;
import com.android.systemui.statusbar.phone.CentralSurfacesCommandQueueCallbacks;
import com.android.systemui.statusbar.phone.CentralSurfacesCommandQueueCallbacks_Factory;
import com.android.systemui.statusbar.phone.CentralSurfacesImpl;
import com.android.systemui.statusbar.phone.CentralSurfacesImpl_Factory;
import com.android.systemui.statusbar.phone.ConfigurationControllerImpl;
import com.android.systemui.statusbar.phone.CoverHostImpl;
import com.android.systemui.statusbar.phone.CoverScreenIconController;
import com.android.systemui.statusbar.phone.DarkIconDispatcherImpl;
import com.android.systemui.statusbar.phone.DcmMascotViewContainer;
import com.android.systemui.statusbar.phone.DozeParameters;
import com.android.systemui.statusbar.phone.DozeParameters_Factory;
import com.android.systemui.statusbar.phone.DozeScrimController;
import com.android.systemui.statusbar.phone.DozeServiceHost;
import com.android.systemui.statusbar.phone.DozeServiceHost_Factory;
import com.android.systemui.statusbar.phone.HeadsUpAppearanceController;
import com.android.systemui.statusbar.phone.HeadsUpManagerPhone;
import com.android.systemui.statusbar.phone.IndicatorCoverManager;
import com.android.systemui.statusbar.phone.IndicatorCutoutUtil;
import com.android.systemui.statusbar.phone.IndicatorGardenAlgorithmCenterCutout;
import com.android.systemui.statusbar.phone.IndicatorGardenAlgorithmFactory;
import com.android.systemui.statusbar.phone.IndicatorGardenAlgorithmNoCutout;
import com.android.systemui.statusbar.phone.IndicatorGardenAlgorithmSidelingCenterCutout;
import com.android.systemui.statusbar.phone.IndicatorGardenInputProperties;
import com.android.systemui.statusbar.phone.IndicatorGardenPresenter;
import com.android.systemui.statusbar.phone.IndicatorGardenViewTreeLogHelper;
import com.android.systemui.statusbar.phone.IndicatorMarqueeGardener;
import com.android.systemui.statusbar.phone.IndicatorScaleGardener;
import com.android.systemui.statusbar.phone.IndicatorTouchHandler;
import com.android.systemui.statusbar.phone.KeyguardBottomAreaView;
import com.android.systemui.statusbar.phone.KeyguardBypassController;
import com.android.systemui.statusbar.phone.KeyguardClockPositionAlgorithm;
import com.android.systemui.statusbar.phone.KeyguardDismissUtil;
import com.android.systemui.statusbar.phone.KeyguardSecBottomAreaViewController;
import com.android.systemui.statusbar.phone.KeyguardStatusBarView;
import com.android.systemui.statusbar.phone.KeyguardStatusBarViewController;
import com.android.systemui.statusbar.phone.KeyguardStatusBarWallpaperHelper;
import com.android.systemui.statusbar.phone.LSShadeTransitionLogger;
import com.android.systemui.statusbar.phone.LetterboxAppearanceCalculator;
import com.android.systemui.statusbar.phone.LetterboxBackgroundProvider;
import com.android.systemui.statusbar.phone.LightBarController;
import com.android.systemui.statusbar.phone.LightBarTransitionsController;
import com.android.systemui.statusbar.phone.LightsOutNotifController;
import com.android.systemui.statusbar.phone.LockscreenGestureLogger;
import com.android.systemui.statusbar.phone.LockscreenWallpaper;
import com.android.systemui.statusbar.phone.ManagedProfileController;
import com.android.systemui.statusbar.phone.ManagedProfileControllerImpl;
import com.android.systemui.statusbar.phone.NotificationIconAreaController;
import com.android.systemui.statusbar.phone.NotificationListenerWithPlugins;
import com.android.systemui.statusbar.phone.PhoneStatusBarClockManager;
import com.android.systemui.statusbar.phone.PhoneStatusBarPolicy;
import com.android.systemui.statusbar.phone.PhoneStatusBarTransitions;
import com.android.systemui.statusbar.phone.PhoneStatusBarView;
import com.android.systemui.statusbar.phone.PhoneStatusBarViewController;
import com.android.systemui.statusbar.phone.QSScrimViewSwitch;
import com.android.systemui.statusbar.phone.SafeUIStatusBarWindowController;
import com.android.systemui.statusbar.phone.SamsungLightBarControlHelper;
import com.android.systemui.statusbar.phone.SamsungStatusBarGrayIconHelper;
import com.android.systemui.statusbar.phone.ScreenOffAnimationController;
import com.android.systemui.statusbar.phone.ScrimController;
import com.android.systemui.statusbar.phone.ScrimController_Factory;
import com.android.systemui.statusbar.phone.SecLsScrimControlHelper;
import com.android.systemui.statusbar.phone.SecPanelBackground;
import com.android.systemui.statusbar.phone.SecPanelBackgroundController;
import com.android.systemui.statusbar.phone.SecUnlockedScreenOffAnimationHelper;
import com.android.systemui.statusbar.phone.SimpleStatusBarIconController;
import com.android.systemui.statusbar.phone.StatusBarBoundsProvider;
import com.android.systemui.statusbar.phone.StatusBarContentInsetsProvider;
import com.android.systemui.statusbar.phone.StatusBarDemoMode;
import com.android.systemui.statusbar.phone.StatusBarHeadsUpChangeListener;
import com.android.systemui.statusbar.phone.StatusBarHideIconsForBouncerManager;
import com.android.systemui.statusbar.phone.StatusBarIconController;
import com.android.systemui.statusbar.phone.StatusBarIconControllerImpl;
import com.android.systemui.statusbar.phone.StatusBarIconList;
import com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager;
import com.android.systemui.statusbar.phone.StatusBarLocationPublisher;
import com.android.systemui.statusbar.phone.StatusBarMoveFromCenterAnimationController;
import com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarterLogger;
import com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter_Factory;
import com.android.systemui.statusbar.phone.StatusBarNotificationPresenter_Factory;
import com.android.systemui.statusbar.phone.StatusBarRemoteInputCallback;
import com.android.systemui.statusbar.phone.StatusBarSignalPolicy;
import com.android.systemui.statusbar.phone.StatusBarTouchableRegionManager;
import com.android.systemui.statusbar.phone.StatusIconContainer;
import com.android.systemui.statusbar.phone.StatusIconContainerController;
import com.android.systemui.statusbar.phone.SubScreenQuickPanelHeader;
import com.android.systemui.statusbar.phone.SubScreenQuickPanelHeaderController;
import com.android.systemui.statusbar.phone.SystemBarAttributesListener;
import com.android.systemui.statusbar.phone.SystemUIDialogManager;
import com.android.systemui.statusbar.phone.TapAgainView;
import com.android.systemui.statusbar.phone.TapAgainViewController;
import com.android.systemui.statusbar.phone.TwoPhoneModeIconController;
import com.android.systemui.statusbar.phone.UnlockedScreenOffAnimationController;
import com.android.systemui.statusbar.phone.dagger.CentralSurfacesComponent;
import com.android.systemui.statusbar.phone.dagger.IndicatorPhoneModule;
import com.android.systemui.statusbar.phone.dagger.StatusBarViewModule_CreateCollapsedStatusBarFragmentFactory;
import com.android.systemui.statusbar.phone.dagger.StatusBarViewModule_ProvidesKeyguardBottomAreaViewFactory;
import com.android.systemui.statusbar.phone.dagger.StatusBarViewModule_ProvidesNotificationShelfFactory;
import com.android.systemui.statusbar.phone.dagger.StatusBarViewModule_ProvidesStatusBarWindowViewFactory;
import com.android.systemui.statusbar.phone.datausage.DataUsageLabelManager;
import com.android.systemui.statusbar.phone.fragment.CollapsedStatusBarFragment;
import com.android.systemui.statusbar.phone.fragment.CollapsedStatusBarFragmentLogger;
import com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent;
import com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentModule;
import com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentModule_ProvideOperatorFrameNameViewFactory;
import com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentModule_ProvidePhoneStatusBarViewControllerFactory;
import com.android.systemui.statusbar.phone.knox.data.repository.KnoxStatusBarControlRepository;
import com.android.systemui.statusbar.phone.knox.data.repository.KnoxStatusBarControlRepositoryImpl;
import com.android.systemui.statusbar.phone.knox.domain.interactor.KnoxStatusBarControlInteractor;
import com.android.systemui.statusbar.phone.knox.ui.viewmodel.KnoxStatusBarControlViewModel;
import com.android.systemui.statusbar.phone.ongoingcall.KeyguardCallChipController;
import com.android.systemui.statusbar.phone.ongoingcall.OngoingCallController;
import com.android.systemui.statusbar.phone.ongoingcall.OngoingCallFlags;
import com.android.systemui.statusbar.phone.ongoingcall.OngoingCallLogger;
import com.android.systemui.statusbar.pipeline.StatusBarPipelineFlags;
import com.android.systemui.statusbar.pipeline.airplane.data.repository.AirplaneModeRepository;
import com.android.systemui.statusbar.pipeline.airplane.data.repository.AirplaneModeRepositoryImpl;
import com.android.systemui.statusbar.pipeline.airplane.domain.interactor.AirplaneModeInteractor;
import com.android.systemui.statusbar.pipeline.airplane.ui.viewmodel.AirplaneModeViewModel;
import com.android.systemui.statusbar.pipeline.airplane.ui.viewmodel.AirplaneModeViewModelImpl;
import com.android.systemui.statusbar.pipeline.carrier.CarrierInfoUtil;
import com.android.systemui.statusbar.pipeline.carrier.CarrierInfraMediator;
import com.android.systemui.statusbar.pipeline.carrier.CarrierInfraMediatorImpl;
import com.android.systemui.statusbar.pipeline.carrier.CommonUtil;
import com.android.systemui.statusbar.pipeline.carrier.FakeCarrierInfraMediatorImpl;
import com.android.systemui.statusbar.pipeline.carrier.MobileDataUtil;
import com.android.systemui.statusbar.pipeline.carrier.MobileRoamingUtil;
import com.android.systemui.statusbar.pipeline.carrier.MobileSignalUtil;
import com.android.systemui.statusbar.pipeline.carrier.SystemPropertiesWrapper;
import com.android.systemui.statusbar.pipeline.dagger.StatusBarPipelineModule;
import com.android.systemui.statusbar.pipeline.dagger.StatusBarPipelineModule$Companion$provideFirstMobileSubShowingNetworkTypeIconProvider$1;
import com.android.systemui.statusbar.pipeline.dagger.StatusBarPipelineModule_Companion_ProvideRealWifiRepositoryFactory;
import com.android.systemui.statusbar.pipeline.icons.shared.BindableIconsRegistry;
import com.android.systemui.statusbar.pipeline.icons.shared.BindableIconsRegistryImpl;
import com.android.systemui.statusbar.pipeline.mobile.data.MobileInputLogger;
import com.android.systemui.statusbar.pipeline.mobile.data.model.SubscriptionsOrder;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.CarrierConfigCoreStartable;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.CarrierConfigRepository;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.DummyMobileConnectionRepository;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.MobileConnectionsRepository;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.MobileRepositorySwitcher;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.UserSetupRepository;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.UserSetupRepositoryImpl;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.demo.DemoMobileConnectionsRepository;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.demo.DemoModeMobileConnectionDataSource;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.prod.CarrierMergedConnectionRepository;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.prod.FullMobileConnectionRepository;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.prod.MobileConnectionRepositoryImpl;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.prod.MobileConnectionsRepositoryImpl;
import com.android.systemui.statusbar.pipeline.mobile.domain.interactor.MobileDataIconResource;
import com.android.systemui.statusbar.pipeline.mobile.domain.interactor.MobileDisabledDataIconResource;
import com.android.systemui.statusbar.pipeline.mobile.domain.interactor.MobileIconsInteractor;
import com.android.systemui.statusbar.pipeline.mobile.domain.interactor.MobileIconsInteractorImpl;
import com.android.systemui.statusbar.pipeline.mobile.domain.interactor.MobileRoamingIconResource;
import com.android.systemui.statusbar.pipeline.mobile.ui.MobileUiAdapter;
import com.android.systemui.statusbar.pipeline.mobile.ui.MobileViewLogger;
import com.android.systemui.statusbar.pipeline.mobile.ui.VerboseMobileViewLogger;
import com.android.systemui.statusbar.pipeline.mobile.ui.util.MobileSignalIconResource;
import com.android.systemui.statusbar.pipeline.mobile.ui.viewmodel.MobileIconsViewModel;
import com.android.systemui.statusbar.pipeline.mobile.util.MobileMappingsProxyImpl;
import com.android.systemui.statusbar.pipeline.mobile.util.SimCardInfoUtil;
import com.android.systemui.statusbar.pipeline.mobile.util.SubscriptionManagerProxyImpl;
import com.android.systemui.statusbar.pipeline.satellite.data.DeviceBasedSatelliteRepository;
import com.android.systemui.statusbar.pipeline.satellite.data.prod.DeviceBasedSatelliteRepositoryImpl;
import com.android.systemui.statusbar.pipeline.satellite.domain.interactor.DeviceBasedSatelliteInteractor;
import com.android.systemui.statusbar.pipeline.satellite.ui.DeviceBasedSatelliteBindableIcon;
import com.android.systemui.statusbar.pipeline.satellite.ui.viewmodel.DeviceBasedSatelliteViewModel;
import com.android.systemui.statusbar.pipeline.shared.ConnectivityConstants;
import com.android.systemui.statusbar.pipeline.shared.ConnectivityInputLogger;
import com.android.systemui.statusbar.pipeline.shared.data.model.ConnectivitySlots;
import com.android.systemui.statusbar.pipeline.shared.data.repository.ConnectivityRepository;
import com.android.systemui.statusbar.pipeline.shared.data.repository.ConnectivityRepositoryImpl;
import com.android.systemui.statusbar.pipeline.shared.data.repository.ImsRegStateUtil;
import com.android.systemui.statusbar.pipeline.shared.ui.BTTetherUiAdapter;
import com.android.systemui.statusbar.pipeline.shared.ui.binder.CollapsedStatusBarViewBinder;
import com.android.systemui.statusbar.pipeline.shared.ui.binder.CollapsedStatusBarViewBinderImpl;
import com.android.systemui.statusbar.pipeline.shared.ui.viewmodel.CollapsedStatusBarViewModel;
import com.android.systemui.statusbar.pipeline.shared.ui.viewmodel.CollapsedStatusBarViewModelImpl;
import com.android.systemui.statusbar.pipeline.wifi.data.repository.RealWifiRepository;
import com.android.systemui.statusbar.pipeline.wifi.data.repository.WifiRepository;
import com.android.systemui.statusbar.pipeline.wifi.data.repository.WifiRepositorySwitcher;
import com.android.systemui.statusbar.pipeline.wifi.data.repository.demo.DemoModeWifiDataSource;
import com.android.systemui.statusbar.pipeline.wifi.data.repository.demo.DemoWifiRepository;
import com.android.systemui.statusbar.pipeline.wifi.data.repository.prod.DisabledWifiRepository;
import com.android.systemui.statusbar.pipeline.wifi.data.repository.prod.WifiRepositoryImpl;
import com.android.systemui.statusbar.pipeline.wifi.domain.interactor.WifiInteractor;
import com.android.systemui.statusbar.pipeline.wifi.domain.interactor.WifiInteractorImpl;
import com.android.systemui.statusbar.pipeline.wifi.shared.WifiConstants;
import com.android.systemui.statusbar.pipeline.wifi.shared.WifiInputLogger;
import com.android.systemui.statusbar.pipeline.wifi.ui.WifiUiAdapter;
import com.android.systemui.statusbar.pipeline.wifi.ui.util.WifiSignalIconResource;
import com.android.systemui.statusbar.pipeline.wifi.ui.viewmodel.WifiViewModel;
import com.android.systemui.statusbar.policy.AccessibilityController;
import com.android.systemui.statusbar.policy.AccessibilityManagerWrapper;
import com.android.systemui.statusbar.policy.AospPolicyModule_ProvideBatteryControllerFactory;
import com.android.systemui.statusbar.policy.BatteryController;
import com.android.systemui.statusbar.policy.BatteryStateNotifier;
import com.android.systemui.statusbar.policy.BluetoothControllerImpl;
import com.android.systemui.statusbar.policy.CastController;
import com.android.systemui.statusbar.policy.CastControllerImpl;
import com.android.systemui.statusbar.policy.ConfigurationController;
import com.android.systemui.statusbar.policy.DataSaverController;
import com.android.systemui.statusbar.policy.DevicePostureController;
import com.android.systemui.statusbar.policy.DevicePostureControllerImpl;
import com.android.systemui.statusbar.policy.DeviceProvisionedController;
import com.android.systemui.statusbar.policy.DeviceProvisionedControllerImpl;
import com.android.systemui.statusbar.policy.DeviceStateRotationLockSettingController;
import com.android.systemui.statusbar.policy.DeviceStateRotationLockSettingControllerLogger;
import com.android.systemui.statusbar.policy.ExtensionController;
import com.android.systemui.statusbar.policy.ExtensionControllerImpl;
import com.android.systemui.statusbar.policy.FlashlightController;
import com.android.systemui.statusbar.policy.FlashlightControllerImpl;
import com.android.systemui.statusbar.policy.HeadsUpManager;
import com.android.systemui.statusbar.policy.HeadsUpManagerLogger;
import com.android.systemui.statusbar.policy.HotspotController;
import com.android.systemui.statusbar.policy.HotspotControllerImpl;
import com.android.systemui.statusbar.policy.IndividualSensorPrivacyController;
import com.android.systemui.statusbar.policy.IndividualSensorPrivacyControllerImpl;
import com.android.systemui.statusbar.policy.KeyguardQsUserSwitchController;
import com.android.systemui.statusbar.policy.KeyguardStateController;
import com.android.systemui.statusbar.policy.KeyguardStateControllerImpl;
import com.android.systemui.statusbar.policy.KeyguardUserSwitcherController;
import com.android.systemui.statusbar.policy.KeyguardUserSwitcherView;
import com.android.systemui.statusbar.policy.LocationController;
import com.android.systemui.statusbar.policy.LocationControllerImpl;
import com.android.systemui.statusbar.policy.NetspeedView;
import com.android.systemui.statusbar.policy.NetspeedViewController;
import com.android.systemui.statusbar.policy.NextAlarmController;
import com.android.systemui.statusbar.policy.NextAlarmControllerImpl;
import com.android.systemui.statusbar.policy.QSClockBellAlternateCalendarUtil;
import com.android.systemui.statusbar.policy.QSClockBellTower;
import com.android.systemui.statusbar.policy.QSClockIndicatorView;
import com.android.systemui.statusbar.policy.QSClockIndicatorViewController;
import com.android.systemui.statusbar.policy.RemoteInputQuickSettingsDisabler;
import com.android.systemui.statusbar.policy.RemoteInputUriController;
import com.android.systemui.statusbar.policy.RemoteInputView;
import com.android.systemui.statusbar.policy.RemoteInputViewController;
import com.android.systemui.statusbar.policy.RemoteInputViewControllerImpl;
import com.android.systemui.statusbar.policy.RotationLockController;
import com.android.systemui.statusbar.policy.RotationLockControllerImpl;
import com.android.systemui.statusbar.policy.SBluetoothController;
import com.android.systemui.statusbar.policy.SBluetoothControllerImpl;
import com.android.systemui.statusbar.policy.SRotationLockControllerImpl;
import com.android.systemui.statusbar.policy.SecurityController;
import com.android.systemui.statusbar.policy.SecurityControllerImpl;
import com.android.systemui.statusbar.policy.SensorPrivacyController;
import com.android.systemui.statusbar.policy.SensorPrivacyControllerImpl;
import com.android.systemui.statusbar.policy.SmartActionInflaterImpl;
import com.android.systemui.statusbar.policy.SmartReplyConstants;
import com.android.systemui.statusbar.policy.SmartReplyInflaterImpl;
import com.android.systemui.statusbar.policy.SmartReplyStateInflaterImpl;
import com.android.systemui.statusbar.policy.UserInfoController;
import com.android.systemui.statusbar.policy.UserInfoControllerImpl;
import com.android.systemui.statusbar.policy.UserSwitcherController;
import com.android.systemui.statusbar.policy.VariableDateViewController;
import com.android.systemui.statusbar.policy.ZenModeController;
import com.android.systemui.statusbar.policy.ZenModeControllerImpl;
import com.android.systemui.statusbar.policy.bluetooth.BluetoothRepository;
import com.android.systemui.statusbar.policy.bluetooth.BluetoothRepositoryImpl;
import com.android.systemui.statusbar.policy.dagger.RemoteInputViewSubcomponent;
import com.android.systemui.statusbar.policy.dagger.StatusBarPolicyModule_ProvideAccessPointControllerImplFactory;
import com.android.systemui.statusbar.policy.dagger.StatusBarPolicyModule_ProvideAutoRotateSettingsManagerFactory;
import com.android.systemui.statusbar.tv.TvStatusBar;
import com.android.systemui.statusbar.tv.VpnStatusObserver;
import com.android.systemui.statusbar.tv.notifications.TvNotificationHandler;
import com.android.systemui.statusbar.tv.notifications.TvNotificationPanel;
import com.android.systemui.statusbar.tv.notifications.TvNotificationPanelActivity;
import com.android.systemui.statusbar.window.StatusBarWindowController;
import com.android.systemui.statusbar.window.StatusBarWindowController_Factory;
import com.android.systemui.statusbar.window.StatusBarWindowModule_ProvidesStatusBarWindowViewFactory;
import com.android.systemui.statusbar.window.StatusBarWindowStateController;
import com.android.systemui.statusbar.window.StatusBarWindowView;
import com.android.systemui.stylus.StylusManager;
import com.android.systemui.subscreen.ScreenRecordingStateProvider;
import com.android.systemui.subscreen.SubHomeActivity;
import com.android.systemui.subscreen.SubScreenFallback;
import com.android.systemui.subscreen.SubScreenManager;
import com.android.systemui.subscreen.SubScreenQuickPanelWindowController;
import com.android.systemui.subscreen.SubScreenQuickPanelWindowView;
import com.android.systemui.subscreen.dagger.SubScreenQuickPanelComponent;
import com.android.systemui.subscreen.dagger.SubScreenQuickPanelModule;
import com.android.systemui.telephony.TelephonyCallback_Factory;
import com.android.systemui.telephony.TelephonyListenerManager;
import com.android.systemui.telephony.data.repository.TelephonyRepository;
import com.android.systemui.telephony.data.repository.TelephonyRepositoryImpl;
import com.android.systemui.telephony.domain.interactor.TelephonyInteractor;
import com.android.systemui.telephony.ui.activity.SwitchToManagedProfileForCallActivity;
import com.android.systemui.theme.ThemeOverlayApplier;
import com.android.systemui.theme.ThemeOverlayController;
import com.android.systemui.toast.ToastFactory;
import com.android.systemui.toast.ToastLogger;
import com.android.systemui.toast.ToastUI;
import com.android.systemui.touch.TouchInsetManager;
import com.android.systemui.tracing.ProtoTracer;
import com.android.systemui.tuner.TunablePadding;
import com.android.systemui.tuner.TunerActivity;
import com.android.systemui.tuner.TunerActivity_Factory;
import com.android.systemui.tuner.TunerService;
import com.android.systemui.tuner.TunerServiceImpl;
import com.android.systemui.tv.TvGlobalRootComponent;
import com.android.systemui.tv.TvSysUIComponent;
import com.android.systemui.tv.TvWMComponent;
import com.android.systemui.uithreadmonitor.BinderCallMonitor;
import com.android.systemui.uithreadmonitor.BinderCallMonitorConstants;
import com.android.systemui.uithreadmonitor.BinderCallMonitorImpl;
import com.android.systemui.uithreadmonitor.BinderCallMonitorImpl_Factory;
import com.android.systemui.uithreadmonitor.LooperSlowLogController;
import com.android.systemui.uithreadmonitor.LooperSlowLogControllerImpl;
import com.android.systemui.unfold.FoldAodAnimationController;
import com.android.systemui.unfold.FoldStateLogger;
import com.android.systemui.unfold.FoldStateLoggingProvider;
import com.android.systemui.unfold.SysUIUnfoldComponent;
import com.android.systemui.unfold.SysUIUnfoldModule;
import com.android.systemui.unfold.SysUIUnfoldModule_ProvideSysUIUnfoldComponentFactory;
import com.android.systemui.unfold.UnfoldHapticsPlayer;
import com.android.systemui.unfold.UnfoldLatencyTracker;
import com.android.systemui.unfold.UnfoldLightRevealOverlayAnimation;
import com.android.systemui.unfold.UnfoldSharedInternalModule;
import com.android.systemui.unfold.UnfoldSharedInternalModule_HingeAngleProviderFactory;
import com.android.systemui.unfold.UnfoldSharedInternalModule_ProvideProgressForwarderFactory;
import com.android.systemui.unfold.UnfoldSharedInternalModule_UnfoldTransitionProgressProviderFactory;
import com.android.systemui.unfold.UnfoldSharedModule;
import com.android.systemui.unfold.UnfoldTransitionModule;
import com.android.systemui.unfold.UnfoldTransitionModule$provideNaturalRotationProgressProvider$1;
import com.android.systemui.unfold.UnfoldTransitionModule$provideStatusBarScopedTransitionProvider$1;
import com.android.systemui.unfold.UnfoldTransitionModule$provideUnfoldOnlyProvider$1;
import com.android.systemui.unfold.UnfoldTransitionModule$providesFoldStateLogger$1;
import com.android.systemui.unfold.UnfoldTransitionModule_ProvideShellProgressProviderFactory;
import com.android.systemui.unfold.UnfoldTransitionModule_ProvidesFoldStateLoggingProviderFactory;
import com.android.systemui.unfold.UnfoldTransitionProgressProvider;
import com.android.systemui.unfold.UnfoldTransitionWallpaperController;
import com.android.systemui.unfold.config.ResourceUnfoldTransitionConfig;
import com.android.systemui.unfold.config.UnfoldTransitionConfig;
import com.android.systemui.unfold.progress.FixedTimingTransitionProgressProvider;
import com.android.systemui.unfold.progress.PhysicsBasedUnfoldTransitionProgressProvider;
import com.android.systemui.unfold.progress.UnfoldTransitionProgressForwarder;
import com.android.systemui.unfold.system.ActivityManagerActivityTypeProvider;
import com.android.systemui.unfold.system.DeviceStateManagerFoldProvider;
import com.android.systemui.unfold.updates.DeviceFoldStateProvider;
import com.android.systemui.unfold.updates.FoldProvider;
import com.android.systemui.unfold.updates.FoldStateProvider;
import com.android.systemui.unfold.updates.RotationChangeProvider;
import com.android.systemui.unfold.updates.hinge.HingeAngleProvider;
import com.android.systemui.unfold.updates.hinge.HingeSensorAngleProvider;
import com.android.systemui.unfold.updates.screen.ScreenStatusProvider;
import com.android.systemui.unfold.util.ATraceLoggerTransitionProgressListener;
import com.android.systemui.unfold.util.CurrentActivityTypeProvider;
import com.android.systemui.unfold.util.NaturalRotationUnfoldProgressProvider;
import com.android.systemui.unfold.util.ScaleAwareTransitionProgressProvider;
import com.android.systemui.unfold.util.ScopedUnfoldTransitionProgressProvider;
import com.android.systemui.unfold.util.UnfoldKeyguardVisibilityManager;
import com.android.systemui.unfold.util.UnfoldKeyguardVisibilityManagerImpl;
import com.android.systemui.unfold.util.UnfoldKeyguardVisibilityProvider;
import com.android.systemui.usb.StorageNotification;
import com.android.systemui.usb.UsbAccessoryUriActivity;
import com.android.systemui.usb.UsbAccessoryUriActivity_Factory;
import com.android.systemui.usb.UsbAudioWarningDialogMessage;
import com.android.systemui.usb.UsbConfirmActivity;
import com.android.systemui.usb.UsbDebuggingActivity;
import com.android.systemui.usb.UsbDebuggingSecondaryUserActivity;
import com.android.systemui.usb.UsbPermissionActivity;
import com.android.systemui.user.CreateUserActivity;
import com.android.systemui.user.UserCreator;
import com.android.systemui.user.data.repository.UserRepository;
import com.android.systemui.user.data.repository.UserRepositoryImpl;
import com.android.systemui.user.domain.interactor.GuestUserInteractor;
import com.android.systemui.user.domain.interactor.HeadlessSystemUserMode;
import com.android.systemui.user.domain.interactor.HeadlessSystemUserModeImpl;
import com.android.systemui.user.domain.interactor.RefreshUsersScheduler;
import com.android.systemui.user.domain.interactor.UserInteractor;
import com.android.systemui.user.ui.dialog.UserSwitcherDialogCoordinator;
import com.android.systemui.user.ui.viewmodel.StatusBarUserChipViewModel;
import com.android.systemui.user.ui.viewmodel.UserSwitcherViewModel;
import com.android.systemui.util.ActivityTaskManagerProxy;
import com.android.systemui.util.AsyncActivityLauncher;
import com.android.systemui.util.CarLifeManager;
import com.android.systemui.util.CarrierConfigTracker;
import com.android.systemui.util.CoverUtil;
import com.android.systemui.util.DesktopManager;
import com.android.systemui.util.DeviceConfigProxy;
import com.android.systemui.util.DeviceTypeWrapper;
import com.android.systemui.util.InitializationChecker;
import com.android.systemui.util.MemoryMonitor;
import com.android.systemui.util.NotificationChannels;
import com.android.systemui.util.QsResetSettingsManager;
import com.android.systemui.util.QsStatusEventLog;
import com.android.systemui.util.RingerModeTracker;
import com.android.systemui.util.RingerModeTrackerImpl;
import com.android.systemui.util.SettingsHelper;
import com.android.systemui.util.WallpaperController;
import com.android.systemui.util.concurrency.DelayableExecutor;
import com.android.systemui.util.concurrency.Execution;
import com.android.systemui.util.concurrency.ExecutionImpl;
import com.android.systemui.util.concurrency.ExecutorImpl;
import com.android.systemui.util.concurrency.GlobalConcurrencyModule_ProvideHandlerFactory;
import com.android.systemui.util.concurrency.MessageRouter;
import com.android.systemui.util.concurrency.MessageRouterImpl;
import com.android.systemui.util.concurrency.RepeatableExecutor;
import com.android.systemui.util.concurrency.RepeatableExecutorImpl;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvideBgLooperFactory;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvideBroadcastRunningLooperFactory;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvideLongRunningLooperFactory;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvideTimeTickHandlerFactory;
import com.android.systemui.util.concurrency.ThreadFactoryImpl;
import com.android.systemui.util.concurrency.ThreadFactoryImpl_Factory;
import com.android.systemui.util.display.DisplayHelper;
import com.android.systemui.util.io.Files;
import com.android.systemui.util.kotlin.CoroutinesModule;
import com.android.systemui.util.kotlin.CoroutinesModule_MainDispatcherFactory;
import com.android.systemui.util.leak.GarbageMonitor;
import com.android.systemui.util.leak.LeakDetector;
import com.android.systemui.util.leak.LeakModule;
import com.android.systemui.util.leak.LeakReporter;
import com.android.systemui.util.leak.TrackedCollections;
import com.android.systemui.util.sensors.AsyncSensorManager;
import com.android.systemui.util.sensors.PostureDependentProximitySensor;
import com.android.systemui.util.sensors.ProximityCheck;
import com.android.systemui.util.sensors.ProximitySensor;
import com.android.systemui.util.sensors.ProximitySensorImpl_Factory;
import com.android.systemui.util.sensors.SensorModule_ProvidePostureToProximitySensorMappingFactory;
import com.android.systemui.util.sensors.SensorModule_ProvidePostureToSecondaryProximitySensorMappingFactory;
import com.android.systemui.util.sensors.SensorModule_ProvidePrimaryProximitySensorFactory;
import com.android.systemui.util.sensors.SensorModule_ProvideProximitySensorFactory;
import com.android.systemui.util.sensors.SensorModule_ProvideSecondaryProximitySensorFactory;
import com.android.systemui.util.sensors.ThresholdSensor;
import com.android.systemui.util.sensors.ThresholdSensorImpl;
import com.android.systemui.util.settings.GlobalSettings;
import com.android.systemui.util.settings.GlobalSettingsImpl;
import com.android.systemui.util.settings.SecureSettings;
import com.android.systemui.util.settings.SecureSettingsImpl;
import com.android.systemui.util.settings.SystemSettings;
import com.android.systemui.util.settings.SystemSettingsImpl;
import com.android.systemui.util.time.DateFormatUtil;
import com.android.systemui.util.time.SystemClock;
import com.android.systemui.util.time.SystemClockImpl;
import com.android.systemui.util.view.ViewUtil;
import com.android.systemui.util.wakelock.DelayedWakeLock;
import com.android.systemui.util.wakelock.WakeLock;
import com.android.systemui.util.wakelock.WakeLockLogger;
import com.android.systemui.util.wrapper.BuildInfo;
import com.android.systemui.util.wrapper.DisplayUtilsWrapper;
import com.android.systemui.util.wrapper.RotationPolicyWrapper;
import com.android.systemui.util.wrapper.RotationPolicyWrapperImpl;
import com.android.systemui.utils.GlobalWindowManager;
import com.android.systemui.vibrate.VibrationUtil;
import com.android.systemui.volume.CsdWarningDialog;
import com.android.systemui.volume.SamsungVolumeDialogImpl;
import com.android.systemui.volume.VolumeComponent;
import com.android.systemui.volume.VolumeDependency;
import com.android.systemui.volume.VolumeDialogComponent;
import com.android.systemui.volume.VolumeDialogControllerImpl;
import com.android.systemui.volume.VolumePanelDialogReceiver;
import com.android.systemui.volume.VolumePanelFactory;
import com.android.systemui.volume.VolumeUI;
import com.android.systemui.volume.dagger.VolumeModule_ProvideVolumeDialogFactory;
import com.android.systemui.volume.util.BluetoothAdapterWrapper;
import com.android.systemui.volume.util.BroadcastReceiverManager;
import com.android.systemui.volume.util.DeviceStateManagerWrapper;
import com.android.systemui.volume.util.DisplayManagerWrapper;
import com.android.systemui.volume.util.SALoggingWrapper;
import com.android.systemui.volume.util.SoundAssistantManagerWrapper;
import com.android.systemui.wallet.controller.QuickAccessWalletController;
import com.android.systemui.wallet.controller.WalletContextualLocationsService;
import com.android.systemui.wallet.controller.WalletContextualSuggestionsController;
import com.android.systemui.wallet.ui.WalletActivity;
import com.android.systemui.wallpaper.CoverWallpaper;
import com.android.systemui.wallpaper.CoverWallpaperController;
import com.android.systemui.wallpaper.KeyguardWallpaper;
import com.android.systemui.wallpaper.KeyguardWallpaperController;
import com.android.systemui.wallpaper.KeyguardWallpaperController_Factory;
import com.android.systemui.wallpaper.KeyguardWallpaperEventHandler;
import com.android.systemui.wallpaper.WallpaperChangeNotifier;
import com.android.systemui.wallpaper.WallpaperChangeObserver;
import com.android.systemui.wallpaper.WallpaperEventNotifier;
import com.android.systemui.wallpaper.colors.SystemWallpaperColors;
import com.android.systemui.wallpaper.log.WallpaperLogger;
import com.android.systemui.wallpaper.log.WallpaperLoggerImpl;
import com.android.systemui.wallpapers.ImageWallpaper;
import com.android.systemui.wmshell.WMShell;
import com.android.wm.shell.ProtoLogController;
import com.android.wm.shell.RootDisplayAreaOrganizer;
import com.android.wm.shell.RootTaskDisplayAreaOrganizer;
import com.android.wm.shell.ShellTaskOrganizer;
import com.android.wm.shell.WindowManagerShellWrapper;
import com.android.wm.shell.activityembedding.ActivityEmbeddingController;
import com.android.wm.shell.animation.FlingAnimationUtils;
import com.android.wm.shell.back.BackAnimationBackground;
import com.android.wm.shell.back.BackAnimationController;
import com.android.wm.shell.bubbles.Bubbles;
import com.android.wm.shell.common.DisplayController;
import com.android.wm.shell.common.DisplayImeController;
import com.android.wm.shell.common.DisplayInsetsController;
import com.android.wm.shell.common.DockStateReader;
import com.android.wm.shell.common.HandlerExecutor;
import com.android.wm.shell.common.ShellExecutor;
import com.android.wm.shell.common.SyncTransactionQueue;
import com.android.wm.shell.common.SystemWindows;
import com.android.wm.shell.common.TaskStackListenerImpl;
import com.android.wm.shell.common.TransactionPool;
import com.android.wm.shell.compatui.CompatUIConfiguration;
import com.android.wm.shell.compatui.CompatUIController;
import com.android.wm.shell.compatui.CompatUIShellCommandHandler;
import com.android.wm.shell.dagger.TvPipModule$$ExternalSyntheticLambda0;
import com.android.wm.shell.dagger.TvPipModule_ProvidePipTaskOrganizerFactory;
import com.android.wm.shell.dagger.TvPipModule_ProvideTvPipTransitionFactory;
import com.android.wm.shell.dagger.TvWMShellModule_ProvideSplitScreenControllerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideBackAnimationControllerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideBackAnimationFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideBubblesFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideCompatUIControllerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideDesktopModeControllerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideDesktopModeFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideDesktopTaskRepositoryFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideDragAndDropControllerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideEnterSplitGestureHandlerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideFreeformComponentsFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideFullscreenTaskListenerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideHideDisplayCutoutControllerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideOneHandedFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideRecentTasksControllerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideRecentTasksFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideShellTaskOrganizerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideSplitScreenFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideStartingWindowControllerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideStartingWindowTypeAlgorithmFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideTransitionsFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideUnfoldControllerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideUnfoldTransitionHandlerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvidesDesktopTasksControllerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvidesOneHandedControllerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvidesSplitScreenControllerFactory;
import com.android.wm.shell.dagger.WMShellConcurrencyModule_ProvideMainHandlerFactory;
import com.android.wm.shell.dagger.WMShellConcurrencyModule_ProvideSharedBackgroundHandlerFactory;
import com.android.wm.shell.dagger.WMShellConcurrencyModule_ProvideShellAnimationExecutorFactory;
import com.android.wm.shell.dagger.WMShellConcurrencyModule_ProvideShellMainExecutorFactory;
import com.android.wm.shell.dagger.WMShellConcurrencyModule_ProvideShellMainHandlerFactory;
import com.android.wm.shell.dagger.WMShellConcurrencyModule_ProvideSplashScreenExecutorFactory;
import com.android.wm.shell.desktopmode.DesktopMode;
import com.android.wm.shell.displayareahelper.DisplayAreaHelperController;
import com.android.wm.shell.keyguard.KeyguardTransitionHandler;
import com.android.wm.shell.keyguard.KeyguardTransitions;
import com.android.wm.shell.onehanded.OneHanded;
import com.android.wm.shell.pip.Pip;
import com.android.wm.shell.pip.PipAnimationController;
import com.android.wm.shell.pip.PipAppOpsListener;
import com.android.wm.shell.pip.PipDisplayLayoutState;
import com.android.wm.shell.pip.PipMediaController;
import com.android.wm.shell.pip.PipParamsChangedForwarder;
import com.android.wm.shell.pip.PipSnapAlgorithm;
import com.android.wm.shell.pip.PipSurfaceTransactionHelper;
import com.android.wm.shell.pip.PipTaskOrganizer;
import com.android.wm.shell.pip.PipTransitionController;
import com.android.wm.shell.pip.PipTransitionState;
import com.android.wm.shell.pip.PipUiEventLogger;
import com.android.wm.shell.pip.phone.PipSizeSpecHandler;
import com.android.wm.shell.pip.tv.TvPipBoundsAlgorithm;
import com.android.wm.shell.pip.tv.TvPipBoundsController;
import com.android.wm.shell.pip.tv.TvPipBoundsState;
import com.android.wm.shell.pip.tv.TvPipController;
import com.android.wm.shell.pip.tv.TvPipMenuController;
import com.android.wm.shell.pip.tv.TvPipNotificationController;
import com.android.wm.shell.recents.RecentTasks;
import com.android.wm.shell.splitscreen.EnterSplitGestureHandler;
import com.android.wm.shell.splitscreen.SplitScreen;
import com.android.wm.shell.splitscreen.SplitScreenController;
import com.android.wm.shell.startingsurface.StartingWindowController;
import com.android.wm.shell.startingsurface.StartingWindowTypeAlgorithm;
import com.android.wm.shell.startingsurface.tv.TvStartingWindowTypeAlgorithm;
import com.android.wm.shell.sysui.ShellCommandHandler;
import com.android.wm.shell.sysui.ShellController;
import com.android.wm.shell.sysui.ShellInit;
import com.android.wm.shell.sysui.ShellInterface;
import com.android.wm.shell.taskview.TaskViewFactoryController;
import com.android.wm.shell.taskview.TaskViewTransitions;
import com.android.wm.shell.transition.ShellTransitions;
import com.android.wm.shell.transition.Transitions;
import com.android.wm.shell.unfold.ShellUnfoldProgressProvider;
import com.samsung.android.knox.custom.CustomDeviceManager;
import com.samsung.android.knox.custom.IKnoxCustomManager;
import com.samsung.android.knox.license.KnoxEnterpriseLicenseManager;
import com.samsung.android.knox.net.vpn.VpnErrorValues;
import com.samsung.android.wifi.SemWifiManager;
import com.samsung.systemui.splugins.SPluginDependencyProvider;
import com.samsung.systemui.splugins.SPluginInitializerImpl;
import com.samsung.systemui.splugins.SPluginManager;
import com.samsung.systemui.splugins.SPluginManagerImpl;
import com.samsung.systemui.splugins.navigationbar.LayoutProviderContainer;
import com.sec.ims.extensions.WiFiManagerExt;
import com.sec.ims.presence.ServiceTuple;
import com.sec.ims.volte2.data.QuantumSecurityInfo;
import com.sec.ims.volte2.data.VolteConstants;
import dagger.Lazy;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import dagger.internal.SingleCheck;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.function.Supplier;
import javax.inject.Provider;
import kotlin.jvm.functions.Function0;
import kotlinx.coroutines.CoroutineDispatcher;
import kotlinx.coroutines.CoroutineScope;
import kotlinx.coroutines.CoroutineScopeKt;
import kotlinx.coroutines.Dispatchers;
import noticolorpicker.NotificationColorPicker;

/* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
/* loaded from: classes2.dex */
public final class DaggerTvGlobalRootComponent implements TvGlobalRootComponent {
    public static final Provider ABSENT_JDK_OPTIONAL_PROVIDER = InstanceFactory.create(Optional.empty());
    public Provider activityManagerActivityTypeProvider;
    public final AndroidInternalsModule androidInternalsModule;
    public Provider buildInfoProvider;
    public final Context context;
    public Provider coverUtilProvider;
    public Provider coverUtilWrapperProvider;
    public Provider deviceStateManagerFoldProvider;
    public Provider dumpManagerProvider;
    public Provider executionImplProvider;
    public Provider externalClockProvider;
    public Provider factoryProvider;
    public Provider fixedTimingTransitionProgressProvider;
    public final FrameworkServicesModule frameworkServicesModule;
    public final GlobalModule globalModule;
    public Provider hingeSensorAngleProvider;
    public final Boolean instrumentationTest;
    public Provider lifecycleScreenStatusProvider;
    public Provider lowLightTransitionCoordinatorProvider;
    public Provider multiShadeInputProxyProvider;
    public Provider noLogcatEchoTrackerProvider;
    public Provider physicsBasedUnfoldTransitionProgressProvider;
    public Provider pluginDependencyProvider;
    public Provider pluginEnablerImplProvider;
    public Provider provideAccessibilityManagerProvider;
    public Provider provideActivityManagerProvider;
    public Provider provideActivityTaskManagerProvider;
    public Provider provideAlarmManagerProvider;
    public Provider provideAppOpsManagerProvider;
    public Provider provideApplicationContextProvider;
    public Provider provideAsyncLayoutInflaterProvider;
    public Provider provideAudioManagerProvider;
    public Provider provideBluetoothAdapterProvider;
    public Provider provideBluetoothManagerProvider;
    public Provider provideCameraManagerProvider;
    public Provider provideCaptioningManagerProvider;
    public Provider provideCarrierConfigManagerProvider;
    public Provider provideColorDisplayManagerProvider;
    public Provider provideConnectivityManagagerProvider;
    public Provider provideContentResolverProvider;
    public Provider provideCrossWindowBlurListenersProvider;
    public Provider provideDevicePolicyManagerProvider;
    public Provider provideDeviceStateManagerProvider;
    public Provider provideDisplayManagerProvider;
    public Provider provideDisplayMetricsProvider;
    public Provider provideExecutionProvider;
    public Provider provideFaceManagerProvider;
    public Provider provideFoldStateProvider;
    public Provider provideIActivityManagerProvider;
    public Provider provideIActivityTaskManagerProvider;
    public Provider provideIAudioServiceProvider;
    public Provider provideIBatteryStatsProvider;
    public Provider provideIDreamManagerProvider;
    public Provider provideINotificationManagerProvider;
    public Provider provideIPackageManagerProvider;
    public Provider provideIStatusBarServiceProvider;
    public Provider provideIWallPaperManagerProvider;
    public Provider provideIWindowManagerProvider;
    public Provider provideInputManagerProvider;
    public Provider provideInputMethodManagerProvider;
    public Provider provideInteractionJankMonitorProvider;
    public Provider provideIsTestHarnessProvider;
    public Provider provideJobSchedulerProvider;
    public Provider provideKeyguardManagerProvider;
    public Provider provideLatencyTrackerProvider;
    public Provider provideLauncherAppsProvider;
    public Provider provideLockPatternUtilsProvider;
    public Provider provideMainDelayableExecutorProvider;
    public Provider provideMainExecutorProvider;
    public Provider provideMainHandlerProvider;
    public Provider provideMainLooperProvider;
    public Provider provideMetricsLoggerProvider;
    public Provider provideNaturalRotationProgressProvider;
    public Provider provideNetworkScoreManagerProvider;
    public Provider provideNotificationManagerProvider;
    public Provider provideOptionalTelecomManagerProvider;
    public Provider provideOptionalVibratorProvider;
    public Provider provideOverlayManagerProvider;
    public Provider providePackageManagerProvider;
    public Provider providePackageManagerWrapperProvider;
    public Provider providePermissionManagerProvider;
    public Provider providePluginInstanceManagerFactoryProvider;
    public Provider providePowerExemptionManagerProvider;
    public Provider providePowerManagerProvider;
    public Provider provideProgressForwarderProvider;
    public Provider provideRoleManagerProvider;
    public Provider provideSafetyCenterManagerProvider;
    public Provider provideSatelliteManagerProvider;
    public Provider provideSensorPrivacyManagerProvider;
    public Provider provideShellProgressProvider;
    public Provider provideShortcutManagerProvider;
    public Provider provideSmartspaceManagerProvider;
    public Provider provideStatsManagerProvider;
    public Provider provideStatusBarScopedTransitionProvider;
    public Provider provideStorageManagerProvider;
    public Provider provideSubscriptionManagerProvider;
    public Provider provideTelecomManagerProvider;
    public Provider provideTelephonyManagerProvider;
    public Provider provideTrustManagerProvider;
    public Provider provideUiBackgroundExecutorProvider;
    public Provider provideUiEventLoggerProvider;
    public Provider provideUiModeManagerProvider;
    public Provider provideUnfoldOnlyProvider;
    public Provider provideUserManagerProvider;
    public Provider provideVibratorProvider;
    public Provider provideViewConfigurationProvider;
    public Provider provideWifiManagerProvider;
    public Provider provideWindowManagerProvider;
    public Provider providerLayoutInflaterProvider;
    public Provider providesBiometricManagerProvider;
    public Provider providesChoreographerProvider;
    public Provider providesFingerprintManagerProvider;
    public Provider providesFoldStateListenerProvider;
    public Provider providesFoldStateLoggerProvider;
    public Provider providesFoldStateLoggingProvider;
    public Provider providesPluginExecutorProvider;
    public Provider providesPluginInstanceFactoryProvider;
    public Provider providesPluginManagerProvider;
    public Provider providesSensorManagerProvider;
    public Provider resourceUnfoldTransitionConfigProvider;
    public Provider screenLifecycleProvider;
    public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
    public Provider uncaughtExceptionPreHandlerManagerProvider;
    public Provider unfoldKeyguardVisibilityManagerImplProvider;
    public Provider unfoldKeyguardVisibilityManagerProvider;
    public Provider unfoldKeyguardVisibilityProvider;
    public final UnfoldSharedInternalModule unfoldSharedInternalModule;
    public final UnfoldSharedModule unfoldSharedModule;
    public final UnfoldTransitionModule unfoldTransitionModule;
    public Provider unfoldTransitionProgressForwarderProvider;
    public Provider unfoldTransitionProgressProvider;
    public Provider vibrationUtilProvider;

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class Builder implements TvGlobalRootComponent.Builder {
        public Context context;
        public Boolean instrumentationTest;

        private Builder() {
        }

        public /* synthetic */ Builder(int i) {
            this();
        }

        @Override // com.android.systemui.dagger.GlobalRootComponent.Builder
        public final GlobalRootComponent.Builder context(Context context) {
            context.getClass();
            this.context = context;
            return this;
        }

        @Override // com.android.systemui.dagger.GlobalRootComponent.Builder
        public final TvGlobalRootComponent build() {
            Preconditions.checkBuilderRequirement(Context.class, this.context);
            Preconditions.checkBuilderRequirement(Boolean.class, this.instrumentationTest);
            return new DaggerTvGlobalRootComponent(new GlobalModule(), new AndroidInternalsModule(), new FrameworkServicesModule(), new UnfoldTransitionModule(), new UnfoldSharedModule(), new UnfoldSharedInternalModule(), this.context, this.instrumentationTest, 0);
        }

        @Override // com.android.systemui.dagger.GlobalRootComponent.Builder
        public final Builder instrumentationTest(boolean z) {
            Boolean valueOf = Boolean.valueOf(z);
            valueOf.getClass();
            this.instrumentationTest = valueOf;
            return this;
        }

        @Override // com.android.systemui.dagger.GlobalRootComponent.Builder
        public final Builder context(Context context) {
            context.getClass();
            this.context = context;
            return this;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class CentralSurfacesComponentFactory implements CentralSurfacesComponent.Factory {
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ CentralSurfacesComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.systemui.statusbar.phone.dagger.CentralSurfacesComponent.Factory
        public final CentralSurfacesComponent create() {
            return new CentralSurfacesComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 0);
        }

        private CentralSurfacesComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class CentralSurfacesComponentImpl implements CentralSurfacesComponent {
        public Provider capturedBlurContainerControllerProvider;
        public Provider centralSurfacesCommandQueueCallbacksProvider;
        public final CentralSurfacesComponentImpl centralSurfacesComponentImpl;
        public Provider dataUsageLabelManagerProvider;
        public Provider getBehindScrimViewProvider;
        public Provider getCapturedBlurContainerProvider;
        public Provider getFrontScrimViewProvider;
        public Provider getNotificationsQuickSettingsContainerProvider;
        public Provider getSecPanelBackgroundProvider;
        public Provider indicatorTouchHandlerProvider;
        public Provider keyguardSecBottomAreaViewControllerProvider;
        public Provider notificationLaunchAnimatorControllerProvider;
        public Provider notificationPanelViewControllerProvider;
        public Provider notificationShadeWindowViewControllerProvider;
        public Provider notificationShelfInteractorProvider;
        public Provider notificationShelfViewBinderWrapperControllerImplProvider;
        public Provider notificationShelfViewModelProvider;
        public Provider notificationStackScrollLayoutControllerProvider;
        public Provider provideListContainerProvider;
        public Provider providesNotificationShelfProvider;
        public Provider providesStatusBarWindowViewProvider;
        public Provider pulsingGestureListenerProvider;
        public Provider qSScrimViewSwitchProvider;
        public Provider quickSettingsControllerProvider;
        public Provider sWBlueLightFilterTileProvider;
        public Provider secPanelBackgroundControllerProvider;
        public Provider statusBarHeadsUpChangeListenerProvider;
        public Provider statusBarNotificationActivityStarterProvider;
        public Provider statusBarNotificationPresenterProvider;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final CentralSurfacesComponentImpl centralSurfacesComponentImpl;
            public final int id;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, CentralSurfacesComponentImpl centralSurfacesComponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.centralSurfacesComponentImpl = centralSurfacesComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                int i = 0;
                switch (this.id) {
                    case 0:
                        FeatureFlags featureFlags = (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get();
                        Provider unused = this.centralSurfacesComponentImpl.notificationShelfViewBinderWrapperControllerImplProvider;
                        return (T) StatusBarViewModule_ProvidesStatusBarWindowViewFactory.providesStatusBarWindowView(featureFlags, new NotificationShelfComponentBuilder(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i), (NotificationShelf) this.centralSurfacesComponentImpl.providesNotificationShelfProvider.get());
                    case 1:
                        return (T) new NotificationShelfViewBinderWrapperControllerImpl();
                    case 2:
                        return (T) StatusBarViewModule_ProvidesNotificationShelfFactory.providesNotificationShelf((LayoutInflater) this.tvGlobalRootComponent.providerLayoutInflaterProvider.get(), (NotificationStackScrollLayout) this.tvSysUIComponentImpl.providesNotificationStackScrollLayoutProvider.get(), (NotificationShelfManager) this.tvSysUIComponentImpl.notificationShelfManagerProvider.get());
                    case 3:
                        return (T) NotificationStackScrollLayoutController_Factory.newInstance((NotificationStackScrollLayout) this.tvSysUIComponentImpl.providesNotificationStackScrollLayoutProvider.get(), ((Boolean) this.tvSysUIComponentImpl.provideAllowNotificationLongPressProvider.get()).booleanValue(), (NotificationGutsManager) this.tvSysUIComponentImpl.notificationGutsManagerProvider.get(), (NotificationVisibilityProvider) this.tvSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), (HeadsUpManagerPhone) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (NotificationRoundnessManager) this.tvSysUIComponentImpl.notificationRoundnessManagerProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get(), (DynamicPrivacyController) this.tvSysUIComponentImpl.dynamicPrivacyControllerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardMediaController) this.tvSysUIComponentImpl.keyguardMediaControllerProvider.get(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (ZenModeController) this.tvSysUIComponentImpl.zenModeControllerImplProvider.get(), (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), this.centralSurfacesComponentImpl.optionalOfNotificationListViewModel(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (FalsingCollector) this.tvSysUIComponentImpl.falsingCollectorImplProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), this.tvGlobalRootComponent.mainResources(), this.centralSurfacesComponentImpl.notificationSwipeHelperBuilder(), (CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get(), (ScrimController) this.tvSysUIComponentImpl.scrimControllerProvider.get(), (GroupExpansionManager) this.tvSysUIComponentImpl.groupExpansionManagerImplProvider.get(), this.tvSysUIComponentImpl.silentHeaderSectionHeaderController(), (NotifPipeline) this.tvSysUIComponentImpl.notifPipelineProvider.get(), this.tvSysUIComponentImpl.notifPipelineFlags(), (NotifCollection) this.tvSysUIComponentImpl.notifCollectionProvider.get(), (LockscreenShadeTransitionController) this.tvSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (NotificationRemoteInputManager) this.tvSysUIComponentImpl.provideNotificationRemoteInputManagerProvider.get(), (VisibilityLocationProviderDelegator) this.tvSysUIComponentImpl.visibilityLocationProviderDelegatorProvider.get(), (SeenNotificationsProvider) this.tvSysUIComponentImpl.seenNotificationsProviderImplProvider.get(), (ShadeController) this.tvSysUIComponentImpl.shadeControllerImplProvider.get(), (InteractionJankMonitor) this.tvGlobalRootComponent.provideInteractionJankMonitorProvider.get(), this.centralSurfacesComponentImpl.stackStateLogger(), this.centralSurfacesComponentImpl.notificationStackScrollLogger(), (NotificationStackSizeCalculator) this.tvSysUIComponentImpl.notificationStackSizeCalculatorProvider.get(), (NotificationIconAreaController) this.tvSysUIComponentImpl.notificationIconAreaControllerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (NotificationTargetsHelper) this.tvSysUIComponentImpl.notificationTargetsHelperProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (NotificationDismissibilityProvider) this.tvSysUIComponentImpl.notificationDismissibilityProviderImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (NotificationShelfManager) this.tvSysUIComponentImpl.notificationShelfManagerProvider.get(), (LockscreenNotificationManager) this.tvSysUIComponentImpl.lockscreenNotificationManagerProvider.get());
                    case 4:
                        return (T) new NotificationShelfViewModel((NotificationShelfInteractor) this.centralSurfacesComponentImpl.notificationShelfInteractorProvider.get(), this.centralSurfacesComponentImpl.activatableNotificationViewModel());
                    case 5:
                        return (T) new NotificationShelfInteractor((KeyguardRepository) this.tvSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (DeviceEntryFaceAuthRepository) this.tvSysUIComponentImpl.deviceEntryFaceAuthRepositoryImplProvider.get(), (CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (LockscreenShadeTransitionController) this.tvSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get());
                    case 6:
                        return (T) this.centralSurfacesComponentImpl.injectNotificationShadeWindowViewController(NotificationShadeWindowViewController_Factory.newInstance((PluginLockStarManager) this.tvSysUIComponentImpl.pluginLockStarManagerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (LockscreenShadeTransitionController) this.tvSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (FalsingCollector) this.tvSysUIComponentImpl.falsingCollectorImplProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (DockManager) this.tvSysUIComponentImpl.dockManagerImplProvider.get(), (NotificationShadeDepthController) this.tvSysUIComponentImpl.notificationShadeDepthControllerProvider.get(), (NotificationShadeWindowView) this.tvSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get(), (NotificationPanelViewController) this.centralSurfacesComponentImpl.notificationPanelViewControllerProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (NotificationStackScrollLayoutController) this.centralSurfacesComponentImpl.notificationStackScrollLayoutControllerProvider.get(), (StatusBarKeyguardViewManager) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (StatusBarWindowStateController) this.tvSysUIComponentImpl.statusBarWindowStateControllerProvider.get(), (SecLockIconViewController) this.tvSysUIComponentImpl.secLockIconViewControllerProvider.get(), (CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get(), (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (Optional) this.tvGlobalRootComponent.unfoldTransitionProgressProvider.get(), (KeyguardUnlockAnimationController) this.tvSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider.get(), (NotificationInsetsController) this.tvSysUIComponentImpl.notificationInsetsImplProvider.get(), (AmbientState) this.tvSysUIComponentImpl.ambientStateProvider.get(), (PulsingGestureListener) this.centralSurfacesComponentImpl.pulsingGestureListenerProvider.get(), this.tvSysUIComponentImpl.keyguardBouncerViewModel(), new KeyguardBouncerComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (PrimaryBouncerToGoneTransitionViewModel) this.tvSysUIComponentImpl.primaryBouncerToGoneTransitionViewModelProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), this.tvSysUIComponentImpl.multiShadeInteractorProvider, (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), this.tvSysUIComponentImpl.multiShadeMotionEventInteractorProvider));
                    case 7:
                        return (T) this.centralSurfacesComponentImpl.injectNotificationPanelViewController(NotificationPanelViewController_Factory.newInstance((DcmMascotViewContainer) this.tvSysUIComponentImpl.dcmMascotViewContainerProvider.get(), (PluginLockMediator) this.tvSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (PluginLockData) this.tvSysUIComponentImpl.pluginLockDataImplProvider.get(), (KeyguardClockPositionAlgorithm) this.tvSysUIComponentImpl.provideKeyguardClockPositionAlgorithmProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginAODManagerProvider), (NotificationPanelView) this.tvSysUIComponentImpl.providesNotificationPanelViewProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (LayoutInflater) this.tvGlobalRootComponent.providerLayoutInflaterProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (NotificationWakeUpCoordinator) this.tvSysUIComponentImpl.notificationWakeUpCoordinatorProvider.get(), (PulseExpansionHandler) this.tvSysUIComponentImpl.pulseExpansionHandlerProvider.get(), (DynamicPrivacyController) this.tvSysUIComponentImpl.dynamicPrivacyControllerProvider.get(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (FalsingCollector) this.tvSysUIComponentImpl.falsingCollectorImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (StatusBarWindowStateController) this.tvSysUIComponentImpl.statusBarWindowStateControllerProvider.get(), (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (DozeLog) this.tvSysUIComponentImpl.dozeLogProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (VibratorHelper) this.tvSysUIComponentImpl.vibratorHelperProvider.get(), (LatencyTracker) this.tvGlobalRootComponent.provideLatencyTrackerProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), (AccessibilityManager) this.tvGlobalRootComponent.provideAccessibilityManagerProvider.get(), this.tvGlobalRootComponent.displayIdInteger(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), this.tvSysUIComponentImpl.shadeLogger(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), this.tvSysUIComponentImpl.builderProvider4, (StatusBarTouchableRegionManager) this.tvSysUIComponentImpl.statusBarTouchableRegionManagerProvider.get(), (ConversationNotificationManager) this.tvSysUIComponentImpl.conversationNotificationManagerProvider.get(), (StatusBarKeyguardViewManager) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (NotificationGutsManager) this.tvSysUIComponentImpl.notificationGutsManagerProvider.get(), this.centralSurfacesComponentImpl.notificationsQSContainerController(), (NotificationStackScrollLayoutController) this.centralSurfacesComponentImpl.notificationStackScrollLayoutControllerProvider.get(), new KeyguardStatusViewComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i), new KeyguardQsUserSwitchComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i), new KeyguardUserSwitcherComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i), new KeyguardStatusBarViewComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i), (LockscreenShadeTransitionController) this.tvSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (AuthController) this.tvSysUIComponentImpl.authControllerProvider.get(), (ScrimController) this.tvSysUIComponentImpl.scrimControllerProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (MediaDataManager) this.tvSysUIComponentImpl.mediaDataManagerProvider.get(), (NotificationShadeDepthController) this.tvSysUIComponentImpl.notificationShadeDepthControllerProvider.get(), (AmbientState) this.tvSysUIComponentImpl.ambientStateProvider.get(), (SecLockIconViewController) this.tvSysUIComponentImpl.secLockIconViewControllerProvider.get(), (KeyguardMediaController) this.tvSysUIComponentImpl.keyguardMediaControllerProvider.get(), (TapAgainViewController) this.tvSysUIComponentImpl.tapAgainViewControllerProvider.get(), (NavigationModeController) this.tvSysUIComponentImpl.navigationModeControllerProvider.get(), (NavigationBarController) this.tvSysUIComponentImpl.navigationBarControllerProvider.get(), (QuickSettingsController) this.centralSurfacesComponentImpl.quickSettingsControllerProvider.get(), (FragmentService) this.tvSysUIComponentImpl.fragmentServiceProvider.get(), (ContentResolver) this.tvGlobalRootComponent.provideContentResolverProvider.get(), (ShadeHeaderController) this.tvSysUIComponentImpl.shadeHeaderControllerProvider.get(), (ScreenOffAnimationController) this.tvSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (LockscreenGestureLogger) this.tvSysUIComponentImpl.lockscreenGestureLoggerProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (Optional) this.tvSysUIComponentImpl.provideSysUIUnfoldComponentProvider.get(), (SysUiState) this.tvSysUIComponentImpl.provideSysUiStateProvider.get(), this.centralSurfacesComponentImpl.keyguardSecBottomAreaViewControllerProvider, (KeyguardUnlockAnimationController) this.tvSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider.get(), (KeyguardIndicationController) this.tvSysUIComponentImpl.provideKeyguardIndicationControllerProvider.get(), (NotificationListContainer) this.centralSurfacesComponentImpl.provideListContainerProvider.get(), (NotificationStackSizeCalculator) this.tvSysUIComponentImpl.notificationStackSizeCalculatorProvider.get(), (UnlockedScreenOffAnimationController) this.tvSysUIComponentImpl.unlockedScreenOffAnimationControllerProvider.get(), (ShadeTransitionController) this.tvSysUIComponentImpl.shadeTransitionControllerProvider.get(), (InteractionJankMonitor) this.tvGlobalRootComponent.provideInteractionJankMonitorProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), this.centralSurfacesComponentImpl.keyguardBottomAreaViewModel(), (KeyguardBottomAreaInteractor) this.tvSysUIComponentImpl.keyguardBottomAreaInteractorProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.cameraLauncherProvider), (AlternateBouncerInteractor) this.tvSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (DreamingToLockscreenTransitionViewModel) this.tvSysUIComponentImpl.dreamingToLockscreenTransitionViewModelProvider.get(), (OccludedToLockscreenTransitionViewModel) this.tvSysUIComponentImpl.occludedToLockscreenTransitionViewModelProvider.get(), (LockscreenToDreamingTransitionViewModel) this.tvSysUIComponentImpl.lockscreenToDreamingTransitionViewModelProvider.get(), (GoneToDreamingTransitionViewModel) this.tvSysUIComponentImpl.goneToDreamingTransitionViewModelProvider.get(), (LockscreenToOccludedTransitionViewModel) this.tvSysUIComponentImpl.lockscreenToOccludedTransitionViewModelProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.mainDispatcherProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), this.tvSysUIComponentImpl.multiShadeInteractorProvider, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (KeyguardLongPressViewModel) this.tvSysUIComponentImpl.keyguardLongPressViewModelProvider.get(), (KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (KeyguardFaceAuthInteractor) this.tvSysUIComponentImpl.systemUIKeyguardFaceAuthInteractorProvider.get(), (NotificationShelfManager) this.tvSysUIComponentImpl.notificationShelfManagerProvider.get(), (PrivacyDialogController) this.tvSysUIComponentImpl.privacyDialogControllerProvider.get(), this.centralSurfacesComponentImpl.keyguardPunchHoleVIViewControllerFactory(), (KeyguardTouchAnimator) this.tvSysUIComponentImpl.keyguardTouchAnimatorProvider.get(), (KeyguardEditModeController) this.tvSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get(), DoubleCheck.lazy(this.centralSurfacesComponentImpl.dataUsageLabelManagerProvider), (IndicatorTouchHandler) this.centralSurfacesComponentImpl.indicatorTouchHandlerProvider.get(), (QsStatusEventLog) this.tvSysUIComponentImpl.qsStatusEventLogProvider.get(), (LockscreenNotificationManager) this.tvSysUIComponentImpl.lockscreenNotificationManagerProvider.get(), (LockscreenNotificationIconsOnlyController) this.tvSysUIComponentImpl.lockscreenNotificationIconsOnlyControllerProvider.get(), (KeyguardWallpaperController) this.tvSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), this.tvSysUIComponentImpl.wallpaperImageInjectCreator(), this.centralSurfacesComponentImpl.emergencyButtonControllerFactory(), (SecPanelLogger) this.tvSysUIComponentImpl.providesSecPanelLoggerProvider.get(), (SecPanelPolicy) this.tvSysUIComponentImpl.secPanelPolicyProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.subScreenManagerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.coverScreenManagerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginLockStarManagerProvider)));
                    case 8:
                        T t = (T) ((NotificationsQuickSettingsContainer) ((NotificationShadeWindowView) this.tvSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get()).findViewById(R.id.notification_container_parent));
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 9:
                        return (T) new QuickSettingsController((DcmMascotViewContainer) this.tvSysUIComponentImpl.dcmMascotViewContainerProvider.get(), DoubleCheck.lazy(this.centralSurfacesComponentImpl.notificationPanelViewControllerProvider), (NotificationPanelView) this.tvSysUIComponentImpl.providesNotificationPanelViewProvider.get(), (QsFrameTranslateController) this.tvSysUIComponentImpl.qsFrameTranslateImplProvider.get(), (ShadeTransitionController) this.tvSysUIComponentImpl.shadeTransitionControllerProvider.get(), (PulseExpansionHandler) this.tvSysUIComponentImpl.pulseExpansionHandlerProvider.get(), (NotificationRemoteInputManager) this.tvSysUIComponentImpl.provideNotificationRemoteInputManagerProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (StatusBarKeyguardViewManager) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (LightBarController) this.tvSysUIComponentImpl.lightBarControllerProvider.get(), (NotificationStackScrollLayoutController) this.centralSurfacesComponentImpl.notificationStackScrollLayoutControllerProvider.get(), (LockscreenShadeTransitionController) this.tvSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (NotificationShadeDepthController) this.tvSysUIComponentImpl.notificationShadeDepthControllerProvider.get(), (ShadeHeaderController) this.tvSysUIComponentImpl.shadeHeaderControllerProvider.get(), (StatusBarTouchableRegionManager) this.tvSysUIComponentImpl.statusBarTouchableRegionManagerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (ScrimController) this.tvSysUIComponentImpl.scrimControllerProvider.get(), (MediaDataManager) this.tvSysUIComponentImpl.mediaDataManagerProvider.get(), (AmbientState) this.tvSysUIComponentImpl.ambientStateProvider.get(), (RecordingController) this.tvSysUIComponentImpl.recordingControllerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (FalsingCollector) this.tvSysUIComponentImpl.falsingCollectorImplProvider.get(), (AccessibilityManager) this.tvGlobalRootComponent.provideAccessibilityManagerProvider.get(), (LockscreenGestureLogger) this.tvSysUIComponentImpl.lockscreenGestureLoggerProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (InteractionJankMonitor) this.tvGlobalRootComponent.provideInteractionJankMonitorProvider.get(), this.tvSysUIComponentImpl.shadeLogger(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (KeyguardFaceAuthInteractor) this.tvSysUIComponentImpl.systemUIKeyguardFaceAuthInteractorProvider.get(), (ShadeRepository) this.tvSysUIComponentImpl.shadeRepositoryImplProvider.get(), (CastController) this.tvSysUIComponentImpl.castControllerImplProvider.get(), (SecMediaHost) this.tvSysUIComponentImpl.secMediaHostProvider.get(), (QSScrimViewSwitch) this.centralSurfacesComponentImpl.qSScrimViewSwitchProvider.get(), (SecPanelExpansionStateNotifier) this.tvSysUIComponentImpl.secPanelExpansionStateNotifierProvider.get(), (SecQpBlurController) this.tvSysUIComponentImpl.secQpBlurControllerProvider.get(), (SecPanelLogger) this.tvSysUIComponentImpl.providesSecPanelLoggerProvider.get(), (PluginLockMediator) this.tvSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (NavigationBarController) this.tvSysUIComponentImpl.navigationBarControllerProvider.get(), (NavigationModeController) this.tvSysUIComponentImpl.navigationModeControllerProvider.get(), (PrivacyDialogController) this.tvSysUIComponentImpl.privacyDialogControllerProvider.get());
                    case 10:
                        return (T) new QSScrimViewSwitch(this.tvGlobalRootComponent.context, (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ScrimController) this.tvSysUIComponentImpl.scrimControllerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (ScrimView) this.centralSurfacesComponentImpl.getBehindScrimViewProvider.get(), (ScrimView) this.centralSurfacesComponentImpl.getFrontScrimViewProvider.get());
                    case 11:
                        T t2 = (T) ((ScrimView) ((NotificationShadeWindowView) this.tvSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get()).findViewById(R.id.scrim_behind));
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 12:
                        T t3 = (T) ((ScrimView) ((NotificationShadeWindowView) this.tvSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get()).findViewById(R.id.scrim_in_front));
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    case 13:
                        return (T) new KeyguardSecBottomAreaViewController((ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get(), (CameraLauncher) this.tvSysUIComponentImpl.cameraLauncherProvider.get(), (KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardQuickAffordanceInteractor) this.tvSysUIComponentImpl.keyguardQuickAffordanceInteractorProvider.get(), (QuickSettingsController) this.centralSurfacesComponentImpl.quickSettingsControllerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardShortcutManager) this.tvSysUIComponentImpl.keyguardShortcutManagerProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), this.centralSurfacesComponentImpl.keyguardBottomAreaView());
                    case 14:
                        return (T) NotificationStackScrollLayoutListContainerModule_ProvideListContainerFactory.provideListContainer((NotificationStackScrollLayoutController) this.centralSurfacesComponentImpl.notificationStackScrollLayoutControllerProvider.get());
                    case 15:
                        return (T) new DataUsageLabelManager((NotificationPanelViewController) this.centralSurfacesComponentImpl.notificationPanelViewControllerProvider.get(), (SlimIndicatorViewMediator) this.tvSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get());
                    case 16:
                        return (T) new IndicatorTouchHandler((Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (OngoingCallController) this.tvSysUIComponentImpl.provideOngoingCallControllerProvider.get(), (KnoxStateMonitor) this.tvSysUIComponentImpl.providesKnoxStateMonitorProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get());
                    case 17:
                        return (T) new PulsingGestureListener((NotificationShadeWindowView) this.tvSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (DockManager) this.tvSysUIComponentImpl.dockManagerImplProvider.get(), (CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get(), this.tvGlobalRootComponent.ambientDisplayConfiguration(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), this.tvSysUIComponentImpl.shadeLogger(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 18:
                        return (T) new StatusBarHeadsUpChangeListener((NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (StatusBarWindowController) this.tvSysUIComponentImpl.statusBarWindowControllerProvider.get(), (ShadeViewController) this.centralSurfacesComponentImpl.notificationPanelViewControllerProvider.get(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (HeadsUpManagerPhone) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (NotificationRemoteInputManager) this.tvSysUIComponentImpl.provideNotificationRemoteInputManagerProvider.get());
                    case 19:
                        return (T) CentralSurfacesCommandQueueCallbacks_Factory.newInstance((CoverHost) this.tvSysUIComponentImpl.coverHostImplProvider.get(), (CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get(), (QuickSettingsController) this.centralSurfacesComponentImpl.quickSettingsControllerProvider.get(), this.tvGlobalRootComponent.context, this.tvGlobalRootComponent.mainResources(), (ShadeController) this.tvSysUIComponentImpl.shadeControllerImplProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (ShadeViewController) this.centralSurfacesComponentImpl.notificationPanelViewControllerProvider.get(), (RemoteInputQuickSettingsDisabler) this.tvSysUIComponentImpl.remoteInputQuickSettingsDisablerProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (HeadsUpManager) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get(), (StatusBarKeyguardViewManager) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (AssistManager) this.tvSysUIComponentImpl.assistManagerProvider.get(), (DozeServiceHost) this.tvSysUIComponentImpl.dozeServiceHostProvider.get(), (NotificationStackScrollLayoutController) this.centralSurfacesComponentImpl.notificationStackScrollLayoutControllerProvider.get(), (StatusBarHideIconsForBouncerManager) this.tvSysUIComponentImpl.statusBarHideIconsForBouncerManagerProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), (VibratorHelper) this.tvSysUIComponentImpl.vibratorHelperProvider.get(), (Optional) this.tvGlobalRootComponent.provideOptionalVibratorProvider.get(), (DisableFlagsLogger) this.tvSysUIComponentImpl.disableFlagsLoggerProvider.get(), this.tvGlobalRootComponent.displayIdInteger(), (SystemBarAttributesListener) this.tvSysUIComponentImpl.systemBarAttributesListenerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.cameraLauncherProvider), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (SearcleManager) this.tvSysUIComponentImpl.provideSearcleManagerProvider.get());
                    case 20:
                        return (T) SWBlueLightFilterTile_Factory.newInstance((CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get(), this.tvGlobalRootComponent.context, (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get());
                    case 21:
                        return (T) StatusBarNotificationActivityStarter_Factory.newInstance(this.tvGlobalRootComponent.context, GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler(), (Executor) this.tvSysUIComponentImpl.provideExecutorProvider.get(), (NotificationVisibilityProvider) this.tvSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), (HeadsUpManagerPhone) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (NotificationClickNotifier) this.tvSysUIComponentImpl.notificationClickNotifierProvider.get(), (StatusBarKeyguardViewManager) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (KeyguardManager) this.tvGlobalRootComponent.provideKeyguardManagerProvider.get(), (IDreamManager) this.tvGlobalRootComponent.provideIDreamManagerProvider.get(), (Optional) this.tvSysUIComponentImpl.provideBubblesManagerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.assistManagerProvider), (NotificationRemoteInputManager) this.tvSysUIComponentImpl.provideNotificationRemoteInputManagerProvider.get(), (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (ShadeController) this.tvSysUIComponentImpl.shadeControllerImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (NotificationInterruptStateProvider) this.tvSysUIComponentImpl.notificationInterruptStateProviderImplProvider.get(), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), (StatusBarRemoteInputCallback) this.tvSysUIComponentImpl.statusBarRemoteInputCallbackProvider.get(), (ActivityIntentHelper) this.tvSysUIComponentImpl.activityIntentHelperProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), this.centralSurfacesComponentImpl.statusBarNotificationActivityStarterLogger(), (OnUserInteractionCallback) this.tvSysUIComponentImpl.onUserInteractionCallbackImplProvider.get(), (CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get(), (NotificationPresenter) this.centralSurfacesComponentImpl.statusBarNotificationPresenterProvider.get(), (ShadeViewController) this.centralSurfacesComponentImpl.notificationPanelViewControllerProvider.get(), (ActivityLaunchAnimator) this.tvSysUIComponentImpl.provideActivityLaunchAnimatorProvider.get(), (NotificationLaunchAnimatorControllerProvider) this.centralSurfacesComponentImpl.notificationLaunchAnimatorControllerProvider.get(), (LaunchFullScreenIntentProvider) this.tvSysUIComponentImpl.launchFullScreenIntentProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 22:
                        return (T) StatusBarNotificationPresenter_Factory.newInstance(this.tvGlobalRootComponent.context, (ShadeViewController) this.centralSurfacesComponentImpl.notificationPanelViewControllerProvider.get(), (QuickSettingsController) this.centralSurfacesComponentImpl.quickSettingsControllerProvider.get(), (HeadsUpManagerPhone) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (NotificationShadeWindowView) this.tvSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (NotificationStackScrollLayoutController) this.centralSurfacesComponentImpl.notificationStackScrollLayoutControllerProvider.get(), (DozeScrimController) this.tvSysUIComponentImpl.dozeScrimControllerProvider.get(), (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (DynamicPrivacyController) this.tvSysUIComponentImpl.dynamicPrivacyControllerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardIndicationController) this.tvSysUIComponentImpl.provideKeyguardIndicationControllerProvider.get(), (CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get(), (LockscreenShadeTransitionController) this.tvSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (NotifShadeEventSource) this.tvSysUIComponentImpl.shadeEventCoordinatorProvider.get(), (NotificationMediaManager) this.tvSysUIComponentImpl.provideNotificationMediaManagerProvider.get(), (NotificationGutsManager) this.tvSysUIComponentImpl.notificationGutsManagerProvider.get(), (LockscreenGestureLogger) this.tvSysUIComponentImpl.lockscreenGestureLoggerProvider.get(), (InitController) this.tvSysUIComponentImpl.initControllerProvider.get(), (NotificationInterruptStateProvider) this.tvSysUIComponentImpl.notificationInterruptStateProviderImplProvider.get(), (NotificationRemoteInputManager) this.tvSysUIComponentImpl.provideNotificationRemoteInputManagerProvider.get(), this.tvSysUIComponentImpl.notifPipelineFlags(), (NotificationRemoteInputManager.Callback) this.tvSysUIComponentImpl.statusBarRemoteInputCallbackProvider.get(), (NotificationListContainer) this.centralSurfacesComponentImpl.provideListContainerProvider.get());
                    case 23:
                        return (T) new NotificationLaunchAnimatorControllerProvider((NotificationShadeWindowViewController) this.centralSurfacesComponentImpl.notificationShadeWindowViewControllerProvider.get(), (NotificationListContainer) this.centralSurfacesComponentImpl.provideListContainerProvider.get(), (HeadsUpManagerPhone) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (InteractionJankMonitor) this.tvGlobalRootComponent.provideInteractionJankMonitorProvider.get());
                    case 24:
                        return (T) new SecPanelBackgroundController((SecPanelBackground) this.centralSurfacesComponentImpl.getSecPanelBackgroundProvider.get());
                    case 25:
                        T t4 = (T) ((SecPanelBackground) ((NotificationShadeWindowView) this.tvSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get()).findViewById(R.id.notification_panel_background));
                        Preconditions.checkNotNullFromProvides(t4);
                        return t4;
                    case 26:
                        return (T) new CapturedBlurContainerController((CapturedBlurContainer) this.centralSurfacesComponentImpl.getCapturedBlurContainerProvider.get(), (KeyguardWallpaper) this.tvSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SecPanelBackgroundController) this.centralSurfacesComponentImpl.secPanelBackgroundControllerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get());
                    case 27:
                        T t5 = (T) ((CapturedBlurContainer) ((NotificationShadeWindowView) this.tvSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get()).findViewById(R.id.captured_blur_container));
                        Preconditions.checkNotNullFromProvides(t5);
                        return t5;
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ CentralSurfacesComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        public final ActivatableNotificationViewModel activatableNotificationViewModel() {
            AccessibilityInteractor accessibilityInteractor = (AccessibilityInteractor) this.tvSysUIComponentImpl.accessibilityInteractorProvider.get();
            ActivatableNotificationViewModelModule.INSTANCE.getClass();
            ActivatableNotificationViewModel.Companion.getClass();
            return new ActivatableNotificationViewModelImpl(accessibilityInteractor);
        }

        public final CarrierHomeLogoViewController.Factory carrierHomeLogoViewControllerFactory() {
            return new CarrierHomeLogoViewController.Factory((CarrierInfraMediator) this.tvSysUIComponentImpl.fakeCarrierInfraMediatorImplProvider.get(), (DarkIconDispatcher) this.tvSysUIComponentImpl.darkIconDispatcherImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (SlimIndicatorViewMediator) this.tvSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get(), (SimCardInfoUtil) this.tvSysUIComponentImpl.simCardInfoUtilProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (SubscriptionManager) this.tvGlobalRootComponent.provideSubscriptionManagerProvider.get(), (TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get(), (CarrierConfigTracker) this.tvSysUIComponentImpl.carrierConfigTrackerProvider.get(), (DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get());
        }

        public final CollapsedStatusBarFragmentLogger collapsedStatusBarFragmentLogger() {
            return new CollapsedStatusBarFragmentLogger((LogBuffer) this.tvSysUIComponentImpl.provideCollapsedSbFragmentLogBufferProvider.get(), (DisableFlagsLogger) this.tvSysUIComponentImpl.disableFlagsLoggerProvider.get());
        }

        @Override // com.android.systemui.statusbar.phone.dagger.CentralSurfacesComponent
        public final CollapsedStatusBarFragment createCollapsedStatusBarFragment() {
            return StatusBarViewModule_CreateCollapsedStatusBarFragmentFactory.createCollapsedStatusBarFragment(new StatusBarFragmentComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 0), (OngoingCallController) this.tvSysUIComponentImpl.provideOngoingCallControllerProvider.get(), (SystemStatusAnimationScheduler) this.tvSysUIComponentImpl.provideSystemStatusAnimationSchedulerProvider.get(), (StatusBarLocationPublisher) this.tvSysUIComponentImpl.statusBarLocationPublisherProvider.get(), (NotificationIconAreaController) this.tvSysUIComponentImpl.notificationIconAreaControllerProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (StatusBarIconController) this.tvSysUIComponentImpl.statusBarIconControllerImplProvider.get(), (StatusBarIconController.DarkIconManager.Factory) this.tvSysUIComponentImpl.factoryProvider19.get(), (CollapsedStatusBarViewModel) this.tvSysUIComponentImpl.collapsedStatusBarViewModelImplProvider.get(), (CollapsedStatusBarViewBinder) this.tvSysUIComponentImpl.collapsedStatusBarViewBinderImplProvider.get(), (StatusBarHideIconsForBouncerManager) this.tvSysUIComponentImpl.statusBarHideIconsForBouncerManagerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (ShadeViewController) this.notificationPanelViewControllerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (CarrierConfigTracker) this.tvSysUIComponentImpl.carrierConfigTrackerProvider.get(), collapsedStatusBarFragmentLogger(), operatorNameViewControllerFactory(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (StatusBarWindowStateController) this.tvSysUIComponentImpl.statusBarWindowStateControllerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), this.tvSysUIComponentImpl.privacyLogger(), (CarrierInfraMediator) this.tvSysUIComponentImpl.fakeCarrierInfraMediatorImplProvider.get(), carrierHomeLogoViewControllerFactory(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get());
        }

        public final EmergencyButtonController.Factory emergencyButtonControllerFactory() {
            return new EmergencyButtonController.Factory((ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (InputMethodManager) this.tvGlobalRootComponent.provideInputMethodManagerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), (ActivityTaskManager) this.tvGlobalRootComponent.provideActivityTaskManagerProvider.get(), (ShadeController) this.tvSysUIComponentImpl.shadeControllerImplProvider.get(), (TelecomManager) this.tvGlobalRootComponent.provideTelecomManagerProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get());
        }

        @Override // com.android.systemui.statusbar.phone.dagger.CentralSurfacesComponent
        public final NotificationRowBinderImpl.BindRowCallback getBindRowCallback() {
            return (NotificationRowBinderImpl.BindRowCallback) this.statusBarNotificationPresenterProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.dagger.CentralSurfacesComponent
        public final CapturedBlurContainerController getCapturedBlurContainerController() {
            return (CapturedBlurContainerController) this.capturedBlurContainerControllerProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.dagger.CentralSurfacesComponent
        public final CentralSurfacesCommandQueueCallbacks getCentralSurfacesCommandQueueCallbacks() {
            return (CentralSurfacesCommandQueueCallbacks) this.centralSurfacesCommandQueueCallbacksProvider.get();
        }

        public final ShadeHeaderController getLargeScreenShadeHeaderController() {
            return (ShadeHeaderController) this.tvSysUIComponentImpl.shadeHeaderControllerProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.dagger.CentralSurfacesComponent
        public final NotificationActivityStarter getNotificationActivityStarter() {
            return (NotificationActivityStarter) this.statusBarNotificationActivityStarterProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.dagger.CentralSurfacesComponent
        public final NotificationListContainer getNotificationListContainer() {
            return (NotificationListContainer) this.provideListContainerProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.dagger.CentralSurfacesComponent
        public final NotificationPanelViewController getNotificationPanelViewController() {
            return (NotificationPanelViewController) this.notificationPanelViewControllerProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.dagger.CentralSurfacesComponent
        public final NotificationPresenter getNotificationPresenter() {
            return (NotificationPresenter) this.statusBarNotificationPresenterProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.dagger.CentralSurfacesComponent
        public final NotificationShadeWindowView getNotificationShadeWindowView() {
            return (NotificationShadeWindowView) this.tvSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.dagger.CentralSurfacesComponent
        public final NotificationShadeWindowViewController getNotificationShadeWindowViewController() {
            return (NotificationShadeWindowViewController) this.notificationShadeWindowViewControllerProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.dagger.CentralSurfacesComponent
        public final NotificationShelfController getNotificationShelfController() {
            return (NotificationShelfController) this.providesStatusBarWindowViewProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.dagger.CentralSurfacesComponent
        public final NotificationStackScrollLayoutController getNotificationStackScrollLayoutController() {
            return (NotificationStackScrollLayoutController) this.notificationStackScrollLayoutControllerProvider.get();
        }

        public final QSScrimViewSwitch getQSScrimViewSwitch() {
            return (QSScrimViewSwitch) this.qSScrimViewSwitchProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.dagger.CentralSurfacesComponent
        public final QuickSettingsController getQuickSettingsController() {
            return (QuickSettingsController) this.quickSettingsControllerProvider.get();
        }

        public final SWBlueLightFilterTile getSWBlueLightFilterTile() {
            return (SWBlueLightFilterTile) this.sWBlueLightFilterTileProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.dagger.CentralSurfacesComponent
        public final SecPanelBackgroundController getSecPanelBackgroundController() {
            return (SecPanelBackgroundController) this.secPanelBackgroundControllerProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.dagger.CentralSurfacesComponent
        public final StatusBarHeadsUpChangeListener getStatusBarHeadsUpChangeListener() {
            return (StatusBarHeadsUpChangeListener) this.statusBarHeadsUpChangeListenerProvider.get();
        }

        public final void initialize() {
            this.notificationShelfViewBinderWrapperControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 1));
            this.providesNotificationShelfProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 2));
            this.providesStatusBarWindowViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 0));
            this.notificationShelfInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 5));
            this.notificationShelfViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 4));
            this.notificationStackScrollLayoutControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 3));
            this.getNotificationsQuickSettingsContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 8));
            this.getBehindScrimViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 11));
            this.getFrontScrimViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 12));
            this.qSScrimViewSwitchProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 10));
            this.quickSettingsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 9));
            this.keyguardSecBottomAreaViewControllerProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 13);
            this.provideListContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 14));
            this.dataUsageLabelManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 15));
            this.indicatorTouchHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 16));
            this.notificationPanelViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 7));
            this.pulsingGestureListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 17));
            this.notificationShadeWindowViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 6));
            this.statusBarHeadsUpChangeListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 18));
            this.centralSurfacesCommandQueueCallbacksProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 19));
            this.sWBlueLightFilterTileProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 20));
            this.statusBarNotificationPresenterProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 22));
            this.notificationLaunchAnimatorControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 23));
            this.statusBarNotificationActivityStarterProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 21));
            this.getSecPanelBackgroundProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 25));
            this.secPanelBackgroundControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 24));
            this.getCapturedBlurContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 27));
            this.capturedBlurContainerControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, 26));
        }

        public final NotificationPanelViewController injectNotificationPanelViewController(NotificationPanelViewController notificationPanelViewController) {
            DoubleCheck.lazy(this.tvSysUIComponentImpl.biometricUnlockControllerProvider);
            notificationPanelViewController.getClass();
            return notificationPanelViewController;
        }

        public final NotificationShadeWindowViewController injectNotificationShadeWindowViewController(NotificationShadeWindowViewController notificationShadeWindowViewController) {
            notificationShadeWindowViewController.mPresentationDisabler = (KeyguardPresentationDisabler) this.tvSysUIComponentImpl.keyguardPresentationDisablerProvider.get();
            return notificationShadeWindowViewController;
        }

        public final KeyguardBottomAreaView keyguardBottomAreaView() {
            NotificationPanelView notificationPanelView = (NotificationPanelView) this.tvSysUIComponentImpl.providesNotificationPanelViewProvider.get();
            return StatusBarViewModule_ProvidesKeyguardBottomAreaViewFactory.providesKeyguardBottomAreaView(notificationPanelView);
        }

        public final KeyguardBottomAreaViewModel keyguardBottomAreaViewModel() {
            return new KeyguardBottomAreaViewModel((KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardQuickAffordanceInteractor) this.tvSysUIComponentImpl.keyguardQuickAffordanceInteractorProvider.get(), (KeyguardBottomAreaInteractor) this.tvSysUIComponentImpl.keyguardBottomAreaInteractorProvider.get(), new BurnInHelperWrapper(), (KeyguardLongPressViewModel) this.tvSysUIComponentImpl.keyguardLongPressViewModelProvider.get(), keyguardSettingsMenuViewModel());
        }

        public final KeyguardPunchHoleVIViewController.Factory keyguardPunchHoleVIViewControllerFactory() {
            return new KeyguardPunchHoleVIViewController.Factory((Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get(), (SecRotationWatcher) this.tvSysUIComponentImpl.secRotationWatcherProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (KeyguardEditModeController) this.tvSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get(), (PluginLockStarManager) this.tvSysUIComponentImpl.pluginLockStarManagerProvider.get());
        }

        public final KeyguardSettingsMenuViewModel keyguardSettingsMenuViewModel() {
            return new KeyguardSettingsMenuViewModel((KeyguardLongPressInteractor) this.tvSysUIComponentImpl.keyguardLongPressInteractorProvider.get());
        }

        public final NotificationStackScrollLogger notificationStackScrollLogger() {
            return new NotificationStackScrollLogger((LogBuffer) this.tvSysUIComponentImpl.provideNotificationHeadsUpLogBufferProvider.get());
        }

        public final Object notificationSwipeHelperBuilder() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return new NotificationSwipeHelper.Builder(daggerTvGlobalRootComponent.mainResources(), (ViewConfiguration) this.tvGlobalRootComponent.provideViewConfigurationProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (NotificationRoundnessManager) this.tvSysUIComponentImpl.notificationRoundnessManagerProvider.get());
        }

        public final NotificationsQSContainerController notificationsQSContainerController() {
            return new NotificationsQSContainerController((NotificationsQuickSettingsContainer) this.getNotificationsQuickSettingsContainerProvider.get(), (NavigationModeController) this.tvSysUIComponentImpl.navigationModeControllerProvider.get(), (OverviewProxyService) this.tvSysUIComponentImpl.overviewProxyServiceProvider.get(), (ShadeHeaderController) this.tvSysUIComponentImpl.shadeHeaderControllerProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (FragmentService) this.tvSysUIComponentImpl.fragmentServiceProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (NotificationShelfManager) this.tvSysUIComponentImpl.notificationShelfManagerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get());
        }

        public final OperatorNameViewController$Factory operatorNameViewControllerFactory() {
            return new OperatorNameViewController$Factory((DarkIconDispatcher) this.tvSysUIComponentImpl.darkIconDispatcherImplProvider.get(), (NetworkController) this.tvSysUIComponentImpl.networkControllerImplProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (CarrierConfigTracker) this.tvSysUIComponentImpl.carrierConfigTrackerProvider.get());
        }

        public final Optional<NotificationListViewModel> optionalOfNotificationListViewModel() {
            int i = NotificationListViewModelModule.$r8$clinit;
            Flags flags = Flags.INSTANCE;
            return Optional.empty();
        }

        public final StackStateLogger stackStateLogger() {
            return new StackStateLogger((LogBuffer) this.tvSysUIComponentImpl.provideNotificationHeadsUpLogBufferProvider.get());
        }

        public final StatusBarNotificationActivityStarterLogger statusBarNotificationActivityStarterLogger() {
            return new StatusBarNotificationActivityStarterLogger((LogBuffer) this.tvSysUIComponentImpl.provideNotifInteractionLogBufferProvider.get());
        }

        private CentralSurfacesComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.centralSurfacesComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            initialize();
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class ComplicationViewModelComponentFactory implements ComplicationViewModelComponent.Factory {
        public final cascd_ComplicationComponentImpl cascd_ComplicationComponentImpl;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ ComplicationViewModelComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, cascd_ComplicationComponentImpl cascd_complicationcomponentimpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, cascd_complicationcomponentimpl);
        }

        @Override // com.android.systemui.complication.dagger.ComplicationViewModelComponent.Factory
        public final ComplicationViewModelComponent create(Complication complication, ComplicationId complicationId) {
            throw null;
        }

        private ComplicationViewModelComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, cascd_ComplicationComponentImpl cascd_complicationcomponentimpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.cascd_ComplicationComponentImpl = cascd_complicationcomponentimpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class ComplicationViewModelComponentImpl implements ComplicationViewModelComponent {
        public final cascd_ComplicationComponentImpl cascd_ComplicationComponentImpl;
        public final Complication complication;
        public final ComplicationViewModelComponentImpl complicationViewModelComponentImpl = this;
        public final ComplicationId id;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        private ComplicationViewModelComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, cascd_ComplicationComponentImpl cascd_complicationcomponentimpl, Complication complication, ComplicationId complicationId) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.cascd_ComplicationComponentImpl = cascd_complicationcomponentimpl;
            this.id = complicationId;
        }

        public final ComplicationViewModel complicationViewModel() {
            return new ComplicationViewModel(null, this.id, this.cascd_ComplicationComponentImpl.host);
        }

        @Override // com.android.systemui.complication.dagger.ComplicationViewModelComponent
        public final ComplicationViewModelProvider getViewModelProvider() {
            return new ComplicationViewModelProvider(this.cascd_ComplicationComponentImpl.viewModelStore, complicationViewModel());
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class CoordinatorsSubcomponentFactory {
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ CoordinatorsSubcomponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        public final CoordinatorsSubcomponent create() {
            return new CoordinatorsSubcomponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 0);
        }

        private CoordinatorsSubcomponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class CoordinatorsSubcomponentImpl implements CoordinatorsSubcomponent {
        public Provider appOpsCoordinatorProvider;
        public Provider bubbleCoordinatorProvider;
        public Provider conversationCoordinatorProvider;
        public final CoordinatorsSubcomponentImpl coordinatorsSubcomponentImpl;
        public Provider dataStoreCoordinatorProvider;
        public Provider debugModeCoordinatorProvider;
        public Provider deviceProvisionedCoordinatorProvider;
        public Provider dismissibilityCoordinatorProvider;
        public Provider groupCountCoordinatorProvider;
        public Provider groupWhenCoordinatorProvider;
        public Provider gutsCoordinatorProvider;
        public Provider headsUpCoordinatorProvider;
        public Provider hideLocallyDismissedNotifsCoordinatorProvider;
        public Provider hideNotifsForOtherUsersCoordinatorProvider;
        public Provider keyguardCoordinatorProvider;
        public Provider lockScreenNotiIconCoordinatorProvider;
        public Provider mediaCoordinatorProvider;
        public Provider notifCoordinatorsImplProvider;
        public Provider notifCounterCoordinatorProvider;
        public Provider notificationControlActionCoordinatorProvider;
        public Provider notilusCoordinatorProvider;
        public Provider preparationCoordinatorProvider;
        public Provider rankingCoordinatorProvider;
        public Provider remoteInputCoordinatorProvider;
        public Provider rowAppearanceCoordinatorProvider;
        public Provider semPriorityCoordinatorProvider;
        public Provider sensitiveContentCoordinatorImplProvider;
        public Provider settingsChangedCoordinatorProvider;
        public Provider smartspaceDedupingCoordinatorProvider;
        public Provider stackCoordinatorProvider;
        public Provider subscreenQuickReplyCoordinatorProvider;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;
        public Provider viewConfigCoordinatorProvider;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final CoordinatorsSubcomponentImpl coordinatorsSubcomponentImpl;
            public final int id;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, CoordinatorsSubcomponentImpl coordinatorsSubcomponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.coordinatorsSubcomponentImpl = coordinatorsSubcomponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        return (T) new NotifCoordinatorsImpl((SectionStyleProvider) this.tvSysUIComponentImpl.sectionStyleProvider.get(), (DataStoreCoordinator) this.coordinatorsSubcomponentImpl.dataStoreCoordinatorProvider.get(), (HideLocallyDismissedNotifsCoordinator) this.coordinatorsSubcomponentImpl.hideLocallyDismissedNotifsCoordinatorProvider.get(), (HideNotifsForOtherUsersCoordinator) this.coordinatorsSubcomponentImpl.hideNotifsForOtherUsersCoordinatorProvider.get(), (KeyguardCoordinator) this.coordinatorsSubcomponentImpl.keyguardCoordinatorProvider.get(), (RankingCoordinator) this.coordinatorsSubcomponentImpl.rankingCoordinatorProvider.get(), (AppOpsCoordinator) this.coordinatorsSubcomponentImpl.appOpsCoordinatorProvider.get(), (DeviceProvisionedCoordinator) this.coordinatorsSubcomponentImpl.deviceProvisionedCoordinatorProvider.get(), (BubbleCoordinator) this.coordinatorsSubcomponentImpl.bubbleCoordinatorProvider.get(), (HeadsUpCoordinator) this.coordinatorsSubcomponentImpl.headsUpCoordinatorProvider.get(), (GutsCoordinator) this.coordinatorsSubcomponentImpl.gutsCoordinatorProvider.get(), (ConversationCoordinator) this.coordinatorsSubcomponentImpl.conversationCoordinatorProvider.get(), (DebugModeCoordinator) this.coordinatorsSubcomponentImpl.debugModeCoordinatorProvider.get(), (GroupCountCoordinator) this.coordinatorsSubcomponentImpl.groupCountCoordinatorProvider.get(), (GroupWhenCoordinator) this.coordinatorsSubcomponentImpl.groupWhenCoordinatorProvider.get(), (MediaCoordinator) this.coordinatorsSubcomponentImpl.mediaCoordinatorProvider.get(), (PreparationCoordinator) this.coordinatorsSubcomponentImpl.preparationCoordinatorProvider.get(), (RemoteInputCoordinator) this.coordinatorsSubcomponentImpl.remoteInputCoordinatorProvider.get(), (RowAppearanceCoordinator) this.coordinatorsSubcomponentImpl.rowAppearanceCoordinatorProvider.get(), (StackCoordinator) this.coordinatorsSubcomponentImpl.stackCoordinatorProvider.get(), (ShadeEventCoordinator) this.tvSysUIComponentImpl.shadeEventCoordinatorProvider.get(), (SmartspaceDedupingCoordinator) this.coordinatorsSubcomponentImpl.smartspaceDedupingCoordinatorProvider.get(), (ViewConfigCoordinator) this.coordinatorsSubcomponentImpl.viewConfigCoordinatorProvider.get(), (VisualStabilityCoordinator) this.tvSysUIComponentImpl.visualStabilityCoordinatorProvider.get(), (SensitiveContentCoordinator) this.coordinatorsSubcomponentImpl.sensitiveContentCoordinatorImplProvider.get(), (DismissibilityCoordinator) this.coordinatorsSubcomponentImpl.dismissibilityCoordinatorProvider.get(), (SemPriorityCoordinator) this.coordinatorsSubcomponentImpl.semPriorityCoordinatorProvider.get(), (SubscreenQuickReplyCoordinator) this.coordinatorsSubcomponentImpl.subscreenQuickReplyCoordinatorProvider.get(), (LockScreenNotiIconCoordinator) this.coordinatorsSubcomponentImpl.lockScreenNotiIconCoordinatorProvider.get(), this.coordinatorsSubcomponentImpl.notifTimeSortCoordnator(), (NotificationControlActionCoordinator) this.coordinatorsSubcomponentImpl.notificationControlActionCoordinatorProvider.get(), new EdgeLightingCoordnator(), (SettingsChangedCoordinator) this.coordinatorsSubcomponentImpl.settingsChangedCoordinatorProvider.get(), (NotilusCoordinator) this.coordinatorsSubcomponentImpl.notilusCoordinatorProvider.get(), (NotifCounterCoordinator) this.coordinatorsSubcomponentImpl.notifCounterCoordinatorProvider.get(), this.coordinatorsSubcomponentImpl.notifHeaderCoordinator());
                    case 1:
                        return (T) new DataStoreCoordinator((NotifLiveDataStoreImpl) this.tvSysUIComponentImpl.notifLiveDataStoreImplProvider.get());
                    case 2:
                        return (T) new HideLocallyDismissedNotifsCoordinator();
                    case 3:
                        return (T) new HideNotifsForOtherUsersCoordinator((NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get());
                    case 4:
                        return (T) new KeyguardCoordinator((CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (HeadsUpManager) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (KeyguardNotificationVisibilityProvider) this.tvSysUIComponentImpl.keyguardNotificationVisibilityProviderImplProvider.get(), (KeyguardRepository) this.tvSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (KeyguardTransitionRepository) this.tvSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), this.coordinatorsSubcomponentImpl.keyguardCoordinatorLogger(), this.tvSysUIComponentImpl.notifPipelineFlags(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (SectionHeaderVisibilityProvider) this.tvSysUIComponentImpl.sectionHeaderVisibilityProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (SeenNotificationsProviderImpl) this.tvSysUIComponentImpl.seenNotificationsProviderImplProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 5:
                        return (T) new RankingCoordinator((StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (HighPriorityProvider) this.tvSysUIComponentImpl.highPriorityProvider.get(), this.tvSysUIComponentImpl.alertingHeaderNodeController(), this.tvSysUIComponentImpl.silentHeaderSectionHeaderController(), this.tvSysUIComponentImpl.silentHeaderNodeController());
                    case 6:
                        return (T) new AppOpsCoordinator((ForegroundServiceController) this.tvSysUIComponentImpl.foregroundServiceControllerProvider.get(), (AppOpsController) this.tvSysUIComponentImpl.appOpsControllerImplProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get());
                    case 7:
                        return (T) new DeviceProvisionedCoordinator((DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get(), (IPackageManager) this.tvGlobalRootComponent.provideIPackageManagerProvider.get());
                    case 8:
                        Optional optional = (Optional) this.tvSysUIComponentImpl.provideBubblesManagerProvider.get();
                        TvSysUIComponentImpl tvSysUIComponentImpl = this.tvSysUIComponentImpl;
                        return (T) new BubbleCoordinator(optional, tvSysUIComponentImpl.setBubbles, (NotifCollection) tvSysUIComponentImpl.notifCollectionProvider.get(), (LockscreenNotificationManager) this.tvSysUIComponentImpl.lockscreenNotificationManagerProvider.get());
                    case 9:
                        return (T) new HeadsUpCoordinator(this.coordinatorsSubcomponentImpl.headsUpCoordinatorLogger(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (HeadsUpManager) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (HeadsUpViewBinder) this.tvSysUIComponentImpl.headsUpViewBinderProvider.get(), (VisualInterruptionDecisionProvider) this.tvSysUIComponentImpl.provideVisualInterruptionDecisionProvider.get(), (NotificationRemoteInputManager) this.tvSysUIComponentImpl.provideNotificationRemoteInputManagerProvider.get(), (LaunchFullScreenIntentProvider) this.tvSysUIComponentImpl.launchFullScreenIntentProvider.get(), this.tvSysUIComponentImpl.notifPipelineFlags(), this.tvSysUIComponentImpl.incomingHeaderNodeController(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get());
                    case 10:
                        return (T) new GutsCoordinator((NotifGutsViewManager) this.tvSysUIComponentImpl.notificationGutsManagerProvider.get(), this.coordinatorsSubcomponentImpl.gutsCoordinatorLogger(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 11:
                        return (T) new ConversationCoordinator((PeopleNotificationIdentifier) this.tvSysUIComponentImpl.peopleNotificationIdentifierImplProvider.get(), (ConversationIconManager) this.tvSysUIComponentImpl.iconManagerProvider.get(), (HighPriorityProvider) this.tvSysUIComponentImpl.highPriorityProvider.get(), this.tvSysUIComponentImpl.peopleHeaderNodeController());
                    case 12:
                        return (T) new DebugModeCoordinator((DebugModeFilterProvider) this.tvSysUIComponentImpl.debugModeFilterProvider.get());
                    case 13:
                        return (T) new GroupCountCoordinator();
                    case 14:
                        return (T) new GroupWhenCoordinator((DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get());
                    case 15:
                        return (T) new MediaCoordinator(this.tvSysUIComponentImpl.mediaFeatureFlag(), (IStatusBarService) this.tvGlobalRootComponent.provideIStatusBarServiceProvider.get(), (IconManager) this.tvSysUIComponentImpl.iconManagerProvider.get());
                    case 16:
                        return (T) new PreparationCoordinator(this.coordinatorsSubcomponentImpl.preparationCoordinatorLogger(), (NotifInflater) this.tvSysUIComponentImpl.notifInflaterImplProvider.get(), (NotifInflationErrorManager) this.tvSysUIComponentImpl.notifInflationErrorManagerProvider.get(), (NotifViewBarn) this.tvSysUIComponentImpl.notifViewBarnProvider.get(), (NotifUiAdjustmentProvider) this.tvSysUIComponentImpl.notifUiAdjustmentProvider.get(), (IStatusBarService) this.tvGlobalRootComponent.provideIStatusBarServiceProvider.get(), (BindEventManagerImpl) this.tvSysUIComponentImpl.bindEventManagerImplProvider.get());
                    case 17:
                        return (T) new RemoteInputCoordinator((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (RemoteInputNotificationRebuilder) this.tvSysUIComponentImpl.remoteInputNotificationRebuilderProvider.get(), (NotificationRemoteInputManager) this.tvSysUIComponentImpl.provideNotificationRemoteInputManagerProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (SmartReplyController) this.tvSysUIComponentImpl.provideSmartReplyControllerProvider.get());
                    case 18:
                        return (T) new RowAppearanceCoordinator(this.tvGlobalRootComponent.context, (AssistantFeedbackController) this.tvSysUIComponentImpl.assistantFeedbackControllerProvider.get(), (SectionStyleProvider) this.tvSysUIComponentImpl.sectionStyleProvider.get());
                    case 19:
                        return (T) new StackCoordinator((GroupExpansionManagerImpl) this.tvSysUIComponentImpl.groupExpansionManagerImplProvider.get(), (NotificationIconAreaController) this.tvSysUIComponentImpl.notificationIconAreaControllerProvider.get());
                    case 20:
                        return (T) new SmartspaceDedupingCoordinator((SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (LockscreenSmartspaceController) this.tvSysUIComponentImpl.lockscreenSmartspaceControllerProvider.get(), (NotifPipeline) this.tvSysUIComponentImpl.notifPipelineProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get());
                    case 21:
                        return (T) new ViewConfigCoordinator((ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (NotificationGutsManager) this.tvSysUIComponentImpl.notificationGutsManagerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 22:
                        return (T) new SensitiveContentCoordinatorImpl((DynamicPrivacyController) this.tvSysUIComponentImpl.dynamicPrivacyControllerProvider.get(), (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get());
                    case 23:
                        return (T) new DismissibilityCoordinator((KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (NotificationDismissibilityProviderImpl) this.tvSysUIComponentImpl.notificationDismissibilityProviderImplProvider.get());
                    case 24:
                        return (T) new SemPriorityCoordinator();
                    case 25:
                        return (T) new SubscreenQuickReplyCoordinator((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (SubscreenNotificationController) this.tvSysUIComponentImpl.subscreenNotificationControllerProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get());
                    case 26:
                        return (T) LockScreenNotiIconCoordinator_Factory.newInstance((LockscreenNotificationManager) this.tvSysUIComponentImpl.lockscreenNotificationManagerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (GroupMembershipManager) this.tvSysUIComponentImpl.provideGroupMembershipManagerProvider.get(), (PluginLockMediator) this.tvSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), this.tvSysUIComponentImpl.setBubbles);
                    case 27:
                        return (T) new NotificationControlActionCoordinator((NotificationController) this.tvSysUIComponentImpl.notificationControllerProvider.get());
                    case 28:
                        return (T) new SettingsChangedCoordinator((NotifLiveDataStoreImpl) this.tvSysUIComponentImpl.notifLiveDataStoreImplProvider.get());
                    case 29:
                        return (T) new NotilusCoordinator();
                    case 30:
                        return (T) new NotifCounterCoordinator(this.tvGlobalRootComponent.context);
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ CoordinatorsSubcomponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.systemui.statusbar.notification.collection.coordinator.dagger.CoordinatorsSubcomponent
        public final NotifCoordinators getNotifCoordinators() {
            return (NotifCoordinators) this.notifCoordinatorsImplProvider.get();
        }

        public final GutsCoordinatorLogger gutsCoordinatorLogger() {
            return new GutsCoordinatorLogger((LogBuffer) this.tvSysUIComponentImpl.provideNotificationsLogBufferProvider.get());
        }

        public final HeadsUpCoordinatorLogger headsUpCoordinatorLogger() {
            return new HeadsUpCoordinatorLogger((LogBuffer) this.tvSysUIComponentImpl.provideNotificationHeadsUpLogBufferProvider.get());
        }

        public final void initialize() {
            this.dataStoreCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 1));
            this.hideLocallyDismissedNotifsCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 2));
            this.hideNotifsForOtherUsersCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 3));
            this.keyguardCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 4));
            this.rankingCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 5));
            this.appOpsCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 6));
            this.deviceProvisionedCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 7));
            this.bubbleCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 8));
            this.headsUpCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 9));
            this.gutsCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 10));
            this.conversationCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 11));
            this.debugModeCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 12));
            this.groupCountCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 13));
            this.groupWhenCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 14));
            this.mediaCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 15));
            this.preparationCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 16));
            this.remoteInputCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 17));
            this.rowAppearanceCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 18));
            this.stackCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 19));
            this.smartspaceDedupingCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 20));
            this.viewConfigCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 21));
            this.sensitiveContentCoordinatorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 22));
            this.dismissibilityCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 23));
            this.semPriorityCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 24));
            this.subscreenQuickReplyCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 25));
            this.lockScreenNotiIconCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 26));
            this.notificationControlActionCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 27));
            this.settingsChangedCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 28));
            this.notilusCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 29));
            this.notifCounterCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 30));
            this.notifCoordinatorsImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 0));
        }

        public final KeyguardCoordinatorLogger keyguardCoordinatorLogger() {
            return new KeyguardCoordinatorLogger((LogBuffer) this.tvSysUIComponentImpl.provideUnseenNotificationLogBufferProvider.get());
        }

        public final NotifHeaderCoordinator notifHeaderCoordinator() {
            return new NotifHeaderCoordinator((NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get());
        }

        public final NotifTimeSortCoordnator notifTimeSortCoordnator() {
            return new NotifTimeSortCoordnator((SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get());
        }

        public final PreparationCoordinatorLogger preparationCoordinatorLogger() {
            return new PreparationCoordinatorLogger((LogBuffer) this.tvSysUIComponentImpl.provideNotificationsLogBufferProvider.get());
        }

        private CoordinatorsSubcomponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.coordinatorsSubcomponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            initialize();
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class DozeComponentFactory implements DozeComponent.Builder {
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ DozeComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.systemui.doze.dagger.DozeComponent.Builder
        public final DozeComponent build(DozeMachine.Service service) {
            service.getClass();
            return new DozeComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, service, 0);
        }

        private DozeComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class DozeComponentImpl implements DozeComponent {
        public Provider aODMachineProvider;
        public Provider aODScreenBrightnessProvider;
        public Provider aODUiProvider;
        public Provider dozeAuthRemoverProvider;
        public final DozeComponentImpl dozeComponentImpl;
        public Provider dozeDockHandlerProvider;
        public Provider dozeFalsingManagerAdapterProvider;
        public Provider dozeMachineProvider;
        public final DozeMachine.Service dozeMachineService;
        public Provider dozePauserProvider;
        public Provider dozeScreenBrightnessProvider;
        public Provider dozeScreenStateProvider;
        public Provider dozeSuppressorProvider;
        public Provider dozeTriggersProvider;
        public Provider dozeUiProvider;
        public Provider dozeWallpaperStateProvider;
        public Provider providesDozeWakeLockProvider;
        public Provider providesWrappedServiceProvider;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final DozeComponentImpl dozeComponentImpl;
            public final int id;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, DozeComponentImpl dozeComponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.dozeComponentImpl = dozeComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        DozeMachine.Service service = (DozeMachine.Service) this.dozeComponentImpl.providesWrappedServiceProvider.get();
                        DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
                        Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
                        return (T) new DozeMachine(service, daggerTvGlobalRootComponent.ambientDisplayConfiguration(), (WakeLock) this.dozeComponentImpl.providesDozeWakeLockProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (DozeLog) this.tvSysUIComponentImpl.dozeLogProvider.get(), (DockManager) this.tvSysUIComponentImpl.dockManagerImplProvider.get(), (DozeHost) this.tvSysUIComponentImpl.dozeServiceHostProvider.get(), this.dozeComponentImpl.partArray(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 1:
                        return (T) DozeModule_ProvidesWrappedServiceFactory.providesWrappedService(this.dozeComponentImpl.dozeMachineService, (DozeHost) this.tvSysUIComponentImpl.dozeServiceHostProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (Executor) this.tvGlobalRootComponent.provideUiBackgroundExecutorProvider.get());
                    case 2:
                        DelayedWakeLock.Builder delayedWakeLockBuilder = this.tvSysUIComponentImpl.delayedWakeLockBuilder();
                        Handler handler = (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get();
                        delayedWakeLockBuilder.mHandler = handler;
                        delayedWakeLockBuilder.mTag = "Doze";
                        return (T) new DelayedWakeLock(handler, WakeLock.createPartial(delayedWakeLockBuilder.mContext, delayedWakeLockBuilder.mLogger, "Doze"));
                    case 3:
                        return (T) new DozePauser((Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (AlarmManager) this.tvGlobalRootComponent.provideAlarmManagerProvider.get(), (AlwaysOnDisplayPolicy) this.tvSysUIComponentImpl.alwaysOnDisplayPolicyProvider.get());
                    case 4:
                        return (T) new DozeFalsingManagerAdapter((FalsingCollector) this.tvSysUIComponentImpl.falsingCollectorImplProvider.get());
                    case 5:
                        return (T) new DozeTriggers(this.tvGlobalRootComponent.context, (DozeHost) this.tvSysUIComponentImpl.dozeServiceHostProvider.get(), this.tvGlobalRootComponent.ambientDisplayConfiguration(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (AsyncSensorManager) this.tvSysUIComponentImpl.asyncSensorManagerProvider.get(), (WakeLock) this.dozeComponentImpl.providesDozeWakeLockProvider.get(), (DockManager) this.tvSysUIComponentImpl.dockManagerImplProvider.get(), this.tvSysUIComponentImpl.proximitySensor(), this.tvSysUIComponentImpl.proximityCheck(), (DozeLog) this.tvSysUIComponentImpl.dozeLogProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (AuthController) this.tvSysUIComponentImpl.authControllerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (SessionTracker) this.tvSysUIComponentImpl.sessionTrackerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (DevicePostureController) this.tvSysUIComponentImpl.devicePostureControllerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 6:
                        DaggerTvGlobalRootComponent daggerTvGlobalRootComponent2 = this.tvGlobalRootComponent;
                        return (T) new DozeUi(daggerTvGlobalRootComponent2.context, (AlarmManager) daggerTvGlobalRootComponent2.provideAlarmManagerProvider.get(), (WakeLock) this.dozeComponentImpl.providesDozeWakeLockProvider.get(), (DozeHost) this.tvSysUIComponentImpl.dozeServiceHostProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (DozeLog) this.tvSysUIComponentImpl.dozeLogProvider.get());
                    case 7:
                        DozeComponentImpl dozeComponentImpl = this.dozeComponentImpl;
                        DozeMachine.Service service2 = (DozeMachine.Service) dozeComponentImpl.providesWrappedServiceProvider.get();
                        Handler handler2 = (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get();
                        DozeHost dozeHost = (DozeHost) this.tvSysUIComponentImpl.dozeServiceHostProvider.get();
                        DozeParameters dozeParameters = (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get();
                        WakeLock wakeLock = (WakeLock) this.dozeComponentImpl.providesDozeWakeLockProvider.get();
                        AuthController authController = (AuthController) this.tvSysUIComponentImpl.authControllerProvider.get();
                        TvSysUIComponentImpl tvSysUIComponentImpl = this.tvSysUIComponentImpl;
                        return (T) dozeComponentImpl.injectDozeScreenState(DozeScreenState_Factory.newInstance(service2, handler2, dozeHost, dozeParameters, wakeLock, authController, tvSysUIComponentImpl.udfpsControllerProvider, (DozeLog) tvSysUIComponentImpl.dozeLogProvider.get(), (DozeScreenBrightness) this.dozeComponentImpl.dozeScreenBrightnessProvider.get()));
                    case 8:
                        return (T) new DozeScreenBrightness(this.tvGlobalRootComponent.context, (DozeMachine.Service) this.dozeComponentImpl.providesWrappedServiceProvider.get(), (AsyncSensorManager) this.tvSysUIComponentImpl.asyncSensorManagerProvider.get(), this.dozeComponentImpl.brightnessSensorOptionalOfSensorArray(), (DozeHost) this.tvSysUIComponentImpl.dozeServiceHostProvider.get(), new Handler(), (AlwaysOnDisplayPolicy) this.tvSysUIComponentImpl.alwaysOnDisplayPolicyProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (DevicePostureController) this.tvSysUIComponentImpl.devicePostureControllerImplProvider.get(), (DozeLog) this.tvSysUIComponentImpl.dozeLogProvider.get(), (SystemSettings) this.tvSysUIComponentImpl.systemSettingsImpl());
                    case 9:
                        return (T) new DozeWallpaperState((IWallpaperManager) this.tvGlobalRootComponent.provideIWallPaperManagerProvider.get(), (BiometricUnlockController) this.tvSysUIComponentImpl.biometricUnlockControllerProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get());
                    case 10:
                        DaggerTvGlobalRootComponent daggerTvGlobalRootComponent3 = this.tvGlobalRootComponent;
                        Provider provider2 = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
                        return (T) new DozeDockHandler(daggerTvGlobalRootComponent3.ambientDisplayConfiguration(), (DockManager) this.tvSysUIComponentImpl.dockManagerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 11:
                        return (T) new DozeAuthRemover((KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 12:
                        DozeHost dozeHost2 = (DozeHost) this.tvSysUIComponentImpl.dozeServiceHostProvider.get();
                        DaggerTvGlobalRootComponent daggerTvGlobalRootComponent4 = this.tvGlobalRootComponent;
                        Provider provider3 = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
                        return (T) new DozeSuppressor(dozeHost2, daggerTvGlobalRootComponent4.ambientDisplayConfiguration(), (DozeLog) this.tvSysUIComponentImpl.dozeLogProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.biometricUnlockControllerProvider), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 13:
                        DozeMachine.Service service3 = (DozeMachine.Service) this.dozeComponentImpl.providesWrappedServiceProvider.get();
                        DaggerTvGlobalRootComponent daggerTvGlobalRootComponent5 = this.tvGlobalRootComponent;
                        Provider provider4 = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
                        return (T) new AODMachine(service3, daggerTvGlobalRootComponent5.ambientDisplayConfiguration(), (WakeLock) this.dozeComponentImpl.providesDozeWakeLockProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (DozeLog) this.tvSysUIComponentImpl.dozeLogProvider.get(), (DockManager) this.tvSysUIComponentImpl.dockManagerImplProvider.get(), (DozeHost) this.tvSysUIComponentImpl.dozeServiceHostProvider.get(), this.dozeComponentImpl.namedPartArray(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 14:
                        DaggerTvGlobalRootComponent daggerTvGlobalRootComponent6 = this.tvGlobalRootComponent;
                        return (T) new AODUi(daggerTvGlobalRootComponent6.context, (AlarmManager) daggerTvGlobalRootComponent6.provideAlarmManagerProvider.get(), (WakeLock) this.dozeComponentImpl.providesDozeWakeLockProvider.get(), (DozeHost) this.tvSysUIComponentImpl.dozeServiceHostProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (DozeLog) this.tvSysUIComponentImpl.dozeLogProvider.get(), this.tvGlobalRootComponent.ambientDisplayConfiguration());
                    case 15:
                        return (T) new AODScreenBrightness(this.tvGlobalRootComponent.context, (DozeMachine.Service) this.dozeComponentImpl.providesWrappedServiceProvider.get(), (AsyncSensorManager) this.tvSysUIComponentImpl.asyncSensorManagerProvider.get(), this.dozeComponentImpl.brightnessSensorOptionalOfSensorArray(), (DozeHost) this.tvSysUIComponentImpl.dozeServiceHostProvider.get(), new Handler(), (AlwaysOnDisplayPolicy) this.tvSysUIComponentImpl.alwaysOnDisplayPolicyProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (DevicePostureController) this.tvSysUIComponentImpl.devicePostureControllerImplProvider.get(), (DozeLog) this.tvSysUIComponentImpl.dozeLogProvider.get(), (SystemSettings) this.tvSysUIComponentImpl.systemSettingsImpl());
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ DozeComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, DozeMachine.Service service, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, service);
        }

        public final Optional<Sensor>[] brightnessSensorOptionalOfSensorArray() {
            return DozeModule_ProvidesBrightnessSensorsFactory.providesBrightnessSensors((AsyncSensorManager) this.tvSysUIComponentImpl.asyncSensorManagerProvider.get(), this.tvGlobalRootComponent.context, (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get());
        }

        @Override // com.android.systemui.doze.dagger.DozeComponent
        public final AODMachine getAODMachine() {
            return (AODMachine) this.aODMachineProvider.get();
        }

        public final DozeMachine getDozeMachine() {
            return (DozeMachine) this.dozeMachineProvider.get();
        }

        public final void initialize(DozeMachine.Service service) {
            this.providesWrappedServiceProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dozeComponentImpl, 1));
            this.providesDozeWakeLockProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dozeComponentImpl, 2));
            this.dozePauserProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dozeComponentImpl, 3));
            this.dozeFalsingManagerAdapterProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dozeComponentImpl, 4));
            this.dozeTriggersProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dozeComponentImpl, 5));
            this.dozeUiProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dozeComponentImpl, 6));
            this.dozeScreenBrightnessProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dozeComponentImpl, 8));
            this.dozeScreenStateProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dozeComponentImpl, 7));
            this.dozeWallpaperStateProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dozeComponentImpl, 9));
            this.dozeDockHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dozeComponentImpl, 10));
            this.dozeAuthRemoverProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dozeComponentImpl, 11));
            this.dozeSuppressorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dozeComponentImpl, 12));
            this.dozeMachineProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dozeComponentImpl, 0));
            this.aODUiProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dozeComponentImpl, 14));
            this.aODScreenBrightnessProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dozeComponentImpl, 15));
            this.aODMachineProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dozeComponentImpl, 13));
        }

        public final DozeScreenState injectDozeScreenState(DozeScreenState dozeScreenState) {
            dozeScreenState.mPluginAODManagerLazy = DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginAODManagerProvider);
            dozeScreenState.mAODTouchModeManager = (AODTouchModeManager) this.tvSysUIComponentImpl.aODTouchModeManagerProvider.get();
            dozeScreenState.mPowerManager = (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get();
            dozeScreenState.mSubScreenManager = (SubScreenManager) this.tvSysUIComponentImpl.subScreenManagerProvider.get();
            return dozeScreenState;
        }

        public final DozeMachine.Part[] namedPartArray() {
            return new DozeMachine.Part[]{(DozeFalsingManagerAdapter) this.dozeFalsingManagerAdapterProvider.get(), (AODUi) this.aODUiProvider.get(), (DozeScreenState) this.dozeScreenStateProvider.get(), (AODScreenBrightness) this.aODScreenBrightnessProvider.get(), (DozeWallpaperState) this.dozeWallpaperStateProvider.get(), (DozeAuthRemover) this.dozeAuthRemoverProvider.get(), (DozeSuppressor) this.dozeSuppressorProvider.get(), (DozeTransitionListener) this.tvSysUIComponentImpl.dozeTransitionListenerProvider.get()};
        }

        public final DozeMachine.Part[] partArray() {
            return new DozeMachine.Part[]{(DozePauser) this.dozePauserProvider.get(), (DozeFalsingManagerAdapter) this.dozeFalsingManagerAdapterProvider.get(), (DozeTriggers) this.dozeTriggersProvider.get(), (DozeUi) this.dozeUiProvider.get(), (DozeScreenState) this.dozeScreenStateProvider.get(), (DozeScreenBrightness) this.dozeScreenBrightnessProvider.get(), (DozeWallpaperState) this.dozeWallpaperStateProvider.get(), (DozeDockHandler) this.dozeDockHandlerProvider.get(), (DozeAuthRemover) this.dozeAuthRemoverProvider.get(), (DozeSuppressor) this.dozeSuppressorProvider.get(), (DozeTransitionListener) this.tvSysUIComponentImpl.dozeTransitionListenerProvider.get()};
        }

        private DozeComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, DozeMachine.Service service) {
            this.dozeComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.dozeMachineService = service;
            initialize(service);
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class DreamOverlayComponentFactory implements DreamOverlayComponent.Factory {
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ DreamOverlayComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.systemui.dreams.dagger.DreamOverlayComponent.Factory
        public final DreamOverlayComponent create(LifecycleOwner lifecycleOwner, ComplicationHostViewController complicationHostViewController, TouchInsetManager touchInsetManager, Set<DreamTouchHandler> set) {
            lifecycleOwner.getClass();
            complicationHostViewController.getClass();
            touchInsetManager.getClass();
            return new DreamOverlayComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, lifecycleOwner, complicationHostViewController, touchInsetManager, set, 0);
        }

        private DreamOverlayComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class DreamOverlayComponentImpl implements DreamOverlayComponent {
        public final ComplicationHostViewController complicationHostViewController;
        public final DreamOverlayComponentImpl dreamOverlayComponentImpl;
        public Provider dreamOverlayContainerViewControllerProvider;
        public Provider dreamOverlayStatusBarViewControllerProvider;
        public final Set<DreamTouchHandler> dreamTouchHandlers;
        public final LifecycleOwner lifecycleOwner;
        public Provider providesDreamInComplicationsTranslationYDurationProvider;
        public Provider providesDreamInComplicationsTranslationYProvider;
        public Provider providesDreamOverlayContainerViewProvider;
        public Provider providesDreamOverlayContentViewProvider;
        public Provider providesDreamOverlayStatusBarViewProvider;
        public Provider providesLifecycleProvider;
        public Provider providesMaxBurnInOffsetProvider;
        public final TouchInsetManager touchInsetManager;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final DreamOverlayComponentImpl dreamOverlayComponentImpl;
            public final int id;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, DreamOverlayComponentImpl dreamOverlayComponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.dreamOverlayComponentImpl = dreamOverlayComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        DreamOverlayContainerView dreamOverlayContainerView = (DreamOverlayContainerView) this.dreamOverlayComponentImpl.providesDreamOverlayContainerViewProvider.get();
                        DreamOverlayComponentImpl dreamOverlayComponentImpl = this.dreamOverlayComponentImpl;
                        return (T) new DreamOverlayContainerViewController(dreamOverlayContainerView, dreamOverlayComponentImpl.complicationHostViewController, (ViewGroup) dreamOverlayComponentImpl.providesDreamOverlayContentViewProvider.get(), (DreamOverlayStatusBarViewController) this.dreamOverlayComponentImpl.dreamOverlayStatusBarViewControllerProvider.get(), (LowLightTransitionCoordinator) this.tvGlobalRootComponent.lowLightTransitionCoordinatorProvider.get(), (BlurUtils) this.tvSysUIComponentImpl.blurUtilsProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), this.tvGlobalRootComponent.mainResources(), ((Integer) this.dreamOverlayComponentImpl.providesMaxBurnInOffsetProvider.get()).intValue(), this.dreamOverlayComponentImpl.namedLong(), this.dreamOverlayComponentImpl.namedLong2(), (PrimaryBouncerCallbackInteractor) this.tvSysUIComponentImpl.primaryBouncerCallbackInteractorProvider.get(), this.dreamOverlayComponentImpl.dreamOverlayAnimationsController(), (DreamOverlayStateController) this.tvSysUIComponentImpl.dreamOverlayStateControllerProvider.get(), (BouncerlessScrimController) this.tvSysUIComponentImpl.bouncerlessScrimControllerProvider.get());
                    case 1:
                        return (T) DreamOverlayModule_ProvidesDreamOverlayContainerViewFactory.providesDreamOverlayContainerView((LayoutInflater) this.tvGlobalRootComponent.providerLayoutInflaterProvider.get());
                    case 2:
                        return (T) DreamOverlayModule_ProvidesDreamOverlayContentViewFactory.providesDreamOverlayContentView((DreamOverlayContainerView) this.dreamOverlayComponentImpl.providesDreamOverlayContainerViewProvider.get());
                    case 3:
                        DreamOverlayStatusBarView dreamOverlayStatusBarView = (DreamOverlayStatusBarView) this.dreamOverlayComponentImpl.providesDreamOverlayStatusBarViewProvider.get();
                        DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
                        Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
                        return (T) new DreamOverlayStatusBarViewController(dreamOverlayStatusBarView, daggerTvGlobalRootComponent.mainResources(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (ConnectivityManager) this.tvGlobalRootComponent.provideConnectivityManagagerProvider.get(), this.dreamOverlayComponentImpl.touchInsetSession(), (AlarmManager) this.tvGlobalRootComponent.provideAlarmManagerProvider.get(), (NextAlarmController) this.tvSysUIComponentImpl.nextAlarmControllerImplProvider.get(), this.tvSysUIComponentImpl.dateFormatUtil(), (IndividualSensorPrivacyController) this.tvSysUIComponentImpl.provideIndividualSensorPrivacyControllerProvider.get(), (Optional) this.tvSysUIComponentImpl.providesDreamOverlayNotificationCountProvider.get(), (ZenModeController) this.tvSysUIComponentImpl.zenModeControllerImplProvider.get(), (StatusBarWindowStateController) this.tvSysUIComponentImpl.statusBarWindowStateControllerProvider.get(), (DreamOverlayStatusBarItemsProvider) this.tvSysUIComponentImpl.dreamOverlayStatusBarItemsProvider.get(), (DreamOverlayStateController) this.tvSysUIComponentImpl.dreamOverlayStateControllerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 4:
                        return (T) DreamOverlayModule_ProvidesDreamOverlayStatusBarViewFactory.providesDreamOverlayStatusBarView((DreamOverlayContainerView) this.dreamOverlayComponentImpl.providesDreamOverlayContainerViewProvider.get());
                    case 5:
                        DaggerTvGlobalRootComponent daggerTvGlobalRootComponent2 = this.tvGlobalRootComponent;
                        Provider provider2 = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
                        return (T) Integer.valueOf(daggerTvGlobalRootComponent2.mainResources().getDimensionPixelSize(R.dimen.default_burn_in_prevention_offset));
                    case 6:
                        DaggerTvGlobalRootComponent daggerTvGlobalRootComponent3 = this.tvGlobalRootComponent;
                        Provider provider3 = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
                        return (T) Integer.valueOf(daggerTvGlobalRootComponent3.mainResources().getDimensionPixelSize(R.dimen.dream_overlay_entry_y_offset));
                    case 7:
                        DaggerTvGlobalRootComponent daggerTvGlobalRootComponent4 = this.tvGlobalRootComponent;
                        Provider provider4 = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
                        return (T) Long.valueOf(daggerTvGlobalRootComponent4.mainResources().getInteger(R.integer.config_dreamOverlayInTranslationYDurationMs));
                    case 8:
                        T t = (T) this.dreamOverlayComponentImpl.lifecycleOwner.getLifecycle();
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ DreamOverlayComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, LifecycleOwner lifecycleOwner, ComplicationHostViewController complicationHostViewController, TouchInsetManager touchInsetManager, Set set, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, lifecycleOwner, complicationHostViewController, touchInsetManager, set);
        }

        public final BouncerSwipeTouchHandler bouncerSwipeTouchHandler() {
            return new BouncerSwipeTouchHandler(scrimManager(), (Optional) this.tvSysUIComponentImpl.optionalOfCentralSurfacesProvider.get(), (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), new BouncerSwipeModule$$ExternalSyntheticLambda0(), new BouncerSwipeModule$$ExternalSyntheticLambda0(), namedFlingAnimationUtils(), namedFlingAnimationUtils2(), namedFloat(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get());
        }

        public final DisplayHelper displayHelper() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            return new DisplayHelper(daggerTvGlobalRootComponent.context, (DisplayManager) daggerTvGlobalRootComponent.provideDisplayManagerProvider.get());
        }

        public final DreamLogger dreamLogger() {
            return new DreamLogger((LogBuffer) this.tvSysUIComponentImpl.provideDreamLogBufferProvider.get());
        }

        public final DreamOverlayAnimationsController dreamOverlayAnimationsController() {
            return new DreamOverlayAnimationsController((BlurUtils) this.tvSysUIComponentImpl.blurUtilsProvider.get(), this.complicationHostViewController, (DreamOverlayStatusBarViewController) this.dreamOverlayStatusBarViewControllerProvider.get(), (DreamOverlayStateController) this.tvSysUIComponentImpl.dreamOverlayStateControllerProvider.get(), namedInteger(), (DreamingToLockscreenTransitionViewModel) this.tvSysUIComponentImpl.dreamingToLockscreenTransitionViewModelProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), namedLong3(), namedLong4(), ((Integer) this.providesDreamInComplicationsTranslationYProvider.get()).intValue(), ((Long) this.providesDreamInComplicationsTranslationYDurationProvider.get()).longValue(), dreamLogger());
        }

        @Override // com.android.systemui.dreams.dagger.DreamOverlayComponent
        public final DreamOverlayContainerViewController getDreamOverlayContainerViewController() {
            return (DreamOverlayContainerViewController) this.dreamOverlayContainerViewControllerProvider.get();
        }

        @Override // com.android.systemui.dreams.dagger.DreamOverlayComponent
        public final DreamOverlayTouchMonitor getDreamOverlayTouchMonitor() {
            return new DreamOverlayTouchMonitor((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Lifecycle) this.providesLifecycleProvider.get(), new InputSessionComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dreamOverlayComponentImpl, 0), displayHelper(), setOfDreamTouchHandler());
        }

        public final void initialize(LifecycleOwner lifecycleOwner, ComplicationHostViewController complicationHostViewController, TouchInsetManager touchInsetManager, Set<DreamTouchHandler> set) {
            this.providesDreamOverlayContainerViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dreamOverlayComponentImpl, 1));
            this.providesDreamOverlayContentViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dreamOverlayComponentImpl, 2));
            this.providesDreamOverlayStatusBarViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dreamOverlayComponentImpl, 4));
            this.dreamOverlayStatusBarViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dreamOverlayComponentImpl, 3));
            this.providesMaxBurnInOffsetProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dreamOverlayComponentImpl, 5));
            this.providesDreamInComplicationsTranslationYProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dreamOverlayComponentImpl, 6));
            this.providesDreamInComplicationsTranslationYDurationProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dreamOverlayComponentImpl, 7));
            this.dreamOverlayContainerViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dreamOverlayComponentImpl, 0));
            this.providesLifecycleProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dreamOverlayComponentImpl, 8));
        }

        public final FlingAnimationUtils namedFlingAnimationUtils() {
            return BouncerSwipeModule_ProvidesSwipeToBouncerFlingAnimationUtilsOpeningFactory.providesSwipeToBouncerFlingAnimationUtilsOpening(this.tvSysUIComponentImpl.builderProvider4);
        }

        public final FlingAnimationUtils namedFlingAnimationUtils2() {
            return BouncerSwipeModule_ProvidesSwipeToBouncerFlingAnimationUtilsClosingFactory.providesSwipeToBouncerFlingAnimationUtilsClosing(this.tvSysUIComponentImpl.builderProvider4);
        }

        public final float namedFloat() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            Resources mainResources = daggerTvGlobalRootComponent.mainResources();
            TypedValue typedValue = new TypedValue();
            mainResources.getValue(R.dimen.dream_overlay_bouncer_start_region_screen_percentage, typedValue, true);
            return typedValue.getFloat();
        }

        public final int namedInteger() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return daggerTvGlobalRootComponent.mainResources().getDimensionPixelSize(R.dimen.dream_overlay_anim_blur_radius);
        }

        public final int namedInteger2() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return daggerTvGlobalRootComponent.mainResources().getDimensionPixelSize(R.dimen.dream_overlay_status_bar_height);
        }

        public final long namedLong() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return daggerTvGlobalRootComponent.mainResources().getInteger(R.integer.config_dreamOverlayBurnInProtectionUpdateIntervalMillis);
        }

        public final long namedLong2() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return daggerTvGlobalRootComponent.mainResources().getInteger(R.integer.config_dreamOverlayMillisUntilFullJitter);
        }

        public final long namedLong3() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return daggerTvGlobalRootComponent.mainResources().getInteger(R.integer.config_dreamOverlayInBlurDurationMs);
        }

        public final long namedLong4() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return daggerTvGlobalRootComponent.mainResources().getInteger(R.integer.config_dreamOverlayInComplicationsDurationMs);
        }

        public final DreamTouchHandler providesBouncerSwipeTouchHandler() {
            BouncerSwipeTouchHandler bouncerSwipeTouchHandler = bouncerSwipeTouchHandler();
            Preconditions.checkNotNullFromProvides(bouncerSwipeTouchHandler);
            return bouncerSwipeTouchHandler;
        }

        public final Set<DreamTouchHandler> providesDreamTouchHandlers() {
            Set<DreamTouchHandler> set = this.dreamTouchHandlers;
            if (set == null) {
                return new HashSet();
            }
            return set;
        }

        public final DreamTouchHandler providesNotificationShadeTouchHandler() {
            ShadeTouchHandler shadeTouchHandler = shadeTouchHandler();
            Preconditions.checkNotNullFromProvides(shadeTouchHandler);
            return shadeTouchHandler;
        }

        public final ScrimManager scrimManager() {
            return new ScrimManager((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), this.tvSysUIComponentImpl.namedScrimController(), this.tvSysUIComponentImpl.namedScrimController2(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get());
        }

        public final Set<DreamTouchHandler> setOfDreamTouchHandler() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(3);
            newSetBuilder.add(providesBouncerSwipeTouchHandler());
            newSetBuilder.add(providesNotificationShadeTouchHandler());
            newSetBuilder.addAll(providesDreamTouchHandlers());
            return newSetBuilder.build();
        }

        public final ShadeTouchHandler shadeTouchHandler() {
            return new ShadeTouchHandler((Optional) this.tvSysUIComponentImpl.optionalOfCentralSurfacesProvider.get(), namedInteger2());
        }

        public final TouchInsetManager.TouchInsetSession touchInsetSession() {
            return this.touchInsetManager.createSession();
        }

        private DreamOverlayComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, LifecycleOwner lifecycleOwner, ComplicationHostViewController complicationHostViewController, TouchInsetManager touchInsetManager, Set<DreamTouchHandler> set) {
            this.dreamOverlayComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.complicationHostViewController = complicationHostViewController;
            this.touchInsetManager = touchInsetManager;
            this.lifecycleOwner = lifecycleOwner;
            this.dreamTouchHandlers = set;
            initialize(lifecycleOwner, complicationHostViewController, touchInsetManager, set);
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class ExpandableNotificationRowComponentBuilder implements ExpandableNotificationRowComponent.Builder {
        public ExpandableNotificationRow expandableNotificationRow;
        public NotificationListContainer listContainer;
        public NotificationEntry notificationEntry;
        public ExpandableNotificationRow.OnExpandClickListener onExpandClickListener;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ ExpandableNotificationRowComponentBuilder(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder
        public final ExpandableNotificationRowComponent build() {
            Preconditions.checkBuilderRequirement(ExpandableNotificationRow.class, this.expandableNotificationRow);
            Preconditions.checkBuilderRequirement(NotificationEntry.class, this.notificationEntry);
            Preconditions.checkBuilderRequirement(ExpandableNotificationRow.OnExpandClickListener.class, this.onExpandClickListener);
            Preconditions.checkBuilderRequirement(NotificationListContainer.class, this.listContainer);
            return new ExpandableNotificationRowComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.expandableNotificationRow, this.notificationEntry, this.onExpandClickListener, this.listContainer, 0);
        }

        @Override // com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder
        public final ExpandableNotificationRowComponent.Builder expandableNotificationRow(ExpandableNotificationRow expandableNotificationRow) {
            expandableNotificationRow.getClass();
            this.expandableNotificationRow = expandableNotificationRow;
            return this;
        }

        @Override // com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder
        public final ExpandableNotificationRowComponent.Builder listContainer(NotificationListContainer notificationListContainer) {
            notificationListContainer.getClass();
            this.listContainer = notificationListContainer;
            return this;
        }

        @Override // com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder
        public final ExpandableNotificationRowComponent.Builder notificationEntry(NotificationEntry notificationEntry) {
            notificationEntry.getClass();
            this.notificationEntry = notificationEntry;
            return this;
        }

        @Override // com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder
        public final ExpandableNotificationRowComponent.Builder onExpandClickListener(NotificationPresenter notificationPresenter) {
            notificationPresenter.getClass();
            this.onExpandClickListener = notificationPresenter;
            return this;
        }

        private ExpandableNotificationRowComponentBuilder(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }

        @Override // com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder
        public final ExpandableNotificationRowComponentBuilder expandableNotificationRow(ExpandableNotificationRow expandableNotificationRow) {
            expandableNotificationRow.getClass();
            this.expandableNotificationRow = expandableNotificationRow;
            return this;
        }

        @Override // com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder
        public final ExpandableNotificationRowComponentBuilder listContainer(NotificationListContainer notificationListContainer) {
            notificationListContainer.getClass();
            this.listContainer = notificationListContainer;
            return this;
        }

        @Override // com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent.Builder
        public final ExpandableNotificationRowComponentBuilder notificationEntry(NotificationEntry notificationEntry) {
            notificationEntry.getClass();
            this.notificationEntry = notificationEntry;
            return this;
        }

        public final ExpandableNotificationRowComponentBuilder onExpandClickListener(ExpandableNotificationRow.OnExpandClickListener onExpandClickListener) {
            onExpandClickListener.getClass();
            this.onExpandClickListener = onExpandClickListener;
            return this;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class ExpandableNotificationRowComponentImpl implements ExpandableNotificationRowComponent {
        public final ExpandableNotificationRow expandableNotificationRow;
        public final ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl;
        public Provider expandableNotificationRowControllerProvider;
        public final NotificationListContainer listContainer;
        public final NotificationEntry notificationEntry;
        public final ExpandableNotificationRow.OnExpandClickListener onExpandClickListener;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl;
            public final int id;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.expandableNotificationRowComponentImpl = expandableNotificationRowComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                if (this.id == 0) {
                    ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl = this.expandableNotificationRowComponentImpl;
                    return (T) new ExpandableNotificationRowController(expandableNotificationRowComponentImpl.expandableNotificationRow, expandableNotificationRowComponentImpl.activatableNotificationViewController(), new RemoteInputViewSubcomponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.expandableNotificationRowComponentImpl, 0), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), this.expandableNotificationRowComponentImpl.notificationRowLogger(), this.expandableNotificationRowComponentImpl.listContainer, (SmartReplyConstants) this.tvSysUIComponentImpl.smartReplyConstantsProvider.get(), (SmartReplyController) this.tvSysUIComponentImpl.provideSmartReplyControllerProvider.get(), (PluginManager) this.tvGlobalRootComponent.providesPluginManagerProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), this.expandableNotificationRowComponentImpl.appNameString(), this.expandableNotificationRowComponentImpl.notificationKeyString(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (GroupMembershipManager) this.tvSysUIComponentImpl.provideGroupMembershipManagerProvider.get(), (GroupExpansionManager) this.tvSysUIComponentImpl.groupExpansionManagerImplProvider.get(), (RowContentBindStage) this.tvSysUIComponentImpl.rowContentBindStageProvider.get(), (NotificationLogger) this.tvSysUIComponentImpl.provideNotificationLoggerProvider.get(), (HeadsUpManager) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), this.expandableNotificationRowComponentImpl.onExpandClickListener, (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (NotificationGutsManager) this.tvSysUIComponentImpl.notificationGutsManagerProvider.get(), ((Boolean) this.tvSysUIComponentImpl.provideAllowNotificationLongPressProvider.get()).booleanValue(), (OnUserInteractionCallback) this.tvSysUIComponentImpl.onUserInteractionCallbackImplProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (FalsingCollector) this.tvSysUIComponentImpl.falsingCollectorImplProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (PeopleNotificationIdentifier) this.tvSysUIComponentImpl.peopleNotificationIdentifierImplProvider.get(), (Optional) this.tvSysUIComponentImpl.provideBubblesManagerProvider.get(), this.expandableNotificationRowComponentImpl.expandableNotificationRowDragController(), (NotificationDismissibilityProvider) this.tvSysUIComponentImpl.notificationDismissibilityProviderImplProvider.get(), (IStatusBarService) this.tvGlobalRootComponent.provideIStatusBarServiceProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get());
                }
                throw new AssertionError(this.id);
            }
        }

        public /* synthetic */ ExpandableNotificationRowComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, ExpandableNotificationRow expandableNotificationRow, NotificationEntry notificationEntry, ExpandableNotificationRow.OnExpandClickListener onExpandClickListener, NotificationListContainer notificationListContainer, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, expandableNotificationRow, notificationEntry, onExpandClickListener, notificationListContainer);
        }

        public final ActivatableNotificationViewController activatableNotificationViewController() {
            return new ActivatableNotificationViewController(this.expandableNotificationRow, expandableOutlineViewController(), (AccessibilityManager) this.tvGlobalRootComponent.provideAccessibilityManagerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get());
        }

        public final String appNameString() {
            return ExpandableNotificationRowComponent_ExpandableNotificationRowModule_ProvideAppNameFactory.provideAppName(this.tvGlobalRootComponent.context, statusBarNotification());
        }

        public final ExpandableNotificationRowDragController expandableNotificationRowDragController() {
            return new ExpandableNotificationRowDragController(this.tvGlobalRootComponent.context, (HeadsUpManager) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (ShadeController) this.tvSysUIComponentImpl.shadeControllerImplProvider.get(), (NotificationPanelLogger) this.tvSysUIComponentImpl.provideNotificationPanelLoggerProvider.get());
        }

        public final ExpandableOutlineViewController expandableOutlineViewController() {
            return new ExpandableOutlineViewController(this.expandableNotificationRow, expandableViewController());
        }

        public final ExpandableViewController expandableViewController() {
            return new ExpandableViewController(this.expandableNotificationRow);
        }

        @Override // com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent
        public final ExpandableNotificationRowController getExpandableNotificationRowController() {
            return (ExpandableNotificationRowController) this.expandableNotificationRowControllerProvider.get();
        }

        public final void initialize(ExpandableNotificationRow expandableNotificationRow, NotificationEntry notificationEntry, ExpandableNotificationRow.OnExpandClickListener onExpandClickListener, NotificationListContainer notificationListContainer) {
            this.expandableNotificationRowControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.expandableNotificationRowComponentImpl, 0));
        }

        public final String notificationKeyString() {
            String key = statusBarNotification().getKey();
            Preconditions.checkNotNullFromProvides(key);
            return key;
        }

        public final NotificationRowLogger notificationRowLogger() {
            return new NotificationRowLogger((LogBuffer) this.tvSysUIComponentImpl.provideNotificationsLogBufferProvider.get());
        }

        public final StatusBarNotification statusBarNotification() {
            StatusBarNotification statusBarNotification = this.notificationEntry.mSbn;
            Preconditions.checkNotNullFromProvides(statusBarNotification);
            return statusBarNotification;
        }

        private ExpandableNotificationRowComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, ExpandableNotificationRow expandableNotificationRow, NotificationEntry notificationEntry, ExpandableNotificationRow.OnExpandClickListener onExpandClickListener, NotificationListContainer notificationListContainer) {
            this.expandableNotificationRowComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.expandableNotificationRow = expandableNotificationRow;
            this.listContainer = notificationListContainer;
            this.notificationEntry = notificationEntry;
            this.onExpandClickListener = onExpandClickListener;
            initialize(expandableNotificationRow, notificationEntry, onExpandClickListener, notificationListContainer);
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class InputSessionComponentFactory implements InputSessionComponent.Factory {
        public final DreamOverlayComponentImpl dreamOverlayComponentImpl;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ InputSessionComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, DreamOverlayComponentImpl dreamOverlayComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, dreamOverlayComponentImpl);
        }

        @Override // com.android.systemui.dreams.touch.dagger.InputSessionComponent.Factory
        public final InputSessionComponent create(String str, InputChannelCompat$InputEventListener inputChannelCompat$InputEventListener, GestureDetector.OnGestureListener onGestureListener, boolean z) {
            str.getClass();
            inputChannelCompat$InputEventListener.getClass();
            onGestureListener.getClass();
            Boolean.valueOf(z).getClass();
            return new InputSessionComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.dreamOverlayComponentImpl, str, inputChannelCompat$InputEventListener, onGestureListener, Boolean.valueOf(z), 0);
        }

        private InputSessionComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, DreamOverlayComponentImpl dreamOverlayComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.dreamOverlayComponentImpl = dreamOverlayComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class InputSessionComponentImpl implements InputSessionComponent {
        public final DreamOverlayComponentImpl dreamOverlayComponentImpl;
        public final GestureDetector.OnGestureListener gestureListener;
        public final InputChannelCompat$InputEventListener inputEventListener;
        public final InputSessionComponentImpl inputSessionComponentImpl;
        public final String name;
        public final Boolean pilferOnGestureConsume;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ InputSessionComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, DreamOverlayComponentImpl dreamOverlayComponentImpl, String str, InputChannelCompat$InputEventListener inputChannelCompat$InputEventListener, GestureDetector.OnGestureListener onGestureListener, Boolean bool, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, dreamOverlayComponentImpl, str, inputChannelCompat$InputEventListener, onGestureListener, bool);
        }

        @Override // com.android.systemui.dreams.touch.dagger.InputSessionComponent
        public final InputSession getInputSession() {
            return new InputSession(this.name, this.inputEventListener, this.gestureListener, (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get(), this.pilferOnGestureConsume.booleanValue());
        }

        private InputSessionComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, DreamOverlayComponentImpl dreamOverlayComponentImpl, String str, InputChannelCompat$InputEventListener inputChannelCompat$InputEventListener, GestureDetector.OnGestureListener onGestureListener, Boolean bool) {
            this.inputSessionComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.dreamOverlayComponentImpl = dreamOverlayComponentImpl;
            this.name = str;
            this.inputEventListener = inputChannelCompat$InputEventListener;
            this.gestureListener = onGestureListener;
            this.pilferOnGestureConsume = bool;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class KeyguardBouncerComponentFactory implements KeyguardBouncerComponent.Factory {
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ KeyguardBouncerComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.keyguard.dagger.KeyguardBouncerComponent.Factory
        public final KeyguardBouncerComponent create(ViewGroup viewGroup) {
            viewGroup.getClass();
            return new KeyguardBouncerComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, viewGroup, 0);
        }

        private KeyguardBouncerComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class KeyguardBouncerComponentImpl implements KeyguardBouncerComponent {
        public final ViewGroup bouncerContainer;
        public Provider factoryProvider;
        public Provider factoryProvider2;
        public Provider keyguardBiometricViewControllerProvider;
        public final KeyguardBouncerComponentImpl keyguardBouncerComponentImpl;
        public Provider keyguardSecSecurityContainerControllerProvider;
        public Provider keyguardSecurityViewFlipperControllerProvider;
        public Provider providesCarrierTextProvider;
        public Provider providesKeyguardArrowViewProvider;
        public Provider providesKeyguardBiometricViewProvider;
        public Provider providesKeyguardCarrierTextViewProvider;
        public Provider providesKeyguardPunchHoleVIViewProvider;
        public Provider providesKeyguardSecSecurityContainerProvider;
        public Provider providesKeyguardSecurityContainerProvider;
        public Provider providesKeyguardSecurityViewFlipperProvider;
        public Provider providesOptionalSidefpsControllerProvider;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final KeyguardBouncerComponentImpl keyguardBouncerComponentImpl;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, KeyguardBouncerComponentImpl keyguardBouncerComponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.keyguardBouncerComponentImpl = keyguardBouncerComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        return (T) KeyguardSecSecurityContainerController_Factory.newInstance((KeyguardSecSecurityContainer) this.keyguardBouncerComponentImpl.providesKeyguardSecSecurityContainerProvider.get(), (AdminSecondaryLockScreenController.Factory) this.keyguardBouncerComponentImpl.factoryProvider.get(), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardSecurityModel) this.tvSysUIComponentImpl.keyguardSecurityModelProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardSecurityViewFlipperController) this.keyguardBouncerComponentImpl.keyguardSecurityViewFlipperControllerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (FalsingCollector) this.tvSysUIComponentImpl.falsingCollectorImplProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (UserSwitcherController) this.tvSysUIComponentImpl.userSwitcherControllerProvider.get(), (DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl(), (SessionTracker) this.tvSysUIComponentImpl.sessionTrackerProvider.get(), (Optional) this.keyguardBouncerComponentImpl.providesOptionalSidefpsControllerProvider.get(), this.keyguardBouncerComponentImpl.falsingA11yDelegate(), (TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get(), (ViewMediatorCallback) this.tvSysUIComponentImpl.providesViewMediatorCallbackProvider.get(), (AudioManager) this.tvGlobalRootComponent.provideAudioManagerProvider.get(), (KeyguardFaceAuthInteractor) this.tvSysUIComponentImpl.systemUIKeyguardFaceAuthInteractorProvider.get(), (DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (InputMethodManager) this.tvGlobalRootComponent.provideInputMethodManagerProvider.get(), (AlarmManager) this.tvGlobalRootComponent.provideAlarmManagerProvider.get(), (SecRotationWatcher) this.tvSysUIComponentImpl.secRotationWatcherProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), this.keyguardBouncerComponentImpl.keyguardCarrierTextViewController(), this.keyguardBouncerComponentImpl.keyguardPunchHoleVIViewController(), this.keyguardBouncerComponentImpl.keyguardArrowViewControllerFactory(), (KeyguardBiometricViewController) this.keyguardBouncerComponentImpl.keyguardBiometricViewControllerProvider.get(), this.keyguardBouncerComponentImpl.keyguardPluginControllerImplFactory(), (DualDarInnerLockScreenController.Factory) this.keyguardBouncerComponentImpl.factoryProvider2.get());
                    case 1:
                        return (T) KeyguardBouncerModule_ProvidesKeyguardSecSecurityContainerFactory.providesKeyguardSecSecurityContainer((LayoutInflater) this.tvGlobalRootComponent.providerLayoutInflaterProvider.get(), this.keyguardBouncerComponentImpl.bouncerContainer);
                    case 2:
                        return (T) new AdminSecondaryLockScreenController.Factory(this.tvGlobalRootComponent.context, (KeyguardSecurityContainer) this.keyguardBouncerComponentImpl.providesKeyguardSecurityContainerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get());
                    case 3:
                        return (T) KeyguardBouncerModule_ProvidesKeyguardSecurityContainerFactory.providesKeyguardSecurityContainer((LayoutInflater) this.tvGlobalRootComponent.providerLayoutInflaterProvider.get(), this.keyguardBouncerComponentImpl.bouncerContainer);
                    case 4:
                        return (T) new KeyguardSecurityViewFlipperController((KeyguardSecurityViewFlipper) this.keyguardBouncerComponentImpl.providesKeyguardSecurityViewFlipperProvider.get(), (LayoutInflater) this.tvGlobalRootComponent.providerLayoutInflaterProvider.get(), (AsyncLayoutInflater) this.tvGlobalRootComponent.provideAsyncLayoutInflaterProvider.get(), this.keyguardBouncerComponentImpl.keyguardInputViewControllerFactory(), this.keyguardBouncerComponentImpl.emergencyButtonControllerFactory(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 5:
                        T t = (T) ((KeyguardSecurityViewFlipper) ((KeyguardSecSecurityContainer) this.keyguardBouncerComponentImpl.providesKeyguardSecSecurityContainerProvider.get()).findViewById(R.id.view_flipper));
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 6:
                        Provider provider = this.tvSysUIComponentImpl.sideFpsControllerProvider;
                        T t2 = (T) Optional.empty();
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 7:
                        T t3 = (T) ((KeyguardCarrierTextView) ((KeyguardSecSecurityContainer) this.keyguardBouncerComponentImpl.providesKeyguardSecSecurityContainerProvider.get()).findViewById(R.id.bouncer_status_bar_area_root));
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    case 8:
                        T t4 = (T) ((CarrierText) ((KeyguardSecSecurityContainer) this.keyguardBouncerComponentImpl.providesKeyguardSecSecurityContainerProvider.get()).findViewById(R.id.bouncer_carrier_text));
                        Preconditions.checkNotNullFromProvides(t4);
                        return t4;
                    case 9:
                        T t5 = (T) ((KeyguardPunchHoleVIView) ((KeyguardSecSecurityContainer) this.keyguardBouncerComponentImpl.providesKeyguardSecSecurityContainerProvider.get()).findViewById(R.id.keyguard_punch_hole_vi_view));
                        Preconditions.checkNotNullFromProvides(t5);
                        return t5;
                    case 10:
                        T t6 = (T) ((KeyguardArrowView) ((KeyguardSecSecurityContainer) this.keyguardBouncerComponentImpl.providesKeyguardSecSecurityContainerProvider.get()).findViewById(R.id.keyguard_arrow_view));
                        Preconditions.checkNotNullFromProvides(t6);
                        return t6;
                    case 11:
                        return (T) new KeyguardBiometricViewController((KeyguardBiometricView) this.keyguardBouncerComponentImpl.providesKeyguardBiometricViewProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (AccessibilityManager) this.tvGlobalRootComponent.provideAccessibilityManagerProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), (SecRotationWatcher) this.tvSysUIComponentImpl.secRotationWatcherProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (PluginLockStarManager) this.tvSysUIComponentImpl.pluginLockStarManagerProvider.get());
                    case 12:
                        T t7 = (T) ((KeyguardBiometricView) ((KeyguardSecSecurityContainer) this.keyguardBouncerComponentImpl.providesKeyguardSecSecurityContainerProvider.get()).findViewById(R.id.keyguard_biometric_view));
                        Preconditions.checkNotNullFromProvides(t7);
                        return t7;
                    case 13:
                        return (T) new DualDarInnerLockScreenController.Factory(this.tvGlobalRootComponent.context, (KeyguardSecSecurityContainer) this.keyguardBouncerComponentImpl.providesKeyguardSecSecurityContainerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (LayoutInflater) this.tvGlobalRootComponent.providerLayoutInflaterProvider.get(), this.keyguardBouncerComponentImpl.keyguardInputViewControllerFactory());
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ KeyguardBouncerComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, ViewGroup viewGroup, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, viewGroup);
        }

        public final CarrierTextController carrierTextController() {
            return new CarrierTextController((CarrierText) this.providesCarrierTextProvider.get(), this.tvSysUIComponentImpl.carrierTextManagerBuilder(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get());
        }

        public final EmergencyButtonController.Factory emergencyButtonControllerFactory() {
            return new EmergencyButtonController.Factory((ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (InputMethodManager) this.tvGlobalRootComponent.provideInputMethodManagerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), (ActivityTaskManager) this.tvGlobalRootComponent.provideActivityTaskManagerProvider.get(), (ShadeController) this.tvSysUIComponentImpl.shadeControllerImplProvider.get(), (TelecomManager) this.tvGlobalRootComponent.provideTelecomManagerProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get());
        }

        public final FalsingA11yDelegate falsingA11yDelegate() {
            return new FalsingA11yDelegate((FalsingCollector) this.tvSysUIComponentImpl.falsingCollectorImplProvider.get());
        }

        @Override // com.android.keyguard.dagger.KeyguardBouncerComponent
        public final KeyguardSecSecurityContainerController getSecurityContainerController() {
            return (KeyguardSecSecurityContainerController) this.keyguardSecSecurityContainerControllerProvider.get();
        }

        public final void initialize(ViewGroup viewGroup) {
            this.providesKeyguardSecSecurityContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardBouncerComponentImpl, 1));
            this.providesKeyguardSecurityContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardBouncerComponentImpl, 3));
            this.factoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardBouncerComponentImpl, 2));
            this.providesKeyguardSecurityViewFlipperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardBouncerComponentImpl, 5));
            this.keyguardSecurityViewFlipperControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardBouncerComponentImpl, 4));
            this.providesOptionalSidefpsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardBouncerComponentImpl, 6));
            this.providesKeyguardCarrierTextViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardBouncerComponentImpl, 7));
            this.providesCarrierTextProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardBouncerComponentImpl, 8));
            this.providesKeyguardPunchHoleVIViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardBouncerComponentImpl, 9));
            this.providesKeyguardArrowViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardBouncerComponentImpl, 10));
            this.providesKeyguardBiometricViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardBouncerComponentImpl, 12));
            this.keyguardBiometricViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardBouncerComponentImpl, 11));
            this.factoryProvider2 = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardBouncerComponentImpl, 13));
            this.keyguardSecSecurityContainerControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardBouncerComponentImpl, 0));
        }

        public final Object keyguardArrowViewControllerFactory() {
            return new KeyguardArrowViewController.Factory((KeyguardArrowView) this.providesKeyguardArrowViewProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (ViewMediatorCallback) this.tvSysUIComponentImpl.providesViewMediatorCallbackProvider.get());
        }

        public final KeyguardCarrierTextViewController keyguardCarrierTextViewController() {
            return new KeyguardCarrierTextViewController((KeyguardCarrierTextView) this.providesKeyguardCarrierTextViewProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), carrierTextController(), (IndicatorGardenPresenter) this.tvSysUIComponentImpl.indicatorGardenPresenterProvider.get());
        }

        public final KeyguardInputViewController.Factory keyguardInputViewControllerFactory() {
            return KeyguardInputViewController_Factory_Factory.newInstance((KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SecRotationWatcher) this.tvSysUIComponentImpl.secRotationWatcherProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (VibrationUtil) this.tvGlobalRootComponent.vibrationUtilProvider.get(), (AccessibilityManager) this.tvGlobalRootComponent.provideAccessibilityManagerProvider.get(), keyguardTouchSwipeDetector(), (WifiManager) this.tvGlobalRootComponent.provideWifiManagerProvider.get(), (NetworkController) this.tvSysUIComponentImpl.networkControllerImplProvider.get(), (ScreenLifecycle) this.tvGlobalRootComponent.screenLifecycleProvider.get(), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), (LatencyTracker) this.tvGlobalRootComponent.provideLatencyTrackerProvider.get(), this.tvSysUIComponentImpl.keyguardMessageAreaControllerFactory(), (InputMethodManager) this.tvGlobalRootComponent.provideInputMethodManagerProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), this.tvGlobalRootComponent.mainResources(), liftToActivateListener(), (TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get(), (FalsingCollector) this.tvSysUIComponentImpl.falsingCollectorImplProvider.get(), emergencyButtonControllerFactory(), (DevicePostureController) this.tvSysUIComponentImpl.devicePostureControllerImplProvider.get(), (KeyguardViewController) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
        }

        public final KeyguardPluginControllerImpl.Factory keyguardPluginControllerImplFactory() {
            return new KeyguardPluginControllerImpl.Factory(this.tvGlobalRootComponent.context, (ViewMediatorCallback) this.tvSysUIComponentImpl.providesViewMediatorCallbackProvider.get(), (DesktopManager) this.tvSysUIComponentImpl.provideDesktopManagerProvider.get(), (SubScreenManager) this.tvSysUIComponentImpl.subScreenManagerProvider.get(), (LatencyTracker) this.tvGlobalRootComponent.provideLatencyTrackerProvider.get(), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
        }

        public final KeyguardPunchHoleVIViewController keyguardPunchHoleVIViewController() {
            return C0158KeyguardPunchHoleVIViewController_Factory.newInstance((KeyguardPunchHoleVIView) this.providesKeyguardPunchHoleVIViewProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get(), (SecRotationWatcher) this.tvSysUIComponentImpl.secRotationWatcherProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (KeyguardEditModeController) this.tvSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get(), (PluginLockStarManager) this.tvSysUIComponentImpl.pluginLockStarManagerProvider.get());
        }

        public final KeyguardTouchSwipeDetector keyguardTouchSwipeDetector() {
            return new KeyguardTouchSwipeDetector(this.tvGlobalRootComponent.context, (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardTouchDymLockInjector) this.tvSysUIComponentImpl.keyguardTouchDymLockInjectorProvider.get(), (KeyguardTouchSecurityInjector) this.tvSysUIComponentImpl.keyguardTouchSecurityInjectorProvider.get());
        }

        public final Object liftToActivateListener() {
            return new LiftToActivateListener((AccessibilityManager) this.tvGlobalRootComponent.provideAccessibilityManagerProvider.get());
        }

        private KeyguardBouncerComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, ViewGroup viewGroup) {
            this.keyguardBouncerComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.bouncerContainer = viewGroup;
            initialize(viewGroup);
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class KeyguardQsUserSwitchComponentFactory implements KeyguardQsUserSwitchComponent.Factory {
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ KeyguardQsUserSwitchComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.keyguard.dagger.KeyguardQsUserSwitchComponent.Factory
        public final KeyguardQsUserSwitchComponent build(FrameLayout frameLayout) {
            frameLayout.getClass();
            return new KeyguardQsUserSwitchComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, frameLayout, 0);
        }

        private KeyguardQsUserSwitchComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class KeyguardQsUserSwitchComponentImpl implements KeyguardQsUserSwitchComponent {
        public final KeyguardQsUserSwitchComponentImpl keyguardQsUserSwitchComponentImpl;
        public Provider keyguardQsUserSwitchControllerProvider;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;
        public final FrameLayout userAvatarContainer;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final KeyguardQsUserSwitchComponentImpl keyguardQsUserSwitchComponentImpl;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, KeyguardQsUserSwitchComponentImpl keyguardQsUserSwitchComponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.keyguardQsUserSwitchComponentImpl = keyguardQsUserSwitchComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                if (this.id == 0) {
                    FrameLayout frameLayout = this.keyguardQsUserSwitchComponentImpl.userAvatarContainer;
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
                    return (T) new KeyguardQsUserSwitchController(frameLayout, daggerTvGlobalRootComponent.context, daggerTvGlobalRootComponent.mainResources(), (UserSwitcherController) this.tvSysUIComponentImpl.userSwitcherControllerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (ScreenOffAnimationController) this.tvSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (UserSwitchDialogController) this.tvSysUIComponentImpl.userSwitchDialogControllerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get());
                }
                throw new AssertionError(this.id);
            }
        }

        public /* synthetic */ KeyguardQsUserSwitchComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, FrameLayout frameLayout, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, frameLayout);
        }

        @Override // com.android.keyguard.dagger.KeyguardQsUserSwitchComponent
        public final KeyguardQsUserSwitchController getKeyguardQsUserSwitchController() {
            return (KeyguardQsUserSwitchController) this.keyguardQsUserSwitchControllerProvider.get();
        }

        public final void initialize(FrameLayout frameLayout) {
            this.keyguardQsUserSwitchControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardQsUserSwitchComponentImpl, 0));
        }

        private KeyguardQsUserSwitchComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, FrameLayout frameLayout) {
            this.keyguardQsUserSwitchComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.userAvatarContainer = frameLayout;
            initialize(frameLayout);
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class KeyguardStatusBarViewComponentFactory implements KeyguardStatusBarViewComponent.Factory {
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ KeyguardStatusBarViewComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.keyguard.dagger.KeyguardStatusBarViewComponent.Factory
        public final KeyguardStatusBarViewComponent build(KeyguardStatusBarView keyguardStatusBarView, ShadeViewStateProvider shadeViewStateProvider) {
            keyguardStatusBarView.getClass();
            shadeViewStateProvider.getClass();
            return new KeyguardStatusBarViewComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, keyguardStatusBarView, shadeViewStateProvider, 0);
        }

        private KeyguardStatusBarViewComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class KeyguardStatusBarViewComponentImpl implements KeyguardStatusBarViewComponent {
        public Provider getBatteryMeterViewProvider;
        public Provider getCarrierTextProvider;
        public Provider getStatusIconContainerProvider;
        public final KeyguardStatusBarViewComponentImpl keyguardStatusBarViewComponentImpl;
        public Provider provideNetspeedViewControllerProvider;
        public final ShadeViewStateProvider shadeViewStateProvider;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;
        public final KeyguardStatusBarView view;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final KeyguardStatusBarViewComponentImpl keyguardStatusBarViewComponentImpl;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, KeyguardStatusBarViewComponentImpl keyguardStatusBarViewComponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.keyguardStatusBarViewComponentImpl = keyguardStatusBarViewComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                int i = this.id;
                if (i != 0) {
                    if (i != 1) {
                        if (i != 2) {
                            if (i == 3) {
                                T t = (T) ((StatusIconContainer) this.keyguardStatusBarViewComponentImpl.view.findViewById(R.id.statusIcons));
                                Preconditions.checkNotNullFromProvides(t);
                                return t;
                            }
                            throw new AssertionError(this.id);
                        }
                        return (T) KeyguardStatusBarViewModule_ProvideNetspeedViewControllerFactory.provideNetspeedViewController(this.keyguardStatusBarViewComponentImpl.view, (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (IndicatorCutoutUtil) this.tvSysUIComponentImpl.indicatorCutoutUtilProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    }
                    T t2 = (T) ((BatteryMeterView) this.keyguardStatusBarViewComponentImpl.view.findViewById(R.id.battery));
                    Preconditions.checkNotNullFromProvides(t2);
                    return t2;
                }
                T t3 = (T) ((CarrierText) this.keyguardStatusBarViewComponentImpl.view.findViewById(R.id.keyguard_carrier_text));
                Preconditions.checkNotNullFromProvides(t3);
                return t3;
            }
        }

        public /* synthetic */ KeyguardStatusBarViewComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, KeyguardStatusBarView keyguardStatusBarView, ShadeViewStateProvider shadeViewStateProvider, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, keyguardStatusBarView, shadeViewStateProvider);
        }

        public final BatteryMeterViewController batteryMeterViewController() {
            return new BatteryMeterViewController((BatteryMeterView) this.getBatteryMeterViewProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (ContentResolver) this.tvGlobalRootComponent.provideContentResolverProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (BatteryController) this.tvSysUIComponentImpl.provideBatteryControllerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (SlimIndicatorViewMediator) this.tvSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get());
        }

        public final CarrierTextController carrierTextController() {
            return new CarrierTextController((CarrierText) this.getCarrierTextProvider.get(), this.tvSysUIComponentImpl.carrierTextManagerBuilder(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get());
        }

        @Override // com.android.keyguard.dagger.KeyguardStatusBarViewComponent
        public final KeyguardStatusBarViewController getKeyguardStatusBarViewController() {
            return new KeyguardStatusBarViewController(this.view, carrierTextController(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (SystemStatusAnimationScheduler) this.tvSysUIComponentImpl.provideSystemStatusAnimationSchedulerProvider.get(), (BatteryController) this.tvSysUIComponentImpl.provideBatteryControllerProvider.get(), (UserInfoController) this.tvSysUIComponentImpl.userInfoControllerImplProvider.get(), (StatusBarIconController) this.tvSysUIComponentImpl.statusBarIconControllerImplProvider.get(), (StatusBarIconController.TintedIconManager.Factory) this.tvSysUIComponentImpl.factoryProvider7.get(), batteryMeterViewController(), this.shadeViewStateProvider, (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (BiometricUnlockController) this.tvSysUIComponentImpl.biometricUnlockControllerProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (StatusBarContentInsetsProvider) this.tvSysUIComponentImpl.statusBarContentInsetsProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), statusBarUserChipViewModel(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), this.tvSysUIComponentImpl.keyguardLogger(), (NotificationMediaManager) this.tvSysUIComponentImpl.provideNotificationMediaManagerProvider.get(), (IndicatorGardenPresenter) this.tvSysUIComponentImpl.indicatorGardenPresenterProvider.get(), (PluginLockMediator) this.tvSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (NetspeedViewController) this.provideNetspeedViewControllerProvider.get(), knoxStatusBarControlViewModel(), statusIconContainerController(), (OngoingCallController) this.tvSysUIComponentImpl.provideOngoingCallControllerProvider.get(), keyguardStatusBarWallpaperHelper(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (DesktopManager) this.tvSysUIComponentImpl.provideDesktopManagerProvider.get(), (TwoPhoneModeIconController) this.tvSysUIComponentImpl.twoPhoneModeIconControllerProvider.get(), slimIndicatorKeyguardCarrierTextHelper(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (IndicatorCutoutUtil) this.tvSysUIComponentImpl.indicatorCutoutUtilProvider.get());
        }

        public final void initialize(KeyguardStatusBarView keyguardStatusBarView, ShadeViewStateProvider shadeViewStateProvider) {
            this.getCarrierTextProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardStatusBarViewComponentImpl, 0));
            this.getBatteryMeterViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardStatusBarViewComponentImpl, 1));
            this.provideNetspeedViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardStatusBarViewComponentImpl, 2));
            this.getStatusIconContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardStatusBarViewComponentImpl, 3));
        }

        public final KeyguardStatusBarWallpaperHelper keyguardStatusBarWallpaperHelper() {
            return new KeyguardStatusBarWallpaperHelper((WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (WallpaperEventNotifier) this.tvSysUIComponentImpl.wallpaperEventNotifierProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardWallpaper) this.tvSysUIComponentImpl.keyguardWallpaperControllerProvider.get());
        }

        public final KnoxStatusBarControlViewModel knoxStatusBarControlViewModel() {
            return new KnoxStatusBarControlViewModel((KnoxStatusBarControlInteractor) this.tvSysUIComponentImpl.knoxStatusBarControlInteractorProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (DarkIconDispatcher) this.tvSysUIComponentImpl.darkIconDispatcherImplProvider.get());
        }

        public final SlimIndicatorKeyguardCarrierTextHelper slimIndicatorKeyguardCarrierTextHelper() {
            return new SlimIndicatorKeyguardCarrierTextHelper((SlimIndicatorViewMediator) this.tvSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get());
        }

        public final StatusBarUserChipViewModel statusBarUserChipViewModel() {
            return new StatusBarUserChipViewModel((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (UserInteractor) this.tvSysUIComponentImpl.userInteractorProvider.get());
        }

        public final StatusIconContainerController statusIconContainerController() {
            return new StatusIconContainerController((StatusIconContainer) this.getStatusIconContainerProvider.get(), this.tvGlobalRootComponent.context, (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (IndicatorGardenPresenter) this.tvSysUIComponentImpl.indicatorGardenPresenterProvider.get(), (IndicatorCutoutUtil) this.tvSysUIComponentImpl.indicatorCutoutUtilProvider.get());
        }

        private KeyguardStatusBarViewComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, KeyguardStatusBarView keyguardStatusBarView, ShadeViewStateProvider shadeViewStateProvider) {
            this.keyguardStatusBarViewComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.view = keyguardStatusBarView;
            this.shadeViewStateProvider = shadeViewStateProvider;
            initialize(keyguardStatusBarView, shadeViewStateProvider);
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class KeyguardStatusViewComponentFactory implements KeyguardStatusViewComponent.Factory {
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ KeyguardStatusViewComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.keyguard.dagger.KeyguardStatusViewComponent.Factory
        public final KeyguardStatusViewComponent build(KeyguardStatusView keyguardStatusView) {
            keyguardStatusView.getClass();
            return new KeyguardStatusViewComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, keyguardStatusView, 0);
        }

        private KeyguardStatusViewComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class KeyguardStatusViewComponentImpl implements KeyguardStatusViewComponent {
        public Provider keyguardSliceViewControllerProvider;
        public final KeyguardStatusViewComponentImpl keyguardStatusViewComponentImpl;
        public final KeyguardStatusView presentation;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final KeyguardStatusViewComponentImpl keyguardStatusViewComponentImpl;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, KeyguardStatusViewComponentImpl keyguardStatusViewComponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.keyguardStatusViewComponentImpl = keyguardStatusViewComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                if (this.id == 0) {
                    return (T) new KeyguardSliceViewController(this.keyguardStatusViewComponentImpl.keyguardSliceView(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get());
                }
                throw new AssertionError(this.id);
            }
        }

        public /* synthetic */ KeyguardStatusViewComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, KeyguardStatusView keyguardStatusView, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, keyguardStatusView);
        }

        public final ClockEventController clockEventController() {
            KeyguardInteractor keyguardInteractor = (KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get();
            KeyguardTransitionInteractor keyguardTransitionInteractor = (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get();
            BroadcastDispatcher broadcastDispatcher = (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get();
            BatteryController batteryController = (BatteryController) this.tvSysUIComponentImpl.provideBatteryControllerProvider.get();
            KeyguardUpdateMonitor keyguardUpdateMonitor = (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get();
            ConfigurationController configurationController = (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get();
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            Resources mainResources = daggerTvGlobalRootComponent.mainResources();
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent2 = this.tvGlobalRootComponent;
            return new ClockEventController(keyguardInteractor, keyguardTransitionInteractor, broadcastDispatcher, batteryController, keyguardUpdateMonitor, configurationController, mainResources, daggerTvGlobalRootComponent2.context, (DelayableExecutor) daggerTvGlobalRootComponent2.provideMainDelayableExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (LogBuffer) this.tvSysUIComponentImpl.provideKeyguardSmallClockLogProvider.get(), (LogBuffer) this.tvSysUIComponentImpl.provideKeyguardLargeClockLogProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
        }

        @Override // com.android.keyguard.dagger.KeyguardStatusViewComponent
        public final KeyguardClockSwitchController getKeyguardClockSwitchController() {
            return new KeyguardClockSwitchController(keyguardClockSwitch(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ClockRegistry) this.tvSysUIComponentImpl.getClockRegistryProvider.get(), (KeyguardSliceViewController) this.keyguardSliceViewControllerProvider.get(), (NotificationIconAreaController) this.tvSysUIComponentImpl.notificationIconAreaControllerProvider.get(), (LockscreenSmartspaceController) this.tvSysUIComponentImpl.lockscreenSmartspaceControllerProvider.get(), (KeyguardUnlockAnimationController) this.tvSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), clockEventController(), (LogBuffer) this.tvSysUIComponentImpl.provideKeyguardClockLogProvider.get());
        }

        @Override // com.android.keyguard.dagger.KeyguardStatusViewComponent
        public final KeyguardStatusViewController getKeyguardStatusViewController() {
            return injectKeyguardStatusViewController(KeyguardStatusViewController_Factory.newInstance((DcmMascotViewContainer) this.tvSysUIComponentImpl.dcmMascotViewContainerProvider.get(), this.presentation, (KeyguardSliceViewController) this.keyguardSliceViewControllerProvider.get(), getKeyguardClockSwitchController(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (ScreenOffAnimationController) this.tvSysUIComponentImpl.screenOffAnimationControllerProvider.get(), this.tvSysUIComponentImpl.keyguardLogger(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (InteractionJankMonitor) this.tvGlobalRootComponent.provideInteractionJankMonitorProvider.get()));
        }

        public final void initialize(KeyguardStatusView keyguardStatusView) {
            this.keyguardSliceViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardStatusViewComponentImpl, 0));
        }

        public final KeyguardStatusViewController injectKeyguardStatusViewController(KeyguardStatusViewController keyguardStatusViewController) {
            keyguardStatusViewController.mPluginAODManagerLazy = DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginAODManagerProvider);
            return keyguardStatusViewController;
        }

        public final KeyguardClockSwitch keyguardClockSwitch() {
            KeyguardClockSwitch keyguardClockSwitch = (KeyguardClockSwitch) this.presentation.findViewById(R.id.keyguard_clock_container);
            Preconditions.checkNotNullFromProvides(keyguardClockSwitch);
            return keyguardClockSwitch;
        }

        public final KeyguardSliceView keyguardSliceView() {
            KeyguardSliceView keyguardSliceView = (KeyguardSliceView) keyguardClockSwitch().findViewById(R.id.keyguard_slice_view);
            Preconditions.checkNotNullFromProvides(keyguardSliceView);
            return keyguardSliceView;
        }

        private KeyguardStatusViewComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, KeyguardStatusView keyguardStatusView) {
            this.keyguardStatusViewComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.presentation = keyguardStatusView;
            initialize(keyguardStatusView);
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class KeyguardUserSwitcherComponentFactory implements KeyguardUserSwitcherComponent.Factory {
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ KeyguardUserSwitcherComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.keyguard.dagger.KeyguardUserSwitcherComponent.Factory
        public final KeyguardUserSwitcherComponent build(KeyguardUserSwitcherView keyguardUserSwitcherView) {
            keyguardUserSwitcherView.getClass();
            return new KeyguardUserSwitcherComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, keyguardUserSwitcherView, 0);
        }

        private KeyguardUserSwitcherComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class KeyguardUserSwitcherComponentImpl implements KeyguardUserSwitcherComponent {
        public final KeyguardUserSwitcherComponentImpl keyguardUserSwitcherComponentImpl;
        public Provider keyguardUserSwitcherControllerProvider;
        public final KeyguardUserSwitcherView keyguardUserSwitcherView;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final KeyguardUserSwitcherComponentImpl keyguardUserSwitcherComponentImpl;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, KeyguardUserSwitcherComponentImpl keyguardUserSwitcherComponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.keyguardUserSwitcherComponentImpl = keyguardUserSwitcherComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                if (this.id == 0) {
                    KeyguardUserSwitcherView keyguardUserSwitcherView = this.keyguardUserSwitcherComponentImpl.keyguardUserSwitcherView;
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
                    return (T) new KeyguardUserSwitcherController(keyguardUserSwitcherView, daggerTvGlobalRootComponent.context, daggerTvGlobalRootComponent.mainResources(), (LayoutInflater) this.tvGlobalRootComponent.providerLayoutInflaterProvider.get(), (ScreenLifecycle) this.tvGlobalRootComponent.screenLifecycleProvider.get(), (UserSwitcherController) this.tvSysUIComponentImpl.userSwitcherControllerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (ScreenOffAnimationController) this.tvSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get());
                }
                throw new AssertionError(this.id);
            }
        }

        public /* synthetic */ KeyguardUserSwitcherComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, KeyguardUserSwitcherView keyguardUserSwitcherView, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, keyguardUserSwitcherView);
        }

        @Override // com.android.keyguard.dagger.KeyguardUserSwitcherComponent
        public final KeyguardUserSwitcherController getKeyguardUserSwitcherController() {
            return (KeyguardUserSwitcherController) this.keyguardUserSwitcherControllerProvider.get();
        }

        public final void initialize(KeyguardUserSwitcherView keyguardUserSwitcherView) {
            this.keyguardUserSwitcherControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.keyguardUserSwitcherComponentImpl, 0));
        }

        private KeyguardUserSwitcherComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, KeyguardUserSwitcherView keyguardUserSwitcherView) {
            this.keyguardUserSwitcherComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.keyguardUserSwitcherView = keyguardUserSwitcherView;
            initialize(keyguardUserSwitcherView);
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class MediaProjectionAppSelectorComponentFactory implements MediaProjectionAppSelectorComponent.Factory {
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ MediaProjectionAppSelectorComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorComponent.Factory
        public final MediaProjectionAppSelectorComponent create(MediaProjectionAppSelectorActivity mediaProjectionAppSelectorActivity, MediaProjectionAppSelectorView mediaProjectionAppSelectorView, MediaProjectionAppSelectorResultHandler mediaProjectionAppSelectorResultHandler) {
            mediaProjectionAppSelectorActivity.getClass();
            mediaProjectionAppSelectorView.getClass();
            mediaProjectionAppSelectorResultHandler.getClass();
            return new MediaProjectionAppSelectorComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, mediaProjectionAppSelectorActivity, mediaProjectionAppSelectorView, mediaProjectionAppSelectorResultHandler, 0);
        }

        private MediaProjectionAppSelectorComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class MediaProjectionAppSelectorComponentImpl implements MediaProjectionAppSelectorComponent {
        public final MediaProjectionAppSelectorActivity activity;
        public Provider activityTaskManagerLabelLoaderProvider;
        public Provider activityTaskManagerThumbnailLoaderProvider;
        public Provider bindAppIconLoaderProvider;
        public Provider bindIconFactoryProvider;
        public Provider bindRecentTaskLabelLoaderProvider;
        public Provider bindRecentTaskListProvider;
        public Provider bindRecentTaskThumbnailLoaderProvider;
        public Provider factoryProvider;
        public Provider factoryProvider2;
        public Provider hostUserHandleProvider;
        public Provider iconLoaderLibAppIconLoaderProvider;
        public final MediaProjectionAppSelectorComponentImpl mediaProjectionAppSelectorComponentImpl;
        public Provider mediaProjectionAppSelectorControllerProvider;
        public Provider mediaProjectionBlockerEmptyStateProvider;
        public Provider mediaProjectionRecentsViewControllerProvider;
        public Provider provideAppSelectorComponentNameProvider;
        public Provider provideCallerPackageNameProvider;
        public Provider provideCoroutineScopeProvider;
        public final MediaProjectionAppSelectorResultHandler resultHandler;
        public Provider shellRecentTaskListProvider;
        public Provider taskPreviewSizeProvider;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;
        public final MediaProjectionAppSelectorView view;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final MediaProjectionAppSelectorComponentImpl mediaProjectionAppSelectorComponentImpl;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, MediaProjectionAppSelectorComponentImpl mediaProjectionAppSelectorComponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.mediaProjectionAppSelectorComponentImpl = mediaProjectionAppSelectorComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        return (T) new MediaProjectionAppSelectorController((RecentTaskListProvider) this.mediaProjectionAppSelectorComponentImpl.bindRecentTaskListProvider.get(), this.mediaProjectionAppSelectorComponentImpl.view, (ScreenCaptureDevicePolicyResolver) this.tvSysUIComponentImpl.screenCaptureDevicePolicyResolverProvider.get(), (UserHandle) this.mediaProjectionAppSelectorComponentImpl.hostUserHandleProvider.get(), (CoroutineScope) this.mediaProjectionAppSelectorComponentImpl.provideCoroutineScopeProvider.get(), (ComponentName) this.mediaProjectionAppSelectorComponentImpl.provideAppSelectorComponentNameProvider.get(), (String) this.mediaProjectionAppSelectorComponentImpl.provideCallerPackageNameProvider.get());
                    case 1:
                        CoroutineDispatcher coroutineDispatcher = (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get();
                        Executor executor = (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get();
                        TvSysUIComponentImpl tvSysUIComponentImpl = this.tvSysUIComponentImpl;
                        return (T) new ShellRecentTaskListProvider(coroutineDispatcher, executor, tvSysUIComponentImpl.setRecentTasks, (UserTracker) tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 2:
                        return (T) MediaProjectionAppSelectorModule_Companion_HostUserHandleFactory.hostUserHandle(this.mediaProjectionAppSelectorComponentImpl.activity);
                    case 3:
                        return (T) MediaProjectionAppSelectorModule_Companion_ProvideCoroutineScopeFactory.provideCoroutineScope((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case 4:
                        Context context = this.tvGlobalRootComponent.context;
                        MediaProjectionAppSelectorModule.Companion.getClass();
                        return (T) new ComponentName(context, (Class<?>) MediaProjectionAppSelectorActivity.class);
                    case 5:
                        MediaProjectionAppSelectorModule.Companion companion = MediaProjectionAppSelectorModule.Companion;
                        MediaProjectionAppSelectorActivity mediaProjectionAppSelectorActivity = this.mediaProjectionAppSelectorComponentImpl.activity;
                        companion.getClass();
                        return (T) mediaProjectionAppSelectorActivity.getCallingPackage();
                    case 6:
                        return (T) new MediaProjectionRecentsViewController((RecentTasksAdapter.Factory) this.mediaProjectionAppSelectorComponentImpl.factoryProvider2.get(), (TaskPreviewSizeProvider) this.mediaProjectionAppSelectorComponentImpl.taskPreviewSizeProvider.get(), (IActivityTaskManager) this.tvGlobalRootComponent.provideIActivityTaskManagerProvider.get(), this.mediaProjectionAppSelectorComponentImpl.resultHandler);
                    case 7:
                        return (T) new RecentTasksAdapter.Factory() { // from class: com.android.systemui.tv.DaggerTvGlobalRootComponent.MediaProjectionAppSelectorComponentImpl.SwitchingProvider.1
                            @Override // com.android.systemui.mediaprojection.appselector.view.RecentTasksAdapter.Factory
                            public final RecentTasksAdapter create(List<RecentTask> list, RecentTasksAdapter.RecentTaskClickListener recentTaskClickListener) {
                                return new RecentTasksAdapter(list, recentTaskClickListener, (RecentTaskViewHolder.Factory) SwitchingProvider.this.mediaProjectionAppSelectorComponentImpl.factoryProvider.get());
                            }
                        };
                    case 8:
                        return (T) new RecentTaskViewHolder.Factory() { // from class: com.android.systemui.tv.DaggerTvGlobalRootComponent.MediaProjectionAppSelectorComponentImpl.SwitchingProvider.2
                            @Override // com.android.systemui.mediaprojection.appselector.view.RecentTaskViewHolder.Factory
                            public final RecentTaskViewHolder create(ViewGroup viewGroup) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new RecentTaskViewHolder(viewGroup, (AppIconLoader) switchingProvider.mediaProjectionAppSelectorComponentImpl.bindAppIconLoaderProvider.get(), (RecentTaskThumbnailLoader) switchingProvider.mediaProjectionAppSelectorComponentImpl.bindRecentTaskThumbnailLoaderProvider.get(), (RecentTaskLabelLoader) switchingProvider.mediaProjectionAppSelectorComponentImpl.bindRecentTaskLabelLoaderProvider.get(), (TaskPreviewSizeProvider) switchingProvider.mediaProjectionAppSelectorComponentImpl.taskPreviewSizeProvider.get(), (CoroutineScope) switchingProvider.mediaProjectionAppSelectorComponentImpl.provideCoroutineScopeProvider.get());
                            }
                        };
                    case 9:
                        CoroutineDispatcher coroutineDispatcher2 = (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get();
                        DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
                        return (T) new IconLoaderLibAppIconLoader(coroutineDispatcher2, daggerTvGlobalRootComponent.context, (PackageManagerWrapper) daggerTvGlobalRootComponent.providePackageManagerWrapperProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), this.mediaProjectionAppSelectorComponentImpl.bindIconFactoryProvider);
                    case 10:
                        Context context2 = this.tvGlobalRootComponent.context;
                        MediaProjectionAppSelectorModule.Companion.getClass();
                        return (T) IconFactory.obtain(context2);
                    case 11:
                        return (T) new ActivityTaskManagerThumbnailLoader((CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (ActivityManagerWrapper) this.tvSysUIComponentImpl.provideActivityManagerWrapperProvider.get());
                    case 12:
                        return (T) new ActivityTaskManagerLabelLoader((CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get());
                    case 13:
                        DaggerTvGlobalRootComponent daggerTvGlobalRootComponent2 = this.tvGlobalRootComponent;
                        return (T) new TaskPreviewSizeProvider(daggerTvGlobalRootComponent2.context, (WindowManager) daggerTvGlobalRootComponent2.provideWindowManagerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get());
                    case 14:
                        return (T) new MediaProjectionBlockerEmptyStateProvider((UserHandle) this.mediaProjectionAppSelectorComponentImpl.hostUserHandleProvider.get(), this.tvSysUIComponentImpl.personalProfileUserHandle(), (ScreenCaptureDevicePolicyResolver) this.tvSysUIComponentImpl.screenCaptureDevicePolicyResolverProvider.get(), this.tvGlobalRootComponent.context);
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ MediaProjectionAppSelectorComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, MediaProjectionAppSelectorActivity mediaProjectionAppSelectorActivity, MediaProjectionAppSelectorView mediaProjectionAppSelectorView, MediaProjectionAppSelectorResultHandler mediaProjectionAppSelectorResultHandler, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, mediaProjectionAppSelectorActivity, mediaProjectionAppSelectorView, mediaProjectionAppSelectorResultHandler);
        }

        @Override // com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorComponent
        public final ConfigurationController getConfigurationController() {
            return (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get();
        }

        @Override // com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorComponent
        public final MediaProjectionAppSelectorController getController() {
            return (MediaProjectionAppSelectorController) this.mediaProjectionAppSelectorControllerProvider.get();
        }

        @Override // com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorComponent
        public final MediaProjectionBlockerEmptyStateProvider getEmptyStateProvider() {
            return (MediaProjectionBlockerEmptyStateProvider) this.mediaProjectionBlockerEmptyStateProvider.get();
        }

        @Override // com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorComponent
        public final UserHandle getHostUserHandle() {
            return (UserHandle) this.hostUserHandleProvider.get();
        }

        @Override // com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorComponent
        public final UserHandle getPersonalProfileUserHandle() {
            return this.tvSysUIComponentImpl.personalProfileUserHandle();
        }

        @Override // com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorComponent
        public final MediaProjectionRecentsViewController getRecentsViewController() {
            return (MediaProjectionRecentsViewController) this.mediaProjectionRecentsViewControllerProvider.get();
        }

        public final void initialize(MediaProjectionAppSelectorActivity mediaProjectionAppSelectorActivity, MediaProjectionAppSelectorView mediaProjectionAppSelectorView, MediaProjectionAppSelectorResultHandler mediaProjectionAppSelectorResultHandler) {
            SwitchingProvider switchingProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 1);
            this.shellRecentTaskListProvider = switchingProvider;
            this.bindRecentTaskListProvider = DoubleCheck.provider(switchingProvider);
            this.hostUserHandleProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 2));
            this.provideCoroutineScopeProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 3));
            this.provideAppSelectorComponentNameProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 4));
            this.provideCallerPackageNameProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 5));
            this.mediaProjectionAppSelectorControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 0));
            this.bindIconFactoryProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 10);
            SwitchingProvider switchingProvider2 = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 9);
            this.iconLoaderLibAppIconLoaderProvider = switchingProvider2;
            this.bindAppIconLoaderProvider = DoubleCheck.provider(switchingProvider2);
            SwitchingProvider switchingProvider3 = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 11);
            this.activityTaskManagerThumbnailLoaderProvider = switchingProvider3;
            this.bindRecentTaskThumbnailLoaderProvider = DoubleCheck.provider(switchingProvider3);
            SwitchingProvider switchingProvider4 = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 12);
            this.activityTaskManagerLabelLoaderProvider = switchingProvider4;
            this.bindRecentTaskLabelLoaderProvider = DoubleCheck.provider(switchingProvider4);
            this.taskPreviewSizeProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 13));
            this.factoryProvider = SingleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 8));
            this.factoryProvider2 = SingleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 7));
            this.mediaProjectionRecentsViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 6));
            this.mediaProjectionBlockerEmptyStateProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 14));
        }

        private MediaProjectionAppSelectorComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, MediaProjectionAppSelectorActivity mediaProjectionAppSelectorActivity, MediaProjectionAppSelectorView mediaProjectionAppSelectorView, MediaProjectionAppSelectorResultHandler mediaProjectionAppSelectorResultHandler) {
            this.mediaProjectionAppSelectorComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.view = mediaProjectionAppSelectorView;
            this.activity = mediaProjectionAppSelectorActivity;
            this.resultHandler = mediaProjectionAppSelectorResultHandler;
            initialize(mediaProjectionAppSelectorActivity, mediaProjectionAppSelectorView, mediaProjectionAppSelectorResultHandler);
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class NavigationBarComponentFactory implements NavigationBarComponent.Factory {
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ NavigationBarComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.systemui.navigationbar.NavigationBarComponent.Factory
        public final NavigationBarComponent create(Context context, Bundle bundle) {
            context.getClass();
            return new NavigationBarComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, context, bundle, 0);
        }

        private NavigationBarComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class NavigationBarComponentImpl implements NavigationBarComponent {
        public final Context context;
        public final NavigationBarComponentImpl navigationBarComponentImpl;
        public Provider navigationBarProvider;
        public Provider navigationBarTransitionsProvider;
        public Provider provideLayoutInflaterProvider;
        public Provider provideNavigationBarFrameProvider;
        public Provider provideNavigationBarviewProvider;
        public Provider provideWindowManagerProvider;
        public final Bundle savedState;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final NavigationBarComponentImpl navigationBarComponentImpl;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, NavigationBarComponentImpl navigationBarComponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.navigationBarComponentImpl = navigationBarComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                int i = this.id;
                if (i != 0) {
                    if (i != 1) {
                        if (i != 2) {
                            if (i != 3) {
                                if (i != 4) {
                                    if (i == 5) {
                                        return (T) new NavigationBarTransitions((NavigationBarView) this.navigationBarComponentImpl.provideNavigationBarviewProvider.get(), (LightBarTransitionsController.Factory) this.tvSysUIComponentImpl.factoryProvider2.get(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get());
                                    }
                                    throw new AssertionError(this.id);
                                }
                                T t = (T) ((WindowManager) this.navigationBarComponentImpl.context.getSystemService(WindowManager.class));
                                Preconditions.checkNotNullFromProvides(t);
                                return t;
                            }
                            return (T) NavigationBarModule_ProvideNavigationBarFrameFactory.provideNavigationBarFrame((LayoutInflater) this.navigationBarComponentImpl.provideLayoutInflaterProvider.get());
                        }
                        T t2 = (T) LayoutInflater.from(this.navigationBarComponentImpl.context);
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    }
                    return (T) NavigationBarModule_ProvideNavigationBarviewFactory.provideNavigationBarview((LayoutInflater) this.navigationBarComponentImpl.provideLayoutInflaterProvider.get(), (NavigationBarFrame) this.navigationBarComponentImpl.provideNavigationBarFrameProvider.get());
                }
                NavigationBarView navigationBarView = (NavigationBarView) this.navigationBarComponentImpl.provideNavigationBarviewProvider.get();
                NavigationBarFrame navigationBarFrame = (NavigationBarFrame) this.navigationBarComponentImpl.provideNavigationBarFrameProvider.get();
                NavigationBarComponentImpl navigationBarComponentImpl = this.navigationBarComponentImpl;
                Bundle bundle = navigationBarComponentImpl.savedState;
                Context context = navigationBarComponentImpl.context;
                WindowManager windowManager = (WindowManager) navigationBarComponentImpl.provideWindowManagerProvider.get();
                Lazy lazy = DoubleCheck.lazy(this.tvSysUIComponentImpl.assistManagerProvider);
                AccessibilityManager accessibilityManager = (AccessibilityManager) this.tvGlobalRootComponent.provideAccessibilityManagerProvider.get();
                DeviceProvisionedController deviceProvisionedController = (DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get();
                MetricsLogger metricsLogger = (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get();
                OverviewProxyService overviewProxyService = (OverviewProxyService) this.tvSysUIComponentImpl.overviewProxyServiceProvider.get();
                NavigationModeController navigationModeController = (NavigationModeController) this.tvSysUIComponentImpl.navigationModeControllerProvider.get();
                StatusBarStateController statusBarStateController = (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get();
                StatusBarKeyguardViewManager statusBarKeyguardViewManager = (StatusBarKeyguardViewManager) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get();
                SysUiState sysUiState = (SysUiState) this.tvSysUIComponentImpl.provideSysUiStateProvider.get();
                UserTracker userTracker = (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get();
                CommandQueue commandQueue = (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get();
                TvSysUIComponentImpl tvSysUIComponentImpl = this.tvSysUIComponentImpl;
                Optional<Pip> optional = tvSysUIComponentImpl.setPip;
                Optional of = Optional.of((Recents) tvSysUIComponentImpl.provideRecentsProvider.get());
                Lazy lazy2 = DoubleCheck.lazy(this.tvSysUIComponentImpl.optionalOfCentralSurfacesProvider);
                ShadeController shadeController = (ShadeController) this.tvSysUIComponentImpl.shadeControllerImplProvider.get();
                NotificationRemoteInputManager notificationRemoteInputManager = (NotificationRemoteInputManager) this.tvSysUIComponentImpl.provideNotificationRemoteInputManagerProvider.get();
                NotificationShadeDepthController notificationShadeDepthController = (NotificationShadeDepthController) this.tvSysUIComponentImpl.notificationShadeDepthControllerProvider.get();
                Handler handler = (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get();
                Executor executor = (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get();
                Executor executor2 = (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get();
                UiEventLogger uiEventLogger = (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get();
                NavBarHelper navBarHelper = (NavBarHelper) this.tvSysUIComponentImpl.navBarHelperProvider.get();
                LightBarController lightBarController = (LightBarController) this.tvSysUIComponentImpl.lightBarControllerProvider.get();
                LightBarController.Factory lightBarControllerFactory = this.navigationBarComponentImpl.lightBarControllerFactory();
                AutoHideController autoHideController = (AutoHideController) this.tvSysUIComponentImpl.autoHideControllerProvider.get();
                AutoHideController.Factory autoHideControllerFactory = this.navigationBarComponentImpl.autoHideControllerFactory();
                Optional optional2 = (Optional) this.tvGlobalRootComponent.provideOptionalTelecomManagerProvider.get();
                InputMethodManager inputMethodManager = (InputMethodManager) this.tvGlobalRootComponent.provideInputMethodManagerProvider.get();
                DeadZone deadZone = this.navigationBarComponentImpl.deadZone();
                DeviceConfigProxy deviceConfigProxy = (DeviceConfigProxy) this.tvSysUIComponentImpl.deviceConfigProxyProvider.get();
                NavigationBarTransitions navigationBarTransitions = (NavigationBarTransitions) this.navigationBarComponentImpl.navigationBarTransitionsProvider.get();
                TvSysUIComponentImpl tvSysUIComponentImpl2 = this.tvSysUIComponentImpl;
                return (T) NavigationBar_Factory.newInstance(navigationBarView, navigationBarFrame, bundle, context, windowManager, lazy, accessibilityManager, deviceProvisionedController, metricsLogger, overviewProxyService, navigationModeController, statusBarStateController, statusBarKeyguardViewManager, sysUiState, userTracker, commandQueue, optional, of, lazy2, shadeController, notificationRemoteInputManager, notificationShadeDepthController, handler, executor, executor2, uiEventLogger, navBarHelper, lightBarController, lightBarControllerFactory, autoHideController, autoHideControllerFactory, optional2, inputMethodManager, deadZone, deviceConfigProxy, navigationBarTransitions, tvSysUIComponentImpl2.setBackAnimation, (UserContextProvider) tvSysUIComponentImpl2.provideUserTrackerProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (TaskStackChangeListeners) this.tvSysUIComponentImpl.provideTaskStackChangeListenersProvider.get(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get(), (LogWrapper) this.tvSysUIComponentImpl.providesNavBarLoggerProvider.get());
            }
        }

        public /* synthetic */ NavigationBarComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, Context context, Bundle bundle, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, context, bundle);
        }

        public final AutoHideController.Factory autoHideControllerFactory() {
            return new AutoHideController.Factory((Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (IWindowManager) this.tvGlobalRootComponent.provideIWindowManagerProvider.get());
        }

        public final DeadZone deadZone() {
            return new DeadZone((NavigationBarView) this.provideNavigationBarviewProvider.get());
        }

        @Override // com.android.systemui.navigationbar.NavigationBarComponent
        public final NavigationBar getNavigationBar() {
            return (NavigationBar) this.navigationBarProvider.get();
        }

        public final void initialize(Context context, Bundle bundle) {
            this.provideLayoutInflaterProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.navigationBarComponentImpl, 2));
            this.provideNavigationBarFrameProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.navigationBarComponentImpl, 3));
            this.provideNavigationBarviewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.navigationBarComponentImpl, 1));
            this.provideWindowManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.navigationBarComponentImpl, 4));
            this.navigationBarTransitionsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.navigationBarComponentImpl, 5));
            this.navigationBarProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.navigationBarComponentImpl, 0));
        }

        public final LightBarController.Factory lightBarControllerFactory() {
            return new LightBarController.Factory((DarkIconDispatcher) this.tvSysUIComponentImpl.darkIconDispatcherImplProvider.get(), (BatteryController) this.tvSysUIComponentImpl.provideBatteryControllerProvider.get(), (NavigationModeController) this.tvSysUIComponentImpl.navigationModeControllerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get(), new SamsungLightBarControlHelper(), (SamsungStatusBarGrayIconHelper) this.tvSysUIComponentImpl.samsungStatusBarGrayIconHelperProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
        }

        private NavigationBarComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, Context context, Bundle bundle) {
            this.navigationBarComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.context = context;
            this.savedState = bundle;
            initialize(context, bundle);
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class NotificationShelfComponentBuilder implements NotificationShelfComponent.Builder {
        public NotificationShelf notificationShelf;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ NotificationShelfComponentBuilder(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.systemui.statusbar.notification.row.dagger.NotificationShelfComponent.Builder
        public final NotificationShelfComponent build() {
            Preconditions.checkBuilderRequirement(NotificationShelf.class, this.notificationShelf);
            return new NotificationShelfComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.notificationShelf, 0);
        }

        @Override // com.android.systemui.statusbar.notification.row.dagger.NotificationShelfComponent.Builder
        public final NotificationShelfComponent.Builder notificationShelf(NotificationShelf notificationShelf) {
            notificationShelf.getClass();
            this.notificationShelf = notificationShelf;
            return this;
        }

        private NotificationShelfComponentBuilder(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }

        @Override // com.android.systemui.statusbar.notification.row.dagger.NotificationShelfComponent.Builder
        public final NotificationShelfComponentBuilder notificationShelf(NotificationShelf notificationShelf) {
            notificationShelf.getClass();
            this.notificationShelf = notificationShelf;
            return this;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class NotificationShelfComponentImpl implements NotificationShelfComponent {
        public Provider legacyNotificationShelfControllerImplProvider;
        public final NotificationShelf notificationShelf;
        public final NotificationShelfComponentImpl notificationShelfComponentImpl;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final NotificationShelfComponentImpl notificationShelfComponentImpl;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, NotificationShelfComponentImpl notificationShelfComponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.notificationShelfComponentImpl = notificationShelfComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                if (this.id == 0) {
                    NotificationShelfComponentImpl notificationShelfComponentImpl = this.notificationShelfComponentImpl;
                    return (T) new LegacyNotificationShelfControllerImpl(notificationShelfComponentImpl.notificationShelf, notificationShelfComponentImpl.activatableNotificationViewController(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (NotificationShelfManager) this.tvSysUIComponentImpl.notificationShelfManagerProvider.get());
                }
                throw new AssertionError(this.id);
            }
        }

        public /* synthetic */ NotificationShelfComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, NotificationShelf notificationShelf, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, notificationShelf);
        }

        public final ActivatableNotificationViewController activatableNotificationViewController() {
            return new ActivatableNotificationViewController(this.notificationShelf, expandableOutlineViewController(), (AccessibilityManager) this.tvGlobalRootComponent.provideAccessibilityManagerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get());
        }

        public final ExpandableOutlineViewController expandableOutlineViewController() {
            return new ExpandableOutlineViewController(this.notificationShelf, expandableViewController());
        }

        public final ExpandableViewController expandableViewController() {
            return new ExpandableViewController(this.notificationShelf);
        }

        @Override // com.android.systemui.statusbar.notification.row.dagger.NotificationShelfComponent
        public final LegacyNotificationShelfControllerImpl getNotificationShelfController() {
            return (LegacyNotificationShelfControllerImpl) this.legacyNotificationShelfControllerImplProvider.get();
        }

        public final void initialize(NotificationShelf notificationShelf) {
            this.legacyNotificationShelfControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.notificationShelfComponentImpl, 0));
        }

        private NotificationShelfComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, NotificationShelf notificationShelf) {
            this.notificationShelfComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.notificationShelf = notificationShelf;
            initialize(notificationShelf);
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class QSFragmentComponentFactory implements QSFragmentComponent.Factory {
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ QSFragmentComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.systemui.qs.dagger.QSFragmentComponent.Factory
        public final QSFragmentComponent create(QSFragment qSFragment) {
            qSFragment.getClass();
            return new QSFragmentComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, qSFragment, 0);
        }

        private QSFragmentComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class QSFragmentComponentImpl implements QSFragmentComponent {
        public Provider barControllerProvider;
        public Provider barFactoryProvider;
        public Provider bottomLargeTileBarProvider;
        public Provider brightnessBarProvider;
        public Provider brightnessMediaDevicesBarProvider;
        public Provider budsBarProvider;
        public Provider mediaDevicesBarProvider;
        public Provider multiSIMPreferredSlotBarProvider;
        public Provider pagedTileLayoutBarProvider;
        public Provider providesHeaderQSPanelHostProvider;
        public Provider providesPanelQSPanelHostProvider;
        public Provider providesQSCutomizerProvider;
        public Provider providesQSSecurityFooterViewProvider;
        public Provider qSButtonGridControllerProvider;
        public Provider qSButtonsContainerControllerProvider;
        public Provider qSCinemaCompanyProvider;
        public Provider qSCinemaDirectorProvider;
        public Provider qSCinemaLoggerProvider;
        public Provider qSCinemaProvider;
        public Provider qSContainerImplControllerProvider;
        public Provider qSCustomizerControllerProvider;
        public final QSFragmentComponentImpl qSFragmentComponentImpl;
        public Provider qSMediaPlayerBarProvider;
        public Provider qSSecurityFooterProvider;
        public Provider qSSquishinessControllerProvider;
        public Provider qsExpandAnimatorProvider;
        public final QSFragment qsFragment;
        public Provider qsOpenAnimatorProvider;
        public Provider qsTransitionAnimatorProvider;
        public Provider secQSPanelControllerProvider;
        public Provider secQuickQSPanelControllerProvider;
        public Provider secQuickStatusBarHeaderControllerProvider;
        public Provider securityFooterBarProvider;
        public Provider soundCraftActionBarViewModelProvider;
        public Provider soundCraftQpDetailAdapterProvider;
        public Provider soundCraftViewModelProvider;
        public Provider tileAdapterProvider;
        public Provider tileQueryHelperProvider;
        public Provider topLargeTileBarProvider;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;
        public Provider videoCallMicModeBarProvider;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final QSFragmentComponentImpl qSFragmentComponentImpl;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, QSFragmentComponentImpl qSFragmentComponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.qSFragmentComponentImpl = qSFragmentComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        return (T) new QSContainerImplController(this.qSFragmentComponentImpl.qSContainerImpl(), (SecQSPanelController) this.qSFragmentComponentImpl.secQSPanelControllerProvider.get(), (SecQuickStatusBarHeaderController) this.qSFragmentComponentImpl.secQuickStatusBarHeaderControllerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (ShadeHeaderController) this.tvSysUIComponentImpl.shadeHeaderControllerProvider.get(), (HeadsUpManager) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get());
                    case 1:
                        return (T) SecQSPanelController_Factory.newInstance(this.qSFragmentComponentImpl.secQSPanel(), (QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (QSPanelHost) this.qSFragmentComponentImpl.providesPanelQSPanelHostProvider.get(), this.qSFragmentComponentImpl.barControllerProvider, (SecQSPanelResourcePicker) this.tvSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (StatusBarKeyguardViewManager) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), new Handler(), (ShadeHeaderController) this.tvSysUIComponentImpl.shadeHeaderControllerProvider.get(), (NotificationShadeWindowView) this.tvSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get(), (QSButtonGridController) this.qSFragmentComponentImpl.qSButtonGridControllerProvider.get());
                    case 2:
                        return (T) QSFragmentModule_ProvidesPanelQSPanelHostFactory.providesPanelQSPanelHost(this.qSFragmentComponentImpl.rootViewView(), (QSTileHost) this.tvSysUIComponentImpl.qSTileHostProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (SecQSPanelResourcePicker) this.tvSysUIComponentImpl.secQSPanelResourcePickerProvider.get());
                    case 3:
                        return (T) new BarController(this.tvGlobalRootComponent.context, (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (BarFactory) this.qSFragmentComponentImpl.barFactoryProvider.get(), (SecQSPanelResourcePicker) this.tvSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (KnoxStateMonitor) this.tvSysUIComponentImpl.providesKnoxStateMonitorProvider.get());
                    case 4:
                        QSFragmentComponentImpl qSFragmentComponentImpl = this.qSFragmentComponentImpl;
                        return (T) new BarFactory(qSFragmentComponentImpl.brightnessBarProvider, qSFragmentComponentImpl.brightnessMediaDevicesBarProvider, qSFragmentComponentImpl.mediaDevicesBarProvider, qSFragmentComponentImpl.multiSIMPreferredSlotBarProvider, qSFragmentComponentImpl.qSMediaPlayerBarProvider, qSFragmentComponentImpl.topLargeTileBarProvider, qSFragmentComponentImpl.pagedTileLayoutBarProvider, qSFragmentComponentImpl.bottomLargeTileBarProvider, qSFragmentComponentImpl.securityFooterBarProvider, qSFragmentComponentImpl.videoCallMicModeBarProvider, qSFragmentComponentImpl.budsBarProvider);
                    case 5:
                        return (T) new BrightnessBar(this.tvGlobalRootComponent.context, this.qSFragmentComponentImpl.brightnessControllerFactory(), this.tvSysUIComponentImpl.brightnessSliderControllerFactory(), DoubleCheck.lazy(this.tvSysUIComponentImpl.centralSurfacesImplProvider), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (QSBackupRestoreManager) this.tvSysUIComponentImpl.qSBackupRestoreManagerProvider.get(), DoubleCheck.lazy(this.qSFragmentComponentImpl.secQSPanelControllerProvider));
                    case 6:
                        return (T) new BrightnessMediaDevicesBar(this.tvGlobalRootComponent.context, (BarFactory) this.qSFragmentComponentImpl.barFactoryProvider.get());
                    case 7:
                        return (T) new MediaDevicesBar(this.tvGlobalRootComponent.context, (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (CustomDeviceControlsController) this.tvSysUIComponentImpl.customDeviceControlsControllerImplProvider.get(), (MediaOutputHelper) this.tvSysUIComponentImpl.mediaOutputHelperProvider.get(), (QSBackupRestoreManager) this.tvSysUIComponentImpl.qSBackupRestoreManagerProvider.get());
                    case 8:
                        return (T) new MultiSIMPreferredSlotBar(this.tvGlobalRootComponent.context, (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 9:
                        return (T) new QSMediaPlayerBar(this.tvGlobalRootComponent.context, (SecMediaHost) this.tvSysUIComponentImpl.secMediaHostProvider.get(), (SecQSPanelResourcePicker) this.tvSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), DoubleCheck.lazy(this.qSFragmentComponentImpl.secQSPanelControllerProvider), DoubleCheck.lazy(this.qSFragmentComponentImpl.soundCraftQpDetailAdapterProvider));
                    case 10:
                        return (T) this.qSFragmentComponentImpl.injectSoundCraftQpDetailAdapter(new SoundCraftQpDetailAdapter(this.tvGlobalRootComponent.context));
                    case 11:
                        return (T) new SoundCraftViewModelProvider(this.qSFragmentComponentImpl.soundCraftViewModel(), (SoundCraftActionBarViewModel) this.qSFragmentComponentImpl.soundCraftActionBarViewModelProvider.get(), (NoiseControlBoxViewModel) this.tvSysUIComponentImpl.noiseControlBoxViewModelProvider.get(), (AudioEffectBoxViewModel) this.tvSysUIComponentImpl.audioEffectBoxViewModelProvider.get(), (WearableLinkBoxViewModel) this.tvSysUIComponentImpl.wearableLinkBoxViewModelProvider.get(), (AudioEffectHeaderViewModel) this.tvSysUIComponentImpl.audioEffectHeaderViewModelProvider.get(), (SpatialAudioViewModel) this.tvSysUIComponentImpl.spatialAudioViewModelProvider.get(), (EqualizerViewModel) this.tvSysUIComponentImpl.equalizerViewModelProvider.get(), (VoiceBoostViewModel) this.tvSysUIComponentImpl.voiceBoostViewModelProvider.get(), (VolumeNormalizationViewModel) this.tvSysUIComponentImpl.volumeNormalizationViewModelProvider.get(), (ActiveNoiseCancelingViewModel) this.tvSysUIComponentImpl.activeNoiseCancelingViewModelProvider.get(), (AdaptiveViewModel) this.tvSysUIComponentImpl.adaptiveViewModelProvider.get(), (AmbientSoundViewModel) this.tvSysUIComponentImpl.ambientSoundViewModelProvider.get(), (NoiseCancelingLevelViewModel) this.tvSysUIComponentImpl.noiseCancelingLevelViewModelProvider.get(), (NoiseControlEffectBoxViewModel) this.tvSysUIComponentImpl.noiseControlEffectBoxViewModelProvider.get(), (NoiseControlOffViewModel) this.tvSysUIComponentImpl.noiseControlOffViewModelProvider.get(), (NoiseCancelingSwitchBarViewModel) this.tvSysUIComponentImpl.noiseCancelingSwitchBarViewModelProvider.get(), (RoutineTestViewModel) this.tvSysUIComponentImpl.routineTestViewModelProvider.get());
                    case 12:
                        return (T) new SoundCraftActionBarViewModel(this.tvGlobalRootComponent.context, DoubleCheck.lazy(this.qSFragmentComponentImpl.secQSPanelControllerProvider), (BluetoothDeviceManager) this.tvSysUIComponentImpl.bluetoothDeviceManagerProvider.get(), DoubleCheck.lazy(this.qSFragmentComponentImpl.soundCraftQpDetailAdapterProvider));
                    case 13:
                        return (T) new TopLargeTileBar(this.tvGlobalRootComponent.context);
                    case 14:
                        return (T) new PagedTileLayoutBar(this.tvGlobalRootComponent.context);
                    case 15:
                        return (T) new BottomLargeTileBar(this.tvGlobalRootComponent.context);
                    case 16:
                        return (T) new SecurityFooterBar(this.tvGlobalRootComponent.context, (QSSecurityFooter) this.qSFragmentComponentImpl.qSSecurityFooterProvider.get());
                    case 17:
                        return (T) new QSSecurityFooter((View) this.qSFragmentComponentImpl.providesQSSecurityFooterViewProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (SecurityController) this.tvSysUIComponentImpl.securityControllerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 18:
                        T t = (T) this.qSFragmentComponentImpl.qSThemedContextLayoutInflater().inflate(R.layout.sec_quick_settings_security_footer, (ViewGroup) null, false);
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 19:
                        return (T) new VideoCallMicModeBar(this.tvGlobalRootComponent.context, DoubleCheck.lazy(this.qSFragmentComponentImpl.secQSPanelControllerProvider), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (SecQSPanelResourcePicker) this.tvSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), this.tvSysUIComponentImpl.panelInteractor());
                    case 20:
                        QSFragmentComponentImpl qSFragmentComponentImpl2 = this.qSFragmentComponentImpl;
                        return (T) qSFragmentComponentImpl2.injectBudsBar(new BudsBar(this.tvGlobalRootComponent.context, DoubleCheck.lazy(qSFragmentComponentImpl2.secQSPanelControllerProvider), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (MediaBluetoothHelper) this.tvSysUIComponentImpl.mediaBluetoothHelperProvider.get()));
                    case 21:
                        return (T) new QSButtonGridController(this.tvGlobalRootComponent.context, DoubleCheck.lazy(this.qSFragmentComponentImpl.secQSPanelControllerProvider));
                    case 22:
                        return (T) new SecQuickStatusBarHeaderController(this.qSFragmentComponentImpl.secQuickStatusBarHeader(), (StatusBarIconController) this.tvSysUIComponentImpl.statusBarIconControllerImplProvider.get(), (DemoModeController) this.tvSysUIComponentImpl.provideDemoModeControllerProvider.get(), (SecQuickQSPanelController) this.qSFragmentComponentImpl.secQuickQSPanelControllerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (StatusBarIconController.TintedIconManager.Factory) this.tvSysUIComponentImpl.factoryProvider7.get(), (ShadeHeaderController) this.tvSysUIComponentImpl.shadeHeaderControllerProvider.get());
                    case 23:
                        return (T) SecQuickQSPanelController_Factory.newInstance(this.qSFragmentComponentImpl.secQuickQSPanel(), (QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (QSPanelHost) this.qSFragmentComponentImpl.providesHeaderQSPanelHostProvider.get(), this.qSFragmentComponentImpl.barControllerProvider, (SecQSPanelResourcePicker) this.tvSysUIComponentImpl.secQSPanelResourcePickerProvider.get());
                    case 24:
                        return (T) QSFragmentModule_ProvidesHeaderQSPanelHostFactory.providesHeaderQSPanelHost(this.qSFragmentComponentImpl.rootViewView(), (QSTileHost) this.tvSysUIComponentImpl.qSTileHostProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (SecQSPanelResourcePicker) this.tvSysUIComponentImpl.secQSPanelResourcePickerProvider.get());
                    case 25:
                        return (T) QSCustomizerController_Factory.newInstance((QSCustomizer) this.qSFragmentComponentImpl.providesQSCutomizerProvider.get(), (TileQueryHelper) this.qSFragmentComponentImpl.tileQueryHelperProvider.get(), (QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (TileAdapter) this.qSFragmentComponentImpl.tileAdapterProvider.get(), (ScreenLifecycle) this.tvGlobalRootComponent.screenLifecycleProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (LightBarController) this.tvSysUIComponentImpl.lightBarControllerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get());
                    case 26:
                        T t2 = (T) ((QSCustomizer) this.qSFragmentComponentImpl.rootViewView().findViewById(R.id.qs_customize));
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 27:
                        return (T) new TileQueryHelper(this.tvGlobalRootComponent.context, (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case 28:
                        return (T) new TileAdapter(this.qSFragmentComponentImpl.qSThemedContextContext(), (QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get());
                    case 29:
                        return (T) new QSSquishinessController();
                    case 30:
                        return (T) new QsOpenAnimator(this.tvGlobalRootComponent.context, (BarController) this.qSFragmentComponentImpl.barControllerProvider.get(), (HeadsUpManager) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (SecQSPanelResourcePicker) this.tvSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (SecQuickQSPanelController) this.qSFragmentComponentImpl.secQuickQSPanelControllerProvider.get(), (ShadeHeaderController) this.tvSysUIComponentImpl.shadeHeaderControllerProvider.get());
                    case 31:
                        return (T) new QsExpandAnimator(this.tvGlobalRootComponent.context, (SecQSPanelController) this.qSFragmentComponentImpl.secQSPanelControllerProvider.get(), (BarController) this.qSFragmentComponentImpl.barControllerProvider.get(), (ShadeHeaderController) this.tvSysUIComponentImpl.shadeHeaderControllerProvider.get(), (SecQSPanelResourcePicker) this.tvSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (KeyguardEditModeController) this.tvSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get());
                    case 32:
                        return (T) new QsTransitionAnimator(this.tvGlobalRootComponent.context, DoubleCheck.lazy(this.qSFragmentComponentImpl.qsExpandAnimatorProvider), (BarController) this.qSFragmentComponentImpl.barControllerProvider.get(), (SecQSPanelController) this.qSFragmentComponentImpl.secQSPanelControllerProvider.get(), (QSTileHost) this.tvSysUIComponentImpl.qSTileHostProvider.get(), (ShadeHeaderController) this.tvSysUIComponentImpl.shadeHeaderControllerProvider.get());
                    case 33:
                        return (T) new QSButtonsContainerController(this.qSFragmentComponentImpl.qSButtonsContainer(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (SecQSPanelController) this.qSFragmentComponentImpl.secQSPanelControllerProvider.get());
                    case 34:
                        return (T) new QSCinemaCompany((QSCinemaDirector) this.qSFragmentComponentImpl.qSCinemaDirectorProvider.get(), (QSCinemaProvider) this.qSFragmentComponentImpl.qSCinemaProvider.get(), (QSCinemaLogger) this.qSFragmentComponentImpl.qSCinemaLoggerProvider.get());
                    case 35:
                        return (T) new QSCinemaDirector();
                    case 36:
                        Context context = this.tvGlobalRootComponent.context;
                        QSFragmentComponentImpl qSFragmentComponentImpl3 = this.qSFragmentComponentImpl;
                        return (T) new QSCinemaProvider(context, qSFragmentComponentImpl3.qsFragment, qSFragmentComponentImpl3.secQuickQSPanel(), (SecQSPanelController) this.qSFragmentComponentImpl.secQSPanelControllerProvider.get(), (SecQuickQSPanelController) this.qSFragmentComponentImpl.secQuickQSPanelControllerProvider.get(), (QSTileHost) this.tvSysUIComponentImpl.qSTileHostProvider.get());
                    case 37:
                        return (T) new QSCinemaLogger((QSCinemaProvider) this.qSFragmentComponentImpl.qSCinemaProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ QSFragmentComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, QSFragment qSFragment, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, qSFragment);
        }

        public final AudioPlaybackManager audioPlaybackManager() {
            return new AudioPlaybackManager(this.tvGlobalRootComponent.context);
        }

        public final BrightnessController.Factory brightnessControllerFactory() {
            return new BrightnessController.Factory(this.tvGlobalRootComponent.context, (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get());
        }

        @Override // com.android.systemui.qs.dagger.QSFragmentComponent
        public final BarController getBarController() {
            return (BarController) this.barControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSFragmentComponent
        public final QSButtonsContainerController getQSButtonsContainerController() {
            return (QSButtonsContainerController) this.qSButtonsContainerControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSFragmentComponent
        public final QSCinemaCompany getQSCinemaCompany() {
            return (QSCinemaCompany) this.qSCinemaCompanyProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSFragmentComponent
        public final QSContainerImplController getQSContainerImplController() {
            return (QSContainerImplController) this.qSContainerImplControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSFragmentComponent
        public final QSCustomizerController getQSCustomizerController() {
            return (QSCustomizerController) this.qSCustomizerControllerProvider.get();
        }

        public final FooterActionsController getQSFooterActionController() {
            return (FooterActionsController) this.tvSysUIComponentImpl.footerActionsControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSFragmentComponent
        public final QSSquishinessController getQSSquishinessController() {
            return (QSSquishinessController) this.qSSquishinessControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSFragmentComponent
        public final QsExpandAnimator getQsExpandAnimator() {
            return (QsExpandAnimator) this.qsExpandAnimatorProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSFragmentComponent
        public final QsOpenAnimator getQsOpenAnimator() {
            return (QsOpenAnimator) this.qsOpenAnimatorProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSFragmentComponent
        public final QsTransitionAnimator getQsTransitionAnimator() {
            return (QsTransitionAnimator) this.qsTransitionAnimatorProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSFragmentComponent
        public final SecQSFragmentAnimatorManager getSecQSFragmentAnimatorManager() {
            return new SecQSFragmentAnimatorManager(this, (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get());
        }

        @Override // com.android.systemui.qs.dagger.QSFragmentComponent
        public final SecQSPanelController getSecQSPanelController() {
            return (SecQSPanelController) this.secQSPanelControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSFragmentComponent
        public final SecQuickQSPanelController getSecQuickQSPanelController() {
            return (SecQuickQSPanelController) this.secQuickQSPanelControllerProvider.get();
        }

        public final void initialize(QSFragment qSFragment) {
            this.providesPanelQSPanelHostProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 2));
            this.brightnessBarProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 5);
            this.brightnessMediaDevicesBarProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 6);
            this.mediaDevicesBarProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 7);
            this.multiSIMPreferredSlotBarProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 8);
            this.soundCraftActionBarViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 12));
            this.soundCraftViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 11));
            this.soundCraftQpDetailAdapterProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 10));
            this.qSMediaPlayerBarProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 9);
            this.topLargeTileBarProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 13);
            this.pagedTileLayoutBarProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 14);
            this.bottomLargeTileBarProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 15);
            this.providesQSSecurityFooterViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 18));
            this.qSSecurityFooterProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 17));
            this.securityFooterBarProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 16);
            this.videoCallMicModeBarProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 19);
            this.budsBarProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 20);
            this.barFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 4));
            this.barControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 3));
            this.qSButtonGridControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 21));
            this.secQSPanelControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 1));
            this.providesHeaderQSPanelHostProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 24));
            this.secQuickQSPanelControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 23));
            this.secQuickStatusBarHeaderControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 22));
            this.qSContainerImplControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 0));
            this.providesQSCutomizerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 26));
            this.tileQueryHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 27));
            this.tileAdapterProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 28));
            this.qSCustomizerControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 25));
            this.qSSquishinessControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 29));
            this.qsOpenAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 30));
            this.qsExpandAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 31));
            this.qsTransitionAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 32));
            this.qSButtonsContainerControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 33));
            this.qSCinemaDirectorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 35));
            this.qSCinemaProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 36));
            this.qSCinemaLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 37));
            this.qSCinemaCompanyProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.qSFragmentComponentImpl, 34));
        }

        public final BudsBar injectBudsBar(BudsBar budsBar) {
            budsBar.soundCraftAdapter = DoubleCheck.lazy(this.soundCraftQpDetailAdapterProvider);
            return budsBar;
        }

        public final SoundCraftQpDetailAdapter injectSoundCraftQpDetailAdapter(SoundCraftQpDetailAdapter soundCraftQpDetailAdapter) {
            soundCraftQpDetailAdapter.viewModelProvider = (SoundCraftViewModelProvider) this.soundCraftViewModelProvider.get();
            return soundCraftQpDetailAdapter;
        }

        public final QSButtonsContainer qSButtonsContainer() {
            QSButtonsContainer qSButtonsContainer = (QSButtonsContainer) rootViewView().findViewById(R.id.qs_button);
            Preconditions.checkNotNullFromProvides(qSButtonsContainer);
            return qSButtonsContainer;
        }

        public final QSContainerImpl qSContainerImpl() {
            QSContainerImpl qSContainerImpl = (QSContainerImpl) rootViewView().findViewById(R.id.quick_settings_container);
            Preconditions.checkNotNullFromProvides(qSContainerImpl);
            return qSContainerImpl;
        }

        public final Context qSThemedContextContext() {
            Context context = rootViewView().getContext();
            Preconditions.checkNotNullFromProvides(context);
            return context;
        }

        public final LayoutInflater qSThemedContextLayoutInflater() {
            LayoutInflater from = LayoutInflater.from(qSThemedContextContext());
            Preconditions.checkNotNullFromProvides(from);
            return from;
        }

        public final View rootViewView() {
            View view = this.qsFragment.getView();
            Preconditions.checkNotNullFromProvides(view);
            return view;
        }

        public final SecQSPanel secQSPanel() {
            SecQSPanel secQSPanel = (SecQSPanel) rootViewView().findViewById(R.id.quick_settings_panel);
            Preconditions.checkNotNullFromProvides(secQSPanel);
            return secQSPanel;
        }

        public final SecQuickQSPanel secQuickQSPanel() {
            SecQuickQSPanel secQuickQSPanel = (SecQuickQSPanel) rootViewView().findViewById(R.id.quick_qs_panel);
            Preconditions.checkNotNullFromProvides(secQuickQSPanel);
            return secQuickQSPanel;
        }

        public final SecQuickStatusBarHeader secQuickStatusBarHeader() {
            SecQuickStatusBarHeader secQuickStatusBarHeader = (SecQuickStatusBarHeader) rootViewView().findViewById(R.id.header);
            Preconditions.checkNotNullFromProvides(secQuickStatusBarHeader);
            return secQuickStatusBarHeader;
        }

        public final SoundCraftViewModel soundCraftViewModel() {
            return new SoundCraftViewModel(this.tvGlobalRootComponent.context, (WearableManager) this.tvSysUIComponentImpl.wearableManagerProvider.get(), (RoutineManager) this.tvSysUIComponentImpl.routineManagerProvider.get(), (BluetoothDeviceManager) this.tvSysUIComponentImpl.bluetoothDeviceManagerProvider.get(), (ModelProvider) this.tvSysUIComponentImpl.modelProvider.get(), audioPlaybackManager());
        }

        private QSFragmentComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, QSFragment qSFragment) {
            this.qSFragmentComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.qsFragment = qSFragment;
            initialize(qSFragment);
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class RemoteInputViewSubcomponentFactory implements RemoteInputViewSubcomponent.Factory {
        public final ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ RemoteInputViewSubcomponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, expandableNotificationRowComponentImpl);
        }

        @Override // com.android.systemui.statusbar.policy.dagger.RemoteInputViewSubcomponent.Factory
        public final RemoteInputViewSubcomponent create(RemoteInputView remoteInputView, RemoteInputController remoteInputController) {
            remoteInputView.getClass();
            remoteInputController.getClass();
            return new RemoteInputViewSubcomponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.expandableNotificationRowComponentImpl, remoteInputView, remoteInputController, 0);
        }

        private RemoteInputViewSubcomponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.expandableNotificationRowComponentImpl = expandableNotificationRowComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class RemoteInputViewSubcomponentImpl implements RemoteInputViewSubcomponent {
        public final ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl;
        public final RemoteInputController remoteInputController;
        public final RemoteInputViewSubcomponentImpl remoteInputViewSubcomponentImpl;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;
        public final RemoteInputView view;

        public /* synthetic */ RemoteInputViewSubcomponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl, RemoteInputView remoteInputView, RemoteInputController remoteInputController, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, expandableNotificationRowComponentImpl, remoteInputView, remoteInputController);
        }

        @Override // com.android.systemui.statusbar.policy.dagger.RemoteInputViewSubcomponent
        public final RemoteInputViewController getController() {
            return remoteInputViewControllerImpl();
        }

        public final RemoteInputViewControllerImpl remoteInputViewControllerImpl() {
            return new RemoteInputViewControllerImpl(this.view, this.expandableNotificationRowComponentImpl.notificationEntry, (RemoteInputQuickSettingsDisabler) this.tvSysUIComponentImpl.remoteInputQuickSettingsDisablerProvider.get(), this.remoteInputController, (ShortcutManager) this.tvGlobalRootComponent.provideShortcutManagerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
        }

        private RemoteInputViewSubcomponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl, RemoteInputView remoteInputView, RemoteInputController remoteInputController) {
            this.remoteInputViewSubcomponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.expandableNotificationRowComponentImpl = expandableNotificationRowComponentImpl;
            this.view = remoteInputView;
            this.remoteInputController = remoteInputController;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class SectionHeaderControllerSubcomponentBuilder implements SectionHeaderControllerSubcomponent.Builder {
        public String clickIntentAction;
        public Integer headerText;
        public String nodeLabel;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ SectionHeaderControllerSubcomponentBuilder(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.systemui.statusbar.notification.dagger.SectionHeaderControllerSubcomponent.Builder
        public final SectionHeaderControllerSubcomponent build() {
            Preconditions.checkBuilderRequirement(String.class, this.nodeLabel);
            Preconditions.checkBuilderRequirement(Integer.class, this.headerText);
            Preconditions.checkBuilderRequirement(String.class, this.clickIntentAction);
            return new SectionHeaderControllerSubcomponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.nodeLabel, this.headerText, this.clickIntentAction, 0);
        }

        @Override // com.android.systemui.statusbar.notification.dagger.SectionHeaderControllerSubcomponent.Builder
        public final SectionHeaderControllerSubcomponentBuilder clickIntentAction(String str) {
            str.getClass();
            this.clickIntentAction = str;
            return this;
        }

        @Override // com.android.systemui.statusbar.notification.dagger.SectionHeaderControllerSubcomponent.Builder
        public final SectionHeaderControllerSubcomponentBuilder nodeLabel(String str) {
            str.getClass();
            this.nodeLabel = str;
            return this;
        }

        private SectionHeaderControllerSubcomponentBuilder(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }

        @Override // com.android.systemui.statusbar.notification.dagger.SectionHeaderControllerSubcomponent.Builder
        public final SectionHeaderControllerSubcomponentBuilder headerText(int i) {
            Integer valueOf = Integer.valueOf(i);
            valueOf.getClass();
            this.headerText = valueOf;
            return this;
        }

        @Override // com.android.systemui.statusbar.notification.dagger.SectionHeaderControllerSubcomponent.Builder
        public final SectionHeaderControllerSubcomponent.Builder clickIntentAction(String str) {
            this.clickIntentAction = str;
            return this;
        }

        @Override // com.android.systemui.statusbar.notification.dagger.SectionHeaderControllerSubcomponent.Builder
        public final SectionHeaderControllerSubcomponent.Builder nodeLabel(String str) {
            this.nodeLabel = str;
            return this;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class SectionHeaderControllerSubcomponentImpl implements SectionHeaderControllerSubcomponent {
        public final String clickIntentAction;
        public final Integer headerText;
        public final String nodeLabel;
        public final SectionHeaderControllerSubcomponentImpl sectionHeaderControllerSubcomponentImpl;
        public Provider sectionHeaderNodeControllerImplProvider;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final SectionHeaderControllerSubcomponentImpl sectionHeaderControllerSubcomponentImpl;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, SectionHeaderControllerSubcomponentImpl sectionHeaderControllerSubcomponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.sectionHeaderControllerSubcomponentImpl = sectionHeaderControllerSubcomponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                if (this.id == 0) {
                    return (T) new SectionHeaderNodeControllerImpl(this.sectionHeaderControllerSubcomponentImpl.nodeLabel, (LayoutInflater) this.tvGlobalRootComponent.providerLayoutInflaterProvider.get(), this.sectionHeaderControllerSubcomponentImpl.headerText.intValue(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.sectionHeaderControllerSubcomponentImpl.clickIntentAction);
                }
                throw new AssertionError(this.id);
            }
        }

        public /* synthetic */ SectionHeaderControllerSubcomponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, String str, Integer num, String str2, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, str, num, str2);
        }

        @Override // com.android.systemui.statusbar.notification.dagger.SectionHeaderControllerSubcomponent
        public final SectionHeaderController getHeaderController() {
            return (SectionHeaderController) this.sectionHeaderNodeControllerImplProvider.get();
        }

        @Override // com.android.systemui.statusbar.notification.dagger.SectionHeaderControllerSubcomponent
        public final NodeController getNodeController() {
            return (NodeController) this.sectionHeaderNodeControllerImplProvider.get();
        }

        public final void initialize(String str, Integer num, String str2) {
            this.sectionHeaderNodeControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.sectionHeaderControllerSubcomponentImpl, 0));
        }

        private SectionHeaderControllerSubcomponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, String str, Integer num, String str2) {
            this.sectionHeaderControllerSubcomponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.nodeLabel = str;
            this.headerText = num;
            this.clickIntentAction = str2;
            initialize(str, num, str2);
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class StatusBarFragmentComponentFactory implements StatusBarFragmentComponent.Factory {
        public final CentralSurfacesComponentImpl centralSurfacesComponentImpl;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ StatusBarFragmentComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, CentralSurfacesComponentImpl centralSurfacesComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, centralSurfacesComponentImpl);
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent.Factory
        public final StatusBarFragmentComponent create(CollapsedStatusBarFragment collapsedStatusBarFragment) {
            collapsedStatusBarFragment.getClass();
            return new StatusBarFragmentComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, collapsedStatusBarFragment, 0);
        }

        private StatusBarFragmentComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, CentralSurfacesComponentImpl centralSurfacesComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.centralSurfacesComponentImpl = centralSurfacesComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class StatusBarFragmentComponentImpl implements StatusBarFragmentComponent {
        public final CentralSurfacesComponentImpl centralSurfacesComponentImpl;
        public final CollapsedStatusBarFragment collapsedStatusBarFragment;
        public Provider endSideContentProvider;
        public Provider headsUpAppearanceControllerProvider;
        public Provider lightsOutNotifControllerProvider;
        public Provider provideBatteryMeterViewProvider;
        public Provider provideLeftClockContainerProvider;
        public Provider provideLightsOutNotifViewProvider;
        public Provider provideNetspeedViewControllerProvider;
        public Provider provideOperatorFrameNameViewProvider;
        public Provider provideOperatorNameViewProvider;
        public Provider providePhoneStatusBarClockManagerProvider;
        public Provider providePhoneStatusBarTransitionsProvider;
        public Provider providePhoneStatusBarViewControllerProvider;
        public Provider providePhoneStatusBarViewProvider;
        public Provider provideQSClockIndicatorViewProvider;
        public Provider provideStatusIconContainerProvider;
        public Provider providesHeasdUpStatusBarViewProvider;
        public Provider qSClockIndicatorViewControllerProvider;
        public Provider startSideContentProvider;
        public Provider statusBarBoundsProvider;
        public Provider statusBarDemoModeProvider;
        public final StatusBarFragmentComponentImpl statusBarFragmentComponentImpl;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final CentralSurfacesComponentImpl centralSurfacesComponentImpl;
            public final int id;
            public final StatusBarFragmentComponentImpl statusBarFragmentComponentImpl;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, CentralSurfacesComponentImpl centralSurfacesComponentImpl, StatusBarFragmentComponentImpl statusBarFragmentComponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.centralSurfacesComponentImpl = centralSurfacesComponentImpl;
                this.statusBarFragmentComponentImpl = statusBarFragmentComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        T t = (T) ((BatteryMeterView) ((PhoneStatusBarView) this.statusBarFragmentComponentImpl.providePhoneStatusBarViewProvider.get()).findViewById(R.id.battery));
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 1:
                        T t2 = (T) ((PhoneStatusBarView) this.statusBarFragmentComponentImpl.collapsedStatusBarFragment.getView());
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 2:
                        return (T) StatusBarFragmentModule_ProvidePhoneStatusBarViewControllerFactory.providePhoneStatusBarViewController(this.statusBarFragmentComponentImpl.phoneStatusBarViewControllerFactory(), (PhoneStatusBarView) this.statusBarFragmentComponentImpl.providePhoneStatusBarViewProvider.get());
                    case 3:
                        return (T) StatusBarFragmentModule.provideNetspeedViewController((PhoneStatusBarView) this.statusBarFragmentComponentImpl.providePhoneStatusBarViewProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (IndicatorCutoutUtil) this.tvSysUIComponentImpl.indicatorCutoutUtilProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 4:
                        T t3 = (T) ((StatusIconContainer) ((PhoneStatusBarView) this.statusBarFragmentComponentImpl.providePhoneStatusBarViewProvider.get()).findViewById(R.id.statusIcons));
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    case 5:
                        return (T) new PhoneStatusBarClockManager(this.tvGlobalRootComponent.context, (PhoneStatusBarView) this.statusBarFragmentComponentImpl.providePhoneStatusBarViewProvider.get(), (SlimIndicatorViewMediator) this.tvSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get(), (IndicatorGardenPresenter) this.tvSysUIComponentImpl.indicatorGardenPresenterProvider.get(), (QSClockIndicatorView) this.statusBarFragmentComponentImpl.provideQSClockIndicatorViewProvider.get());
                    case 6:
                        T t4 = (T) ((QSClockIndicatorView) ((PhoneStatusBarView) this.statusBarFragmentComponentImpl.providePhoneStatusBarViewProvider.get()).findViewById(R.id.clock));
                        Preconditions.checkNotNullFromProvides(t4);
                        return t4;
                    case 7:
                        return (T) new HeadsUpAppearanceController((NotificationIconAreaController) this.tvSysUIComponentImpl.notificationIconAreaControllerProvider.get(), (HeadsUpManagerPhone) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (NotificationWakeUpCoordinator) this.tvSysUIComponentImpl.notificationWakeUpCoordinatorProvider.get(), (DarkIconDispatcher) this.tvSysUIComponentImpl.darkIconDispatcherImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (NotificationStackScrollLayoutController) this.centralSurfacesComponentImpl.notificationStackScrollLayoutControllerProvider.get(), (ShadeViewController) this.centralSurfacesComponentImpl.notificationPanelViewControllerProvider.get(), (NotificationRoundnessManager) this.tvSysUIComponentImpl.notificationRoundnessManagerProvider.get(), (HeadsUpStatusBarView) this.statusBarFragmentComponentImpl.providesHeasdUpStatusBarViewProvider.get(), (Optional) this.statusBarFragmentComponentImpl.provideOperatorFrameNameViewProvider.get(), (View) this.statusBarFragmentComponentImpl.provideLeftClockContainerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get());
                    case 8:
                        T t5 = (T) ((HeadsUpStatusBarView) ((PhoneStatusBarView) this.statusBarFragmentComponentImpl.providePhoneStatusBarViewProvider.get()).findViewById(R.id.heads_up_status_bar_view));
                        Preconditions.checkNotNullFromProvides(t5);
                        return t5;
                    case 9:
                        return (T) StatusBarFragmentModule_ProvideOperatorFrameNameViewFactory.provideOperatorFrameNameView((PhoneStatusBarView) this.statusBarFragmentComponentImpl.providePhoneStatusBarViewProvider.get());
                    case 10:
                        T t6 = (T) ((PhoneStatusBarView) this.statusBarFragmentComponentImpl.providePhoneStatusBarViewProvider.get()).findViewById(R.id.left_clock_container);
                        Preconditions.checkNotNullFromProvides(t6);
                        return t6;
                    case 11:
                        return (T) new LightsOutNotifController((View) this.statusBarFragmentComponentImpl.provideLightsOutNotifViewProvider.get(), (WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get(), (NotifLiveDataStore) this.tvSysUIComponentImpl.notifLiveDataStoreImplProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get());
                    case 12:
                        T t7 = (T) ((PhoneStatusBarView) this.statusBarFragmentComponentImpl.providePhoneStatusBarViewProvider.get()).findViewById(R.id.notification_lights_out);
                        Preconditions.checkNotNullFromProvides(t7);
                        return t7;
                    case 13:
                        QSClockIndicatorView qSClockIndicatorView = (QSClockIndicatorView) this.statusBarFragmentComponentImpl.provideQSClockIndicatorViewProvider.get();
                        View view = (View) this.statusBarFragmentComponentImpl.provideOperatorNameViewProvider.get();
                        DemoModeController demoModeController = (DemoModeController) this.tvSysUIComponentImpl.provideDemoModeControllerProvider.get();
                        PhoneStatusBarTransitions phoneStatusBarTransitions = (PhoneStatusBarTransitions) this.statusBarFragmentComponentImpl.providePhoneStatusBarTransitionsProvider.get();
                        NavigationBarController navigationBarController = (NavigationBarController) this.tvSysUIComponentImpl.navigationBarControllerProvider.get();
                        DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
                        Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
                        return (T) new StatusBarDemoMode(qSClockIndicatorView, view, demoModeController, phoneStatusBarTransitions, navigationBarController, daggerTvGlobalRootComponent.displayIdInteger());
                    case 14:
                        T t8 = (T) ((PhoneStatusBarView) this.statusBarFragmentComponentImpl.providePhoneStatusBarViewProvider.get()).findViewById(R.id.operator_name);
                        Preconditions.checkNotNullFromProvides(t8);
                        return t8;
                    case 15:
                        return (T) new PhoneStatusBarTransitions((PhoneStatusBarView) this.statusBarFragmentComponentImpl.providePhoneStatusBarViewProvider.get(), ((StatusBarWindowController) this.tvSysUIComponentImpl.statusBarWindowControllerProvider.get()).mStatusBarWindowView.findViewById(R.id.status_bar_container));
                    case 16:
                        return (T) new StatusBarBoundsProvider(this.statusBarFragmentComponentImpl.setOfBoundsChangeListener(), (View) this.statusBarFragmentComponentImpl.startSideContentProvider.get(), (View) this.statusBarFragmentComponentImpl.endSideContentProvider.get());
                    case 17:
                        T t9 = (T) ((PhoneStatusBarView) this.statusBarFragmentComponentImpl.providePhoneStatusBarViewProvider.get()).findViewById(R.id.status_bar_start_side_content);
                        Preconditions.checkNotNullFromProvides(t9);
                        return t9;
                    case 18:
                        T t10 = (T) ((PhoneStatusBarView) this.statusBarFragmentComponentImpl.providePhoneStatusBarViewProvider.get()).findViewById(R.id.status_bar_end_side_content);
                        Preconditions.checkNotNullFromProvides(t10);
                        return t10;
                    case 19:
                        return (T) new QSClockIndicatorViewController((QSClockIndicatorView) this.statusBarFragmentComponentImpl.provideQSClockIndicatorViewProvider.get(), (DarkIconDispatcher) this.tvSysUIComponentImpl.darkIconDispatcherImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (SlimIndicatorViewMediator) this.tvSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (QSClockBellTower) this.tvSysUIComponentImpl.qSClockBellTowerProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ StatusBarFragmentComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, CentralSurfacesComponentImpl centralSurfacesComponentImpl, CollapsedStatusBarFragment collapsedStatusBarFragment, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, centralSurfacesComponentImpl, collapsedStatusBarFragment);
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent
        public final BatteryMeterViewController getBatteryMeterViewController() {
            return new BatteryMeterViewController((BatteryMeterView) this.provideBatteryMeterViewProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (ContentResolver) this.tvGlobalRootComponent.provideContentResolverProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (BatteryController) this.tvSysUIComponentImpl.provideBatteryControllerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (SlimIndicatorViewMediator) this.tvSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get());
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent
        public final StatusBarBoundsProvider getBoundsProvider() {
            return (StatusBarBoundsProvider) this.statusBarBoundsProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent
        public final HeadsUpAppearanceController getHeadsUpAppearanceController() {
            return (HeadsUpAppearanceController) this.headsUpAppearanceControllerProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent
        public final LightsOutNotifController getLightsOutNotifController() {
            return (LightsOutNotifController) this.lightsOutNotifControllerProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent
        public final PhoneStatusBarTransitions getPhoneStatusBarTransitions() {
            return (PhoneStatusBarTransitions) this.providePhoneStatusBarTransitionsProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent
        public final PhoneStatusBarView getPhoneStatusBarView() {
            return (PhoneStatusBarView) this.providePhoneStatusBarViewProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent
        public final PhoneStatusBarViewController getPhoneStatusBarViewController() {
            return (PhoneStatusBarViewController) this.providePhoneStatusBarViewControllerProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent
        public final QSClockIndicatorViewController getQSClockIndicatorViewController() {
            return (QSClockIndicatorViewController) this.qSClockIndicatorViewControllerProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent
        public final Set<StatusBarBoundsProvider> getStartables() {
            return Collections.singleton((StatusBarBoundsProvider) this.statusBarBoundsProvider.get());
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent
        public final StatusBarDemoMode getStatusBarDemoMode() {
            return (StatusBarDemoMode) this.statusBarDemoModeProvider.get();
        }

        public final IndicatorMarqueeGardener indicatorMarqueeGardener() {
            return new IndicatorMarqueeGardener(this.tvGlobalRootComponent.context, (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get());
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent
        public final /* bridge */ /* synthetic */ void init() {
            super.init();
        }

        public final void initialize(CollapsedStatusBarFragment collapsedStatusBarFragment) {
            this.providePhoneStatusBarViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 1));
            this.provideBatteryMeterViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 0));
            this.provideNetspeedViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 3));
            this.provideStatusIconContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 4));
            this.provideQSClockIndicatorViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 6));
            this.providePhoneStatusBarClockManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 5));
            this.providePhoneStatusBarViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 2));
            this.providesHeasdUpStatusBarViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 8));
            this.provideOperatorFrameNameViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 9));
            this.provideLeftClockContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 10));
            this.headsUpAppearanceControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 7));
            this.provideLightsOutNotifViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 12));
            this.lightsOutNotifControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 11));
            this.provideOperatorNameViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 14));
            this.providePhoneStatusBarTransitionsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 15));
            this.statusBarDemoModeProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 13));
            this.startSideContentProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 17));
            this.endSideContentProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 18));
            this.statusBarBoundsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 16));
            this.qSClockIndicatorViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.centralSurfacesComponentImpl, this.statusBarFragmentComponentImpl, 19));
        }

        public final KnoxStatusBarControlViewModel knoxStatusBarControlViewModel() {
            return new KnoxStatusBarControlViewModel((KnoxStatusBarControlInteractor) this.tvSysUIComponentImpl.knoxStatusBarControlInteractorProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (DarkIconDispatcher) this.tvSysUIComponentImpl.darkIconDispatcherImplProvider.get());
        }

        public final PhoneStatusBarViewController.Factory phoneStatusBarViewControllerFactory() {
            return new PhoneStatusBarViewController.Factory((Optional) this.tvSysUIComponentImpl.provideSysUIUnfoldComponentProvider.get(), (Optional) this.tvGlobalRootComponent.provideStatusBarScopedTransitionProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), statusBarUserChipViewModel(), (CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get(), (ShadeController) this.tvSysUIComponentImpl.shadeControllerImplProvider.get(), this.tvSysUIComponentImpl.shadeLogger(), (ViewUtil) this.tvSysUIComponentImpl.viewUtilProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (IndicatorGardenPresenter) this.tvSysUIComponentImpl.indicatorGardenPresenterProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (IndicatorGardenViewTreeLogHelper) this.tvSysUIComponentImpl.indicatorGardenViewTreeLogHelperProvider.get(), (NetspeedViewController) this.provideNetspeedViewControllerProvider.get(), knoxStatusBarControlViewModel(), statusIconContainerController(), (PrivacyDotViewController) this.tvSysUIComponentImpl.privacyDotViewControllerProvider.get(), (SamsungStatusBarGrayIconHelper) this.tvSysUIComponentImpl.samsungStatusBarGrayIconHelperProvider.get(), (TwoPhoneModeIconController) this.tvSysUIComponentImpl.twoPhoneModeIconControllerProvider.get(), (PhoneStatusBarClockManager) this.providePhoneStatusBarClockManagerProvider.get(), (IndicatorCutoutUtil) this.tvSysUIComponentImpl.indicatorCutoutUtilProvider.get(), indicatorMarqueeGardener());
        }

        public final Set<SystemBarAttributesListener> setOfBoundsChangeListener() {
            return Collections.singleton((SystemBarAttributesListener) this.tvSysUIComponentImpl.systemBarAttributesListenerProvider.get());
        }

        public final StatusBarUserChipViewModel statusBarUserChipViewModel() {
            return new StatusBarUserChipViewModel((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (UserInteractor) this.tvSysUIComponentImpl.userInteractorProvider.get());
        }

        public final StatusIconContainerController statusIconContainerController() {
            return new StatusIconContainerController((StatusIconContainer) this.provideStatusIconContainerProvider.get(), this.tvGlobalRootComponent.context, (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (IndicatorGardenPresenter) this.tvSysUIComponentImpl.indicatorGardenPresenterProvider.get(), (IndicatorCutoutUtil) this.tvSysUIComponentImpl.indicatorCutoutUtilProvider.get());
        }

        private StatusBarFragmentComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, CentralSurfacesComponentImpl centralSurfacesComponentImpl, CollapsedStatusBarFragment collapsedStatusBarFragment) {
            this.statusBarFragmentComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.centralSurfacesComponentImpl = centralSurfacesComponentImpl;
            this.collapsedStatusBarFragment = collapsedStatusBarFragment;
            initialize(collapsedStatusBarFragment);
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class SubScreenQuickPanelComponentFactory implements SubScreenQuickPanelComponent.Factory {
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ SubScreenQuickPanelComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.systemui.subscreen.dagger.SubScreenQuickPanelComponent.Factory
        public final SubScreenQuickPanelComponent create(SubScreenQuickPanelWindowView subScreenQuickPanelWindowView) {
            subScreenQuickPanelWindowView.getClass();
            return new SubScreenQuickPanelComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, subScreenQuickPanelWindowView, 0);
        }

        private SubScreenQuickPanelComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class SubScreenQuickPanelComponentImpl implements SubScreenQuickPanelComponent {
        public final SubScreenQuickPanelWindowView quickPanelWindowView;
        public final SubScreenQuickPanelComponentImpl subScreenQuickPanelComponentImpl;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ SubScreenQuickPanelComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, SubScreenQuickPanelWindowView subScreenQuickPanelWindowView, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, subScreenQuickPanelWindowView);
        }

        public final BatteryMeterView batteryMeterView() {
            SubScreenQuickPanelHeader subScreenQuickPanelHeader = subScreenQuickPanelHeader();
            SubScreenQuickPanelModule.INSTANCE.getClass();
            return (BatteryMeterView) subScreenQuickPanelHeader.findViewById(R.id.batteryRemainingIcon);
        }

        public final BatteryMeterViewController batteryMeterViewController() {
            return new BatteryMeterViewController(batteryMeterView(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (ContentResolver) this.tvGlobalRootComponent.provideContentResolverProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (BatteryController) this.tvSysUIComponentImpl.provideBatteryControllerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (SlimIndicatorViewMediator) this.tvSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get());
        }

        @Override // com.android.systemui.subscreen.dagger.SubScreenQuickPanelComponent
        public final SubScreenQuickPanelHeaderController getSubScreenQuickPanelHeaderController() {
            return new SubScreenQuickPanelHeaderController(subScreenQuickPanelHeader(), batteryMeterViewController(), (StatusBarIconController) this.tvSysUIComponentImpl.statusBarIconControllerImplProvider.get(), netspeedViewController(), (StatusBarPipelineFlags) this.tvSysUIComponentImpl.statusBarPipelineFlagsProvider.get(), (WifiUiAdapter) this.tvSysUIComponentImpl.wifiUiAdapterProvider.get(), (MobileUiAdapter) this.tvSysUIComponentImpl.mobileUiAdapterProvider.get(), (MobileContextProvider) this.tvSysUIComponentImpl.mobileContextProvider.get(), this.tvSysUIComponentImpl.bTTetherUiAdapter());
        }

        public final NetspeedViewController netspeedViewController() {
            SubScreenQuickPanelModule subScreenQuickPanelModule = SubScreenQuickPanelModule.INSTANCE;
            SubScreenQuickPanelHeader subScreenQuickPanelHeader = subScreenQuickPanelHeader();
            IndicatorScaleGardener indicatorScaleGardener = (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get();
            IndicatorCutoutUtil indicatorCutoutUtil = (IndicatorCutoutUtil) this.tvSysUIComponentImpl.indicatorCutoutUtilProvider.get();
            UserTracker userTracker = (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get();
            subScreenQuickPanelModule.getClass();
            if (BasicRune.STATUS_REAL_TIME_NETWORK_SPEED) {
                return new NetspeedViewController((NetspeedView) subScreenQuickPanelHeader.findViewById(R.id.networkSpeed), indicatorScaleGardener, indicatorCutoutUtil, userTracker);
            }
            return null;
        }

        public final SubScreenQuickPanelHeader subScreenQuickPanelHeader() {
            SubScreenQuickPanelWindowView subScreenQuickPanelWindowView = this.quickPanelWindowView;
            SubScreenQuickPanelModule.INSTANCE.getClass();
            return (SubScreenQuickPanelHeader) subScreenQuickPanelWindowView.findViewById(R.id.sub_screen_quick_panel_header);
        }

        private SubScreenQuickPanelComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, SubScreenQuickPanelWindowView subScreenQuickPanelWindowView) {
            this.subScreenQuickPanelComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.quickPanelWindowView = subScreenQuickPanelWindowView;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class SwitchingProvider<T> implements Provider {
        public final int id;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;

        public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, int i) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.id = i;
        }

        @Override // javax.inject.Provider
        public final T get() {
            int i = this.id / 100;
            if (i != 0) {
                if (i == 1) {
                    return get1();
                }
                throw new AssertionError(this.id);
            }
            return get0();
        }

        /* JADX WARN: Multi-variable type inference failed */
        /* JADX WARN: Type inference failed for: r0v64, types: [T, android.util.DisplayMetrics] */
        /* JADX WARN: Type inference failed for: r1v17, types: [android.hardware.devicestate.DeviceStateManager$DeviceStateCallback, T, android.hardware.devicestate.DeviceStateManager$FoldStateListener] */
        /* JADX WARN: Type inference failed for: r9v131, types: [T, com.android.internal.jank.InteractionJankMonitor] */
        public final T get0() {
            switch (this.id) {
                case 0:
                    T t = (T) WindowManagerGlobal.getWindowManagerService();
                    Preconditions.checkNotNullFromProvides(t);
                    return t;
                case 1:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
                    UnfoldTransitionModule unfoldTransitionModule = daggerTvGlobalRootComponent.unfoldTransitionModule;
                    UnfoldTransitionConfig unfoldTransitionConfig = (UnfoldTransitionConfig) daggerTvGlobalRootComponent.resourceUnfoldTransitionConfigProvider.get();
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent2 = this.tvGlobalRootComponent;
                    return (T) UnfoldTransitionModule_ProvideShellProgressProviderFactory.provideShellProgressProvider(unfoldTransitionModule, unfoldTransitionConfig, daggerTvGlobalRootComponent2.unfoldTransitionProgressProvider, daggerTvGlobalRootComponent2.provideUnfoldOnlyProvider);
                case 2:
                    return (T) new ResourceUnfoldTransitionConfig();
                case 3:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent3 = this.tvGlobalRootComponent;
                    UnfoldSharedInternalModule unfoldSharedInternalModule = daggerTvGlobalRootComponent3.unfoldSharedInternalModule;
                    UnfoldTransitionConfig unfoldTransitionConfig2 = (UnfoldTransitionConfig) daggerTvGlobalRootComponent3.resourceUnfoldTransitionConfigProvider.get();
                    ScaleAwareTransitionProgressProvider.Factory factory = (ScaleAwareTransitionProgressProvider.Factory) this.tvGlobalRootComponent.factoryProvider.get();
                    ATraceLoggerTransitionProgressListener aTraceLoggerTransitionProgressListener = this.tvGlobalRootComponent.aTraceLoggerTransitionProgressListener();
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent4 = this.tvGlobalRootComponent;
                    return (T) UnfoldSharedInternalModule_UnfoldTransitionProgressProviderFactory.unfoldTransitionProgressProvider(unfoldSharedInternalModule, unfoldTransitionConfig2, factory, aTraceLoggerTransitionProgressListener, daggerTvGlobalRootComponent4.physicsBasedUnfoldTransitionProgressProvider, daggerTvGlobalRootComponent4.fixedTimingTransitionProgressProvider);
                case 4:
                    return (T) new ScaleAwareTransitionProgressProvider.Factory() { // from class: com.android.systemui.tv.DaggerTvGlobalRootComponent.SwitchingProvider.1
                        @Override // com.android.systemui.unfold.util.ScaleAwareTransitionProgressProvider.Factory
                        public final ScaleAwareTransitionProgressProvider wrap(UnfoldTransitionProgressProvider unfoldTransitionProgressProvider) {
                            return new ScaleAwareTransitionProgressProvider(unfoldTransitionProgressProvider, (ContentResolver) SwitchingProvider.this.tvGlobalRootComponent.provideContentResolverProvider.get());
                        }
                    };
                case 5:
                    T t2 = (T) this.tvGlobalRootComponent.context.getContentResolver();
                    Preconditions.checkNotNullFromProvides(t2);
                    return t2;
                case 6:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent5 = this.tvGlobalRootComponent;
                    return (T) new PhysicsBasedUnfoldTransitionProgressProvider(daggerTvGlobalRootComponent5.context, (FoldStateProvider) daggerTvGlobalRootComponent5.provideFoldStateProvider.get());
                case 7:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent6 = this.tvGlobalRootComponent;
                    UnfoldSharedModule unfoldSharedModule = daggerTvGlobalRootComponent6.unfoldSharedModule;
                    T t3 = (T) daggerTvGlobalRootComponent6.deviceFoldStateProvider();
                    unfoldSharedModule.getClass();
                    return t3;
                case 8:
                    return (T) new HingeSensorAngleProvider((SensorManager) this.tvGlobalRootComponent.providesSensorManagerProvider.get(), (Executor) this.tvGlobalRootComponent.provideUiBackgroundExecutorProvider.get());
                case 9:
                    T t4 = (T) ((SensorManager) this.tvGlobalRootComponent.context.getSystemService(SensorManager.class));
                    Preconditions.checkNotNullFromProvides(t4);
                    return t4;
                case 10:
                    T t5 = (T) Executors.newSingleThreadExecutor();
                    Preconditions.checkNotNullFromProvides(t5);
                    return t5;
                case 11:
                    return (T) new LifecycleScreenStatusProvider((ScreenLifecycle) this.tvGlobalRootComponent.screenLifecycleProvider.get());
                case 12:
                    return (T) new ScreenLifecycle((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                case 13:
                    return (T) new DumpManager();
                case 14:
                    return (T) new DeviceStateManagerFoldProvider((DeviceStateManager) this.tvGlobalRootComponent.provideDeviceStateManagerProvider.get(), this.tvGlobalRootComponent.context);
                case 15:
                    T t6 = (T) ((DeviceStateManager) this.tvGlobalRootComponent.context.getSystemService(DeviceStateManager.class));
                    Preconditions.checkNotNullFromProvides(t6);
                    return t6;
                case 16:
                    return (T) new ActivityManagerActivityTypeProvider((ActivityManager) this.tvGlobalRootComponent.provideActivityManagerProvider.get());
                case 17:
                    T t7 = (T) ((ActivityManager) this.tvGlobalRootComponent.context.getSystemService(ActivityManager.class));
                    Preconditions.checkNotNullFromProvides(t7);
                    return t7;
                case 18:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent7 = this.tvGlobalRootComponent;
                    UnfoldSharedModule unfoldSharedModule2 = daggerTvGlobalRootComponent7.unfoldSharedModule;
                    T t8 = (T) ((UnfoldKeyguardVisibilityManagerImpl) daggerTvGlobalRootComponent7.unfoldKeyguardVisibilityManagerImplProvider.get());
                    unfoldSharedModule2.getClass();
                    return t8;
                case 19:
                    return (T) new UnfoldKeyguardVisibilityManagerImpl();
                case 20:
                    T t9 = (T) ((DisplayManager) this.tvGlobalRootComponent.context.getSystemService(DisplayManager.class));
                    Preconditions.checkNotNullFromProvides(t9);
                    return t9;
                case 21:
                    return (T) new Handler((Looper) this.tvGlobalRootComponent.provideMainLooperProvider.get());
                case 22:
                    T t10 = (T) Looper.getMainLooper();
                    Preconditions.checkNotNullFromProvides(t10);
                    return t10;
                case 23:
                    T t11 = (T) this.tvGlobalRootComponent.context.getMainExecutor();
                    Preconditions.checkNotNullFromProvides(t11);
                    return t11;
                case 24:
                    return (T) new FixedTimingTransitionProgressProvider((FoldStateProvider) this.tvGlobalRootComponent.provideFoldStateProvider.get());
                case 25:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent8 = this.tvGlobalRootComponent;
                    UnfoldTransitionModule unfoldTransitionModule2 = daggerTvGlobalRootComponent8.unfoldTransitionModule;
                    FoldProvider foldProvider = (FoldProvider) daggerTvGlobalRootComponent8.deviceStateManagerFoldProvider.get();
                    Executor executor = (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get();
                    Optional optional = (Optional) this.tvGlobalRootComponent.unfoldTransitionProgressProvider.get();
                    unfoldTransitionModule2.getClass();
                    return (T) optional.map(new UnfoldTransitionModule$provideUnfoldOnlyProvider$1(foldProvider, executor));
                case 26:
                    T t12 = (T) ActivityTaskManager.getInstance();
                    Preconditions.checkNotNullFromProvides(t12);
                    return t12;
                case 27:
                    return (T) new UiEventLoggerImpl();
                case 28:
                    T t13 = (T) this.tvGlobalRootComponent.context.getPackageManager();
                    Preconditions.checkNotNullFromProvides(t13);
                    return t13;
                case 29:
                    T t14 = (T) ((UserManager) this.tvGlobalRootComponent.context.getSystemService(UserManager.class));
                    Preconditions.checkNotNullFromProvides(t14);
                    return t14;
                case 30:
                    T t15 = (T) ActivityManager.getService();
                    Preconditions.checkNotNullFromProvides(t15);
                    return t15;
                case 31:
                    this.tvGlobalRootComponent.androidInternalsModule.getClass();
                    return (T) new MetricsLogger();
                case 32:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent9 = this.tvGlobalRootComponent;
                    return (T) PluginsModule_ProvidesPluginManagerFactory.providesPluginManager(daggerTvGlobalRootComponent9.context, (PluginActionManager.Factory) daggerTvGlobalRootComponent9.providePluginInstanceManagerFactoryProvider.get(), PluginsModule_ProvidesPluginDebugFactory.providesPluginDebug(), (UncaughtExceptionPreHandlerManager) this.tvGlobalRootComponent.uncaughtExceptionPreHandlerManagerProvider.get(), (PluginEnabler) this.tvGlobalRootComponent.pluginEnablerImplProvider.get(), this.tvGlobalRootComponent.pluginPrefs(), this.tvGlobalRootComponent.namedListOfString(), (PluginInstance.Factory) this.tvGlobalRootComponent.providesPluginInstanceFactoryProvider.get());
                case 33:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent10 = this.tvGlobalRootComponent;
                    return (T) PluginsModule_ProvidePluginInstanceManagerFactoryFactory.providePluginInstanceManagerFactory(daggerTvGlobalRootComponent10.context, (PackageManager) daggerTvGlobalRootComponent10.providePackageManagerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvGlobalRootComponent.providesPluginExecutorProvider.get(), (NotificationManager) this.tvGlobalRootComponent.provideNotificationManagerProvider.get(), (PluginEnabler) this.tvGlobalRootComponent.pluginEnablerImplProvider.get(), this.tvGlobalRootComponent.namedListOfString(), (PluginInstance.Factory) this.tvGlobalRootComponent.providesPluginInstanceFactoryProvider.get());
                case 34:
                    return (T) PluginsModule_ProvidesPluginExecutorFactory.providesPluginExecutor(new ThreadFactoryImpl());
                case 35:
                    T t16 = (T) ((NotificationManager) this.tvGlobalRootComponent.context.getSystemService(NotificationManager.class));
                    Preconditions.checkNotNullFromProvides(t16);
                    return t16;
                case 36:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent11 = this.tvGlobalRootComponent;
                    return (T) new PluginEnablerImpl(daggerTvGlobalRootComponent11.context, (PackageManager) daggerTvGlobalRootComponent11.providePackageManagerProvider.get());
                case 37:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent12 = this.tvGlobalRootComponent;
                    Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
                    return (T) PluginsModule_ProvidesPluginInstanceFactoryFactory.providesPluginInstanceFactory(daggerTvGlobalRootComponent12.namedListOfString(), PluginsModule_ProvidesPluginDebugFactory.providesPluginDebug());
                case 38:
                    return (T) new UncaughtExceptionPreHandlerManager();
                case 39:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent13 = this.tvGlobalRootComponent;
                    GlobalModule globalModule = daggerTvGlobalRootComponent13.globalModule;
                    Context context = daggerTvGlobalRootComponent13.context;
                    globalModule.getClass();
                    ?? r0 = (T) new DisplayMetrics();
                    context.getDisplay().getMetrics(r0);
                    return r0;
                case 40:
                    T t17 = (T) ((PowerManager) this.tvGlobalRootComponent.context.getSystemService(PowerManager.class));
                    Preconditions.checkNotNullFromProvides(t17);
                    return t17;
                case 41:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent14 = this.tvGlobalRootComponent;
                    UnfoldTransitionModule unfoldTransitionModule3 = daggerTvGlobalRootComponent14.unfoldTransitionModule;
                    DeviceStateManager deviceStateManager = (DeviceStateManager) daggerTvGlobalRootComponent14.provideDeviceStateManagerProvider.get();
                    Context context2 = (Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get();
                    Executor executor2 = (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get();
                    unfoldTransitionModule3.getClass();
                    ?? r1 = (T) new DeviceStateManager.FoldStateListener(context2);
                    deviceStateManager.registerCallback(executor2, (DeviceStateManager.DeviceStateCallback) r1);
                    return r1;
                case 42:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent15 = this.tvGlobalRootComponent;
                    GlobalModule globalModule2 = daggerTvGlobalRootComponent15.globalModule;
                    Context context3 = daggerTvGlobalRootComponent15.context;
                    globalModule2.getClass();
                    T t18 = (T) context3.getApplicationContext();
                    Preconditions.checkNotNullFromProvides(t18);
                    return t18;
                case 43:
                    T t19 = (T) ViewConfiguration.get(this.tvGlobalRootComponent.context);
                    Preconditions.checkNotNullFromProvides(t19);
                    return t19;
                case 44:
                    T t20 = (T) IBatteryStats.Stub.asInterface(ServiceManager.getService("batterystats"));
                    Preconditions.checkNotNullFromProvides(t20);
                    return t20;
                case 45:
                    return (T) new NoLogcatEchoTracker();
                case 46:
                    ?? r9 = (T) InteractionJankMonitor.getInstance();
                    r9.configDebugOverlay(-256, 0.75d);
                    return r9;
                case 47:
                    this.tvGlobalRootComponent.frameworkServicesModule.getClass();
                    T t21 = (T) Choreographer.getInstance();
                    Preconditions.checkNotNullFromProvides(t21);
                    return t21;
                case 48:
                    return (T) new ExecutorImpl((Looper) this.tvGlobalRootComponent.provideMainLooperProvider.get());
                case 49:
                    return (T) IWallpaperManager.Stub.asInterface(ServiceManager.getService("wallpaper"));
                case 50:
                    T t22 = (T) IStatusBarService.Stub.asInterface(ServiceManager.getService("statusbar"));
                    Preconditions.checkNotNullFromProvides(t22);
                    return t22;
                case 51:
                    return (T) Boolean.valueOf(ActivityManager.isRunningInUserTestHarness());
                case 52:
                    return (T) new ExecutionImpl();
                case 53:
                    T t23 = (T) ((WindowManager) this.tvGlobalRootComponent.context.getSystemService(WindowManager.class));
                    Preconditions.checkNotNullFromProvides(t23);
                    return t23;
                case 54:
                    return (T) FrameworkServicesModule.providesFingerprintManager(this.tvGlobalRootComponent.context);
                case 55:
                    return (T) FrameworkServicesModule.provideFaceManager(this.tvGlobalRootComponent.context);
                case 56:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent16 = this.tvGlobalRootComponent;
                    FrameworkServicesModule frameworkServicesModule = daggerTvGlobalRootComponent16.frameworkServicesModule;
                    Context context4 = daggerTvGlobalRootComponent16.context;
                    frameworkServicesModule.getClass();
                    T t24 = (T) LayoutInflater.from(context4);
                    Preconditions.checkNotNullFromProvides(t24);
                    return t24;
                case 57:
                    T t25 = (T) ((AccessibilityManager) this.tvGlobalRootComponent.context.getSystemService(AccessibilityManager.class));
                    Preconditions.checkNotNullFromProvides(t25);
                    return t25;
                case 58:
                    T t26 = (T) ((DevicePolicyManager) this.tvGlobalRootComponent.context.getSystemService(DevicePolicyManager.class));
                    Preconditions.checkNotNullFromProvides(t26);
                    return t26;
                case 59:
                    return (T) new BuildInfo();
                case 60:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent17 = this.tvGlobalRootComponent;
                    AndroidInternalsModule androidInternalsModule = daggerTvGlobalRootComponent17.androidInternalsModule;
                    Context context5 = daggerTvGlobalRootComponent17.context;
                    androidInternalsModule.getClass();
                    return (T) new LockPatternUtils(context5);
                case 61:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent18 = this.tvGlobalRootComponent;
                    UnfoldTransitionModule unfoldTransitionModule4 = daggerTvGlobalRootComponent18.unfoldTransitionModule;
                    Context context6 = daggerTvGlobalRootComponent18.context;
                    RotationChangeProvider rotationChangeProvider = daggerTvGlobalRootComponent18.rotationChangeProvider();
                    Optional optional2 = (Optional) this.tvGlobalRootComponent.unfoldTransitionProgressProvider.get();
                    unfoldTransitionModule4.getClass();
                    return (T) optional2.map(new UnfoldTransitionModule$provideNaturalRotationProgressProvider$1(context6, rotationChangeProvider));
                case 62:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent19 = this.tvGlobalRootComponent;
                    UnfoldTransitionModule unfoldTransitionModule5 = daggerTvGlobalRootComponent19.unfoldTransitionModule;
                    Optional optional3 = (Optional) daggerTvGlobalRootComponent19.provideNaturalRotationProgressProvider.get();
                    unfoldTransitionModule5.getClass();
                    return (T) optional3.map(UnfoldTransitionModule$provideStatusBarScopedTransitionProvider$1.INSTANCE);
                case 63:
                    T t27 = (T) ((AlarmManager) this.tvGlobalRootComponent.context.getSystemService(AlarmManager.class));
                    Preconditions.checkNotNullFromProvides(t27);
                    return t27;
                case 64:
                    return (T) ((Vibrator) this.tvGlobalRootComponent.context.getSystemService(Vibrator.class));
                case 65:
                    T t28 = (T) ((TrustManager) this.tvGlobalRootComponent.context.getSystemService(TrustManager.class));
                    Preconditions.checkNotNullFromProvides(t28);
                    return t28;
                case 66:
                    T t29 = (T) ((KeyguardManager) this.tvGlobalRootComponent.context.getSystemService(KeyguardManager.class));
                    Preconditions.checkNotNullFromProvides(t29);
                    return t29;
                case 67:
                    T t30 = (T) ((SmartspaceManager) this.tvGlobalRootComponent.context.getSystemService(SmartspaceManager.class));
                    Preconditions.checkNotNullFromProvides(t30);
                    return t30;
                case 68:
                    T t31 = (T) LatencyTracker.getInstance(this.tvGlobalRootComponent.context);
                    Preconditions.checkNotNullFromProvides(t31);
                    return t31;
                case 69:
                    return (T) new VibrationUtil(this.tvGlobalRootComponent.context);
                case 70:
                    return (T) new CoverUtil();
                case 71:
                    return (T) new ExternalClockProvider();
                case 72:
                    return (T) FrameworkServicesModule_ProvideSatelliteManagerFactory.provideSatelliteManager(this.tvGlobalRootComponent.context);
                case 73:
                    T t32 = (T) ((ConnectivityManager) this.tvGlobalRootComponent.context.getSystemService(ConnectivityManager.class));
                    Preconditions.checkNotNullFromProvides(t32);
                    return t32;
                case 74:
                    T t33 = (T) ((SubscriptionManager) this.tvGlobalRootComponent.context.getSystemService(SubscriptionManager.class));
                    Preconditions.checkNotNullFromProvides(t33);
                    return t33;
                case 75:
                    T t34 = (T) ((TelephonyManager) this.tvGlobalRootComponent.context.getSystemService(TelephonyManager.class));
                    Preconditions.checkNotNullFromProvides(t34);
                    return t34;
                case 76:
                    return (T) ((WifiManager) this.tvGlobalRootComponent.context.getSystemService(WifiManager.class));
                case 77:
                    T t35 = (T) ((CarrierConfigManager) this.tvGlobalRootComponent.context.getSystemService(CarrierConfigManager.class));
                    Preconditions.checkNotNullFromProvides(t35);
                    return t35;
                case 78:
                    T t36 = (T) ((AudioManager) this.tvGlobalRootComponent.context.getSystemService(AudioManager.class));
                    Preconditions.checkNotNullFromProvides(t36);
                    return t36;
                case 79:
                    T t37 = (T) ((SensorPrivacyManager) this.tvGlobalRootComponent.context.getSystemService(SensorPrivacyManager.class));
                    Preconditions.checkNotNullFromProvides(t37);
                    return t37;
                case 80:
                    T t38 = (T) ((ColorDisplayManager) this.tvGlobalRootComponent.context.getSystemService(ColorDisplayManager.class));
                    Preconditions.checkNotNullFromProvides(t38);
                    return t38;
                case 81:
                    T t39 = (T) IDreamManager.Stub.asInterface(ServiceManager.getService("dreams"));
                    Preconditions.checkNotNullFromProvides(t39);
                    return t39;
                case 82:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent20 = this.tvGlobalRootComponent;
                    return (T) FrameworkServicesModule.providesBiometricManager(daggerTvGlobalRootComponent20.context, (FaceManager) daggerTvGlobalRootComponent20.provideFaceManagerProvider.get(), (FingerprintManager) this.tvGlobalRootComponent.providesFingerprintManagerProvider.get());
                case 83:
                    T t40 = (T) ((NetworkScoreManager) this.tvGlobalRootComponent.context.getSystemService(NetworkScoreManager.class));
                    Preconditions.checkNotNullFromProvides(t40);
                    return t40;
                case 84:
                    return (T) ((BluetoothManager) this.tvGlobalRootComponent.provideBluetoothManagerProvider.get()).getAdapter();
                case 85:
                    T t41 = (T) ((BluetoothManager) this.tvGlobalRootComponent.context.getSystemService(BluetoothManager.class));
                    Preconditions.checkNotNullFromProvides(t41);
                    return t41;
                case 86:
                    T t42 = (T) ((CameraManager) this.tvGlobalRootComponent.context.getSystemService(CameraManager.class));
                    Preconditions.checkNotNullFromProvides(t42);
                    return t42;
                case 87:
                    return (T) FrameworkServicesModule_ProvidePermissionManagerFactory.providePermissionManager(this.tvGlobalRootComponent.context);
                case 88:
                    T t43 = (T) ((SafetyCenterManager) this.tvGlobalRootComponent.context.getSystemService(SafetyCenterManager.class));
                    Preconditions.checkNotNullFromProvides(t43);
                    return t43;
                case 89:
                    return (T) FrameworkServicesModule_ProvideINotificationManagerFactory.provideINotificationManager(this.tvGlobalRootComponent.frameworkServicesModule);
                case 90:
                    T t44 = (T) ((LauncherApps) this.tvGlobalRootComponent.context.getSystemService(LauncherApps.class));
                    Preconditions.checkNotNullFromProvides(t44);
                    return t44;
                case 91:
                    T t45 = (T) ((ShortcutManager) this.tvGlobalRootComponent.context.getSystemService(ShortcutManager.class));
                    Preconditions.checkNotNullFromProvides(t45);
                    return t45;
                case 92:
                    T t46 = (T) ActivityTaskManager.getService();
                    Preconditions.checkNotNullFromProvides(t46);
                    return t46;
                case 93:
                    T t47 = (T) ((RoleManager) this.tvGlobalRootComponent.context.getSystemService(RoleManager.class));
                    Preconditions.checkNotNullFromProvides(t47);
                    return t47;
                case 94:
                    T t48 = (T) ((InputManager) this.tvGlobalRootComponent.context.getSystemService(InputManager.class));
                    Preconditions.checkNotNullFromProvides(t48);
                    return t48;
                case 95:
                    T t49 = (T) PackageManagerWrapper.sInstance;
                    Preconditions.checkNotNullFromProvides(t49);
                    return t49;
                case 96:
                    T t50 = (T) ((StatsManager) this.tvGlobalRootComponent.context.getSystemService(StatsManager.class));
                    Preconditions.checkNotNullFromProvides(t50);
                    return t50;
                case 97:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent21 = this.tvGlobalRootComponent;
                    return (T) UnfoldSharedInternalModule_ProvideProgressForwarderFactory.provideProgressForwarder(daggerTvGlobalRootComponent21.unfoldSharedInternalModule, (UnfoldTransitionConfig) daggerTvGlobalRootComponent21.resourceUnfoldTransitionConfigProvider.get(), this.tvGlobalRootComponent.unfoldTransitionProgressForwarderProvider);
                case 98:
                    return (T) new UnfoldTransitionProgressForwarder();
                case 99:
                    T t51 = (T) ((JobScheduler) this.tvGlobalRootComponent.context.getSystemService(JobScheduler.class));
                    Preconditions.checkNotNullFromProvides(t51);
                    return t51;
                default:
                    throw new AssertionError(this.id);
            }
        }

        public final T get1() {
            switch (this.id) {
                case 100:
                    T t = (T) CrossWindowBlurListeners.getInstance();
                    Preconditions.checkNotNullFromProvides(t);
                    return t;
                case 101:
                    T t2 = (T) IAudioService.Stub.asInterface(ServiceManager.getService(ServiceTuple.MEDIA_CAP_AUDIO));
                    Preconditions.checkNotNullFromProvides(t2);
                    return t2;
                case 102:
                    T t3 = (T) ((CaptioningManager) this.tvGlobalRootComponent.context.getSystemService(CaptioningManager.class));
                    Preconditions.checkNotNullFromProvides(t3);
                    return t3;
                case 103:
                    return (T) new PluginDependencyProvider(DoubleCheck.lazy(this.tvGlobalRootComponent.providesPluginManagerProvider));
                case 104:
                    T t4 = (T) ((PowerExemptionManager) this.tvGlobalRootComponent.context.getSystemService(PowerExemptionManager.class));
                    Preconditions.checkNotNullFromProvides(t4);
                    return t4;
                case 105:
                    return (T) ((TelecomManager) this.tvGlobalRootComponent.context.getSystemService(TelecomManager.class));
                case 106:
                    T t5 = (T) ((UiModeManager) this.tvGlobalRootComponent.context.getSystemService(UiModeManager.class));
                    Preconditions.checkNotNullFromProvides(t5);
                    return t5;
                case 107:
                    T t6 = (T) ((AppOpsManager) this.tvGlobalRootComponent.context.getSystemService(AppOpsManager.class));
                    Preconditions.checkNotNullFromProvides(t6);
                    return t6;
                case 108:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
                    return (T) UnfoldTransitionModule_ProvidesFoldStateLoggingProviderFactory.providesFoldStateLoggingProvider(daggerTvGlobalRootComponent.unfoldTransitionModule, (UnfoldTransitionConfig) daggerTvGlobalRootComponent.resourceUnfoldTransitionConfigProvider.get(), DoubleCheck.lazy(this.tvGlobalRootComponent.provideFoldStateProvider));
                case 109:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent2 = this.tvGlobalRootComponent;
                    UnfoldTransitionModule unfoldTransitionModule = daggerTvGlobalRootComponent2.unfoldTransitionModule;
                    Optional optional = (Optional) daggerTvGlobalRootComponent2.providesFoldStateLoggingProvider.get();
                    unfoldTransitionModule.getClass();
                    return (T) optional.map(UnfoldTransitionModule$providesFoldStateLogger$1.INSTANCE);
                case 110:
                    return (T) new CoverUtilWrapper((CoverUtil) this.tvGlobalRootComponent.coverUtilProvider.get());
                case 111:
                    T t7 = (T) ((StorageManager) this.tvGlobalRootComponent.context.getSystemService(StorageManager.class));
                    Preconditions.checkNotNullFromProvides(t7);
                    return t7;
                case 112:
                    T t8 = (T) ((OverlayManager) this.tvGlobalRootComponent.context.getSystemService(OverlayManager.class));
                    Preconditions.checkNotNullFromProvides(t8);
                    return t8;
                case 113:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent3 = this.tvGlobalRootComponent;
                    UnfoldSharedModule unfoldSharedModule = daggerTvGlobalRootComponent3.unfoldSharedModule;
                    T t9 = (T) ((UnfoldKeyguardVisibilityManagerImpl) daggerTvGlobalRootComponent3.unfoldKeyguardVisibilityManagerImplProvider.get());
                    unfoldSharedModule.getClass();
                    return t9;
                case 114:
                    T t10 = (T) IPackageManager.Stub.asInterface(ServiceManager.getService("package"));
                    Preconditions.checkNotNullFromProvides(t10);
                    return t10;
                case 115:
                    return (T) FrameworkServicesModule_ProvideOptionalTelecomManagerFactory.provideOptionalTelecomManager(this.tvGlobalRootComponent.context);
                case 116:
                    T t11 = (T) ((InputMethodManager) this.tvGlobalRootComponent.context.getSystemService(InputMethodManager.class));
                    Preconditions.checkNotNullFromProvides(t11);
                    return t11;
                case 117:
                    return (T) new MultiShadeInputProxy();
                case 118:
                    return (T) FrameworkServicesModule_ProvideOptionalVibratorFactory.provideOptionalVibrator(this.tvGlobalRootComponent.context);
                case 119:
                    DaggerTvGlobalRootComponent daggerTvGlobalRootComponent4 = this.tvGlobalRootComponent;
                    FrameworkServicesModule frameworkServicesModule = daggerTvGlobalRootComponent4.frameworkServicesModule;
                    Context context = daggerTvGlobalRootComponent4.context;
                    frameworkServicesModule.getClass();
                    return (T) new AsyncLayoutInflater(context);
                case 120:
                    return (T) new LowLightTransitionCoordinator();
                default:
                    throw new AssertionError(this.id);
            }
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class SysUIUnfoldComponentFactory implements SysUIUnfoldComponent.Factory {
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ SysUIUnfoldComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.systemui.unfold.SysUIUnfoldComponent.Factory
        public final SysUIUnfoldComponent create(UnfoldTransitionProgressProvider unfoldTransitionProgressProvider, NaturalRotationUnfoldProgressProvider naturalRotationUnfoldProgressProvider, ScopedUnfoldTransitionProgressProvider scopedUnfoldTransitionProgressProvider) {
            unfoldTransitionProgressProvider.getClass();
            naturalRotationUnfoldProgressProvider.getClass();
            scopedUnfoldTransitionProgressProvider.getClass();
            return new SysUIUnfoldComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, unfoldTransitionProgressProvider, naturalRotationUnfoldProgressProvider, scopedUnfoldTransitionProgressProvider, 0);
        }

        private SysUIUnfoldComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class SysUIUnfoldComponentImpl implements SysUIUnfoldComponent {
        public Provider foldAodAnimationControllerProvider;
        public Provider keyguardUnfoldTransitionProvider;
        public Provider notificationPanelUnfoldAnimationControllerProvider;
        public final UnfoldTransitionProgressProvider p1;
        public final NaturalRotationUnfoldProgressProvider p2;
        public final ScopedUnfoldTransitionProgressProvider p3;
        public Provider statusBarMoveFromCenterAnimationControllerProvider;
        public final SysUIUnfoldComponentImpl sysUIUnfoldComponentImpl;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;
        public Provider unfoldHapticsPlayerProvider;
        public Provider unfoldLightRevealOverlayAnimationProvider;
        public Provider unfoldTransitionWallpaperControllerProvider;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final SysUIUnfoldComponentImpl sysUIUnfoldComponentImpl;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, SysUIUnfoldComponentImpl sysUIUnfoldComponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.sysUIUnfoldComponentImpl = sysUIUnfoldComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        return (T) new KeyguardUnfoldTransition(this.tvGlobalRootComponent.context, (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), this.sysUIUnfoldComponentImpl.p2);
                    case 1:
                        return (T) new StatusBarMoveFromCenterAnimationController(this.sysUIUnfoldComponentImpl.p3, (CurrentActivityTypeProvider) this.tvGlobalRootComponent.activityManagerActivityTypeProvider.get(), (WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get());
                    case 2:
                        return (T) new NotificationPanelUnfoldAnimationController(this.tvGlobalRootComponent.context, (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), this.sysUIUnfoldComponentImpl.p2);
                    case 3:
                        DelayableExecutor delayableExecutor = (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get();
                        DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
                        return (T) new FoldAodAnimationController(delayableExecutor, daggerTvGlobalRootComponent.context, (DeviceStateManager) daggerTvGlobalRootComponent.provideDeviceStateManagerProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl(), (LatencyTracker) this.tvGlobalRootComponent.provideLatencyTrackerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.keyguardInteractorProvider));
                    case 4:
                        return (T) new UnfoldTransitionWallpaperController(this.sysUIUnfoldComponentImpl.p1, (WallpaperController) this.tvSysUIComponentImpl.wallpaperControllerProvider.get());
                    case 5:
                        return (T) new UnfoldHapticsPlayer(this.sysUIUnfoldComponentImpl.p1, (FoldProvider) this.tvGlobalRootComponent.deviceStateManagerFoldProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Vibrator) this.tvGlobalRootComponent.provideVibratorProvider.get());
                    case 6:
                        return (T) new UnfoldLightRevealOverlayAnimation(this.tvGlobalRootComponent.context, (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (DeviceStateManager) this.tvGlobalRootComponent.provideDeviceStateManagerProvider.get(), (ContentResolver) this.tvGlobalRootComponent.provideContentResolverProvider.get(), (DisplayManager) this.tvGlobalRootComponent.provideDisplayManagerProvider.get(), this.sysUIUnfoldComponentImpl.p1, this.tvSysUIComponentImpl.setDisplayAreaHelper, (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), new ThreadFactoryImpl(), this.tvGlobalRootComponent.rotationChangeProvider(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ SysUIUnfoldComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, UnfoldTransitionProgressProvider unfoldTransitionProgressProvider, NaturalRotationUnfoldProgressProvider naturalRotationUnfoldProgressProvider, ScopedUnfoldTransitionProgressProvider scopedUnfoldTransitionProgressProvider, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, unfoldTransitionProgressProvider, naturalRotationUnfoldProgressProvider, scopedUnfoldTransitionProgressProvider);
        }

        @Override // com.android.systemui.unfold.SysUIUnfoldComponent
        public final FoldAodAnimationController getFoldAodAnimationController() {
            return (FoldAodAnimationController) this.foldAodAnimationControllerProvider.get();
        }

        @Override // com.android.systemui.unfold.SysUIUnfoldComponent
        public final KeyguardUnfoldTransition getKeyguardUnfoldTransition() {
            return (KeyguardUnfoldTransition) this.keyguardUnfoldTransitionProvider.get();
        }

        @Override // com.android.systemui.unfold.SysUIUnfoldComponent
        public final NotificationPanelUnfoldAnimationController getNotificationPanelUnfoldAnimationController() {
            return (NotificationPanelUnfoldAnimationController) this.notificationPanelUnfoldAnimationControllerProvider.get();
        }

        public final StatusBarMoveFromCenterAnimationController getStatusBarMoveFromCenterAnimationController() {
            return (StatusBarMoveFromCenterAnimationController) this.statusBarMoveFromCenterAnimationControllerProvider.get();
        }

        public final UnfoldHapticsPlayer getUnfoldHapticsPlayer() {
            return (UnfoldHapticsPlayer) this.unfoldHapticsPlayerProvider.get();
        }

        public final UnfoldKeyguardVisibilityManager getUnfoldKeyguardVisibilityManager() {
            return (UnfoldKeyguardVisibilityManager) this.tvGlobalRootComponent.unfoldKeyguardVisibilityManagerProvider.get();
        }

        @Override // com.android.systemui.unfold.SysUIUnfoldComponent
        public final UnfoldLightRevealOverlayAnimation getUnfoldLightRevealOverlayAnimation() {
            return (UnfoldLightRevealOverlayAnimation) this.unfoldLightRevealOverlayAnimationProvider.get();
        }

        @Override // com.android.systemui.unfold.SysUIUnfoldComponent
        public final UnfoldTransitionWallpaperController getUnfoldTransitionWallpaperController() {
            return (UnfoldTransitionWallpaperController) this.unfoldTransitionWallpaperControllerProvider.get();
        }

        public final void initialize(UnfoldTransitionProgressProvider unfoldTransitionProgressProvider, NaturalRotationUnfoldProgressProvider naturalRotationUnfoldProgressProvider, ScopedUnfoldTransitionProgressProvider scopedUnfoldTransitionProgressProvider) {
            this.keyguardUnfoldTransitionProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.sysUIUnfoldComponentImpl, 0));
            this.statusBarMoveFromCenterAnimationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.sysUIUnfoldComponentImpl, 1));
            this.notificationPanelUnfoldAnimationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.sysUIUnfoldComponentImpl, 2));
            this.foldAodAnimationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.sysUIUnfoldComponentImpl, 3));
            this.unfoldTransitionWallpaperControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.sysUIUnfoldComponentImpl, 4));
            this.unfoldHapticsPlayerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.sysUIUnfoldComponentImpl, 5));
            this.unfoldLightRevealOverlayAnimationProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.sysUIUnfoldComponentImpl, 6));
        }

        private SysUIUnfoldComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, UnfoldTransitionProgressProvider unfoldTransitionProgressProvider, NaturalRotationUnfoldProgressProvider naturalRotationUnfoldProgressProvider, ScopedUnfoldTransitionProgressProvider scopedUnfoldTransitionProgressProvider) {
            this.sysUIUnfoldComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.p2 = naturalRotationUnfoldProgressProvider;
            this.p3 = scopedUnfoldTransitionProgressProvider;
            this.p1 = unfoldTransitionProgressProvider;
            initialize(unfoldTransitionProgressProvider, naturalRotationUnfoldProgressProvider, scopedUnfoldTransitionProgressProvider);
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class TvSysUIComponentBuilder implements TvSysUIComponent.Builder {
        public Optional<BackAnimationController.BackAnimationImpl> setBackAnimation;
        public Optional<Bubbles> setBubbles;
        public Optional<DesktopMode> setDesktopMode;
        public Optional<Object> setDisplayAreaHelper;
        public Optional<DisplayController> setDisplayController;
        public Optional<EnterSplitGestureHandler> setEnterSplitGestureHandler;
        public KeyguardTransitions setKeyguardTransitions;
        public Optional<OneHanded> setOneHanded;
        public Optional<Pip> setPip;
        public Optional<RecentTasks> setRecentTasks;
        public ShellInterface setShell;
        public Optional<SplitScreen> setSplitScreen;
        public Optional<SplitScreenController> setSplitScreenController;
        public Optional<StartingWindowController.StartingSurfaceImpl> setStartingSurface;
        public Optional<TaskViewFactoryController.TaskViewFactoryImpl> setTaskViewFactory;
        public ShellTransitions setTransitions;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;

        public /* synthetic */ TvSysUIComponentBuilder(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, int i) {
            this(daggerTvGlobalRootComponent);
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final SysUIComponent.Builder setBackAnimation(Optional optional) {
            optional.getClass();
            this.setBackAnimation = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final SysUIComponent.Builder setBubbles(Optional optional) {
            optional.getClass();
            this.setBubbles = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final SysUIComponent.Builder setDesktopMode(Optional optional) {
            optional.getClass();
            this.setDesktopMode = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final SysUIComponent.Builder setDisplayAreaHelper(Optional optional) {
            optional.getClass();
            this.setDisplayAreaHelper = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final SysUIComponent.Builder setDisplayController(Optional optional) {
            optional.getClass();
            this.setDisplayController = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final SysUIComponent.Builder setEnterSplitGestureHandler(Optional optional) {
            optional.getClass();
            this.setEnterSplitGestureHandler = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final SysUIComponent.Builder setKeyguardTransitions(KeyguardTransitions keyguardTransitions) {
            keyguardTransitions.getClass();
            this.setKeyguardTransitions = keyguardTransitions;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final SysUIComponent.Builder setOneHanded(Optional optional) {
            optional.getClass();
            this.setOneHanded = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final SysUIComponent.Builder setPip(Optional optional) {
            optional.getClass();
            this.setPip = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final SysUIComponent.Builder setRecentTasks(Optional optional) {
            optional.getClass();
            this.setRecentTasks = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final SysUIComponent.Builder setShell(ShellInterface shellInterface) {
            shellInterface.getClass();
            this.setShell = shellInterface;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final SysUIComponent.Builder setSplitScreen(Optional optional) {
            optional.getClass();
            this.setSplitScreen = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final SysUIComponent.Builder setSplitScreenController(Optional optional) {
            optional.getClass();
            this.setSplitScreenController = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final SysUIComponent.Builder setStartingSurface(Optional optional) {
            optional.getClass();
            this.setStartingSurface = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final SysUIComponent.Builder setTaskViewFactory(Optional optional) {
            optional.getClass();
            this.setTaskViewFactory = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final SysUIComponent.Builder setTransitions(ShellTransitions shellTransitions) {
            shellTransitions.getClass();
            this.setTransitions = shellTransitions;
            return this;
        }

        private TvSysUIComponentBuilder(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final TvSysUIComponent build() {
            Preconditions.checkBuilderRequirement(ShellInterface.class, this.setShell);
            Preconditions.checkBuilderRequirement(Optional.class, this.setPip);
            Preconditions.checkBuilderRequirement(Optional.class, this.setSplitScreen);
            Preconditions.checkBuilderRequirement(Optional.class, this.setOneHanded);
            Preconditions.checkBuilderRequirement(Optional.class, this.setBubbles);
            Preconditions.checkBuilderRequirement(Optional.class, this.setTaskViewFactory);
            Preconditions.checkBuilderRequirement(ShellTransitions.class, this.setTransitions);
            Preconditions.checkBuilderRequirement(KeyguardTransitions.class, this.setKeyguardTransitions);
            Preconditions.checkBuilderRequirement(Optional.class, this.setStartingSurface);
            Preconditions.checkBuilderRequirement(Optional.class, this.setDisplayAreaHelper);
            Preconditions.checkBuilderRequirement(Optional.class, this.setRecentTasks);
            Preconditions.checkBuilderRequirement(Optional.class, this.setBackAnimation);
            Preconditions.checkBuilderRequirement(Optional.class, this.setDesktopMode);
            Preconditions.checkBuilderRequirement(Optional.class, this.setEnterSplitGestureHandler);
            Preconditions.checkBuilderRequirement(Optional.class, this.setSplitScreenController);
            Preconditions.checkBuilderRequirement(Optional.class, this.setDisplayController);
            return new TvSysUIComponentImpl(this.tvGlobalRootComponent, new DependencyProvider(), new LeakModule(), new NightDisplayListenerModule(), new SharedLibraryModule(), new KeyguardModule(), new MediaProjectionDevicePolicyModule(), new SysUIUnfoldModule(), this.setShell, this.setPip, this.setSplitScreen, this.setOneHanded, this.setBubbles, this.setTaskViewFactory, this.setTransitions, this.setKeyguardTransitions, this.setStartingSurface, this.setDisplayAreaHelper, this.setRecentTasks, this.setBackAnimation, this.setDesktopMode, this.setEnterSplitGestureHandler, this.setSplitScreenController, this.setDisplayController, 0);
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final TvSysUIComponentBuilder setBackAnimation(Optional<BackAnimationController.BackAnimationImpl> optional) {
            optional.getClass();
            this.setBackAnimation = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final TvSysUIComponentBuilder setBubbles(Optional<Bubbles> optional) {
            optional.getClass();
            this.setBubbles = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final TvSysUIComponentBuilder setDesktopMode(Optional<DesktopMode> optional) {
            optional.getClass();
            this.setDesktopMode = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final TvSysUIComponentBuilder setDisplayAreaHelper(Optional<Object> optional) {
            optional.getClass();
            this.setDisplayAreaHelper = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final TvSysUIComponentBuilder setDisplayController(Optional<DisplayController> optional) {
            optional.getClass();
            this.setDisplayController = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final TvSysUIComponentBuilder setEnterSplitGestureHandler(Optional<EnterSplitGestureHandler> optional) {
            optional.getClass();
            this.setEnterSplitGestureHandler = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final TvSysUIComponentBuilder setKeyguardTransitions(KeyguardTransitions keyguardTransitions) {
            keyguardTransitions.getClass();
            this.setKeyguardTransitions = keyguardTransitions;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final TvSysUIComponentBuilder setOneHanded(Optional<OneHanded> optional) {
            optional.getClass();
            this.setOneHanded = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final TvSysUIComponentBuilder setPip(Optional<Pip> optional) {
            optional.getClass();
            this.setPip = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final TvSysUIComponentBuilder setRecentTasks(Optional<RecentTasks> optional) {
            optional.getClass();
            this.setRecentTasks = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final TvSysUIComponentBuilder setShell(ShellInterface shellInterface) {
            shellInterface.getClass();
            this.setShell = shellInterface;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final TvSysUIComponentBuilder setSplitScreen(Optional<SplitScreen> optional) {
            optional.getClass();
            this.setSplitScreen = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final TvSysUIComponentBuilder setSplitScreenController(Optional<SplitScreenController> optional) {
            optional.getClass();
            this.setSplitScreenController = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final TvSysUIComponentBuilder setStartingSurface(Optional<StartingWindowController.StartingSurfaceImpl> optional) {
            optional.getClass();
            this.setStartingSurface = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final TvSysUIComponentBuilder setTaskViewFactory(Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional) {
            optional.getClass();
            this.setTaskViewFactory = optional;
            return this;
        }

        @Override // com.android.systemui.dagger.SysUIComponent.Builder
        public final TvSysUIComponentBuilder setTransitions(ShellTransitions shellTransitions) {
            shellTransitions.getClass();
            this.setTransitions = shellTransitions;
            return this;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class TvSysUIComponentImpl implements TvSysUIComponent {
        public Provider aODAmbientWallpaperHelperProvider;
        public Provider aODTouchModeManagerProvider;
        public Provider aUIFacadeImplProvider;
        public Provider accessibilityButtonModeObserverProvider;
        public Provider accessibilityButtonTargetsObserverProvider;
        public Provider accessibilityControllerProvider;
        public Provider accessibilityFloatingMenuControllerProvider;
        public Provider accessibilityInteractorProvider;
        public Provider accessibilityManagerWrapperProvider;
        public Provider actionIntentExecutorProvider;
        public Provider actionProxyReceiverProvider;
        public Provider activeNoiseCancelingViewModelProvider;
        public Provider activeUnlockConfigProvider;
        public Provider activityIntentHelperProvider;
        public Provider activityStarterImplProvider;
        public Provider activityTaskManagerProxyProvider;
        public Provider adapterProvider;
        public Provider adaptiveViewModelProvider;
        public Provider airplaneModeInteractorProvider;
        public Provider airplaneModeRepositoryImplProvider;
        public Provider airplaneModeTileProvider;
        public Provider airplaneModeViewModelImplProvider;
        public Provider alarmTileProvider;
        public Provider alternateBouncerInteractorProvider;
        public Provider alwaysOnDisplayPolicyProvider;
        public Provider ambientSoundViewModelProvider;
        public Provider ambientStateProvider;
        public Provider animatedImageNotificationManagerProvider;
        public Provider animationUtilsProvider;
        public Provider appClipsActivityProvider;
        public Provider appClipsCrossProcessHelperProvider;
        public Provider appClipsScreenshotHelperServiceProvider;
        public Provider appClipsServiceProvider;
        public Provider appClipsTrampolineActivityProvider;
        public Provider appControllerProvider;
        public Provider appOpsControllerImplProvider;
        public Provider appOpsPrivacyItemMonitorProvider;
        public Provider applicationScopeProvider;
        public Provider assistContentRequesterProvider;
        public Provider assistLoggerProvider;
        public Provider assistManagerProvider;
        public Provider assistantFeedbackControllerProvider;
        public Provider asyncSensorManagerProvider;
        public Provider audioEffectBoxViewModelProvider;
        public Provider audioEffectHeaderViewModelProvider;
        public Provider authBiometricFingerprintViewModelProvider;
        public Provider authControllerProvider;
        public Provider authRippleControllerProvider;
        public Provider autoAddSettingRepositoryProvider;
        public Provider autoHideControllerProvider;
        public Provider badgeProviderImplProvider;
        public Provider bgDispatcherProvider;
        public Provider bindEventManagerImplProvider;
        public Provider bindRotationPolicyWrapperProvider;
        public Provider bindSystemClockProvider;
        public Provider bindableIconsRegistryImplProvider;
        public Provider binderCallMonitorImplProvider;
        public Provider bindsReaderProvider;
        public Provider biometricSettingsRepositoryImplProvider;
        public Provider biometricUnlockControllerProvider;
        public Provider biometricUnlockLoggerProvider;
        public Provider blueLightFilterTileProvider;
        public Provider bluetoothControllerImplProvider;
        public Provider bluetoothDeviceManagerProvider;
        public Provider bluetoothLoggerProvider;
        public Provider bluetoothRepositoryImplProvider;
        public Provider blurFacadeImplProvider;
        public Provider blurUtilsProvider;
        public Provider bootAnimationFinishedCacheImplProvider;
        public Provider bootCompleteCacheImplProvider;
        public Provider bouncerMessageAuditLoggerProvider;
        public Provider bouncerMessageFactoryProvider;
        public Provider bouncerMessageInteractorProvider;
        public Provider bouncerMessageRepositoryImplProvider;
        public Provider bouncerViewImplProvider;
        public Provider bouncerlessScrimControllerProvider;
        public Provider brightLineFalsingManagerProvider;
        public Provider brightnessDialogProvider;
        public Provider broadcastDispatcherProvider;
        public Provider broadcastDispatcherStartableProvider;
        public Provider broadcastSenderProvider;
        public Provider builderProvider;
        public Provider builderProvider2;
        public Provider builderProvider3;
        public Provider builderProvider4;
        public Provider burnInInteractorProvider;
        public Provider callbackHandlerProvider;
        public Provider cameraGestureHelperProvider;
        public Provider cameraLauncherProvider;
        public Provider cameraQuickAffordanceConfigProvider;
        public Provider cameraToggleTileProvider;
        public Provider carLifeManagerProvider;
        public Provider carrierConfigCoreStartableProvider;
        public Provider carrierConfigRepositoryProvider;
        public Provider carrierConfigTrackerProvider;
        public Provider carrierInfoUtilProvider;
        public Provider carrierInfraMediatorImplProvider;
        public Provider carrierTextUtilProvider;
        public Provider castControllerImplProvider;
        public Provider castTileProvider;
        public Provider centralSurfacesImplProvider;
        public Provider channelEditorDialogControllerProvider;
        public Provider clockManagerProvider;
        public Provider collapsedStatusBarViewBinderImplProvider;
        public Provider collapsedStatusBarViewModelImplProvider;
        public Provider colorAdjustmentTileProvider;
        public Provider colorCorrectionTileProvider;
        public Provider colorInversionTileProvider;
        public Provider colorLensTileProvider;
        public Provider commandRegistryProvider;
        public Provider commonUtilProvider;
        public Provider configurationControllerImplProvider;
        public Provider configurationRepositoryImplProvider;
        public Provider connectivityConstantsProvider;
        public Provider connectivityInputLoggerProvider;
        public Provider connectivityRepositoryImplProvider;
        public Provider connectivitySlotsProvider;
        public Provider contextComponentResolverProvider;
        public Provider contrastDialogActivityProvider;
        public Provider controlActionCoordinatorImplProvider;
        public Provider controlsActivityStarterImplProvider;
        public Provider controlsBackupRestoreReceiverProvider;
        public Provider controlsBindingControllerImplProvider;
        public Provider controlsComponentProvider;
        public Provider controlsControllerImplProvider;
        public Provider controlsEditingActivityProvider;
        public Provider controlsFragmentFactoryProvider;
        public Provider controlsListingControllerImplProvider;
        public Provider controlsMetricsLoggerImplProvider;
        public Provider controlsReorderActivityProvider;
        public Provider controlsRequestDialogProvider;
        public Provider controlsRequestReceiverProvider;
        public Provider controlsRuneWrapperImplProvider;
        public Provider controlsSettingActivityProvider;
        public Provider controlsSettingsDialogManagerImplProvider;
        public Provider controlsSettingsRepositoryImplProvider;
        public Provider conversationNotificationManagerProvider;
        public Provider countDownTimerUtilProvider;
        public Provider coverHomeActivityProvider;
        public Provider coverHostImplProvider;
        public Provider coverScreenIconControllerProvider;
        public Provider coverScreenManagerProvider;
        public Provider coverWallpaperControllerProvider;
        public Provider createNoteTaskShortcutActivityProvider;
        public Provider createUserActivityProvider;
        public Provider credentialInteractorImplProvider;
        public Provider credentialViewModelProvider;
        public Provider currentTilesInteractorImplProvider;
        public Provider customControlsActivityProvider;
        public Provider customControlsFavoritingActivityProvider;
        public Provider customControlsProviderSelectorActivityProvider;
        public Provider customControlsUiControllerImplProvider;
        public Provider customDeviceControlsControllerImplProvider;
        public Provider customIconCacheProvider;
        public Provider customSelectedComponentRepositoryImplProvider;
        public Provider customTileAddedSharedPrefsRepositoryProvider;
        public Provider darkIconDispatcherImplProvider;
        public Provider dataSaverTileProvider;
        public Provider dcmMascotViewContainerProvider;
        public Provider debugModeFilterProvider;
        public Provider defaultUiControllerProvider;
        public Provider deleteScreenshotReceiverProvider;
        public Provider demoModeMobileConnectionDataSourceProvider;
        public Provider demoModeWifiDataSourceProvider;
        public final DependencyProvider dependencyProvider;
        public Provider dependencyProvider2;
        public Provider desktopManagerWrapperImplProvider;
        public Provider deviceBasedSatelliteBindableIconProvider;
        public Provider deviceBasedSatelliteInteractorProvider;
        public Provider deviceBasedSatelliteRepositoryImplProvider;
        public Provider deviceConfigProxyProvider;
        public Provider deviceControlTileProvider;
        public Provider deviceControllerProvider;
        public Provider deviceEntryFaceAuthRepositoryImplProvider;
        public Provider deviceEntryFingerprintAuthRepositoryImplProvider;
        public Provider devicePostureControllerImplProvider;
        public Provider devicePostureRepositoryImplProvider;
        public Provider deviceProvisionedControllerImplProvider;
        public Provider deviceStateRotationLockSettingControllerProvider;
        public Provider deviceTypeWrapperProvider;
        public Provider disableFlagsLoggerProvider;
        public Provider disabledWifiRepositoryProvider;
        public Provider dismissCallbackRegistryProvider;
        public Provider displayLifecycleProvider;
        public Provider displayStateInteractorImplProvider;
        public Provider dndTileProvider;
        public Provider doNotDisturbQuickAffordanceConfigProvider;
        public Provider dockManagerImplProvider;
        public Provider dozeInteractorProvider;
        public Provider dozeLogProvider;
        public Provider dozeParametersProvider;
        public Provider dozeScrimControllerProvider;
        public Provider dozeServiceHostProvider;
        public Provider dozeServiceProvider;
        public Provider dozeTransitionListenerProvider;
        public Provider dreamOverlayCallbackControllerProvider;
        public Provider dreamOverlayServiceProvider;
        public Provider dreamOverlayStateControllerProvider;
        public Provider dreamOverlayStatusBarItemsProvider;
        public Provider dreamTileProvider;
        public Provider dreamingToLockscreenTransitionViewModelProvider;
        public Provider dynamicPrivacyControllerProvider;
        public Provider encryptDecryptWrapperProvider;
        public Provider engineeringModeManagerWrapperProvider;
        public Provider enhancedEstimatesImplProvider;
        public Provider equalizerViewModelProvider;
        public Provider extensionControllerImplProvider;
        public Provider faceAuthenticationLoggerProvider;
        public Provider faceHelpMessageDeferralProvider;
        public Provider faceMessageDeferralLoggerProvider;
        public Provider faceWakeUpTriggersConfigProvider;
        public Provider faceWidgetColorSchemeControllerWrapperProvider;
        public Provider faceWidgetContainerWrapperProvider;
        public Provider faceWidgetDisplayLifeCycleWrapperProvider;
        public Provider faceWidgetKeyguardStatusCallbackWrapperProvider;
        public Provider faceWidgetKeyguardUpdateMonitorWrapperProvider;
        public Provider faceWidgetKnoxStateMonitorWrapperProvider;
        public Provider faceWidgetLockPatternUtilsWrapperProvider;
        public Provider faceWidgetNotificationControllerWrapperProvider;
        public Provider faceWidgetPluginControllerImplProvider;
        public Provider faceWidgetPluginLockManagerWrapperProvider;
        public Provider faceWidgetWakefulnessLifecycleWrapperProvider;
        public Provider faceWidgetWallpaperUtilsWrapperProvider;
        public Provider factoryProvider;
        public Provider factoryProvider10;
        public Provider factoryProvider11;
        public Provider factoryProvider12;
        public Provider factoryProvider13;
        public Provider factoryProvider14;
        public Provider factoryProvider15;
        public Provider factoryProvider16;
        public Provider factoryProvider17;
        public Provider factoryProvider18;
        public Provider factoryProvider19;
        public Provider factoryProvider2;
        public Provider factoryProvider3;
        public Provider factoryProvider4;
        public Provider factoryProvider5;
        public Provider factoryProvider6;
        public Provider factoryProvider7;
        public Provider factoryProvider8;
        public Provider factoryProvider9;
        public Provider fakeCarrierInfraMediatorImplProvider;
        public Provider falsingCollectorImplProvider;
        public Provider falsingDataProvider;
        public Provider falsingManagerProxyProvider;
        public Provider featureFlagsReleaseProvider;
        public Provider featureFlagsReleaseStartableProvider;
        public Provider fgsManagerControllerImplProvider;
        public Provider filesProvider;
        public Provider flashlightControllerImplProvider;
        public Provider flashlightQuickAffordanceConfigProvider;
        public Provider flashlightTileProvider;
        public Provider fontScalingTileProvider;
        public Provider footerActionsControllerProvider;
        public Provider footerActionsInteractorImplProvider;
        public Provider footerActionsViewBinderProvider;
        public Provider foregroundServiceControllerProvider;
        public Provider foregroundServiceNotificationListenerProvider;
        public Provider foregroundServicesDialogProvider;
        public Provider foregroundServicesRepositoryImplProvider;
        public Provider fragmentServiceProvider;
        public Provider fromAlternateBouncerTransitionInteractorProvider;
        public Provider fromAodTransitionInteractorProvider;
        public Provider fromDozingTransitionInteractorProvider;
        public Provider fromDreamingTransitionInteractorProvider;
        public Provider fromGoneTransitionInteractorProvider;
        public Provider fromLockscreenTransitionInteractorProvider;
        public Provider fromOccludedTransitionInteractorProvider;
        public Provider fromPrimaryBouncerTransitionInteractorProvider;
        public Provider fullExpansionPanelNotiAlphaControllerProvider;
        public Provider garbageMonitorProvider;
        public Provider getClockRegistryProvider;
        public Provider globalActionsComponentProvider;
        public Provider globalActionsDialogLiteProvider;
        public Provider globalActionsImplProvider;
        public Provider goneToDreamingTransitionViewModelProvider;
        public Provider groupExpansionManagerImplProvider;
        public Provider guestResetOrExitSessionReceiverProvider;
        public Provider guestUserInteractorProvider;
        public Provider hdmiCecSetMenuLanguageActivityProvider;
        public Provider hdmiCecSetMenuLanguageHelperProvider;
        public Provider headlessSystemUserModeImplProvider;
        public Provider headsUpViewBinderProvider;
        public Provider heapDumpHelperProvider;
        public Provider highContrastFontTileProvider;
        public Provider highPriorityProvider;
        public Provider historyTrackerProvider;
        public Provider homeControlsKeyguardQuickAffordanceConfigProvider;
        public Provider homeSoundEffectControllerProvider;
        public Provider hotspotControllerImplProvider;
        public Provider hotspotTileProvider;
        public Provider iconManagerProvider;
        public Provider imageCaptureImplProvider;
        public Provider imageWallpaperProvider;
        public Provider imsRegStateUtilProvider;
        public Provider indicatorCoverManagerProvider;
        public Provider indicatorCutoutUtilProvider;
        public Provider indicatorGardenAlgorithmFactoryProvider;
        public Provider indicatorGardenInputPropertiesProvider;
        public Provider indicatorGardenPresenterProvider;
        public Provider indicatorGardenViewTreeLogHelperProvider;
        public Provider indicatorScaleGardenerProvider;
        public Provider initControllerProvider;
        public Provider injectionInflationControllerProvider;
        public Provider installedTilesComponentRepositoryImplProvider;
        public Provider instantAppNotifierProvider;
        public Provider interactorFactoryProvider;
        public Provider internetDialogFactoryProvider;
        public Provider isPMLiteEnabledProvider;
        public Provider isReduceBrightColorsAvailableProvider;
        public Provider keyboardUIProvider;
        public Provider keyguardBottomAreaInteractorProvider;
        public Provider keyguardBouncerRepositoryImplProvider;
        public Provider keyguardBypassControllerProvider;
        public Provider keyguardDismissUtilProvider;
        public Provider keyguardDisplayManagerProvider;
        public Provider keyguardFastBioUnlockControllerProvider;
        public Provider keyguardFixedRotationMonitorProvider;
        public Provider keyguardFoldControllerConfigImplProvider;
        public Provider keyguardFoldControllerDependencyImplProvider;
        public Provider keyguardFoldControllerImplProvider;
        public Provider keyguardInteractorProvider;
        public Provider keyguardLifecyclesDispatcherProvider;
        public Provider keyguardLongPressInteractorProvider;
        public Provider keyguardLongPressViewModelProvider;
        public Provider keyguardMediaControllerProvider;
        public final KeyguardModule keyguardModule;
        public Provider keyguardNotificationVisibilityProviderImplProvider;
        public Provider keyguardPresentationDisablerProvider;
        public Provider keyguardQuickAffordanceInteractorProvider;
        public Provider keyguardQuickAffordanceLegacySettingSyncerProvider;
        public Provider keyguardQuickAffordanceLocalUserSelectionManagerProvider;
        public Provider keyguardQuickAffordanceRemoteUserSelectionManagerProvider;
        public Provider keyguardQuickAffordanceRepositoryProvider;
        public Provider keyguardRepositoryImplProvider;
        public Provider keyguardSecLegacyUnlockAnimationControllerImplProvider;
        public Provider keyguardSecUpdateMonitorImplProvider;
        public Provider keyguardSecurityModelProvider;
        public Provider keyguardServiceProvider;
        public Provider keyguardShortcutManagerProvider;
        public Provider keyguardStateControllerImplProvider;
        public Provider keyguardSurfaceControllerImplProvider;
        public Provider keyguardSysDumpTriggerProvider;
        public Provider keyguardTouchAnimatorProvider;
        public Provider keyguardTouchDymLockInjectorProvider;
        public Provider keyguardTouchLoggingInjectorProvider;
        public Provider keyguardTouchSecurityInjectorProvider;
        public Provider keyguardTransitionAuditLoggerProvider;
        public Provider keyguardTransitionCoreStartableProvider;
        public Provider keyguardTransitionInteractorProvider;
        public Provider keyguardTransitionRepositoryImplProvider;
        public Provider keyguardViewMediatorHelperImplProvider;
        public Provider keyguardVisibilityMonitorProvider;
        public Provider keyguardWallpaperControllerProvider;
        public Provider knoxStatusBarControlInteractorProvider;
        public Provider knoxStatusBarControlRepositoryImplProvider;
        public Provider largeScreenShadeInterpolatorImplProvider;
        public Provider launchConversationActivityProvider;
        public Provider launchFullScreenIntentProvider;
        public Provider launchNoteTaskActivityProvider;
        public Provider launchNoteTaskManagedProfileProxyActivityProvider;
        public Provider launchNotesRoleSettingsTrampolineActivityProvider;
        public final LeakModule leakModule;
        public Provider leakReporterProvider;
        public Provider letterboxAppearanceCalculatorProvider;
        public Provider letterboxBackgroundProvider;
        public Provider lightBarControllerProvider;
        public Provider lightRevealScrimInteractorProvider;
        public Provider lightRevealScrimRepositoryImplProvider;
        public Provider lightRevealScrimViewModelProvider;
        public Provider locationControllerImplProvider;
        public Provider locationTileProvider;
        public Provider lockscreenGestureLoggerProvider;
        public Provider lockscreenNotificationIconsOnlyControllerProvider;
        public Provider lockscreenNotificationManagerProvider;
        public Provider lockscreenShadeTransitionControllerProvider;
        public Provider lockscreenSmartspaceControllerProvider;
        public Provider lockscreenToDreamingTransitionViewModelProvider;
        public Provider lockscreenToOccludedTransitionViewModelProvider;
        public Provider lockscreenWallpaperProvider;
        public Provider logBufferEulogizerProvider;
        public Provider logBufferFactoryProvider;
        public Provider logContextInteractorImplProvider;
        public Provider longScreenshotActivityProvider;
        public Provider longScreenshotDataProvider;
        public Provider looperSlowLogControllerImplProvider;
        public Provider lsRuneWrapperProvider;
        public Provider mainDispatcherProvider;
        public Provider managedProfileControllerImplProvider;
        public Provider mdmOverlayContainerProvider;
        public Provider mediaArtworkProcessorProvider;
        public Provider mediaBluetoothHelperProvider;
        public Provider mediaContainerControllerProvider;
        public Provider mediaDataManagerProvider;
        public Provider mediaFlagsProvider;
        public Provider mediaMuteAwaitConnectionCliProvider;
        public Provider mediaMuteAwaitConnectionManagerFactoryProvider;
        public Provider mediaMuteAwaitLoggerProvider;
        public Provider mediaOutputDialogFactoryProvider;
        public Provider mediaOutputDialogReceiverProvider;
        public Provider mediaOutputHelperProvider;
        public Provider mediaProjectionAppSelectorActivityProvider;
        public final MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule;
        public Provider mediaProjectionPermissionActivityProvider;
        public Provider mediaProjectionPrivacyItemMonitorProvider;
        public Provider mediaResumeListenerProvider;
        public Provider mediaTimeoutListenerProvider;
        public Provider mediaTimeoutLoggerProvider;
        public Provider mediaUiEventLoggerProvider;
        public Provider memoryMonitorProvider;
        public Provider memoryTileProvider;
        public Provider microphoneToggleTileProvider;
        public Provider mobileConnectionsRepositoryImplProvider;
        public Provider mobileContextProvider;
        public Provider mobileDataTileProvider;
        public Provider mobileDataUtilProvider;
        public Provider mobileIconsInteractorImplProvider;
        public Provider mobileIconsViewModelProvider;
        public Provider mobileInputLoggerProvider;
        public Provider mobileRepositorySwitcherProvider;
        public Provider mobileRoamingUtilProvider;
        public Provider mobileSignalControllerFactoryProvider;
        public Provider mobileSignalUtilProvider;
        public Provider mobileUiAdapterProvider;
        public Provider mobileViewLoggerProvider;
        public Provider modeSwitchesControllerProvider;
        public Provider modelProvider;
        public Provider motionToolStartableProvider;
        public Provider multiSIMControllerProvider;
        public Provider multiShadeInteractorProvider;
        public Provider multiShadeMotionEventInteractorProvider;
        public Provider multiShadeRepositoryProvider;
        public Provider muteQuickAffordanceConfigProvider;
        public Provider navBarHelperProvider;
        public Provider navigationBarControllerProvider;
        public Provider navigationBarEdgePanelProvider;
        public Provider navigationModeControllerProvider;
        public Provider nearbyMediaDevicesLoggerProvider;
        public Provider nearbyMediaDevicesManagerProvider;
        public Provider networkControllerImplProvider;
        public Provider newKeyguardViewMediatorProvider;
        public Provider nextAlarmControllerImplProvider;
        public Provider nfcTileProvider;
        public final NightDisplayListenerModule nightDisplayListenerModule;
        public Provider nightDisplayTileProvider;
        public Provider noiseCancelingLevelViewModelProvider;
        public Provider noiseCancelingSwitchBarViewModelProvider;
        public Provider noiseControlBoxViewModelProvider;
        public Provider noiseControlEffectBoxViewModelProvider;
        public Provider noiseControlOffViewModelProvider;
        public Provider noteTaskControllerProvider;
        public Provider noteTaskControllerUpdateServiceProvider;
        public Provider notiCinemaLoggerProvider;
        public Provider notifBindPipelineProvider;
        public Provider notifCollectionProvider;
        public Provider notifCoordinatorsProvider;
        public Provider notifInflaterImplProvider;
        public Provider notifInflationErrorManagerProvider;
        public Provider notifLiveDataStoreImplProvider;
        public Provider notifPipelineChoreographerImplProvider;
        public Provider notifPipelineInitializerProvider;
        public Provider notifPipelineProvider;
        public Provider notifRemoteViewCacheImplProvider;
        public Provider notifUiAdjustmentProvider;
        public Provider notifViewBarnProvider;
        public Provider notificationBackupRestoreManagerProvider;
        public Provider notificationChannelsProvider;
        public Provider notificationClickNotifierProvider;
        public Provider notificationColorPickerProvider;
        public Provider notificationContentInflaterProvider;
        public Provider notificationControllerProvider;
        public Provider notificationDismissibilityProviderImplProvider;
        public Provider notificationGutsManagerProvider;
        public Provider notificationIconAreaControllerProvider;
        public Provider notificationIconTransitionControllerProvider;
        public Provider notificationInsetsImplProvider;
        public Provider notificationInteractionTrackerProvider;
        public Provider notificationInterruptStateProviderImplProvider;
        public Provider notificationListenerProvider;
        public Provider notificationListenerWithPluginsProvider;
        public Provider notificationLockscreenUserManagerImplProvider;
        public Provider notificationMemoryDumperProvider;
        public Provider notificationMemoryLoggerProvider;
        public Provider notificationMemoryMonitorProvider;
        public Provider notificationPersonExtractorPluginBoundaryProvider;
        public Provider notificationRoundnessManagerProvider;
        public Provider notificationRowBinderImplProvider;
        public Provider notificationSectionsFeatureManagerProvider;
        public Provider notificationSectionsManagerProvider;
        public Provider notificationShadeDepthControllerProvider;
        public Provider notificationShadeWindowControllerImplProvider;
        public Provider notificationShelfManagerProvider;
        public Provider notificationStackSizeCalculatorProvider;
        public Provider notificationTargetsHelperProvider;
        public Provider notificationVisibilityProviderImplProvider;
        public Provider notificationWakeUpCoordinatorProvider;
        public Provider notificationsControllerImplProvider;
        public Provider notificationsControllerStubProvider;
        public Provider occludedToLockscreenTransitionViewModelProvider;
        public Provider onUserInteractionCallbackImplProvider;
        public Provider oneHandedModeTileProvider;
        public Provider ongoingCallFlagsProvider;
        public Provider ongoingCallLoggerProvider;
        public Provider optionalOfCentralSurfacesProvider;
        public Provider overviewProxyRecentsImplProvider;
        public Provider overviewProxyServiceProvider;
        public Provider panelInteractorImplProvider;
        public Provider panelScreenShotBufferLoggerProvider;
        public Provider peopleNotificationIdentifierImplProvider;
        public Provider peopleSpaceActivityProvider;
        public Provider peopleSpaceWidgetManagerProvider;
        public Provider peopleSpaceWidgetPinnedReceiverProvider;
        public Provider peopleSpaceWidgetProvider;
        public Provider peopleTileRepositoryImplProvider;
        public Provider peopleWidgetRepositoryImplProvider;
        public Provider phoneStateMonitorProvider;
        public Provider pickupControllerProvider;
        public Provider plankComponentProvider;
        public Provider pluginAODManagerProvider;
        public Provider pluginFaceWidgetManagerProvider;
        public Provider pluginLockDataImplProvider;
        public Provider pluginLockDelegateAppProvider;
        public Provider pluginLockDelegateSysUiProvider;
        public Provider pluginLockInstancePolicyProvider;
        public Provider pluginLockManagerImplProvider;
        public Provider pluginLockMediatorImplProvider;
        public Provider pluginLockStarManagerProvider;
        public Provider pluginLockUtilsProvider;
        public Provider pluginWallpaperManagerImplProvider;
        public Provider postureDependentProximitySensorProvider;
        public Provider powerNotificationWarningsProvider;
        public Provider powerUIProvider;
        public Provider primaryBouncerCallbackInteractorProvider;
        public Provider primaryBouncerInteractorProvider;
        public Provider primaryBouncerToGoneTransitionViewModelProvider;
        public Provider privacyConfigProvider;
        public Provider privacyDialogControllerProvider;
        public Provider privacyDotViewControllerProvider;
        public Provider privacyItemControllerProvider;
        public Provider promptCredentialInteractorProvider;
        public Provider promptRepositoryImplProvider;
        public Provider promptSelectorInteractorImplProvider;
        public Provider promptViewModelProvider;
        public Provider protoTracerProvider;
        public Provider protocolManagerImplProvider;
        public Provider prototypeCoreStartableProvider;
        public Provider provideAODLoggerProvider;
        public Provider provideAccessPointControllerImplProvider;
        public Provider provideActivityLaunchAnimatorProvider;
        public Provider provideActivityManagerWrapperProvider;
        public Provider provideAirplaneTableLogBufferProvider;
        public Provider provideAllowNotificationLongPressProvider;
        public Provider provideAnimationFeatureFlagsProvider;
        public Provider provideApiLoggerProvider;
        public Provider provideAssistUtilsProvider;
        public Provider provideAutoRotateSettingsManagerProvider;
        public Provider provideBackgroundDelayableExecutorProvider;
        public Provider provideBackgroundExecutorProvider;
        public Provider provideBackgroundRepeatableExecutorProvider;
        public Provider provideBatteryControllerProvider;
        public Provider provideBgHandlerProvider;
        public Provider provideBgLooperProvider;
        public Provider provideBinderCallMonitorLoggerProvider;
        public Provider provideBinderProxyDumpHelperProvider;
        public Provider provideBiometricLogBufferProvider;
        public Provider provideBouncerLogBufferProvider;
        public Provider provideBroadcastDispatcherLogBufferProvider;
        public Provider provideBroadcastRunningExecutorProvider;
        public Provider provideBroadcastRunningLooperProvider;
        public Provider provideBubblesManagerProvider;
        public Provider provideCarrierTextManagerLogProvider;
        public Provider provideClockInfoListProvider;
        public Provider provideCollapsedSbFragmentLogBufferProvider;
        public Provider provideCommandQueueProvider;
        public Provider provideControlsLogWrapperProvider;
        public Provider provideControlsLoggerProvider;
        public Provider provideControlsRuneWrapperProvider;
        public Provider provideDataSaverControllerProvider;
        public Provider provideDelayableExecutorProvider;
        public Provider provideDemoModeControllerProvider;
        public Provider provideDesktopManagerProvider;
        public Provider provideDesktopSystemUiBinderProvider;
        public Provider provideDevicePolicyManagerWrapperProvider;
        public Provider provideDeviceStateAutoRotationLogBufferProvider;
        public Provider provideDialogLaunchAnimatorProvider;
        public Provider provideDisplayTrackerProvider;
        public Provider provideDozeLogBufferProvider;
        public Provider provideDreamLogBufferProvider;
        public Provider provideExecutorProvider;
        public Provider provideFaceAuthLogProvider;
        public Provider provideFaceAuthTableLogProvider;
        public Provider provideFaceDetectTableLogProvider;
        public Provider provideFirstMobileSubShowingNetworkTypeIconProvider;
        public Provider provideGroupMembershipManagerProvider;
        public Provider provideHeadsUpManagerPhoneProvider;
        public Provider provideIndicatorLogBufferProvider;
        public Provider provideIndividualSensorPrivacyControllerProvider;
        public Provider provideKeyguardClockLogProvider;
        public Provider provideKeyguardClockPositionAlgorithmProvider;
        public Provider provideKeyguardEditModeControllerProvider;
        public Provider provideKeyguardIndicationControllerProvider;
        public Provider provideKeyguardLargeClockLogProvider;
        public Provider provideKeyguardLogBufferProvider;
        public Provider provideKeyguardLoggerProvider;
        public Provider provideKeyguardSmallClockLogProvider;
        public Provider provideKeyguardUnlockAnimationExecutorProvider;
        public Provider provideKeyguardUpdateMonitorLogBufferProvider;
        public Provider provideLSShadeTransitionControllerBufferProvider;
        public Provider provideLeakReportEmailProvider;
        public Provider provideLocalBluetoothControllerProvider;
        public Provider provideLogcatEchoTrackerProvider;
        public Provider provideLongRunningDelayableExecutorProvider;
        public Provider provideLongRunningExecutorProvider;
        public Provider provideLongRunningLooperProvider;
        public Provider provideMediaBrowserBufferProvider;
        public Provider provideMediaLogBufferProvider;
        public Provider provideMediaMuteAwaitLogBufferProvider;
        public Provider provideMobileInputLogBufferProvider;
        public Provider provideMobileSummaryLogBufferProvider;
        public Provider provideMobileViewLogBufferProvider;
        public Provider provideNavBarServiceLoggerProvider;
        public Provider provideNavbarBgHandlerProvider;
        public Provider provideNearbyMediaDevicesLogBufferProvider;
        public Provider provideNetspeedViewControllerProvider;
        public Provider provideNightDisplayListenerProvider;
        public Provider provideNotifInteractionLogBufferProvider;
        public Provider provideNotifRemoteViewCacheProvider;
        public Provider provideNotificationHeadsUpLogBufferProvider;
        public Provider provideNotificationInterruptLogBufferProvider;
        public Provider provideNotificationLockScreenLogBufferProvider;
        public Provider provideNotificationLoggerProvider;
        public Provider provideNotificationMediaManagerProvider;
        public Provider provideNotificationPanelLoggerProvider;
        public Provider provideNotificationRemoteInputLogBufferProvider;
        public Provider provideNotificationRemoteInputManagerProvider;
        public Provider provideNotificationsControllerProvider;
        public Provider provideNotificationsLogBufferProvider;
        public Provider provideOemSatelliteInputLogProvider;
        public Provider provideOngoingCallControllerProvider;
        public Provider providePanelLogBufferProvider;
        public Provider providePanelScreenShotLogBufferProvider;
        public Provider providePlankDispatcherFactoryProvider;
        public Provider providePrivacyLogBufferProvider;
        public Provider provideProtocolProvider;
        public Provider provideQSConfigLogBufferProvider;
        public Provider provideQSFragmentDisableLogBufferProvider;
        public Provider provideQSTileListLogBufferProvider;
        public Provider provideQuickAccessWalletClientProvider;
        public Provider provideQuickSettingsLogBufferProvider;
        public Provider provideRealWifiRepositoryProvider;
        public Provider provideRecentsProvider;
        public Provider provideSPluginManagerProvider;
        public Provider provideSearcleManagerProvider;
        public Provider provideSecurityLoggerProvider;
        public Provider provideSensorPrivacyControllerProvider;
        public Provider provideShadeLogBufferProvider;
        public Provider provideShadeWindowLogBufferProvider;
        public Provider provideSharedConnectivityTableLogBufferProvider;
        public Provider provideSmartReplyControllerProvider;
        public Provider provideStatusBarIconListProvider;
        public Provider provideStatusBarKeyguardViewManagerProvider;
        public Provider provideStatusBarNetworkControllerBufferProvider;
        public Provider provideStatusIconContainerControllerProvider;
        public Provider provideSwipeUpLogBufferProvider;
        public Provider provideSysUIUnfoldComponentProvider;
        public Provider provideSysUiStateProvider;
        public Provider provideSystemStatusAnimationSchedulerProvider;
        public Provider provideTaskStackChangeListenersProvider;
        public Provider provideTestInputMonitorProvider;
        public Provider provideTimeTickHandlerProvider;
        public Provider provideToastLogBufferProvider;
        public Provider provideTvNotificationHandlerProvider;
        public Provider provideUdfpsLogBufferProvider;
        public Provider provideUnseenNotificationLogBufferProvider;
        public Provider provideUserTrackerProvider;
        public Provider provideVerboseMobileViewLogBufferProvider;
        public Provider provideVisualInterruptionDecisionProvider;
        public Provider provideVolumeLogWrapperProvider;
        public Provider provideVolumePanelLoggerProvider;
        public Provider provideWakeLockLogProvider;
        public Provider provideWallpaperLoggerProvider;
        public Provider provideWifiInputLogBufferProvider;
        public Provider provideWifiTableLogBufferProvider;
        public Provider providerBluetoothLogBufferProvider;
        public Provider providerQsResetSettingsManagerProvider;
        public Provider providerSubscreenQsPanelControllerProvider;
        public Provider providesAlertingHeaderSubcomponentProvider;
        public Provider providesAuthRippleViewProvider;
        public Provider providesBandAidPackFactoryProvider;
        public Provider providesBatteryMeterViewControllerProvider;
        public Provider providesBatteryMeterViewProvider;
        public Provider providesCombinedShadeHeadersConstraintManagerProvider;
        public Provider providesControlsFeatureEnabledProvider;
        public Provider providesCredentialInteractorProvider;
        public Provider providesDeviceProvisionedControllerProvider;
        public Provider providesDisplayStateInteractorProvider;
        public Provider providesDreamOverlayNotificationCountProvider;
        public Provider providesIncomingHeaderSubcomponentProvider;
        public Provider providesKeyguardLogWrapperProvider;
        public Provider providesKnoxStateMonitorProvider;
        public Provider providesLayoutProviderContainerProvider;
        public Provider providesLeakDetectorProvider;
        public Provider providesLightRevealScrimProvider;
        public Provider providesMediaLoggerProvider;
        public Provider providesMediaMuteAwaitConnectionCliProvider;
        public Provider providesMediaTimeoutListenerLogBufferProvider;
        public Provider providesNavBarLoggerProvider;
        public Provider providesNavBarStoreProvider;
        public Provider providesNearbyMediaDevicesManagerProvider;
        public Provider providesNotificationPanelViewProvider;
        public Provider providesNotificationShadeWindowViewProvider;
        public Provider providesNotificationStackScrollLayoutProvider;
        public Provider providesOngoingPrivacyChipProvider;
        public Provider providesOverlapDetectorProvider;
        public Provider providesPeopleHeaderSubcomponentProvider;
        public Provider providesPlankFeatureEnabledProvider;
        public Provider providesPluginExecutorProvider;
        public Provider providesPopupUILogWrapperProvider;
        public Provider providesScrnshtNotifSmartActionsProvider;
        public Provider providesSecLockIconViewProvider;
        public Provider providesSecPanelLoggerProvider;
        public Provider providesShadeHeaderViewProvider;
        public Provider providesSilentHeaderSubcomponentProvider;
        public Provider providesStatusBarWindowViewProvider;
        public Provider providesStatusIconContainerProvider;
        public Provider providesTapAgainViewProvider;
        public Provider providesViewMediatorCallbackProvider;
        public Provider providsBackGestureTfClassifierProvider;
        public Provider proximitySensorImplProvider;
        public Provider pulseExpansionHandlerProvider;
        public Provider qRCodeScannerControllerProvider;
        public Provider qRCodeScannerTileProvider;
        public Provider qSBackupRestoreManagerProvider;
        public Provider qSClockBellAlternateCalendarUtilProvider;
        public Provider qSClockBellTowerProvider;
        public Provider qSFactoryImplProvider;
        public Provider qSFragmentProvider;
        public Provider qSFragmentStartableProvider;
        public Provider qSHostAdapterProvider;
        public Provider qSSecurityFooterUtilsProvider;
        public Provider qSTileHostProvider;
        public Provider qrCodeScannerKeyguardQuickAffordanceConfigProvider;
        public Provider qsEventLoggerImplProvider;
        public Provider qsFrameTranslateImplProvider;
        public Provider qsStatusEventLogProvider;
        public Provider quickAccessWalletControllerProvider;
        public Provider quickAccessWalletKeyguardQuickAffordanceConfigProvider;
        public Provider quickAccessWalletTileProvider;
        public Provider rearDisplayStateRepositoryImplProvider;
        public Provider recordingControllerProvider;
        public Provider recordingServiceProvider;
        public Provider reduceBrightColorsControllerProvider;
        public Provider reduceBrightColorsTileProvider;
        public Provider refreshUsersSchedulerProvider;
        public Provider remoteInputControllerLoggerProvider;
        public Provider remoteInputNotificationRebuilderProvider;
        public Provider remoteInputQuickSettingsDisablerProvider;
        public Provider remoteInputUriControllerProvider;
        public Provider renderStageManagerProvider;
        public Provider requestProcessorProvider;
        public Provider resourceTrimmerProvider;
        public Provider resumeMediaBrowserLoggerProvider;
        public Provider retailModeSettingsRepositoryProvider;
        public Provider ringerModeTrackerImplProvider;
        public Provider ringtonePlayerProvider;
        public Provider rotationLockControllerImplProvider;
        public Provider rotationPolicyWrapperImplProvider;
        public Provider routineManagerProvider;
        public Provider routineTestViewModelProvider;
        public Provider rowContentBindStageProvider;
        public Provider rowInflaterTaskProvider;
        public Provider sALoggerProvider;
        public Provider sBluetoothControllerImplProvider;
        public Provider sBluetoothTileProvider;
        public Provider sPluginDependencyProvider;
        public Provider sRotationLockControllerImplProvider;
        public Provider sWorkModeTileProvider;
        public Provider safeUIStatusBarWindowControllerProvider;
        public Provider samsungStatusBarGrayIconHelperProvider;
        public Provider samsungVolumeDialogImplProvider;
        public Provider screenCaptureDevicePolicyResolverProvider;
        public Provider screenCaptureTileProvider;
        public Provider screenControllerProvider;
        public Provider screenOffAnimationControllerProvider;
        public Provider screenOnCoordinatorProvider;
        public Provider screenRecordTileProvider;
        public Provider screenRecordingStateProvider;
        public Provider screenshotPolicyImplProvider;
        public Provider screenshotProxyServiceProvider;
        public Provider screenshotSmartActionsProvider;
        public Provider scrimControllerProvider;
        public Provider scrimShadeTransitionControllerProvider;
        public Provider secAutoTileManagerProvider;
        public Provider secHideInformationMirroringControllerProvider;
        public Provider secHideInformationMirroringModelProvider;
        public Provider secLightRevealScrimHelperProvider;
        public Provider secLockIconViewControllerProvider;
        public Provider secLsScrimControlHelperProvider;
        public Provider secMediaControlPanelProvider;
        public Provider secMediaHostProvider;
        public Provider secMediaPlayerDataProvider;
        public Provider secNotificationShadeWindowControllerHelperImplProvider;
        public Provider secPanelBlockExpandingHelperProvider;
        public Provider secPanelConfigurationBellTowerProvider;
        public Provider secPanelExpansionStateNotifierProvider;
        public Provider secPanelPolicyProvider;
        public Provider secPanelTouchProximityHelperProvider;
        public Provider secQSDetailDisplayerProvider;
        public Provider secQSPanelResourcePickerProvider;
        public Provider secQSSettingEditDirectlyActivityProvider;
        public Provider secQSSettingEditMainActivityProvider;
        public Provider secQSSettingEditResourcesProvider;
        public Provider secQSSettingEditTilesActivityProvider;
        public Provider secQpBlurControllerProvider;
        public Provider secRotationWatcherProvider;
        public Provider secUnlockedScreenOffAnimationHelperProvider;
        public Provider sectionHeaderControllerSubcomponentBuilderProvider;
        public Provider sectionHeaderVisibilityProvider;
        public Provider sectionStyleProvider;
        public Provider securityControllerImplProvider;
        public Provider securityRepositoryImplProvider;
        public Provider seenNotificationsProviderImplProvider;
        public Provider selectedComponentRepositoryImplProvider;
        public Provider semImageCaptureImplProvider;
        public Provider sensorUseStartedActivityProvider;
        public Provider serviceProvider;
        public Provider sessionTrackerProvider;
        public final Optional<BackAnimationController.BackAnimationImpl> setBackAnimation;
        public final Optional<Bubbles> setBubbles;
        public final Optional<DesktopMode> setDesktopMode;
        public final Optional<Object> setDisplayAreaHelper;
        public final Optional<DisplayController> setDisplayController;
        public final Optional<EnterSplitGestureHandler> setEnterSplitGestureHandler;
        public final KeyguardTransitions setKeyguardTransitions;
        public final Optional<OneHanded> setOneHanded;
        public final Optional<Pip> setPip;
        public final Optional<RecentTasks> setRecentTasks;
        public final ShellInterface setShell;
        public final Optional<SplitScreen> setSplitScreen;
        public final Optional<SplitScreenController> setSplitScreenController;
        public final Optional<StartingWindowController.StartingSurfaceImpl> setStartingSurface;
        public final Optional<TaskViewFactoryController.TaskViewFactoryImpl> setTaskViewFactory;
        public final ShellTransitions setTransitions;
        public Provider settingsHelperProvider;
        public Provider shadeControllerImplProvider;
        public Provider shadeEventCoordinatorProvider;
        public Provider shadeExpansionStateManagerProvider;
        public Provider shadeHeaderControllerProvider;
        public Provider shadeListBuilderProvider;
        public Provider shadeRepositoryImplProvider;
        public Provider shadeTransitionControllerProvider;
        public Provider shadeViewManagerFactoryProvider;
        public final SharedLibraryModule sharedLibraryModule;
        public Provider shelfToolTipManagerProvider;
        public Provider shortcutKeyDispatcherProvider;
        public Provider sideFpsControllerProvider;
        public Provider simCardInfoUtilProvider;
        public Provider simpleStatusBarIconControllerProvider;
        public Provider singlePointerTouchProcessorProvider;
        public Provider sliceBroadcastRelayHandlerProvider;
        public Provider slimIndicatorViewMediatorImplProvider;
        public Provider smartActionsReceiverProvider;
        public Provider smartReplyConstantsProvider;
        public Provider soundCraftSettingsProvider;
        public Provider soundModeTileProvider;
        public Provider spatialAudioViewModelProvider;
        public Provider statusBarContentInsetsProvider;
        public Provider statusBarHideIconsForBouncerManagerProvider;
        public Provider statusBarIconControllerImplProvider;
        public Provider statusBarInitializerProvider;
        public Provider statusBarLocationPublisherProvider;
        public Provider statusBarPipelineFlagsProvider;
        public Provider statusBarRemoteInputCallbackProvider;
        public Provider statusBarSignalPolicyProvider;
        public Provider statusBarStateControllerImplProvider;
        public Provider statusBarTouchableRegionManagerProvider;
        public Provider statusBarWindowControllerProvider;
        public Provider statusBarWindowStateControllerProvider;
        public Provider storageNotificationProvider;
        public Provider storeLogUtilProvider;
        public Provider stylusManagerProvider;
        public Provider subHomeActivityProvider;
        public Provider subRoomNetworkInfoProvider;
        public Provider subScreenFallbackProvider;
        public Provider subScreenManagerProvider;
        public Provider subScreenQuickPanelWindowControllerProvider;
        public Provider subscreenMusicWidgetControllerProvider;
        public Provider subscreenNotificationControllerProvider;
        public Provider subscreenNotificationIntelligenceStartActivityProvider;
        public Provider subscreenNotificationReplyActivityProvider;
        public Provider subscreenSensorUseUtilProvider;
        public Provider subscreenUtilProvider;
        public Provider subscriptionManagerSlotIndexResolverProvider;
        public Provider subscriptionsOrderProvider;
        public Provider surfaceVisibilityControllerProvider;
        public Provider swipeStatusBarAwayGestureHandlerProvider;
        public Provider swipeUpGestureLoggerProvider;
        public Provider switchToManagedProfileForCallActivityProvider;
        public Provider syncTileProvider;
        public Provider sysUICoverServiceProvider;
        public final SysUIUnfoldModule sysUIUnfoldModule;
        public Provider systemActionsProvider;
        public Provider systemBarAttributesListenerProvider;
        public Provider systemClockImplProvider;
        public Provider systemEventCoordinatorProvider;
        public Provider systemPropertiesHelperProvider;
        public Provider systemPropertiesWrapperProvider;
        public Provider systemUIAnalyticsWrapperProvider;
        public Provider systemUIAuxiliaryDumpServiceProvider;
        public Provider systemUICommandActionHandlerProvider;
        public Provider systemUIDialogManagerProvider;
        public Provider systemUIIndexMediatorProvider;
        public Provider systemUIKeyguardFaceAuthInteractorProvider;
        public Provider systemUIServiceProvider;
        public Provider sysuiColorExtractorProvider;
        public Provider tableLogBufferFactoryProvider;
        public Provider takeScreenshotServiceProvider;
        public Provider tapAgainViewControllerProvider;
        public Provider targetSdkResolverProvider;
        public Provider taskbarDelegateProvider;
        public Provider telephonyInteractorProvider;
        public Provider telephonyListenerManagerProvider;
        public Provider telephonyRepositoryImplProvider;
        public Provider themeOverlayApplierProvider;
        public Provider themeOverlayControllerProvider;
        public Provider tileServicesProvider;
        public Provider tileSpecSettingsRepositoryProvider;
        public Provider toastFactoryProvider;
        public Provider toastUIProvider;
        public Provider trustRepositoryImplProvider;
        public Provider trustRepositoryLoggerProvider;
        public Provider tunablePaddingServiceProvider;
        public Provider tunerActivityProvider;
        public Provider tunerServiceImplProvider;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public Provider tvNotificationPanelActivityProvider;
        public Provider tvNotificationPanelProvider;
        public Provider tvPrivacyChipsControllerProvider;
        public Provider tvSensorPrivacyChangedActivityProvider;
        public Provider tvStatusBarProvider;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;
        public Provider tvUnblockSensorActivityProvider;
        public Provider twoPhoneModeIconControllerProvider;
        public Provider udfpsControllerProvider;
        public Provider udfpsHapticsSimulatorProvider;
        public Provider udfpsOverlayInteractorProvider;
        public Provider udfpsShellProvider;
        public Provider uiModeNightTileProvider;
        public Provider uiOffloadThreadProvider;
        public Provider unfoldLatencyTrackerProvider;
        public Provider unlockedScreenOffAnimationControllerProvider;
        public Provider usbAccessoryUriActivityProvider;
        public Provider usbConfirmActivityProvider;
        public Provider usbDebuggingActivityProvider;
        public Provider usbDebuggingSecondaryUserActivityProvider;
        public Provider usbPermissionActivityProvider;
        public Provider userFileManagerImplProvider;
        public Provider userInfoControllerImplProvider;
        public Provider userInteractorProvider;
        public Provider userRepositoryImplProvider;
        public Provider userSetupRepositoryImplProvider;
        public Provider userSwitchDialogControllerProvider;
        public Provider userSwitcherControllerProvider;
        public Provider userSwitcherDialogCoordinatorProvider;
        public Provider userSwitcherRepositoryImplProvider;
        public Provider userSwitcherViewModelProvider;
        public Provider verboseMobileViewLoggerProvider;
        public Provider vibratorHelperProvider;
        public Provider videoCameraQuickAffordanceConfigProvider;
        public Provider viewUtilProvider;
        public Provider visibilityLocationProviderDelegatorProvider;
        public Provider visualStabilityCoordinatorProvider;
        public Provider visualStabilityProvider;
        public Provider voiceBoostViewModelProvider;
        public Provider volumeDependencyProvider;
        public Provider volumeDialogComponentProvider;
        public Provider volumeDialogControllerImplProvider;
        public Provider volumeNormalizationViewModelProvider;
        public Provider volumePanelDialogReceiverProvider;
        public Provider volumePanelFactoryProvider;
        public Provider volumeUIProvider;
        public Provider vpnStatusObserverProvider;
        public Provider wMShellProvider;
        public Provider wakefulnessLifecycleProvider;
        public Provider walletActivityProvider;
        public Provider walletContextualLocationsServiceProvider;
        public Provider walletContextualSuggestionsControllerProvider;
        public Provider wallpaperChangeNotifierProvider;
        public Provider wallpaperControllerProvider;
        public Provider wallpaperEventNotifierProvider;
        public Provider wearableLinkBoxViewModelProvider;
        public Provider wearableManagerProvider;
        public Provider wifiConstantsProvider;
        public Provider wifiInputLoggerProvider;
        public Provider wifiInteractorImplProvider;
        public Provider wifiPickerTrackerFactoryProvider;
        public Provider wifiRepositorySwitcherProvider;
        public Provider wifiStateWorkerProvider;
        public Provider wifiTextManagerProvider;
        public Provider wifiTileProvider;
        public Provider wifiUiAdapterProvider;
        public Provider wifiViewModelProvider;
        public Provider windowMagnificationProvider;
        public Provider windowVisibilityControllerProvider;
        public Provider wiredChargingRippleControllerProvider;
        public Provider workLockActivityProvider;
        public Provider zenModeControllerImplProvider;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id / 100) {
                    case 0:
                        return get0();
                    case 1:
                        return get1();
                    case 2:
                        return get2();
                    case 3:
                        return get3();
                    case 4:
                        return get4();
                    case 5:
                        return get5();
                    case 6:
                        return get6();
                    case 7:
                        return get7();
                    case 8:
                        return get8();
                    case 9:
                        return get9();
                    default:
                        throw new AssertionError(this.id);
                }
            }

            /* JADX WARN: Multi-variable type inference failed */
            /* JADX WARN: Type inference failed for: r0v270, types: [T, com.android.systemui.statusbar.policy.DeviceProvisionedControllerImpl] */
            /* JADX WARN: Type inference failed for: r2v612, types: [com.android.systemui.Dumpable, com.android.systemui.model.SysUiState, T] */
            public final T get0() {
                int i = 0;
                switch (this.id) {
                    case 0:
                        return (T) new BootCompleteCacheImpl((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 1:
                        return (T) new ConfigurationControllerImpl(this.tvGlobalRootComponent.context);
                    case 2:
                        return (T) ContextComponentResolver_Factory.newInstance(this.tvSysUIComponentImpl.mapOfClassOfAndProviderOfActivity(), this.tvSysUIComponentImpl.mapOfClassOfAndProviderOfService(), this.tvSysUIComponentImpl.mapOfClassOfAndProviderOfRecentsImplementation(), this.tvSysUIComponentImpl.mapOfClassOfAndProviderOfBroadcastReceiver());
                    case 3:
                        return (T) TunerActivity_Factory.newInstance((DemoModeController) this.tvSysUIComponentImpl.provideDemoModeControllerProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl());
                    case 4:
                        return (T) DemoModeModule_ProvideDemoModeControllerFactory.provideDemoModeController(this.tvGlobalRootComponent.context, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 5:
                        return (T) MultiUserUtilsModule_ProvideUserTrackerFactory.provideUserTracker(this.tvGlobalRootComponent.context, (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (IActivityManager) this.tvGlobalRootComponent.provideIActivityManagerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get());
                    case 6:
                        Looper looper = (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get();
                        Long l = SysUIConcurrencyModule.BG_SLOW_DISPATCH_THRESHOLD;
                        return (T) new Handler(looper);
                    case 7:
                        return (T) SysUIConcurrencyModule_ProvideBgLooperFactory.provideBgLooper();
                    case 8:
                        return (T) new BroadcastDispatcher(this.tvGlobalRootComponent.context, (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBroadcastRunningLooperProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBroadcastRunningExecutorProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), this.tvSysUIComponentImpl.broadcastDispatcherLogger(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), this.tvSysUIComponentImpl.pendingRemovalStore());
                    case 9:
                        return (T) SysUIConcurrencyModule_ProvideBroadcastRunningLooperFactory.provideBroadcastRunningLooper();
                    case 10:
                        Looper looper2 = (Looper) this.tvSysUIComponentImpl.provideBroadcastRunningLooperProvider.get();
                        Long l2 = SysUIConcurrencyModule.BG_SLOW_DISPATCH_THRESHOLD;
                        return (T) new ExecutorImpl(looper2);
                    case 11:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(500, "BroadcastDispatcherLog", false);
                    case 12:
                        return (T) new LogBufferFactory((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (LogcatEchoTracker) this.tvSysUIComponentImpl.provideLogcatEchoTrackerProvider.get());
                    case 13:
                        return (T) LogModule_ProvideLogcatEchoTrackerFactory.provideLogcatEchoTracker((ContentResolver) this.tvGlobalRootComponent.provideContentResolverProvider.get(), (Looper) this.tvGlobalRootComponent.provideMainLooperProvider.get());
                    case 14:
                        return (T) new TunerServiceImpl(this.tvGlobalRootComponent.context, (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (LeakDetector) this.tvSysUIComponentImpl.providesLeakDetectorProvider.get(), (DemoModeController) this.tvSysUIComponentImpl.provideDemoModeControllerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 15:
                        LeakModule leakModule = this.tvSysUIComponentImpl.leakModule;
                        DumpManager dumpManager = (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get();
                        new TrackedCollections();
                        leakModule.getClass();
                        return (T) new LeakDetector(null, null, null, dumpManager);
                    case 16:
                        return (T) ForegroundServicesDialog_Factory.newInstance((MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get());
                    case 17:
                        return (T) new WorkLockActivity((BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get());
                    case 18:
                        return (T) new BrightnessDialog((UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get(), this.tvSysUIComponentImpl.brightnessSliderControllerFactory(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get());
                    case 19:
                        return (T) MultiUserUtilsModule_ProvideDisplayTrackerFactory.provideDisplayTracker((DisplayManager) this.tvGlobalRootComponent.provideDisplayManagerProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get());
                    case 20:
                        return (T) new FalsingManagerProxy((PluginManager) this.tvGlobalRootComponent.providesPluginManagerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (DeviceConfigProxy) this.tvSysUIComponentImpl.deviceConfigProxyProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), this.tvSysUIComponentImpl.brightLineFalsingManagerProvider);
                    case 21:
                        return (T) new DeviceConfigProxy();
                    case 22:
                        return (T) new BrightLineFalsingManager((FalsingDataProvider) this.tvSysUIComponentImpl.falsingDataProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), this.tvSysUIComponentImpl.namedSetOfFalsingClassifier(), this.tvSysUIComponentImpl.singleTapClassifier(), this.tvSysUIComponentImpl.longTapClassifier(), this.tvSysUIComponentImpl.doubleTapClassifier(), (HistoryTracker) this.tvSysUIComponentImpl.historyTrackerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (AccessibilityManager) this.tvGlobalRootComponent.provideAccessibilityManagerProvider.get(), ((Boolean) this.tvGlobalRootComponent.provideIsTestHarnessProvider.get()).booleanValue(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 23:
                        return (T) new FalsingDataProvider((DisplayMetrics) this.tvGlobalRootComponent.provideDisplayMetricsProvider.get(), (BatteryController) this.tvSysUIComponentImpl.provideBatteryControllerProvider.get(), (DeviceStateManager.FoldStateListener) this.tvGlobalRootComponent.providesFoldStateListenerProvider.get(), (DockManager) this.tvSysUIComponentImpl.dockManagerImplProvider.get(), this.tvSysUIComponentImpl.namedBoolean());
                    case 24:
                        return (T) AospPolicyModule_ProvideBatteryControllerFactory.provideBatteryController(this.tvGlobalRootComponent.context, (EnhancedEstimates) this.tvSysUIComponentImpl.enhancedEstimatesImplProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (DemoModeController) this.tvSysUIComponentImpl.provideDemoModeControllerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get());
                    case 25:
                        return (T) new EnhancedEstimatesImpl();
                    case 26:
                        return (T) new DockManagerImpl();
                    case 27:
                        return (T) HistoryTracker_Factory.newInstance((SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get());
                    case 28:
                        return (T) new SystemClockImpl();
                    case 29:
                        return (T) new KeyguardStateControllerImpl(this.tvGlobalRootComponent.context, (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider), this.tvSysUIComponentImpl.keyguardUpdateMonitorLogger(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 30:
                        return (T) new KeyguardSecUpdateMonitorImpl((IBatteryStats) this.tvGlobalRootComponent.provideIBatteryStatsProvider.get(), (NotificationManager) this.tvGlobalRootComponent.provideNotificationManagerProvider.get(), (KeyguardFastBioUnlockController) this.tvSysUIComponentImpl.keyguardFastBioUnlockControllerProvider.get(), (BinderCallMonitor) this.tvSysUIComponentImpl.binderCallMonitorImplProvider.get(), (LooperSlowLogController) this.tvSysUIComponentImpl.looperSlowLogControllerImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (AlarmManager) this.tvGlobalRootComponent.provideAlarmManagerProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.providesViewMediatorCallbackProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.provideDesktopManagerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginAODManagerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginFaceWidgetManagerProvider), (IWindowManager) this.tvGlobalRootComponent.provideIWindowManagerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.provideKeyguardEditModeControllerProvider), this.tvGlobalRootComponent.context, (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (Looper) this.tvGlobalRootComponent.provideMainLooperProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), (AuthController) this.tvSysUIComponentImpl.authControllerProvider.get(), (TelephonyListenerManager) this.tvSysUIComponentImpl.telephonyListenerManagerProvider.get(), (InteractionJankMonitor) this.tvGlobalRootComponent.provideInteractionJankMonitorProvider.get(), (LatencyTracker) this.tvGlobalRootComponent.provideLatencyTrackerProvider.get(), (ActiveUnlockConfig) this.tvSysUIComponentImpl.activeUnlockConfigProvider.get(), this.tvSysUIComponentImpl.keyguardUpdateMonitorLogger(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), this.tvSysUIComponentImpl.sessionTrackerProvider, (TrustManager) this.tvGlobalRootComponent.provideTrustManagerProvider.get(), (SubscriptionManager) this.tvGlobalRootComponent.provideSubscriptionManagerProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (IDreamManager) this.tvGlobalRootComponent.provideIDreamManagerProvider.get(), (DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (SensorPrivacyManager) this.tvGlobalRootComponent.provideSensorPrivacyManagerProvider.get(), (TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), (FaceManager) this.tvGlobalRootComponent.provideFaceManagerProvider.get(), (FingerprintManager) this.tvGlobalRootComponent.providesFingerprintManagerProvider.get(), (BiometricManager) this.tvGlobalRootComponent.providesBiometricManagerProvider.get(), (FaceWakeUpTriggersConfig) this.tvSysUIComponentImpl.faceWakeUpTriggersConfigProvider.get(), (CarrierConfigManager) this.tvGlobalRootComponent.provideCarrierConfigManagerProvider.get(), (DevicePostureController) this.tvSysUIComponentImpl.devicePostureControllerImplProvider.get(), Optional.empty());
                    case 31:
                        return (T) new KeyguardFastBioUnlockController((Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), this.tvGlobalRootComponent.context, (DisplayManager) this.tvGlobalRootComponent.provideDisplayManagerProvider.get(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get(), (BinderCallMonitor) this.tvSysUIComponentImpl.binderCallMonitorImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SurfaceVisibilityController) this.tvSysUIComponentImpl.surfaceVisibilityControllerProvider.get(), (WindowVisibilityController) this.tvSysUIComponentImpl.windowVisibilityControllerProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (ScreenLifecycle) this.tvGlobalRootComponent.screenLifecycleProvider.get(), (KeyguardVisibilityMonitor) this.tvSysUIComponentImpl.keyguardVisibilityMonitorProvider.get(), (AODAmbientWallpaperHelper) this.tvSysUIComponentImpl.aODAmbientWallpaperHelperProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.centralSurfacesImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.looperSlowLogControllerImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.biometricUnlockControllerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.keyguardViewMediatorHelperImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.scrimControllerProvider));
                    case 32:
                        return (T) this.tvSysUIComponentImpl.injectBinderCallMonitorImpl(BinderCallMonitorImpl_Factory.newInstance());
                    case 33:
                        LogcatEchoTracker logcatEchoTracker = (LogcatEchoTracker) this.tvGlobalRootComponent.noLogcatEchoTrackerProvider.get();
                        return (T) new SamsungServiceLoggerImpl("BinderCallMonitorLogger", BinderCallMonitorConstants.MAX_BUF_COUNT, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), logcatEchoTracker);
                    case 34:
                        return (T) new SettingsHelper(this.tvGlobalRootComponent.context, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 35:
                        return (T) this.tvSysUIComponentImpl.injectStatusBarStateControllerImpl(StatusBarStateControllerImpl_Factory.newInstance((UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (InteractionJankMonitor) this.tvGlobalRootComponent.provideInteractionJankMonitorProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get()));
                    case 36:
                        return (T) new ShadeExpansionStateManager();
                    case 37:
                        return (T) new LooperSlowLogControllerImpl((Looper) this.tvGlobalRootComponent.provideMainLooperProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), DoubleCheck.lazy(this.tvGlobalRootComponent.providesChoreographerProvider), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 38:
                        CoroutineDispatcher coroutineDispatcher = (CoroutineDispatcher) this.tvSysUIComponentImpl.mainDispatcherProvider.get();
                        CoroutinesModule.INSTANCE.getClass();
                        return (T) CoroutineScopeKt.CoroutineScope(coroutineDispatcher);
                    case 39:
                        return (T) CoroutinesModule_MainDispatcherFactory.mainDispatcher();
                    case 40:
                        CoroutinesModule.INSTANCE.getClass();
                        T t = (T) Dispatchers.IO;
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 41:
                        return (T) new SurfaceVisibilityController(DoubleCheck.lazy(this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.keyguardSurfaceControllerImplProvider));
                    case 42:
                        return (T) KeyguardModule_ProvideStatusBarKeyguardViewManagerFactory.provideStatusBarKeyguardViewManager((KeyguardViewMediatorHelper) this.tvSysUIComponentImpl.keyguardViewMediatorHelperImplProvider.get(), (SecRotationWatcher) this.tvSysUIComponentImpl.secRotationWatcherProvider.get(), (KeyguardFastBioUnlockController) this.tvSysUIComponentImpl.keyguardFastBioUnlockControllerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider), this.tvSysUIComponentImpl.keyguardBouncerViewModel(), new KeyguardBouncerComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i), (PrimaryBouncerToGoneTransitionViewModel) this.tvSysUIComponentImpl.primaryBouncerToGoneTransitionViewModelProvider.get(), this.tvGlobalRootComponent.context, (ViewMediatorCallback) this.tvSysUIComponentImpl.providesViewMediatorCallbackProvider.get(), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DreamOverlayStateController) this.tvSysUIComponentImpl.dreamOverlayStateControllerProvider.get(), (NavigationModeController) this.tvSysUIComponentImpl.navigationModeControllerProvider.get(), (DockManager) this.tvSysUIComponentImpl.dockManagerImplProvider.get(), (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (NotificationMediaManager) this.tvSysUIComponentImpl.provideNotificationMediaManagerProvider.get(), this.tvSysUIComponentImpl.keyguardMessageAreaControllerFactory(), (Optional) this.tvSysUIComponentImpl.provideSysUIUnfoldComponentProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.shadeControllerImplProvider), (LatencyTracker) this.tvGlobalRootComponent.provideLatencyTrackerProvider.get(), (KeyguardSecurityModel) this.tvSysUIComponentImpl.keyguardSecurityModelProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (PrimaryBouncerCallbackInteractor) this.tvSysUIComponentImpl.primaryBouncerCallbackInteractorProvider.get(), (PrimaryBouncerInteractor) this.tvSysUIComponentImpl.primaryBouncerInteractorProvider.get(), (BouncerView) this.tvSysUIComponentImpl.bouncerViewImplProvider.get(), (AlternateBouncerInteractor) this.tvSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (UdfpsOverlayInteractor) this.tvSysUIComponentImpl.udfpsOverlayInteractorProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get());
                    case 43:
                        return (T) new KeyguardViewMediatorHelperImpl(this.tvGlobalRootComponent.context, (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (Executor) this.tvGlobalRootComponent.provideUiBackgroundExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideKeyguardUnlockAnimationExecutorProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.centralSurfacesImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.newKeyguardViewMediatorProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.biometricUnlockControllerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.scrimControllerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.keyguardSurfaceControllerImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider), (KeyguardFastBioUnlockController) this.tvSysUIComponentImpl.keyguardFastBioUnlockControllerProvider.get(), (KeyguardDisplayManager) this.tvSysUIComponentImpl.keyguardDisplayManagerProvider.get(), (InteractionJankMonitor) this.tvGlobalRootComponent.provideInteractionJankMonitorProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardSysDumpTrigger) this.tvSysUIComponentImpl.keyguardSysDumpTriggerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (ActivityManager) this.tvGlobalRootComponent.provideActivityManagerProvider.get(), (KnoxStateMonitor) this.tvSysUIComponentImpl.providesKnoxStateMonitorProvider.get(), (DesktopManager) this.tvSysUIComponentImpl.provideDesktopManagerProvider.get(), (PickupController) this.tvSysUIComponentImpl.pickupControllerProvider.get(), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (DismissCallbackRegistry) this.tvSysUIComponentImpl.dismissCallbackRegistryProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (UnlockedScreenOffAnimationController) this.tvSysUIComponentImpl.unlockedScreenOffAnimationControllerProvider.get(), (SecUnlockedScreenOffAnimationHelper) this.tvSysUIComponentImpl.secUnlockedScreenOffAnimationHelperProvider.get(), (KeyguardWallpaperController) this.tvSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginAODManagerProvider), (AODAmbientWallpaperHelper) this.tvSysUIComponentImpl.aODAmbientWallpaperHelperProvider.get(), (KeyguardWallpaper) this.tvSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), (LooperSlowLogController) this.tvSysUIComponentImpl.looperSlowLogControllerImplProvider.get(), (SamsungServiceLogger) this.tvSysUIComponentImpl.provideKeyguardLoggerProvider.get(), (AudioManager) this.tvGlobalRootComponent.provideAudioManagerProvider.get(), (SamsungServiceLogger) this.tvSysUIComponentImpl.provideSecurityLoggerProvider.get(), (BootAnimationFinishedTrigger) this.tvSysUIComponentImpl.bootAnimationFinishedCacheImplProvider.get(), (BinderCallMonitor) this.tvSysUIComponentImpl.binderCallMonitorImplProvider.get(), (SubScreenManager) this.tvSysUIComponentImpl.subScreenManagerProvider.get(), (KeyguardFoldControllerImpl) this.tvSysUIComponentImpl.keyguardFoldControllerImplProvider.get(), (KeyguardFixedRotationMonitor) this.tvSysUIComponentImpl.keyguardFixedRotationMonitorProvider.get(), (KeyguardVisibilityMonitor) this.tvSysUIComponentImpl.keyguardVisibilityMonitorProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.notifPipelineProvider), (NotificationsController) this.tvSysUIComponentImpl.provideNotificationsControllerProvider.get(), (KeyguardEditModeController) this.tvSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get(), (CarLifeManager) this.tvSysUIComponentImpl.carLifeManagerProvider.get());
                    case 44:
                        return (T) KeyguardModule_ProvideKeyguardUnlockAnimationExecutorFactory.provideKeyguardUnlockAnimationExecutor();
                    case 45:
                        TvSysUIComponentImpl tvSysUIComponentImpl = this.tvSysUIComponentImpl;
                        return (T) tvSysUIComponentImpl.injectCentralSurfacesImpl(CentralSurfacesImpl_Factory.newInstance((KeyguardSysDumpTrigger) tvSysUIComponentImpl.keyguardSysDumpTriggerProvider.get(), (MdmOverlayContainer) this.tvSysUIComponentImpl.mdmOverlayContainerProvider.get(), GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get(), (KeyguardWallpaper) this.tvSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), (SystemUICommandActionHandler) this.tvSysUIComponentImpl.systemUICommandActionHandlerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.coverHostImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.keyguardSurfaceControllerImplProvider), (SamsungStatusBarGrayIconHelper) this.tvSysUIComponentImpl.samsungStatusBarGrayIconHelperProvider.get(), this.tvGlobalRootComponent.context, (NotificationsController) this.tvSysUIComponentImpl.provideNotificationsControllerProvider.get(), (FragmentService) this.tvSysUIComponentImpl.fragmentServiceProvider.get(), (LightBarController) this.tvSysUIComponentImpl.lightBarControllerProvider.get(), (AutoHideController) this.tvSysUIComponentImpl.autoHideControllerProvider.get(), (StatusBarInitializer) this.tvSysUIComponentImpl.statusBarInitializerProvider.get(), (StatusBarWindowController) this.tvSysUIComponentImpl.statusBarWindowControllerProvider.get(), (StatusBarWindowStateController) this.tvSysUIComponentImpl.statusBarWindowStateControllerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (StatusBarSignalPolicy) this.tvSysUIComponentImpl.statusBarSignalPolicyProvider.get(), (PulseExpansionHandler) this.tvSysUIComponentImpl.pulseExpansionHandlerProvider.get(), (NotificationWakeUpCoordinator) this.tvSysUIComponentImpl.notificationWakeUpCoordinatorProvider.get(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (HeadsUpManagerPhone) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (DynamicPrivacyController) this.tvSysUIComponentImpl.dynamicPrivacyControllerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (FalsingCollector) this.tvSysUIComponentImpl.falsingCollectorImplProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (NotificationGutsManager) this.tvSysUIComponentImpl.notificationGutsManagerProvider.get(), (NotificationLogger) this.tvSysUIComponentImpl.provideNotificationLoggerProvider.get(), (NotificationInterruptStateProvider) this.tvSysUIComponentImpl.notificationInterruptStateProviderImplProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (KeyguardViewMediator) this.tvSysUIComponentImpl.newKeyguardViewMediatorProvider.get(), (DisplayMetrics) this.tvGlobalRootComponent.provideDisplayMetricsProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), this.tvSysUIComponentImpl.shadeLogger(), (Executor) this.tvGlobalRootComponent.provideUiBackgroundExecutorProvider.get(), (NotificationMediaManager) this.tvSysUIComponentImpl.provideNotificationMediaManagerProvider.get(), (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (NotificationRemoteInputManager) this.tvSysUIComponentImpl.provideNotificationRemoteInputManagerProvider.get(), (UserSwitcherController) this.tvSysUIComponentImpl.userSwitcherControllerProvider.get(), (BatteryController) this.tvSysUIComponentImpl.provideBatteryControllerProvider.get(), (SysuiColorExtractor) this.tvSysUIComponentImpl.sysuiColorExtractorProvider.get(), (ScreenLifecycle) this.tvGlobalRootComponent.screenLifecycleProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), this.tvSysUIComponentImpl.setBubbles, DoubleCheck.lazy(this.tvSysUIComponentImpl.noteTaskControllerProvider), (DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get(), (NavigationBarController) this.tvSysUIComponentImpl.navigationBarControllerProvider.get(), (AccessibilityFloatingMenuController) this.tvSysUIComponentImpl.accessibilityFloatingMenuControllerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.assistManagerProvider), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (ScrimController) this.tvSysUIComponentImpl.scrimControllerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.lockscreenWallpaperProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.biometricUnlockControllerProvider), (AuthRippleController) this.tvSysUIComponentImpl.authRippleControllerProvider.get(), (DozeServiceHost) this.tvSysUIComponentImpl.dozeServiceHostProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), this.tvSysUIComponentImpl.screenPinningRequest(), this.tvSysUIComponentImpl.samsungScreenPinningRequest(), (DozeScrimController) this.tvSysUIComponentImpl.dozeScrimControllerProvider.get(), (VolumeComponent) this.tvSysUIComponentImpl.volumeDialogComponentProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), new CentralSurfacesComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i), (PluginManager) this.tvGlobalRootComponent.providesPluginManagerProvider.get(), (ShadeController) this.tvSysUIComponentImpl.shadeControllerImplProvider.get(), (StatusBarKeyguardViewManager) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (ViewMediatorCallback) this.tvSysUIComponentImpl.providesViewMediatorCallbackProvider.get(), (InitController) this.tvSysUIComponentImpl.initControllerProvider.get(), (Handler) this.tvSysUIComponentImpl.provideTimeTickHandlerProvider.get(), (PluginDependencyProvider) this.tvGlobalRootComponent.pluginDependencyProvider.get(), (KeyguardDismissUtil) this.tvSysUIComponentImpl.keyguardDismissUtilProvider.get(), (ExtensionController) this.tvSysUIComponentImpl.extensionControllerImplProvider.get(), (UserInfoControllerImpl) this.tvSysUIComponentImpl.userInfoControllerImplProvider.get(), this.tvSysUIComponentImpl.phoneStatusBarPolicy(), (KeyguardIndicationController) this.tvSysUIComponentImpl.provideKeyguardIndicationControllerProvider.get(), (DemoModeController) this.tvSysUIComponentImpl.provideDemoModeControllerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.notificationShadeDepthControllerProvider), (StatusBarTouchableRegionManager) this.tvSysUIComponentImpl.statusBarTouchableRegionManagerProvider.get(), (NotificationIconAreaController) this.tvSysUIComponentImpl.notificationIconAreaControllerProvider.get(), this.tvSysUIComponentImpl.brightnessSliderControllerFactory(), (ScreenOffAnimationController) this.tvSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (WallpaperController) this.tvSysUIComponentImpl.wallpaperControllerProvider.get(), (OngoingCallController) this.tvSysUIComponentImpl.provideOngoingCallControllerProvider.get(), (StatusBarHideIconsForBouncerManager) this.tvSysUIComponentImpl.statusBarHideIconsForBouncerManagerProvider.get(), (LockscreenShadeTransitionController) this.tvSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (KeyguardUnlockAnimationController) this.tvSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), this.tvSysUIComponentImpl.mainMessageRouter(), this.tvGlobalRootComponent.wallpaperManager(), this.tvSysUIComponentImpl.setStartingSurface, (ActivityLaunchAnimator) this.tvSysUIComponentImpl.provideActivityLaunchAnimatorProvider.get(), (InteractionJankMonitor) this.tvGlobalRootComponent.provideInteractionJankMonitorProvider.get(), (DeviceStateManager) this.tvGlobalRootComponent.provideDeviceStateManagerProvider.get(), (WiredChargingRippleController) this.tvSysUIComponentImpl.wiredChargingRippleControllerProvider.get(), (IDreamManager) this.tvGlobalRootComponent.provideIDreamManagerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.cameraLauncherProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.lightRevealScrimViewModelProvider), (LightRevealScrim) this.tvSysUIComponentImpl.providesLightRevealScrimProvider.get(), (AlternateBouncerInteractor) this.tvSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), this.tvGlobalRootComponent.providesFingerprintManagerProvider, (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.navBarHelperProvider), (SecQpBlurController) this.tvSysUIComponentImpl.secQpBlurControllerProvider.get(), (NotifRemoteViewCache) this.tvSysUIComponentImpl.provideNotifRemoteViewCacheProvider.get(), (CommonNotifCollection) this.tvSysUIComponentImpl.notifPipelineProvider.get(), (SecPanelLogger) this.tvSysUIComponentImpl.providesSecPanelLoggerProvider.get()));
                    case 46:
                        return (T) new KeyguardSysDumpTrigger(this.tvGlobalRootComponent.context, (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (CommonNotifCollection) this.tvSysUIComponentImpl.notifPipelineProvider.get());
                    case 47:
                        return (T) new WakefulnessLifecycle(this.tvGlobalRootComponent.context, (IWallpaperManager) this.tvGlobalRootComponent.provideIWallPaperManagerProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 48:
                        return (T) new NotifPipeline((NotifCollection) this.tvSysUIComponentImpl.notifCollectionProvider.get(), (ShadeListBuilder) this.tvSysUIComponentImpl.shadeListBuilderProvider.get(), (RenderStageManager) this.tvSysUIComponentImpl.renderStageManagerProvider.get());
                    case 49:
                        return (T) new NotifCollection((IStatusBarService) this.tvGlobalRootComponent.provideIStatusBarServiceProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), this.tvSysUIComponentImpl.notifPipelineFlags(), this.tvSysUIComponentImpl.notifCollectionLogger(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (LogBufferEulogizer) this.tvSysUIComponentImpl.logBufferEulogizerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (NotificationDismissibilityProvider) this.tvSysUIComponentImpl.notificationDismissibilityProviderImplProvider.get());
                    case 50:
                        return (T) new FeatureFlagsRelease(this.tvGlobalRootComponent.mainResources(), (SystemPropertiesHelper) this.tvSysUIComponentImpl.systemPropertiesHelperProvider.get(), (ServerFlagReader) this.tvSysUIComponentImpl.bindsReaderProvider.get(), FlagsCommonModule_ProvidesAllFlagsFactory.providesAllFlags(), this.tvSysUIComponentImpl.conditionalRestarter());
                    case 51:
                        return (T) new SystemPropertiesHelper();
                    case 52:
                        DeviceConfigProxy deviceConfigProxy = (DeviceConfigProxy) this.tvSysUIComponentImpl.deviceConfigProxyProvider.get();
                        Executor executor = (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get();
                        boolean booleanValue = ((Boolean) this.tvGlobalRootComponent.provideIsTestHarnessProvider.get()).booleanValue();
                        ServerFlagReaderModule.Companion.getClass();
                        return (T) new ServerFlagReaderImpl(ServerFlagReaderModule.Companion.SYSUI_NAMESPACE, deviceConfigProxy, executor, booleanValue);
                    case 53:
                        Looper looper3 = (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get();
                        Long l3 = SysUIConcurrencyModule.BG_SLOW_DISPATCH_THRESHOLD;
                        return (T) new ExecutorImpl(looper3);
                    case 54:
                        LogBufferFactory logBufferFactory = (LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get();
                        this.tvSysUIComponentImpl.notifPipelineFlags();
                        return (T) logBufferFactory.create(1000, "NotifLog", false);
                    case 55:
                        return (T) new LogBufferEulogizer(this.tvGlobalRootComponent.context, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (Files) this.tvSysUIComponentImpl.filesProvider.get());
                    case 56:
                        return (T) new Files();
                    case 57:
                        return (T) new NotificationDismissibilityProviderImpl(this.tvSysUIComponentImpl.notifPipelineFlags(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 58:
                        return (T) new ShadeListBuilder((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (NotifPipelineChoreographer) this.tvSysUIComponentImpl.notifPipelineChoreographerImplProvider.get(), this.tvSysUIComponentImpl.notifPipelineFlags(), (NotificationInteractionTracker) this.tvSysUIComponentImpl.notificationInteractionTrackerProvider.get(), this.tvSysUIComponentImpl.shadeListBuilderLogger(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get());
                    case 59:
                        return (T) NotifPipelineChoreographerImpl_Factory.newInstance((Choreographer) this.tvGlobalRootComponent.providesChoreographerProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get());
                    case 60:
                        return (T) new NotificationInteractionTracker((NotificationClickNotifier) this.tvSysUIComponentImpl.notificationClickNotifierProvider.get());
                    case 61:
                        return (T) new NotificationClickNotifier((IStatusBarService) this.tvGlobalRootComponent.provideIStatusBarServiceProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get());
                    case 62:
                        return (T) new RenderStageManager();
                    case 63:
                        return (T) new MdmOverlayContainer(this.tvGlobalRootComponent.context, DoubleCheck.lazy(this.tvSysUIComponentImpl.statusBarStateControllerImplProvider));
                    case 64:
                        return (T) new DisplayLifecycle(this.tvGlobalRootComponent.context, (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.keyguardFoldControllerImplProvider));
                    case 65:
                        return (T) new KeyguardFoldControllerImpl(this.tvGlobalRootComponent.context, (KeyguardFoldControllerConfig) this.tvSysUIComponentImpl.keyguardFoldControllerConfigImplProvider.get(), (KeyguardFoldControllerDependency) this.tvSysUIComponentImpl.keyguardFoldControllerDependencyImplProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (BinderCallMonitor) this.tvSysUIComponentImpl.binderCallMonitorImplProvider.get(), (LooperSlowLogController) this.tvSysUIComponentImpl.looperSlowLogControllerImplProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.newKeyguardViewMediatorProvider));
                    case 66:
                        return (T) new KeyguardFoldControllerConfigImpl();
                    case 67:
                        return (T) new KeyguardFoldControllerDependencyImpl();
                    case 68:
                        return (T) KeyguardModule_NewKeyguardViewMediatorFactory.newKeyguardViewMediator((KeyguardViewMediatorHelperImpl) this.tvSysUIComponentImpl.keyguardViewMediatorHelperImplProvider.get(), this.tvGlobalRootComponent.context, (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (SessionTracker) this.tvSysUIComponentImpl.sessionTrackerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (FalsingCollector) this.tvSysUIComponentImpl.falsingCollectorImplProvider.get(), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider), (DismissCallbackRegistry) this.tvSysUIComponentImpl.dismissCallbackRegistryProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (Executor) this.tvGlobalRootComponent.provideUiBackgroundExecutorProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), (TrustManager) this.tvGlobalRootComponent.provideTrustManagerProvider.get(), (UserSwitcherController) this.tvSysUIComponentImpl.userSwitcherControllerProvider.get(), (DeviceConfigProxy) this.tvSysUIComponentImpl.deviceConfigProxyProvider.get(), (NavigationModeController) this.tvSysUIComponentImpl.navigationModeControllerProvider.get(), (KeyguardDisplayManager) this.tvSysUIComponentImpl.keyguardDisplayManagerProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider), (ScreenOffAnimationController) this.tvSysUIComponentImpl.screenOffAnimationControllerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.notificationShadeDepthControllerProvider), (ScreenOnCoordinator) this.tvSysUIComponentImpl.screenOnCoordinatorProvider.get(), this.tvSysUIComponentImpl.setKeyguardTransitions, (InteractionJankMonitor) this.tvGlobalRootComponent.provideInteractionJankMonitorProvider.get(), (DreamOverlayStateController) this.tvSysUIComponentImpl.dreamOverlayStateControllerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.shadeControllerImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.provideActivityLaunchAnimatorProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.scrimControllerProvider), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.mainDispatcherProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.dreamingToLockscreenTransitionViewModelProvider), (SystemPropertiesHelper) this.tvSysUIComponentImpl.systemPropertiesHelperProvider.get());
                    case 69:
                        return (T) new SessionTracker((IStatusBarService) this.tvGlobalRootComponent.provideIStatusBarServiceProvider.get(), (AuthController) this.tvSysUIComponentImpl.authControllerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get());
                    case 70:
                        return (T) new AuthController(this.tvGlobalRootComponent.context, (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (Execution) this.tvGlobalRootComponent.provideExecutionProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (ActivityTaskManager) this.tvGlobalRootComponent.provideActivityTaskManagerProvider.get(), (WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get(), (FingerprintManager) this.tvGlobalRootComponent.providesFingerprintManagerProvider.get(), (FaceManager) this.tvGlobalRootComponent.provideFaceManagerProvider.get(), this.tvSysUIComponentImpl.udfpsControllerProvider, this.tvSysUIComponentImpl.sideFpsControllerProvider, (DisplayManager) this.tvGlobalRootComponent.provideDisplayManagerProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), this.tvSysUIComponentImpl.authDialogPanelInteractionDetector(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), this.tvSysUIComponentImpl.udfpsLogger(), (LogContextInteractor) this.tvSysUIComponentImpl.logContextInteractorImplProvider.get(), this.tvSysUIComponentImpl.authBiometricFingerprintViewModelProvider, this.tvSysUIComponentImpl.promptCredentialInteractorProvider, this.tvSysUIComponentImpl.promptSelectorInteractorImplProvider, this.tvSysUIComponentImpl.credentialViewModelProvider, this.tvSysUIComponentImpl.promptViewModelProvider, (InteractionJankMonitor) this.tvGlobalRootComponent.provideInteractionJankMonitorProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (DelayableExecutor) this.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (VibratorHelper) this.tvSysUIComponentImpl.vibratorHelperProvider.get(), BiometricsModule_Companion_ProvidesUdfpsUtilsFactory.providesUdfpsUtils());
                    case 71:
                        return (T) new CommandQueue(this.tvGlobalRootComponent.context, (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get(), (ProtoTracer) this.tvSysUIComponentImpl.protoTracerProvider.get(), (CommandRegistry) this.tvSysUIComponentImpl.commandRegistryProvider.get(), this.tvSysUIComponentImpl.dumpHandler());
                    case 72:
                        return (T) new ProtoTracer(this.tvGlobalRootComponent.context, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 73:
                        return (T) new CommandRegistry(this.tvGlobalRootComponent.context, (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get());
                    case 74:
                        return (T) new UdfpsController(this.tvGlobalRootComponent.context, (Execution) this.tvGlobalRootComponent.provideExecutionProvider.get(), (LayoutInflater) this.tvGlobalRootComponent.providerLayoutInflaterProvider.get(), (FingerprintManager) this.tvGlobalRootComponent.providesFingerprintManagerProvider.get(), (WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (StatusBarKeyguardViewManager) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), (AccessibilityManager) this.tvGlobalRootComponent.provideAccessibilityManagerProvider.get(), (LockscreenShadeTransitionController) this.tvSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (ScreenLifecycle) this.tvGlobalRootComponent.screenLifecycleProvider.get(), (VibratorHelper) this.tvSysUIComponentImpl.vibratorHelperProvider.get(), (UdfpsHapticsSimulator) this.tvSysUIComponentImpl.udfpsHapticsSimulatorProvider.get(), (UdfpsShell) this.tvSysUIComponentImpl.udfpsShellProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (DisplayManager) this.tvGlobalRootComponent.provideDisplayManagerProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (UnlockedScreenOffAnimationController) this.tvSysUIComponentImpl.unlockedScreenOffAnimationControllerProvider.get(), (SystemUIDialogManager) this.tvSysUIComponentImpl.systemUIDialogManagerProvider.get(), (LatencyTracker) this.tvGlobalRootComponent.provideLatencyTrackerProvider.get(), (ActivityLaunchAnimator) this.tvSysUIComponentImpl.provideActivityLaunchAnimatorProvider.get(), Optional.empty(), (Executor) this.tvSysUIComponentImpl.providesPluginExecutorProvider.get(), (PrimaryBouncerInteractor) this.tvSysUIComponentImpl.primaryBouncerInteractorProvider.get(), (SinglePointerTouchProcessor) this.tvSysUIComponentImpl.singlePointerTouchProcessorProvider.get(), (SessionTracker) this.tvSysUIComponentImpl.sessionTrackerProvider.get(), (AlternateBouncerInteractor) this.tvSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (InputManager) this.tvGlobalRootComponent.provideInputManagerProvider.get(), BiometricsModule_Companion_ProvidesUdfpsUtilsFactory.providesUdfpsUtils(), (KeyguardFaceAuthInteractor) this.tvSysUIComponentImpl.systemUIKeyguardFaceAuthInteractorProvider.get());
                    case 75:
                        return (T) new LockscreenShadeTransitionController((MdmOverlayContainer) this.tvSysUIComponentImpl.mdmOverlayContainerProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), this.tvSysUIComponentImpl.lSShadeTransitionLogger(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (FalsingCollector) this.tvSysUIComponentImpl.falsingCollectorImplProvider.get(), (AmbientState) this.tvSysUIComponentImpl.ambientStateProvider.get(), this.tvSysUIComponentImpl.lockscreenShadeScrimTransitionController(), (LockscreenShadeKeyguardTransitionController.Factory) this.tvSysUIComponentImpl.factoryProvider12.get(), (NotificationShadeDepthController) this.tvSysUIComponentImpl.notificationShadeDepthControllerProvider.get(), this.tvGlobalRootComponent.context, (SplitShadeLockScreenOverScroller.Factory) this.tvSysUIComponentImpl.factoryProvider13.get(), (SingleShadeLockScreenOverScroller.Factory) this.tvSysUIComponentImpl.factoryProvider14.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (LockscreenShadeQsTransitionController.Factory) this.tvSysUIComponentImpl.factoryProvider15.get(), (ShadeRepository) this.tvSysUIComponentImpl.shadeRepositoryImplProvider.get());
                    case 76:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "LSShadeTransitionLog", true);
                    case 77:
                        return (T) new LockscreenGestureLogger((MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get());
                    case 78:
                        return (T) new KeyguardBypassController(this.tvGlobalRootComponent.context, (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (DevicePostureController) this.tvSysUIComponentImpl.devicePostureControllerImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 79:
                        return (T) this.tvSysUIComponentImpl.injectNotificationLockscreenUserManagerImpl(NotificationLockscreenUserManagerImpl_Factory.newInstance(this.tvGlobalRootComponent.context, (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.notificationVisibilityProviderImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.notifPipelineProvider), (NotificationClickNotifier) this.tvSysUIComponentImpl.notificationClickNotifierProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.overviewProxyServiceProvider), (KeyguardManager) this.tvGlobalRootComponent.provideKeyguardManagerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.settingsHelperProvider)));
                    case 80:
                        return (T) new NotificationVisibilityProviderImpl((NotifLiveDataStore) this.tvSysUIComponentImpl.notifLiveDataStoreImplProvider.get(), (CommonNotifCollection) this.tvSysUIComponentImpl.notifPipelineProvider.get());
                    case 81:
                        return (T) new NotifLiveDataStoreImpl((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get());
                    case 82:
                        return (T) new OverviewProxyService(this.tvGlobalRootComponent.context, (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), this.tvSysUIComponentImpl.setShell, DoubleCheck.lazy(this.tvSysUIComponentImpl.navigationBarControllerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.optionalOfCentralSurfacesProvider), (NavigationModeController) this.tvSysUIComponentImpl.navigationModeControllerProvider.get(), (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (SysUiState) this.tvSysUIComponentImpl.provideSysUiStateProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (ScreenLifecycle) this.tvGlobalRootComponent.screenLifecycleProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get(), (KeyguardUnlockAnimationController) this.tvSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider.get(), (AssistUtils) this.tvSysUIComponentImpl.provideAssistUtilsProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (Optional) this.tvGlobalRootComponent.provideProgressForwarderProvider.get(), (FgsManagerController) this.tvSysUIComponentImpl.fgsManagerControllerImplProvider.get(), (SearcleManager) this.tvSysUIComponentImpl.provideSearcleManagerProvider.get());
                    case 83:
                        return (T) new NavigationBarController(this.tvGlobalRootComponent.context, (OverviewProxyService) this.tvSysUIComponentImpl.overviewProxyServiceProvider.get(), (NavigationModeController) this.tvSysUIComponentImpl.navigationModeControllerProvider.get(), (SysUiState) this.tvSysUIComponentImpl.provideSysUiStateProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (NavBarHelper) this.tvSysUIComponentImpl.navBarHelperProvider.get(), (TaskbarDelegate) this.tvSysUIComponentImpl.taskbarDelegateProvider.get(), new NavigationBarComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (AutoHideController) this.tvSysUIComponentImpl.autoHideControllerProvider.get(), (LightBarController) this.tvSysUIComponentImpl.lightBarControllerProvider.get(), (TaskStackChangeListeners) this.tvSysUIComponentImpl.provideTaskStackChangeListenersProvider.get(), this.tvSysUIComponentImpl.setPip, this.tvSysUIComponentImpl.setBackAnimation, (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get(), (NavBarStore) this.tvSysUIComponentImpl.providesNavBarStoreProvider.get());
                    case 84:
                        return (T) new NavigationModeController(this.tvGlobalRootComponent.context, (DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (Executor) this.tvGlobalRootComponent.provideUiBackgroundExecutorProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (NavBarStore) this.tvSysUIComponentImpl.providesNavBarStoreProvider.get());
                    case 85:
                        ?? r0 = (T) ((DeviceProvisionedControllerImpl) this.tvSysUIComponentImpl.deviceProvisionedControllerImplProvider.get());
                        TvSystemUIModule_ProvidesDeviceProvisionedControllerFactory.providesDeviceProvisionedController(r0);
                        return r0;
                    case 86:
                        return (T) new DeviceProvisionedControllerImpl((SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (BuildInfo) this.tvGlobalRootComponent.buildInfoProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get());
                    case 87:
                        return (T) SamsungServicesModule_ProvidesNavBarStoreFactory.providesNavBarStore(this.tvGlobalRootComponent.context, (DisplayManager) this.tvGlobalRootComponent.provideDisplayManagerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (LayoutProviderContainer) this.tvSysUIComponentImpl.providesLayoutProviderContainerProvider.get(), this.tvSysUIComponentImpl.navBarRemoteViewManager(), (BandAidPackFactoryBase) this.tvSysUIComponentImpl.providesBandAidPackFactoryProvider.get(), (InteractorFactory) this.tvSysUIComponentImpl.interactorFactoryProvider.get(), (StoreLogUtil) this.tvSysUIComponentImpl.storeLogUtilProvider.get(), this.tvSysUIComponentImpl.gestureHintAnimatorFactory(), (SysUiState) this.tvSysUIComponentImpl.provideSysUiStateProvider.get());
                    case 88:
                        return (T) SamsungServicesModule_ProvidesLayoutProviderContainerFactory.providesLayoutProviderContainer(this.tvGlobalRootComponent.context);
                    case 89:
                        return (T) SamsungServicesModule_ProvidesBandAidPackFactoryFactory.providesBandAidPackFactory();
                    case 90:
                        return (T) new InteractorFactory(this.tvGlobalRootComponent.context, (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (LogWrapper) this.tvSysUIComponentImpl.providesNavBarLoggerProvider.get());
                    case 91:
                        return (T) new LogWrapper(ModuleType.NAVBAR, (SamsungServiceLogger) this.tvSysUIComponentImpl.provideNavBarServiceLoggerProvider.get());
                    case 92:
                        return (T) new SamsungServiceLoggerImpl("NavBarLogger", 200, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (LogcatEchoTracker) this.tvSysUIComponentImpl.provideLogcatEchoTrackerProvider.get());
                    case 93:
                        return (T) new StoreLogUtil((LogWrapper) this.tvSysUIComponentImpl.providesNavBarLoggerProvider.get());
                    case 94:
                        DisplayTracker displayTracker = (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get();
                        DumpManager dumpManager2 = (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get();
                        ?? r2 = (T) new SysUiState(displayTracker);
                        dumpManager2.registerDumpable(r2);
                        return r2;
                    case 95:
                        return (T) new NavBarHelper(this.tvGlobalRootComponent.context, (AccessibilityManager) this.tvGlobalRootComponent.provideAccessibilityManagerProvider.get(), (AccessibilityButtonModeObserver) this.tvSysUIComponentImpl.accessibilityButtonModeObserverProvider.get(), (AccessibilityButtonTargetsObserver) this.tvSysUIComponentImpl.accessibilityButtonTargetsObserverProvider.get(), (SystemActions) this.tvSysUIComponentImpl.systemActionsProvider.get(), (OverviewProxyService) this.tvSysUIComponentImpl.overviewProxyServiceProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.assistManagerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.optionalOfCentralSurfacesProvider), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (NavigationModeController) this.tvSysUIComponentImpl.navigationModeControllerProvider.get(), (EdgeBackGestureHandler.Factory) this.tvSysUIComponentImpl.factoryProvider11.get(), (IWindowManager) this.tvGlobalRootComponent.provideIWindowManagerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (NavBarStore) this.tvSysUIComponentImpl.providesNavBarStoreProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (DisplayManager) this.tvGlobalRootComponent.provideDisplayManagerProvider.get());
                    case 96:
                        return (T) new AccessibilityButtonModeObserver(this.tvGlobalRootComponent.context, (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 97:
                        return (T) new AccessibilityButtonTargetsObserver(this.tvGlobalRootComponent.context, (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 98:
                        return (T) new SystemActions(this.tvGlobalRootComponent.context, (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (ShadeController) this.tvSysUIComponentImpl.shadeControllerImplProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.optionalOfCentralSurfacesProvider), Optional.of((Recents) this.tvSysUIComponentImpl.provideRecentsProvider.get()), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get());
                    case 99:
                        return (T) new NotificationShadeWindowControllerImpl((SecNotificationShadeWindowControllerHelperImpl) this.tvSysUIComponentImpl.secNotificationShadeWindowControllerHelperImplProvider.get(), this.tvGlobalRootComponent.context, (WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get(), (IActivityManager) this.tvGlobalRootComponent.provideIActivityManagerProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (KeyguardViewMediator) this.tvSysUIComponentImpl.newKeyguardViewMediatorProvider.get(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (SysuiColorExtractor) this.tvSysUIComponentImpl.sysuiColorExtractorProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (ScreenOffAnimationController) this.tvSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (AuthController) this.tvSysUIComponentImpl.authControllerProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), this.tvSysUIComponentImpl.shadeWindowLogger(), (IndicatorCutoutUtil) this.tvSysUIComponentImpl.indicatorCutoutUtilProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get1() {
                int i = 0;
                switch (this.id) {
                    case 100:
                        return (T) new SecNotificationShadeWindowControllerHelperImpl(this.tvGlobalRootComponent.context, (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), (WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (IActivityManager) this.tvGlobalRootComponent.provideIActivityManagerProvider.get(), (KeyguardFoldController) this.tvSysUIComponentImpl.keyguardFoldControllerImplProvider.get(), (KeyguardFastBioUnlockController) this.tvSysUIComponentImpl.keyguardFastBioUnlockControllerProvider.get(), (KeyguardVisibilityMonitor) this.tvSysUIComponentImpl.keyguardVisibilityMonitorProvider.get(), (EngineeringModeManagerWrapper) this.tvSysUIComponentImpl.engineeringModeManagerWrapperProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginAODManagerProvider), (PluginLockMediator) this.tvSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (KeyguardWallpaper) this.tvSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (AODAmbientWallpaperHelper) this.tvSysUIComponentImpl.aODAmbientWallpaperHelperProvider.get());
                    case 101:
                        return (T) new KeyguardVisibilityMonitor((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.keyguardStateControllerImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider));
                    case 102:
                        return (T) new KeyguardTransitionInteractor((KeyguardTransitionRepository) this.tvSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case 103:
                        return (T) new KeyguardTransitionRepositoryImpl();
                    case 104:
                        return (T) new EngineeringModeManagerWrapper(this.tvGlobalRootComponent.context, (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get());
                    case 105:
                        return (T) this.tvSysUIComponentImpl.injectPluginAODManager(PluginAODManager_Factory.newInstance(this.tvGlobalRootComponent.context, (LockscreenNotificationManager) this.tvSysUIComponentImpl.lockscreenNotificationManagerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardViewController) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (PluginFaceWidgetManager) this.tvSysUIComponentImpl.pluginFaceWidgetManagerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (PluginLockMediator) this.tvSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (KeyguardWallpaper) this.tvSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), (DozeServiceHost) this.tvSysUIComponentImpl.dozeServiceHostProvider.get(), (SubScreenManager) this.tvSysUIComponentImpl.subScreenManagerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.coverScreenManagerProvider), (FaceWidgetWallpaperUtilsWrapper) this.tvSysUIComponentImpl.faceWidgetWallpaperUtilsWrapperProvider.get(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.notifPipelineProvider), (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (SamsungServiceLogger) this.tvSysUIComponentImpl.provideAODLoggerProvider.get(), (KeyguardFoldController) this.tvSysUIComponentImpl.keyguardFoldControllerImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (PluginLockStarManager) this.tvSysUIComponentImpl.pluginLockStarManagerProvider.get(), (NotificationsController) this.tvSysUIComponentImpl.provideNotificationsControllerProvider.get(), (KeyguardNotificationVisibilityProvider) this.tvSysUIComponentImpl.keyguardNotificationVisibilityProviderImplProvider.get(), (LockscreenNotificationIconsOnlyController) this.tvSysUIComponentImpl.lockscreenNotificationIconsOnlyControllerProvider.get(), (SubScreenQuickPanelWindowController) this.tvSysUIComponentImpl.subScreenQuickPanelWindowControllerProvider.get(), (KeyguardViewMediatorHelper) this.tvSysUIComponentImpl.keyguardViewMediatorHelperImplProvider.get(), (AODAmbientWallpaperHelper) this.tvSysUIComponentImpl.aODAmbientWallpaperHelperProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (AODTouchModeManager) this.tvSysUIComponentImpl.aODTouchModeManagerProvider.get(), (KeyguardWallpaperController) this.tvSysUIComponentImpl.keyguardWallpaperControllerProvider.get()));
                    case 106:
                        return (T) new LockscreenNotificationManager(this.tvGlobalRootComponent.context, (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), this.tvSysUIComponentImpl.lockscreenNotificationManagerLogger(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get());
                    case 107:
                        return (T) new PluginFaceWidgetManager(this.tvGlobalRootComponent.context, (PluginManager) this.tvGlobalRootComponent.providesPluginManagerProvider.get(), (KeyguardFoldController) this.tvSysUIComponentImpl.keyguardFoldControllerImplProvider.get(), (KeyguardClockPositionAlgorithm) this.tvSysUIComponentImpl.provideKeyguardClockPositionAlgorithmProvider.get(), (FaceWidgetContainerWrapper) this.tvSysUIComponentImpl.faceWidgetContainerWrapperProvider.get(), (FaceWidgetKeyguardStatusCallbackWrapper) this.tvSysUIComponentImpl.faceWidgetKeyguardStatusCallbackWrapperProvider.get(), (FaceWidgetKeyguardUpdateMonitorWrapper) this.tvSysUIComponentImpl.faceWidgetKeyguardUpdateMonitorWrapperProvider.get(), (FaceWidgetDisplayLifeCycleWrapper) this.tvSysUIComponentImpl.faceWidgetDisplayLifeCycleWrapperProvider.get(), (FaceWidgetWakefulnessLifecycleWrapper) this.tvSysUIComponentImpl.faceWidgetWakefulnessLifecycleWrapperProvider.get(), (FaceWidgetKnoxStateMonitorWrapper) this.tvSysUIComponentImpl.faceWidgetKnoxStateMonitorWrapperProvider.get(), (FaceWidgetLockPatternUtilsWrapper) this.tvSysUIComponentImpl.faceWidgetLockPatternUtilsWrapperProvider.get(), (FaceWidgetWallpaperUtilsWrapper) this.tvSysUIComponentImpl.faceWidgetWallpaperUtilsWrapperProvider.get(), (FaceWidgetColorSchemeControllerWrapper) this.tvSysUIComponentImpl.faceWidgetColorSchemeControllerWrapperProvider.get(), (FaceWidgetPluginLockManagerWrapper) this.tvSysUIComponentImpl.faceWidgetPluginLockManagerWrapperProvider.get(), (FaceWidgetNotificationControllerWrapper) this.tvSysUIComponentImpl.faceWidgetNotificationControllerWrapperProvider.get(), (ExternalClockProvider) this.tvGlobalRootComponent.externalClockProvider.get(), (KeyguardFastBioUnlockController) this.tvSysUIComponentImpl.keyguardFastBioUnlockControllerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginAODManagerProvider), (MediaDataManager) this.tvSysUIComponentImpl.mediaDataManagerProvider.get(), (BootAnimationFinishedCache) this.tvSysUIComponentImpl.bootAnimationFinishedCacheImplProvider.get(), (KeyguardWallpaper) this.tvSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), (KeyguardEditModeController) this.tvSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get());
                    case 108:
                        return (T) FaceWidgetModule_ProvideKeyguardClockPositionAlgorithmFactory.provideKeyguardClockPositionAlgorithm();
                    case 109:
                        return (T) new FaceWidgetContainerWrapper(this.tvGlobalRootComponent.context);
                    case 110:
                        return (T) new FaceWidgetKeyguardStatusCallbackWrapper();
                    case 111:
                        return (T) new FaceWidgetKeyguardUpdateMonitorWrapper((KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 112:
                        return (T) new FaceWidgetDisplayLifeCycleWrapper((DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get());
                    case 113:
                        return (T) new FaceWidgetWakefulnessLifecycleWrapper((WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get());
                    case 114:
                        return (T) new FaceWidgetKnoxStateMonitorWrapper((KnoxStateMonitor) this.tvSysUIComponentImpl.providesKnoxStateMonitorProvider.get());
                    case 115:
                        DependencyProvider dependencyProvider = this.tvSysUIComponentImpl.dependencyProvider;
                        Context context = this.tvGlobalRootComponent.context;
                        DumpManager dumpManager = (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get();
                        dependencyProvider.getClass();
                        return (T) new KnoxStateMonitorImpl(context, dumpManager);
                    case 116:
                        return (T) new FaceWidgetLockPatternUtilsWrapper((LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 117:
                        return (T) new FaceWidgetWallpaperUtilsWrapper((KeyguardWallpaper) this.tvSysUIComponentImpl.keyguardWallpaperControllerProvider.get());
                    case 118:
                        return (T) KeyguardWallpaperController_Factory.newInstance(this.tvGlobalRootComponent.context, this.tvGlobalRootComponent.wallpaperManager(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (PluginWallpaperManager) this.tvSysUIComponentImpl.pluginWallpaperManagerImplProvider.get(), (PluginLockUtils) this.tvSysUIComponentImpl.pluginLockUtilsProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (WallpaperLogger) this.tvSysUIComponentImpl.provideWallpaperLoggerProvider.get(), (WallpaperEventNotifier) this.tvSysUIComponentImpl.wallpaperEventNotifierProvider.get(), this.tvSysUIComponentImpl.systemWallpaperColors(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (KeyguardFoldController) this.tvSysUIComponentImpl.keyguardFoldControllerImplProvider.get(), new WallpaperChangeObserver(), this.tvSysUIComponentImpl.keyguardWallpaperEventHandler(), (WallpaperChangeNotifier) this.tvSysUIComponentImpl.wallpaperChangeNotifierProvider.get());
                    case 119:
                        return (T) new PluginWallpaperManagerImpl((PluginLockMediator) this.tvSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (PluginLockDelegateApp) this.tvSysUIComponentImpl.pluginLockDelegateAppProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (PluginLockUtils) this.tvSysUIComponentImpl.pluginLockUtilsProvider.get(), this.tvGlobalRootComponent.context, (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 120:
                        return (T) new PluginLockMediatorImpl(this.tvGlobalRootComponent.context, (SPluginManager) this.tvSysUIComponentImpl.provideSPluginManagerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (ExternalClockProvider) this.tvGlobalRootComponent.externalClockProvider.get(), (KeyguardShortcutManager) this.tvSysUIComponentImpl.keyguardShortcutManagerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (PluginLockUtils) this.tvSysUIComponentImpl.pluginLockUtilsProvider.get());
                    case 121:
                        return (T) new SPluginManagerImpl(this.tvGlobalRootComponent.context, new SPluginInitializerImpl(), (UncaughtExceptionPreHandlerManager) this.tvGlobalRootComponent.uncaughtExceptionPreHandlerManagerProvider.get());
                    case 122:
                        return (T) DozeParameters_Factory.newInstance((SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginAODManagerProvider), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), this.tvGlobalRootComponent.context, (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), this.tvGlobalRootComponent.mainResources(), this.tvGlobalRootComponent.ambientDisplayConfiguration(), (AlwaysOnDisplayPolicy) this.tvSysUIComponentImpl.alwaysOnDisplayPolicyProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), (BatteryController) this.tvSysUIComponentImpl.provideBatteryControllerProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (ScreenOffAnimationController) this.tvSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (Optional) this.tvSysUIComponentImpl.provideSysUIUnfoldComponentProvider.get(), (UnlockedScreenOffAnimationController) this.tvSysUIComponentImpl.unlockedScreenOffAnimationControllerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 123:
                        return (T) new AlwaysOnDisplayPolicy(this.tvGlobalRootComponent.context);
                    case 124:
                        return (T) new ScreenOffAnimationController((Optional) this.tvSysUIComponentImpl.provideSysUIUnfoldComponentProvider.get(), (UnlockedScreenOffAnimationController) this.tvSysUIComponentImpl.unlockedScreenOffAnimationControllerProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get());
                    case 125:
                        return (T) SysUIUnfoldModule_ProvideSysUIUnfoldComponentFactory.provideSysUIUnfoldComponent(this.tvSysUIComponentImpl.sysUIUnfoldModule, (Optional) this.tvGlobalRootComponent.unfoldTransitionProgressProvider.get(), (Optional) this.tvGlobalRootComponent.provideNaturalRotationProgressProvider.get(), (Optional) this.tvGlobalRootComponent.provideStatusBarScopedTransitionProvider.get(), new SysUIUnfoldComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i));
                    case 126:
                        return (T) new UnlockedScreenOffAnimationController((SecUnlockedScreenOffAnimationHelper) this.tvSysUIComponentImpl.secUnlockedScreenOffAnimationHelperProvider.get(), this.tvGlobalRootComponent.context, (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (StatusBarStateControllerImpl) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.newKeyguardViewMediatorProvider), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.dozeParametersProvider), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl(), (InteractionJankMonitor) this.tvGlobalRootComponent.provideInteractionJankMonitorProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler(), DoubleCheck.lazy(this.tvSysUIComponentImpl.secQpBlurControllerProvider));
                    case 127:
                        return (T) new SecUnlockedScreenOffAnimationHelper((AODAmbientWallpaperHelper) this.tvSysUIComponentImpl.aODAmbientWallpaperHelperProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginAODManagerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.dozeParametersProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.unlockedScreenOffAnimationControllerProvider), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (StatusBarStateControllerImpl) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), this.tvGlobalRootComponent.context, (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardVisibilityMonitor) this.tvSysUIComponentImpl.keyguardVisibilityMonitorProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.mainDispatcherProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.newKeyguardViewMediatorProvider), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get(), this.tvGlobalRootComponent.wallpaperManager(), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginFaceWidgetManagerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider), (ScreenLifecycle) this.tvGlobalRootComponent.screenLifecycleProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginLockStarManagerProvider), (AODTouchModeManager) this.tvSysUIComponentImpl.aODTouchModeManagerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginLockMediatorImplProvider));
                    case 128:
                        return (T) new AODAmbientWallpaperHelper((SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.newKeyguardViewMediatorProvider), this.tvGlobalRootComponent.wallpaperManager(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.statusBarWindowControllerProvider));
                    case 129:
                        return (T) this.tvSysUIComponentImpl.injectStatusBarWindowController(StatusBarWindowController_Factory.newInstance(this.tvGlobalRootComponent.context, (StatusBarWindowView) this.tvSysUIComponentImpl.providesStatusBarWindowViewProvider.get(), (WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get(), (IWindowManager) this.tvGlobalRootComponent.provideIWindowManagerProvider.get(), (StatusBarContentInsetsProvider) this.tvSysUIComponentImpl.statusBarContentInsetsProvider.get(), (FragmentService) this.tvSysUIComponentImpl.fragmentServiceProvider.get(), this.tvGlobalRootComponent.mainResources(), (Optional) this.tvGlobalRootComponent.unfoldTransitionProgressProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (DesktopManager) this.tvSysUIComponentImpl.provideDesktopManagerProvider.get(), (IndicatorCutoutUtil) this.tvSysUIComponentImpl.indicatorCutoutUtilProvider.get()));
                    case 130:
                        return (T) StatusBarWindowModule_ProvidesStatusBarWindowViewFactory.providesStatusBarWindowView((LayoutInflater) this.tvGlobalRootComponent.providerLayoutInflaterProvider.get());
                    case 131:
                        return (T) new StatusBarContentInsetsProvider(this.tvGlobalRootComponent.context, (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (IndicatorGardenPresenter) this.tvSysUIComponentImpl.indicatorGardenPresenterProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get());
                    case 132:
                        return (T) new IndicatorGardenPresenter((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), this.tvGlobalRootComponent.context, (IndicatorGardenAlgorithmFactory) this.tvSysUIComponentImpl.indicatorGardenAlgorithmFactoryProvider.get(), (IndicatorGardenInputProperties) this.tvSysUIComponentImpl.indicatorGardenInputPropertiesProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (IndicatorCutoutUtil) this.tvSysUIComponentImpl.indicatorCutoutUtilProvider.get());
                    case 133:
                        return (T) new IndicatorGardenAlgorithmFactory((IndicatorCutoutUtil) this.tvSysUIComponentImpl.indicatorCutoutUtilProvider.get(), this.tvSysUIComponentImpl.indicatorGardenAlgorithmNoCutout(), this.tvSysUIComponentImpl.indicatorGardenAlgorithmCenterCutout(), this.tvSysUIComponentImpl.indicatorGardenAlgorithmSidelingCenterCutout());
                    case 134:
                        return (T) new IndicatorCutoutUtil(this.tvGlobalRootComponent.context, (IndicatorGardenInputProperties) this.tvSysUIComponentImpl.indicatorGardenInputPropertiesProvider.get(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get());
                    case 135:
                        return (T) new IndicatorGardenInputProperties(this.tvGlobalRootComponent.context);
                    case 136:
                        return (T) new IndicatorScaleGardener(this.tvGlobalRootComponent.context, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 137:
                        return (T) new FragmentService((FragmentHostManager.Factory) this.tvSysUIComponentImpl.factoryProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 138:
                        return (T) new FragmentHostManager.Factory() { // from class: com.android.systemui.tv.DaggerTvGlobalRootComponent.TvSysUIComponentImpl.SwitchingProvider.1
                            @Override // com.android.systemui.fragments.FragmentHostManager.Factory
                            public final FragmentHostManager create(View view) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new FragmentHostManager(view, (FragmentService) switchingProvider.tvSysUIComponentImpl.fragmentServiceProvider.get(), (LeakDetector) switchingProvider.tvSysUIComponentImpl.providesLeakDetectorProvider.get());
                            }
                        };
                    case 139:
                        return (T) SamsungServicesModule_ProvideDesktopManagerFactory.provideDesktopManager(this.tvGlobalRootComponent.context, DoubleCheck.lazy(this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardSecurityModel) this.tvSysUIComponentImpl.keyguardSecurityModelProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.provideDesktopSystemUiBinderProvider), this.tvSysUIComponentImpl.indicatorLogger(), DoubleCheck.lazy(this.tvSysUIComponentImpl.customDeviceControlsControllerImplProvider));
                    case 140:
                        return (T) this.tvSysUIComponentImpl.injectKeyguardSecurityModel(KeyguardSecurityModel_Factory.newInstance(this.tvGlobalRootComponent.mainResources(), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get()));
                    case 141:
                        return (T) SamsungServicesModule_ProvideDesktopSystemUiBinderFactory.provideDesktopSystemUiBinder(this.tvGlobalRootComponent.context);
                    case 142:
                        LogBufferFactory logBufferFactory = (LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get();
                        IndicatorPhoneModule.Companion.getClass();
                        return (T) logBufferFactory.create(500, "IndicatorLog", true);
                    case 143:
                        return (T) new CustomDeviceControlsControllerImpl(this.tvGlobalRootComponent.context, (ControlsActivityStarter) this.tvSysUIComponentImpl.controlsActivityStarterImplProvider.get(), (ControlsComponent) this.tvSysUIComponentImpl.controlsComponentProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (UserContextProvider) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (SALogger) this.tvSysUIComponentImpl.sALoggerProvider.get());
                    case 144:
                        return (T) new ControlsActivityStarterImpl((ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (ControlsComponent) this.tvSysUIComponentImpl.controlsComponentProvider.get(), this.tvSysUIComponentImpl.controlsUtil());
                    case 145:
                        return (T) new ActivityStarterImpl(DoubleCheck.lazy(this.tvSysUIComponentImpl.optionalOfCentralSurfacesProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.assistManagerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.dozeServiceHostProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.biometricUnlockControllerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.newKeyguardViewMediatorProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.shadeControllerImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider), (ActivityLaunchAnimator) this.tvSysUIComponentImpl.provideActivityLaunchAnimatorProvider.get(), this.tvGlobalRootComponent.context, (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (StatusBarWindowController) this.tvSysUIComponentImpl.statusBarWindowControllerProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (ActivityIntentHelper) this.tvSysUIComponentImpl.activityIntentHelperProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get());
                    case 146:
                        return (T) Optional.of((CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get());
                    case 147:
                        return (T) new AssistManager((DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get(), this.tvGlobalRootComponent.context, (AssistUtils) this.tvSysUIComponentImpl.provideAssistUtilsProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (PhoneStateMonitor) this.tvSysUIComponentImpl.phoneStateMonitorProvider.get(), (OverviewProxyService) this.tvSysUIComponentImpl.overviewProxyServiceProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.provideSysUiStateProvider), (DefaultUiController) this.tvSysUIComponentImpl.defaultUiControllerProvider.get(), (AssistLogger) this.tvSysUIComponentImpl.assistLoggerProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl());
                    case 148:
                        return (T) AssistModule_ProvideAssistUtilsFactory.provideAssistUtils(this.tvGlobalRootComponent.context);
                    case 149:
                        return (T) new PhoneStateMonitor(this.tvGlobalRootComponent.context, (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.optionalOfCentralSurfacesProvider), (BootCompleteCache) this.tvSysUIComponentImpl.bootCompleteCacheImplProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 150:
                        return (T) new DefaultUiController(this.tvGlobalRootComponent.context, (AssistLogger) this.tvSysUIComponentImpl.assistLoggerProvider.get(), (WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.assistManagerProvider));
                    case 151:
                        return (T) new AssistLogger(this.tvGlobalRootComponent.context, (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (AssistUtils) this.tvSysUIComponentImpl.provideAssistUtilsProvider.get(), (PhoneStateMonitor) this.tvSysUIComponentImpl.phoneStateMonitorProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 152:
                        TvSysUIComponentImpl tvSysUIComponentImpl = this.tvSysUIComponentImpl;
                        return (T) tvSysUIComponentImpl.injectDozeServiceHost(DozeServiceHost_Factory.newInstance((DozeLog) tvSysUIComponentImpl.dozeLogProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get(), (HeadsUpManagerPhone) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (BatteryController) this.tvSysUIComponentImpl.provideBatteryControllerProvider.get(), (ScrimController) this.tvSysUIComponentImpl.scrimControllerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.biometricUnlockControllerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.assistManagerProvider), (DozeScrimController) this.tvSysUIComponentImpl.dozeScrimControllerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (PulseExpansionHandler) this.tvSysUIComponentImpl.pulseExpansionHandlerProvider.get(), (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (NotificationWakeUpCoordinator) this.tvSysUIComponentImpl.notificationWakeUpCoordinatorProvider.get(), (AuthController) this.tvSysUIComponentImpl.authControllerProvider.get(), (NotificationIconAreaController) this.tvSysUIComponentImpl.notificationIconAreaControllerProvider.get(), (DozeInteractor) this.tvSysUIComponentImpl.dozeInteractorProvider.get(), (BurnInInteractor) this.tvSysUIComponentImpl.burnInInteractorProvider.get()));
                    case 153:
                        return (T) new DozeLog((KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), this.tvSysUIComponentImpl.dozeLogger());
                    case 154:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(150, "DozeLog", true);
                    case 155:
                        return (T) new HeadsUpManagerPhone(this.tvGlobalRootComponent.context, this.tvSysUIComponentImpl.headsUpManagerLogger(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (GroupMembershipManager) this.tvSysUIComponentImpl.provideGroupMembershipManagerProvider.get(), (VisualStabilityProvider) this.tvSysUIComponentImpl.visualStabilityProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (AccessibilityManagerWrapper) this.tvSysUIComponentImpl.accessibilityManagerWrapperProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get());
                    case 156:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(1000, "NotifHeadsUpLog", true);
                    case 157:
                        return (T) NotificationsModule_ProvideGroupMembershipManagerFactory.provideGroupMembershipManager();
                    case 158:
                        return (T) new VisualStabilityProvider();
                    case 159:
                        return (T) new AccessibilityManagerWrapper((AccessibilityManager) this.tvGlobalRootComponent.provideAccessibilityManagerProvider.get());
                    case 160:
                        TvSysUIComponentImpl tvSysUIComponentImpl2 = this.tvSysUIComponentImpl;
                        return (T) tvSysUIComponentImpl2.injectScrimController(ScrimController_Factory.newInstance((LightBarController) tvSysUIComponentImpl2.lightBarControllerProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (AlarmManager) this.tvGlobalRootComponent.provideAlarmManagerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), this.tvSysUIComponentImpl.delayedWakeLockBuilder(), GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DockManager) this.tvSysUIComponentImpl.dockManagerImplProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (ScreenOffAnimationController) this.tvSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (KeyguardUnlockAnimationController) this.tvSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider.get(), (StatusBarKeyguardViewManager) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (PrimaryBouncerToGoneTransitionViewModel) this.tvSysUIComponentImpl.primaryBouncerToGoneTransitionViewModelProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.mainDispatcherProvider.get(), (LargeScreenShadeInterpolator) this.tvSysUIComponentImpl.largeScreenShadeInterpolatorImplProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get()));
                    case 161:
                        return (T) new LightBarController(this.tvGlobalRootComponent.context, (DarkIconDispatcher) this.tvSysUIComponentImpl.darkIconDispatcherImplProvider.get(), (BatteryController) this.tvSysUIComponentImpl.provideBatteryControllerProvider.get(), (NavigationModeController) this.tvSysUIComponentImpl.navigationModeControllerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get(), new SamsungLightBarControlHelper(), (SamsungStatusBarGrayIconHelper) this.tvSysUIComponentImpl.samsungStatusBarGrayIconHelperProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 162:
                        return (T) new DarkIconDispatcherImpl(this.tvGlobalRootComponent.context, (LightBarTransitionsController.Factory) this.tvSysUIComponentImpl.factoryProvider2.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (SamsungStatusBarGrayIconHelper) this.tvSysUIComponentImpl.samsungStatusBarGrayIconHelperProvider.get());
                    case 163:
                        return (T) new LightBarTransitionsController.Factory() { // from class: com.android.systemui.tv.DaggerTvGlobalRootComponent.TvSysUIComponentImpl.SwitchingProvider.2
                            @Override // com.android.systemui.statusbar.phone.LightBarTransitionsController.Factory
                            public final LightBarTransitionsController create(LightBarTransitionsController.DarkIntensityApplier darkIntensityApplier) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new LightBarTransitionsController(switchingProvider.tvGlobalRootComponent.context, darkIntensityApplier, (CommandQueue) switchingProvider.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (KeyguardStateController) switchingProvider.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (StatusBarStateController) switchingProvider.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                            }
                        };
                    case 164:
                        return (T) new SamsungStatusBarGrayIconHelper(this.tvGlobalRootComponent.context);
                    case 165:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(500, "WakeLockLog", false);
                    case 166:
                        return (T) new KeyguardSecLegacyUnlockAnimationControllerImpl(this.tvGlobalRootComponent.context, (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideKeyguardUnlockAnimationExecutorProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.newKeyguardViewMediatorProvider), (KeyguardViewController) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.biometricUnlockControllerProvider), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (InteractionJankMonitor) this.tvGlobalRootComponent.provideInteractionJankMonitorProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.centralSurfacesImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.keyguardSurfaceControllerImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), this.tvGlobalRootComponent.wallpaperManager(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardWallpaperController) this.tvSysUIComponentImpl.keyguardWallpaperControllerProvider.get());
                    case 167:
                        return (T) new BiometricUnlockController(DoubleCheck.lazy(this.tvSysUIComponentImpl.secLockIconViewControllerProvider), (DozeScrimController) this.tvSysUIComponentImpl.dozeScrimControllerProvider.get(), (KeyguardViewMediator) this.tvSysUIComponentImpl.newKeyguardViewMediatorProvider.get(), (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), this.tvGlobalRootComponent.mainResources(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), (BiometricUnlockLogger) this.tvSysUIComponentImpl.biometricUnlockLoggerProvider.get(), (NotificationMediaManager) this.tvSysUIComponentImpl.provideNotificationMediaManagerProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (ScreenLifecycle) this.tvGlobalRootComponent.screenLifecycleProvider.get(), (AuthController) this.tvSysUIComponentImpl.authControllerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SessionTracker) this.tvSysUIComponentImpl.sessionTrackerProvider.get(), (LatencyTracker) this.tvGlobalRootComponent.provideLatencyTrackerProvider.get(), (ScreenOffAnimationController) this.tvSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (VibratorHelper) this.tvSysUIComponentImpl.vibratorHelperProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (KeyguardFastBioUnlockController) this.tvSysUIComponentImpl.keyguardFastBioUnlockControllerProvider.get(), (VibrationUtil) this.tvGlobalRootComponent.vibrationUtilProvider.get(), (WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get(), this.tvGlobalRootComponent.context);
                    case 168:
                        return (T) new SecLockIconViewController((SecLockIconView) this.tvSysUIComponentImpl.providesSecLockIconViewProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardViewController) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (AuthController) this.tvSysUIComponentImpl.authControllerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (AccessibilityManager) this.tvGlobalRootComponent.provideAccessibilityManagerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (VibratorHelper) this.tvSysUIComponentImpl.vibratorHelperProvider.get(), (AuthRippleController) this.tvSysUIComponentImpl.authRippleControllerProvider.get(), this.tvGlobalRootComponent.mainResources(), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (PrimaryBouncerInteractor) this.tvSysUIComponentImpl.primaryBouncerInteractorProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.providesViewMediatorCallbackProvider), (PluginLockMediator) this.tvSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (PluginLockData) this.tvSysUIComponentImpl.pluginLockDataImplProvider.get(), (PluginLockStarManager) this.tvSysUIComponentImpl.pluginLockStarManagerProvider.get(), (KeyguardEditModeController) this.tvSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get());
                    case 169:
                        NotificationShadeWindowView notificationShadeWindowView = (NotificationShadeWindowView) this.tvSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
                        ShadeModule.Companion.getClass();
                        return (T) ((SecLockIconView) notificationShadeWindowView.findViewById(R.id.sec_lock_icon_view));
                    case 170:
                        return (T) ShadeModule_Companion_ProvidesNotificationShadeWindowViewFactory.providesNotificationShadeWindowView((LayoutInflater) this.tvGlobalRootComponent.providerLayoutInflaterProvider.get());
                    case 171:
                        return (T) new VibratorHelper((Vibrator) this.tvGlobalRootComponent.provideVibratorProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get());
                    case 172:
                        return (T) new AuthRippleController(this.tvGlobalRootComponent.context, (AuthController) this.tvSysUIComponentImpl.authControllerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (CommandRegistry) this.tvSysUIComponentImpl.commandRegistryProvider.get(), (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), this.tvSysUIComponentImpl.udfpsControllerProvider, (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (DisplayMetrics) this.tvGlobalRootComponent.provideDisplayMetricsProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), this.tvSysUIComponentImpl.keyguardLogger(), (BiometricUnlockController) this.tvSysUIComponentImpl.biometricUnlockControllerProvider.get(), (LightRevealScrim) this.tvSysUIComponentImpl.providesLightRevealScrimProvider.get(), (AuthRippleView) this.tvSysUIComponentImpl.providesAuthRippleViewProvider.get());
                    case 173:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(IKnoxCustomManager.Stub.TRANSACTION_addDexURLShortcutExtend, "KeyguardLog", true);
                    case 174:
                        NotificationShadeWindowView notificationShadeWindowView2 = (NotificationShadeWindowView) this.tvSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
                        ShadeModule.Companion.getClass();
                        return (T) ((LightRevealScrim) notificationShadeWindowView2.findViewById(R.id.light_reveal_scrim));
                    case 175:
                        ShadeModule.Companion companion = ShadeModule.Companion;
                        NotificationShadeWindowView notificationShadeWindowView3 = (NotificationShadeWindowView) this.tvSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
                        companion.getClass();
                        return (T) ((AuthRippleView) notificationShadeWindowView3.findViewById(R.id.auth_ripple));
                    case 176:
                        return (T) new KeyguardInteractor((KeyguardRepository) this.tvSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (KeyguardBouncerRepository) this.tvSysUIComponentImpl.keyguardBouncerRepositoryImplProvider.get());
                    case 177:
                        return (T) new KeyguardRepositoryImpl((StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (BiometricUnlockController) this.tvSysUIComponentImpl.biometricUnlockControllerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DozeTransitionListener) this.tvSysUIComponentImpl.dozeTransitionListenerProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (AuthController) this.tvSysUIComponentImpl.authControllerProvider.get(), (DreamOverlayCallbackController) this.tvSysUIComponentImpl.dreamOverlayCallbackControllerProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.mainDispatcherProvider.get());
                    case 178:
                        return (T) new DozeTransitionListener();
                    case 179:
                        return (T) new DreamOverlayCallbackController();
                    case 180:
                        return (T) new KeyguardBouncerRepositoryImpl((SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (TableLogBuffer) this.tvSysUIComponentImpl.provideBouncerLogBufferProvider.get());
                    case 181:
                        return (T) ((TableLogBufferFactory) this.tvSysUIComponentImpl.tableLogBufferFactoryProvider.get()).create(IKnoxCustomManager.Stub.TRANSACTION_addDexURLShortcutExtend, "BouncerTableLog");
                    case 182:
                        return (T) new TableLogBufferFactory((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (LogcatEchoTracker) this.tvSysUIComponentImpl.provideLogcatEchoTrackerProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case 183:
                        return (T) new PrimaryBouncerInteractor((KeyguardBouncerRepository) this.tvSysUIComponentImpl.keyguardBouncerRepositoryImplProvider.get(), (BouncerView) this.tvSysUIComponentImpl.bouncerViewImplProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardSecurityModel) this.tvSysUIComponentImpl.keyguardSecurityModelProvider.get(), (PrimaryBouncerCallbackInteractor) this.tvSysUIComponentImpl.primaryBouncerCallbackInteractorProvider.get(), (FalsingCollector) this.tvSysUIComponentImpl.falsingCollectorImplProvider.get(), (DismissCallbackRegistry) this.tvSysUIComponentImpl.dismissCallbackRegistryProvider.get(), this.tvGlobalRootComponent.context, (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (TrustRepository) this.tvSysUIComponentImpl.trustRepositoryImplProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case 184:
                        return (T) new BouncerViewImpl();
                    case 185:
                        return (T) new PrimaryBouncerCallbackInteractor();
                    case 186:
                        return (T) FalsingCollectorImpl_Factory.newInstance((FalsingDataProvider) this.tvSysUIComponentImpl.falsingDataProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (HistoryTracker) this.tvSysUIComponentImpl.historyTrackerProvider.get(), this.tvSysUIComponentImpl.proximitySensor(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (BatteryController) this.tvSysUIComponentImpl.provideBatteryControllerProvider.get(), (DockManager) this.tvSysUIComponentImpl.dockManagerImplProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get());
                    case 187:
                        return (T) new PostureDependentProximitySensor(this.tvSysUIComponentImpl.primaryProxSensorThresholdSensorArray(), this.tvSysUIComponentImpl.secondaryProxSensorThresholdSensorArray(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (Execution) this.tvGlobalRootComponent.provideExecutionProvider.get(), (DevicePostureController) this.tvSysUIComponentImpl.devicePostureControllerImplProvider.get());
                    case 188:
                        return (T) new AsyncSensorManager((SensorManager) this.tvGlobalRootComponent.providesSensorManagerProvider.get(), ThreadFactoryImpl_Factory.newInstance(), (PluginManager) this.tvGlobalRootComponent.providesPluginManagerProvider.get());
                    case 189:
                        return (T) new DevicePostureControllerImpl(this.tvGlobalRootComponent.context, (DeviceStateManager) this.tvGlobalRootComponent.provideDeviceStateManagerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get());
                    case 190:
                        return (T) ProximitySensorImpl_Factory.newInstance(this.tvSysUIComponentImpl.primaryProxSensorThresholdSensor(), this.tvSysUIComponentImpl.secondaryProxSensorThresholdSensor(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (Execution) this.tvGlobalRootComponent.provideExecutionProvider.get());
                    case 191:
                        return (T) new DismissCallbackRegistry((Executor) this.tvGlobalRootComponent.provideUiBackgroundExecutorProvider.get());
                    case 192:
                        return (T) new TrustRepositoryImpl((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (UserRepository) this.tvSysUIComponentImpl.userRepositoryImplProvider.get(), (TrustManager) this.tvGlobalRootComponent.provideTrustManagerProvider.get(), (TrustRepositoryLogger) this.tvSysUIComponentImpl.trustRepositoryLoggerProvider.get());
                    case 193:
                        return (T) new UserRepositoryImpl((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.mainDispatcherProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 194:
                        return (T) new TrustRepositoryLogger((LogBuffer) this.tvSysUIComponentImpl.provideKeyguardUpdateMonitorLogBufferProvider.get());
                    case 195:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(400, "KeyguardUpdateMonitorLog", true);
                    case 196:
                        KeyguardModule keyguardModule = this.tvSysUIComponentImpl.keyguardModule;
                        KeyguardViewMediator keyguardViewMediator = (KeyguardViewMediator) this.tvSysUIComponentImpl.newKeyguardViewMediatorProvider.get();
                        keyguardModule.getClass();
                        T t = (T) keyguardViewMediator.getViewMediatorCallback();
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 197:
                        return (T) new PluginLockDataImpl(this.tvGlobalRootComponent.context, (PluginLockMediator) this.tvSysUIComponentImpl.pluginLockMediatorImplProvider.get());
                    case 198:
                        return (T) new PluginLockStarManager(this.tvGlobalRootComponent.context, (SPluginManager) this.tvSysUIComponentImpl.provideSPluginManagerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 199:
                        return (T) SamsungServicesModule_ProvideKeyguardEditModeControllerFactory.provideKeyguardEditModeController((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), this.tvSysUIComponentImpl.wallpaperImageInjectCreator(), (PluginWallpaperManager) this.tvSysUIComponentImpl.pluginWallpaperManagerImplProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get2() {
                switch (this.id) {
                    case 200:
                        return (T) new CoverWallpaperController(this.tvGlobalRootComponent.context, this.tvGlobalRootComponent.wallpaperManager(), (WallpaperLogger) this.tvSysUIComponentImpl.provideWallpaperLoggerProvider.get(), (PluginWallpaperManager) this.tvSysUIComponentImpl.pluginWallpaperManagerImplProvider.get(), (PluginLockUtils) this.tvSysUIComponentImpl.pluginLockUtilsProvider.get(), (IWallpaperManager) this.tvGlobalRootComponent.provideIWallPaperManagerProvider.get(), (SubScreenManager) this.tvSysUIComponentImpl.subScreenManagerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (WallpaperChangeNotifier) this.tvSysUIComponentImpl.wallpaperChangeNotifierProvider.get());
                    case 201:
                        return (T) new WallpaperLoggerImpl("Wallpaper", 1000, (LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get());
                    case 202:
                        return (T) new PluginLockUtils(this.tvGlobalRootComponent.context, this.tvSysUIComponentImpl.dumpUtils(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 203:
                        return (T) new SubScreenManager(this.tvGlobalRootComponent.context, (ScreenLifecycle) this.tvGlobalRootComponent.screenLifecycleProvider.get(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get(), (DisplayManager) this.tvGlobalRootComponent.provideDisplayManagerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginFaceWidgetManagerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginAODManagerProvider), (PluginManager) this.tvGlobalRootComponent.providesPluginManagerProvider.get(), (DelayableExecutor) this.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.settingsHelperProvider), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (ActivityManager) this.tvGlobalRootComponent.provideActivityManagerProvider.get(), (KeyguardManager) this.tvGlobalRootComponent.provideKeyguardManagerProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), (DeviceStateManager) this.tvGlobalRootComponent.provideDeviceStateManagerProvider.get(), (NotifPipeline) this.tvSysUIComponentImpl.notifPipelineProvider.get(), (DismissCallbackRegistry) this.tvSysUIComponentImpl.dismissCallbackRegistryProvider.get());
                    case 204:
                        Looper looper = (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get();
                        Long l = SysUIConcurrencyModule.BG_SLOW_DISPATCH_THRESHOLD;
                        return (T) new ExecutorImpl(looper);
                    case 205:
                        return (T) new WallpaperChangeNotifier(this.tvGlobalRootComponent.context, (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get());
                    case 206:
                        return (T) new DozeScrimController((DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (DozeLog) this.tvSysUIComponentImpl.dozeLogProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 207:
                        return (T) new BiometricUnlockLogger((LogBuffer) this.tvSysUIComponentImpl.provideBiometricLogBufferProvider.get());
                    case 208:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(200, "BiometricLog", true);
                    case IKnoxCustomManager.Stub.TRANSACTION_getVibrationIntensity /* 209 */:
                        return (T) CentralSurfacesDependenciesModule_ProvideNotificationMediaManagerFactory.provideNotificationMediaManager(this.tvGlobalRootComponent.context, DoubleCheck.lazy(this.tvSysUIComponentImpl.optionalOfCentralSurfacesProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider), (NotificationVisibilityProvider) this.tvSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), (MediaArtworkProcessor) this.tvSysUIComponentImpl.mediaArtworkProcessorProvider.get(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (NotifPipeline) this.tvSysUIComponentImpl.notifPipelineProvider.get(), (NotifCollection) this.tvSysUIComponentImpl.notifCollectionProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (MediaDataManager) this.tvSysUIComponentImpl.mediaDataManagerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SysuiColorExtractor) this.tvSysUIComponentImpl.sysuiColorExtractorProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), this.tvGlobalRootComponent.wallpaperManager(), (DisplayManager) this.tvGlobalRootComponent.provideDisplayManagerProvider.get());
                    case 210:
                        return (T) new MediaArtworkProcessor();
                    case IKnoxCustomManager.Stub.TRANSACTION_getWifiHotspotEnabledState /* 211 */:
                        return (T) new MediaDataManager(this.tvGlobalRootComponent.context, (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), this.tvSysUIComponentImpl.mediaControllerFactory(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (MediaTimeoutListener) this.tvSysUIComponentImpl.mediaTimeoutListenerProvider.get(), (MediaResumeListener) this.tvSysUIComponentImpl.mediaResumeListenerProvider.get(), this.tvSysUIComponentImpl.mediaSessionBasedFilter(), this.tvSysUIComponentImpl.mediaDeviceManager(), new MediaDataCombineLatest(), this.tvSysUIComponentImpl.mediaDataFilter(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), new SmartspaceMediaDataProvider(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (MediaFlags) this.tvSysUIComponentImpl.mediaFlagsProvider.get(), (MediaUiEventLogger) this.tvSysUIComponentImpl.mediaUiEventLoggerProvider.get(), (SmartspaceManager) this.tvGlobalRootComponent.provideSmartspaceManagerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getWifiState /* 212 */:
                        return (T) new MediaTimeoutListener(this.tvSysUIComponentImpl.mediaControllerFactory(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (MediaTimeoutLogger) this.tvSysUIComponentImpl.mediaTimeoutLoggerProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (MediaFlags) this.tvSysUIComponentImpl.mediaFlagsProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_addAutoCallNumber /* 213 */:
                        return (T) new MediaTimeoutLogger((LogBuffer) this.tvSysUIComponentImpl.providesMediaTimeoutListenerLogBufferProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_removeAutoCallNumber /* 214 */:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "MediaTimeout", true);
                    case IKnoxCustomManager.Stub.TRANSACTION_getAutoCallNumberDelay /* 215 */:
                        return (T) new MediaFlags((FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getAutoCallNumberAnswerMode /* 216 */:
                        return (T) new MediaResumeListener(this.tvGlobalRootComponent.context, (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), this.tvSysUIComponentImpl.resumeMediaBrowserFactory(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (MediaFlags) this.tvSysUIComponentImpl.mediaFlagsProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getAutoCallNumberList /* 217 */:
                        return (T) new ResumeMediaBrowserLogger((LogBuffer) this.tvSysUIComponentImpl.provideMediaBrowserBufferProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setAutoCallPickupState /* 218 */:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "MediaBrowser", true);
                    case IKnoxCustomManager.Stub.TRANSACTION_getAutoCallPickupState /* 219 */:
                        return (T) LocalBluetoothManager.create(this.tvGlobalRootComponent.context, (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), UserHandle.ALL);
                    case 220:
                        return (T) new MediaMuteAwaitConnectionManagerFactory((MediaFlags) this.tvSysUIComponentImpl.mediaFlagsProvider.get(), this.tvGlobalRootComponent.context, (MediaMuteAwaitLogger) this.tvSysUIComponentImpl.mediaMuteAwaitLoggerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get());
                    case 221:
                        return (T) new MediaMuteAwaitLogger((LogBuffer) this.tvSysUIComponentImpl.provideMediaMuteAwaitLogBufferProvider.get());
                    case 222:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(20, "MediaMuteAwaitLog", true);
                    case IKnoxCustomManager.Stub.TRANSACTION_getLockScreenShortcut /* 223 */:
                        return (T) new BroadcastSender(this.tvGlobalRootComponent.context, this.tvSysUIComponentImpl.wakeLockBuilder(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setUsbConnectionType /* 224 */:
                        return (T) new MediaUiEventLogger((UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getUsbConnectionType /* 225 */:
                        return (T) new SysuiColorExtractor(this.tvGlobalRootComponent.context, (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getUsbConnectionTypeInternal /* 226 */:
                        return (T) new KeyguardSurfaceControllerImpl((KeyguardViewController) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (KeyguardVisibilityMonitor) this.tvSysUIComponentImpl.keyguardVisibilityMonitorProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.centralSurfacesImplProvider), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setForceAutoShutDownState /* 227 */:
                        return (T) new PrimaryBouncerToGoneTransitionViewModel((KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (PrimaryBouncerInteractor) this.tvSysUIComponentImpl.primaryBouncerInteractorProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getForceAutoShutDownState /* 228 */:
                        return (T) new LargeScreenShadeInterpolatorImpl((ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), this.tvGlobalRootComponent.context, new SplitShadeInterpolator(), new LargeScreenPortraitShadeInterpolator());
                    case IKnoxCustomManager.Stub.TRANSACTION_setBrightness /* 229 */:
                        return (T) new SecLsScrimControlHelper(DoubleCheck.lazy(this.tvSysUIComponentImpl.dozeParametersProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.keyguardStateControllerImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginAODManagerProvider), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (AODAmbientWallpaperHelper) this.tvSysUIComponentImpl.aODAmbientWallpaperHelperProvider.get(), (KeyguardFoldController) this.tvSysUIComponentImpl.keyguardFoldControllerImplProvider.get(), this.tvGlobalRootComponent.mainResources(), DoubleCheck.lazy(this.tvSysUIComponentImpl.coverHostImplProvider), (KeyguardFastBioUnlockController) this.tvSysUIComponentImpl.keyguardFastBioUnlockControllerProvider.get());
                    case 230:
                        return (T) new CoverHostImpl(this.tvGlobalRootComponent.context, (CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardViewMediator) this.tvSysUIComponentImpl.newKeyguardViewMediatorProvider.get(), (ViewMediatorCallback) this.tvSysUIComponentImpl.providesViewMediatorCallbackProvider.get(), (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (IndicatorCoverManager) this.tvSysUIComponentImpl.indicatorCoverManagerProvider.get(), (StatusBarWindowController) this.tvSysUIComponentImpl.statusBarWindowControllerProvider.get(), (StatusBarKeyguardViewManager) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (CoverUtil) this.tvGlobalRootComponent.coverUtilProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginAODManagerProvider), (PluginLockManager) this.tvSysUIComponentImpl.pluginLockManagerImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_removeShortcut /* 231 */:
                        return (T) new IndicatorCoverManager(this.tvGlobalRootComponent.context, (CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get(), (IndicatorGardenPresenter) this.tvSysUIComponentImpl.indicatorGardenPresenterProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_addWidget /* 232 */:
                        return (T) new PluginLockManagerImpl((PluginLockMediator) this.tvSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (PluginLockInstancePolicy) this.tvSysUIComponentImpl.pluginLockInstancePolicyProvider.get(), (PluginLockDelegateApp) this.tvSysUIComponentImpl.pluginLockDelegateAppProvider.get(), (PluginLockDelegateSysUi) this.tvSysUIComponentImpl.pluginLockDelegateSysUiProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (PluginLockUtils) this.tvSysUIComponentImpl.pluginLockUtilsProvider.get(), (PluginWallpaperManager) this.tvSysUIComponentImpl.pluginWallpaperManagerImplProvider.get(), (KeyguardFoldController) this.tvSysUIComponentImpl.keyguardFoldControllerImplProvider.get(), (DesktopManager) this.tvSysUIComponentImpl.provideDesktopManagerProvider.get(), this.tvGlobalRootComponent.context);
                    case IKnoxCustomManager.Stub.TRANSACTION_removeWidget /* 233 */:
                        return (T) new PluginLockInstancePolicy();
                    case IKnoxCustomManager.Stub.TRANSACTION_deleteHomeScreenPage /* 234 */:
                        return (T) new PluginLockDelegateApp((PluginLockUtils) this.tvSysUIComponentImpl.pluginLockUtilsProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setAppsButtonState /* 235 */:
                        return (T) new PluginLockDelegateSysUi((PluginLockMediator) this.tvSysUIComponentImpl.pluginLockMediatorImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getAppsButtonState /* 236 */:
                        return (T) new PulseExpansionHandler(this.tvGlobalRootComponent.context, (NotificationWakeUpCoordinator) this.tvSysUIComponentImpl.notificationWakeUpCoordinatorProvider.get(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (HeadsUpManagerPhone) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (NotificationRoundnessManager) this.tvSysUIComponentImpl.notificationRoundnessManagerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (LockscreenShadeTransitionController) this.tvSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (FalsingCollector) this.tvSysUIComponentImpl.falsingCollectorImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setFavoriteApp /* 237 */:
                        return (T) new NotificationWakeUpCoordinator((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (HeadsUpManager) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (ScreenOffAnimationController) this.tvSysUIComponentImpl.screenOffAnimationControllerProvider.get(), this.tvSysUIComponentImpl.notificationWakeUpCoordinatorLogger());
                    case IKnoxCustomManager.Stub.TRANSACTION_removeFavoriteApp /* 238 */:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "NotifLockscreenLog", false);
                    case IKnoxCustomManager.Stub.TRANSACTION_getFavoriteAppsMaxCount /* 239 */:
                        return (T) NotificationRoundnessManager_Factory.newInstance((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getFavoriteApp /* 240 */:
                        return (T) new NotificationIconAreaController(this.tvGlobalRootComponent.context, (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (NotificationWakeUpCoordinator) this.tvSysUIComponentImpl.notificationWakeUpCoordinatorProvider.get(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (NotificationMediaManager) this.tvSysUIComponentImpl.provideNotificationMediaManagerProvider.get(), (NotificationListener) this.tvSysUIComponentImpl.notificationListenerProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), (SectionStyleProvider) this.tvSysUIComponentImpl.sectionStyleProvider.get(), this.tvSysUIComponentImpl.setBubbles, (DemoModeController) this.tvSysUIComponentImpl.provideDemoModeControllerProvider.get(), (DarkIconDispatcher) this.tvSysUIComponentImpl.darkIconDispatcherImplProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (StatusBarWindowController) this.tvSysUIComponentImpl.statusBarWindowControllerProvider.get(), (ScreenOffAnimationController) this.tvSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (OngoingCallController) this.tvSysUIComponentImpl.provideOngoingCallControllerProvider.get(), (SecUnlockedScreenOffAnimationHelper) this.tvSysUIComponentImpl.secUnlockedScreenOffAnimationHelperProvider.get(), (ExternalClockProvider) this.tvGlobalRootComponent.externalClockProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setZeroPageState /* 241 */:
                        return (T) new NotificationListener(this.tvGlobalRootComponent.context, (NotificationManager) this.tvGlobalRootComponent.provideNotificationManagerProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (PluginManager) this.tvGlobalRootComponent.providesPluginManagerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getZeroPageState /* 242 */:
                        return (T) new SectionStyleProvider();
                    case IKnoxCustomManager.Stub.TRANSACTION_setHardKeyIntentMode /* 243 */:
                        return (T) CentralSurfacesDependenciesModule_ProvideOngoingCallControllerFactory.provideOngoingCallController(this.tvGlobalRootComponent.context, (CommonNotifCollection) this.tvSysUIComponentImpl.notifPipelineProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (IActivityManager) this.tvGlobalRootComponent.provideIActivityManagerProvider.get(), (OngoingCallLogger) this.tvSysUIComponentImpl.ongoingCallLoggerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (StatusBarWindowController) this.tvSysUIComponentImpl.statusBarWindowControllerProvider.get(), (SwipeStatusBarAwayGestureHandler) this.tvSysUIComponentImpl.swipeStatusBarAwayGestureHandlerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (OngoingCallFlags) this.tvSysUIComponentImpl.ongoingCallFlagsProvider.get(), new KeyguardCallChipController(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getHardKeyIntentMode /* 244 */:
                        return (T) new OngoingCallLogger((UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setHomeScreenMode /* 245 */:
                        return (T) new SwipeStatusBarAwayGestureHandler(this.tvGlobalRootComponent.context, (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get(), (SwipeUpGestureLogger) this.tvSysUIComponentImpl.swipeUpGestureLoggerProvider.get(), (StatusBarWindowController) this.tvSysUIComponentImpl.statusBarWindowControllerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getHomeScreenMode /* 246 */:
                        return (T) new SwipeUpGestureLogger((LogBuffer) this.tvSysUIComponentImpl.provideSwipeUpLogBufferProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_addDexShortcut /* 247 */:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(30, "SwipeUpLog", true);
                    case IKnoxCustomManager.Stub.TRANSACTION_removeDexShortcut /* 248 */:
                        return (T) new OngoingCallFlags((FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_addDexURLShortcut /* 249 */:
                        return (T) new DozeInteractor((KeyguardRepository) this.tvSysUIComponentImpl.keyguardRepositoryImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_addDexURLShortcutExtend /* 250 */:
                        return (T) new BurnInInteractor(this.tvGlobalRootComponent.context, new BurnInHelperWrapper(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (ConfigurationRepository) this.tvSysUIComponentImpl.configurationRepositoryImplProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_removeDexURLShortcut /* 251 */:
                        return (T) new ConfigurationRepositoryImpl((ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), this.tvGlobalRootComponent.context, (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), new DisplayUtilsWrapper());
                    case IKnoxCustomManager.Stub.TRANSACTION_setDexForegroundModePackageList /* 252 */:
                        return (T) new SecPanelPolicy((SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (LockscreenShadeTransitionController) this.tvSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (QSTileHost) this.tvSysUIComponentImpl.qSTileHostProvider.get(), (SecPanelTouchProximityHelper) this.tvSysUIComponentImpl.secPanelTouchProximityHelperProvider.get(), (SecHideInformationMirroringController) this.tvSysUIComponentImpl.secHideInformationMirroringControllerProvider.get(), (BootAnimationFinishedCache) this.tvSysUIComponentImpl.bootAnimationFinishedCacheImplProvider.get(), (CommonNotifCollection) this.tvSysUIComponentImpl.notifPipelineProvider.get(), (SecPanelConfigurationBellTower) this.tvSysUIComponentImpl.secPanelConfigurationBellTowerProvider.get(), (SecPanelExpansionStateNotifier) this.tvSysUIComponentImpl.secPanelExpansionStateNotifierProvider.get(), (DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get(), (HeadsUpManagerPhone) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get(), (StatusBarWindowController) this.tvSysUIComponentImpl.statusBarWindowControllerProvider.get(), (SecPanelLogger) this.tvSysUIComponentImpl.providesSecPanelLoggerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (ShadeController) this.tvSysUIComponentImpl.shadeControllerImplProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getDexForegroundModePackageList /* 253 */:
                        return (T) new QSTileHost(this.tvGlobalRootComponent.context, (QSFactory) this.tvSysUIComponentImpl.qSFactoryImplProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (PluginManager) this.tvGlobalRootComponent.providesPluginManagerProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), this.tvSysUIComponentImpl.secAutoTileManagerProvider, (Optional) this.tvSysUIComponentImpl.optionalOfCentralSurfacesProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), this.tvSysUIComponentImpl.customTileStatePersister(), (TileLifecycleManager.Factory) this.tvSysUIComponentImpl.factoryProvider5.get(), (UserFileManager) this.tvSysUIComponentImpl.userFileManagerImplProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (BootAnimationFinishedCache) this.tvSysUIComponentImpl.bootAnimationFinishedCacheImplProvider.get());
                    case 254:
                        return (T) new QSFactoryImpl(DoubleCheck.lazy(this.tvSysUIComponentImpl.qSHostAdapterProvider), this.tvSysUIComponentImpl.builderProvider2, this.tvSysUIComponentImpl.mapOfStringAndProviderOfQSTileImplOf());
                    case 255:
                        return (T) new QSHostAdapter((QSTileHost) this.tvSysUIComponentImpl.qSTileHostProvider.get(), (CurrentTilesInteractor) this.tvSysUIComponentImpl.currentTilesInteractorImplProvider.get(), this.tvGlobalRootComponent.context, (TileServiceRequestController.Builder) this.tvSysUIComponentImpl.builderProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 256:
                        return (T) new CurrentTilesInteractorImpl((TileSpecRepository) this.tvSysUIComponentImpl.tileSpecSettingsRepositoryProvider.get(), (InstalledTilesComponentRepository) this.tvSysUIComponentImpl.installedTilesComponentRepositoryImplProvider.get(), (UserRepository) this.tvSysUIComponentImpl.userRepositoryImplProvider.get(), this.tvSysUIComponentImpl.customTileStatePersister(), (QSFactory) this.tvSysUIComponentImpl.qSFactoryImplProvider.get(), this.tvSysUIComponentImpl.customTileAddedRepository(), (TileLifecycleManager.Factory) this.tvSysUIComponentImpl.factoryProvider5.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.mainDispatcherProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), this.tvSysUIComponentImpl.qSPipelineLogger(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 257:
                        return (T) new TileSpecSettingsRepository((SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), this.tvGlobalRootComponent.mainResources(), this.tvSysUIComponentImpl.qSPipelineLogger(), (RetailModeRepository) this.tvSysUIComponentImpl.retailModeSettingsRepositoryProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get());
                    case 258:
                        LogBufferFactory logBufferFactory = (LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get();
                        QSPipelineModule.Companion.getClass();
                        return (T) logBufferFactory.create(KnoxEnterpriseLicenseManager.ERROR_LICENSE_DEACTIVATED, "QSTileListLog", false);
                    case 259:
                        return (T) new RetailModeSettingsRepository((GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case 260:
                        return (T) new InstalledTilesComponentRepositoryImpl((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get());
                    case 261:
                        return (T) new CustomTileAddedSharedPrefsRepository((UserFileManager) this.tvSysUIComponentImpl.userFileManagerImplProvider.get());
                    case 262:
                        return (T) new UserFileManagerImpl(this.tvGlobalRootComponent.context, (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (DelayableExecutor) this.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get());
                    case 263:
                        return (T) new TileLifecycleManager.Factory() { // from class: com.android.systemui.tv.DaggerTvGlobalRootComponent.TvSysUIComponentImpl.SwitchingProvider.3
                            public final TileLifecycleManager create(Intent intent, UserHandle userHandle) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new TileLifecycleManager((Handler) switchingProvider.tvGlobalRootComponent.provideMainHandlerProvider.get(), switchingProvider.tvGlobalRootComponent.context, (IQSService) switchingProvider.tvSysUIComponentImpl.tileServicesProvider.get(), switchingProvider.tvSysUIComponentImpl.packageManagerAdapter(), (BroadcastDispatcher) switchingProvider.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), intent, userHandle, (DelayableExecutor) switchingProvider.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get());
                            }
                        };
                    case 264:
                        return (T) new TileServices((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), this.tvGlobalRootComponent.provideMainHandlerProvider, (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (StatusBarIconController) this.tvSysUIComponentImpl.statusBarIconControllerImplProvider.get(), this.tvSysUIComponentImpl.panelInteractor(), this.tvSysUIComponentImpl.customTileAddedRepository(), (DelayableExecutor) this.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get());
                    case 265:
                        return (T) new StatusBarIconControllerImpl(this.tvGlobalRootComponent.context, (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (DemoModeController) this.tvSysUIComponentImpl.provideDemoModeControllerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (StatusBarIconList) this.tvSysUIComponentImpl.provideStatusBarIconListProvider.get(), (StatusBarPipelineFlags) this.tvSysUIComponentImpl.statusBarPipelineFlagsProvider.get(), (BindableIconsRegistry) this.tvSysUIComponentImpl.bindableIconsRegistryImplProvider.get(), (CarrierInfraMediator) this.tvSysUIComponentImpl.fakeCarrierInfraMediatorImplProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (SubscriptionsOrder) this.tvSysUIComponentImpl.subscriptionsOrderProvider.get());
                    case 266:
                        return (T) CentralSurfacesDependenciesModule_ProvideStatusBarIconListFactory.provideStatusBarIconList(this.tvGlobalRootComponent.context);
                    case 267:
                        return (T) new StatusBarPipelineFlags(this.tvGlobalRootComponent.context, (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 268:
                        return (T) new BindableIconsRegistryImpl((DeviceBasedSatelliteBindableIcon) this.tvSysUIComponentImpl.deviceBasedSatelliteBindableIconProvider.get());
                    case 269:
                        return (T) new DeviceBasedSatelliteBindableIcon(this.tvGlobalRootComponent.context, this.tvSysUIComponentImpl.deviceBasedSatelliteViewModel());
                    case 270:
                        return (T) new DeviceBasedSatelliteInteractor((DeviceBasedSatelliteRepository) this.tvSysUIComponentImpl.deviceBasedSatelliteRepositoryImplProvider.get(), (MobileIconsInteractor) this.tvSysUIComponentImpl.mobileIconsInteractorImplProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case 271:
                        return (T) new DeviceBasedSatelliteRepositoryImpl((Optional) this.tvGlobalRootComponent.provideSatelliteManagerProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (LogBuffer) this.tvSysUIComponentImpl.provideOemSatelliteInputLogProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get());
                    case 272:
                        LogBufferFactory logBufferFactory2 = (LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) logBufferFactory2.create(32, "DeviceBasedSatelliteInputLog", true);
                    case IKnoxCustomManager.Stub.TRANSACTION_setHardKeyIntentBroadcastExternal /* 273 */:
                        return (T) new MobileIconsInteractorImpl((MobileConnectionsRepository) this.tvSysUIComponentImpl.mobileRepositorySwitcherProvider.get(), (CarrierConfigTracker) this.tvSysUIComponentImpl.carrierConfigTrackerProvider.get(), (TableLogBuffer) this.tvSysUIComponentImpl.provideMobileSummaryLogBufferProvider.get(), (ConnectivityRepository) this.tvSysUIComponentImpl.connectivityRepositoryImplProvider.get(), (UserSetupRepository) this.tvSysUIComponentImpl.userSetupRepositoryImplProvider.get(), (WifiRepository) this.tvSysUIComponentImpl.wifiRepositorySwitcherProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), this.tvGlobalRootComponent.context, this.tvSysUIComponentImpl.mobileDataIconResource(), this.tvSysUIComponentImpl.mobileSignalIconResource(), this.tvSysUIComponentImpl.mobileRoamingIconResource(), this.tvSysUIComponentImpl.mobileDisabledDataIconResource(), new MobileMappingsProxyImpl(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (CarrierInfraMediator) this.tvSysUIComponentImpl.fakeCarrierInfraMediatorImplProvider.get(), (SubscriptionsOrder) this.tvSysUIComponentImpl.subscriptionsOrderProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setHardKeyIntentBroadcastInternal /* 274 */:
                        return (T) new MobileRepositorySwitcher((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (MobileConnectionsRepositoryImpl) this.tvSysUIComponentImpl.mobileConnectionsRepositoryImplProvider.get(), this.tvSysUIComponentImpl.demoMobileConnectionsRepository(), (DemoModeController) this.tvSysUIComponentImpl.provideDemoModeControllerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getHardKeyIntentBroadcast /* 275 */:
                        return (T) new MobileConnectionsRepositoryImpl((ConnectivityRepository) this.tvSysUIComponentImpl.connectivityRepositoryImplProvider.get(), (SubscriptionManager) this.tvGlobalRootComponent.provideSubscriptionManagerProvider.get(), new SubscriptionManagerProxyImpl(), (TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get(), (MobileInputLogger) this.tvSysUIComponentImpl.mobileInputLoggerProvider.get(), (TableLogBuffer) this.tvSysUIComponentImpl.provideMobileSummaryLogBufferProvider.get(), new MobileMappingsProxyImpl(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), this.tvGlobalRootComponent.context, (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (AirplaneModeRepository) this.tvSysUIComponentImpl.airplaneModeRepositoryImplProvider.get(), (WifiRepository) this.tvSysUIComponentImpl.wifiRepositorySwitcherProvider.get(), this.tvSysUIComponentImpl.fullMobileConnectionRepositoryFactory(), (SimCardInfoUtil) this.tvSysUIComponentImpl.simCardInfoUtilProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), this.tvSysUIComponentImpl.mobileDataIconResource(), (CarrierInfraMediator) this.tvSysUIComponentImpl.fakeCarrierInfraMediatorImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setForcedDisplaySizeDensity /* 276 */:
                        return (T) new ConnectivityRepositoryImpl((ConnectivityManager) this.tvGlobalRootComponent.provideConnectivityManagagerProvider.get(), (ConnectivitySlots) this.tvSysUIComponentImpl.connectivitySlotsProvider.get(), this.tvGlobalRootComponent.context, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (ConnectivityInputLogger) this.tvSysUIComponentImpl.connectivityInputLoggerProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_clearForcedDisplaySizeDensity /* 277 */:
                        return (T) new ConnectivitySlots(this.tvGlobalRootComponent.context);
                    case IKnoxCustomManager.Stub.TRANSACTION_startSmartView /* 278 */:
                        return (T) new ConnectivityInputLogger((LogBuffer) this.tvSysUIComponentImpl.provideSharedConnectivityTableLogBufferProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setForceSingleView /* 279 */:
                        LogBufferFactory logBufferFactory3 = (LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) logBufferFactory3.create(60, "SharedConnectivityInputLog", true);
                    case IKnoxCustomManager.Stub.TRANSACTION_getForceSingleView /* 280 */:
                        return (T) new MobileInputLogger((LogBuffer) this.tvSysUIComponentImpl.provideMobileInputLogBufferProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setBootingAnimationSub /* 281 */:
                        LogBufferFactory logBufferFactory4 = (LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) logBufferFactory4.create(300, "MobileInputLog", true);
                    case IKnoxCustomManager.Stub.TRANSACTION_setShuttingDownAnimationSub /* 282 */:
                        TableLogBufferFactory tableLogBufferFactory = (TableLogBufferFactory) this.tvSysUIComponentImpl.tableLogBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) tableLogBufferFactory.create(100, "MobileSummaryLog");
                    case IKnoxCustomManager.Stub.TRANSACTION_getLoadingLogoPath /* 283 */:
                        return (T) new AirplaneModeRepositoryImpl((Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl(), (TableLogBuffer) this.tvSysUIComponentImpl.provideAirplaneTableLogBufferProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_registerSystemUiCallback /* 284 */:
                        TableLogBufferFactory tableLogBufferFactory2 = (TableLogBufferFactory) this.tvSysUIComponentImpl.tableLogBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) tableLogBufferFactory2.create(30, "AirplaneTableLog");
                    case IKnoxCustomManager.Stub.TRANSACTION_startProKioskMode /* 285 */:
                        return (T) new WifiRepositorySwitcher((RealWifiRepository) this.tvSysUIComponentImpl.provideRealWifiRepositoryProvider.get(), this.tvSysUIComponentImpl.demoWifiRepository(), (DemoModeController) this.tvSysUIComponentImpl.provideDemoModeControllerProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_stopProKioskMode /* 286 */:
                        return (T) StatusBarPipelineModule_Companion_ProvideRealWifiRepositoryFactory.provideRealWifiRepository((WifiManager) this.tvGlobalRootComponent.provideWifiManagerProvider.get(), (DisabledWifiRepository) this.tvSysUIComponentImpl.disabledWifiRepositoryProvider.get(), (WifiRepositoryImpl.Factory) this.tvSysUIComponentImpl.factoryProvider3.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_stayInDexForegroundMode /* 287 */:
                        return (T) new DisabledWifiRepository();
                    case IKnoxCustomManager.Stub.TRANSACTION_getAsoc /* 288 */:
                        return (T) new WifiRepositoryImpl.Factory((BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (ConnectivityManager) this.tvGlobalRootComponent.provideConnectivityManagagerProvider.get(), (ConnectivityRepository) this.tvSysUIComponentImpl.connectivityRepositoryImplProvider.get(), (WifiInputLogger) this.tvSysUIComponentImpl.wifiInputLoggerProvider.get(), (TableLogBuffer) this.tvSysUIComponentImpl.provideWifiTableLogBufferProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), this.tvGlobalRootComponent.semWifiManager());
                    case IKnoxCustomManager.Stub.TRANSACTION_setAsoc /* 289 */:
                        return (T) new WifiInputLogger((LogBuffer) this.tvSysUIComponentImpl.provideWifiInputLogBufferProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getBsoh /* 290 */:
                        LogBufferFactory logBufferFactory5 = (LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) logBufferFactory5.create(200, "WifiInputLog", true);
                    case IKnoxCustomManager.Stub.TRANSACTION_getBsohUnbiased /* 291 */:
                        TableLogBufferFactory tableLogBufferFactory3 = (TableLogBufferFactory) this.tvSysUIComponentImpl.tableLogBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) tableLogBufferFactory3.create(100, "WifiTableLog");
                    case IKnoxCustomManager.Stub.TRANSACTION_startTcpDump /* 292 */:
                        return (T) new DemoModeWifiDataSource((DemoModeController) this.tvSysUIComponentImpl.provideDemoModeControllerProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_stopTcpDump /* 293 */:
                        return (T) new CarrierConfigRepository((BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (CarrierConfigManager) this.tvGlobalRootComponent.provideCarrierConfigManagerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (MobileInputLogger) this.tvSysUIComponentImpl.mobileInputLoggerProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getTcpDump /* 294 */:
                        return (T) new FakeCarrierInfraMediatorImpl((CarrierInfraMediatorImpl) this.tvSysUIComponentImpl.carrierInfraMediatorImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_readFile /* 295 */:
                        return (T) new CarrierInfraMediatorImpl((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (CommonUtil) this.tvSysUIComponentImpl.commonUtilProvider.get(), (MobileSignalUtil) this.tvSysUIComponentImpl.mobileSignalUtilProvider.get(), (CarrierInfoUtil) this.tvSysUIComponentImpl.carrierInfoUtilProvider.get(), (MobileDataUtil) this.tvSysUIComponentImpl.mobileDataUtilProvider.get(), (MobileRoamingUtil) this.tvSysUIComponentImpl.mobileRoamingUtilProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setApplicationRestrictionsInternal /* 296 */:
                        return (T) new CommonUtil((SystemPropertiesWrapper) this.tvSysUIComponentImpl.systemPropertiesWrapperProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getApplicationRestrictionsInternal /* 297 */:
                        return (T) new SystemPropertiesWrapper();
                    case IKnoxCustomManager.Stub.TRANSACTION_setKeyedAppStatesReport /* 298 */:
                        return (T) new MobileSignalUtil((CommonUtil) this.tvSysUIComponentImpl.commonUtilProvider.get(), (SystemPropertiesWrapper) this.tvSysUIComponentImpl.systemPropertiesWrapperProvider.get(), (TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_migrateApplicationRestrictions /* 299 */:
                        return (T) new CarrierInfoUtil((CommonUtil) this.tvSysUIComponentImpl.commonUtilProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }

            /* JADX WARN: Type inference failed for: r1v20, types: [T, com.android.systemui.statusbar.policy.IndividualSensorPrivacyControllerImpl] */
            public final T get3() {
                switch (this.id) {
                    case 300:
                        return (T) new MobileDataUtil((CommonUtil) this.tvSysUIComponentImpl.commonUtilProvider.get());
                    case 301:
                        return (T) new MobileRoamingUtil((CommonUtil) this.tvSysUIComponentImpl.commonUtilProvider.get());
                    case 302:
                        return (T) new SimCardInfoUtil((TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get(), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl(), (SystemSettings) this.tvSysUIComponentImpl.systemSettingsImpl());
                    case 303:
                        return (T) new ImsRegStateUtil(this.tvGlobalRootComponent.context, (CarrierInfraMediator) this.tvSysUIComponentImpl.fakeCarrierInfraMediatorImplProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case 304:
                        return (T) new CarrierMergedConnectionRepository.Factory((TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (WifiRepository) this.tvSysUIComponentImpl.wifiRepositorySwitcherProvider.get());
                    case 305:
                        return (T) new DemoModeMobileConnectionDataSource((DemoModeController) this.tvSysUIComponentImpl.provideDemoModeControllerProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case VpnErrorValues.ERROR_STOPPING_CONNECTION_BEFORE_REMOVING /* 306 */:
                        return (T) new CarrierConfigTracker((CarrierConfigManager) this.tvGlobalRootComponent.provideCarrierConfigManagerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case VpnErrorValues.ERROR_VPN_RECREATE_PROFILE_FAIL /* 307 */:
                        return (T) new UserSetupRepositoryImpl((DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case 308:
                        return (T) new SubscriptionsOrder((SubscriptionManager) this.tvGlobalRootComponent.provideSubscriptionManagerProvider.get());
                    case 309:
                        return (T) new PanelInteractorImpl((Optional) this.tvSysUIComponentImpl.optionalOfCentralSurfacesProvider.get());
                    case 310:
                        return (T) new TileServiceRequestController.Builder((CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (CommandRegistry) this.tvSysUIComponentImpl.commandRegistryProvider.get());
                    case 311:
                        return (T) new CustomTile.Builder(DoubleCheck.lazy(this.tvSysUIComponentImpl.qSHostAdapterProvider), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), this.tvSysUIComponentImpl.customTileStatePersister(), (TileServices) this.tvSysUIComponentImpl.tileServicesProvider.get(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get());
                    case 312:
                        return (T) new QsEventLoggerImpl((UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get());
                    case 313:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(KnoxEnterpriseLicenseManager.ERROR_LICENSE_DEACTIVATED, "QSLog", false);
                    case 314:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "QSConfigLog", true);
                    case 315:
                        return (T) new ColorInversionTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl());
                    case 316:
                        return (T) new NightDisplayTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (LocationController) this.tvSysUIComponentImpl.locationControllerImplProvider.get(), (ColorDisplayManager) this.tvGlobalRootComponent.provideColorDisplayManagerProvider.get(), this.tvSysUIComponentImpl.nightDisplayListenerModuleBuilder());
                    case 317:
                        return (T) new LocationControllerImpl(this.tvGlobalRootComponent.context, (AppOpsController) this.tvSysUIComponentImpl.appOpsControllerImplProvider.get(), (DeviceConfigProxy) this.tvSysUIComponentImpl.deviceConfigProxyProvider.get(), (Looper) this.tvGlobalRootComponent.provideMainLooperProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (BootCompleteCache) this.tvSysUIComponentImpl.bootCompleteCacheImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl());
                    case 318:
                        return (T) new AppOpsControllerImpl(this.tvGlobalRootComponent.context, (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (AudioManager) this.tvGlobalRootComponent.provideAudioManagerProvider.get(), (IndividualSensorPrivacyController) this.tvSysUIComponentImpl.provideIndividualSensorPrivacyControllerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get());
                    case 319:
                        ?? r1 = (T) new IndividualSensorPrivacyControllerImpl((SensorPrivacyManager) this.tvGlobalRootComponent.provideSensorPrivacyManagerProvider.get());
                        r1.init();
                        return r1;
                    case 320:
                        return (T) new ReduceBrightColorsTile(((Boolean) this.tvSysUIComponentImpl.isReduceBrightColorsAvailableProvider.get()).booleanValue(), (ReduceBrightColorsController) this.tvSysUIComponentImpl.reduceBrightColorsControllerProvider.get(), (QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl());
                    case 321:
                        return (T) Boolean.valueOf(QSFlagsModule.isReduceBrightColorsAvailable(this.tvGlobalRootComponent.context));
                    case 322:
                        return (T) new ReduceBrightColorsController((UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (ColorDisplayManager) this.tvGlobalRootComponent.provideColorDisplayManagerProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl());
                    case 323:
                        return (T) new OneHandedModeTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl());
                    case 324:
                        return (T) new ColorCorrectionTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl());
                    case 325:
                        return (T) new DreamTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (IDreamManager) this.tvGlobalRootComponent.provideIDreamManagerProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), this.tvSysUIComponentImpl.namedBoolean2(), this.tvSysUIComponentImpl.namedBoolean3());
                    case 326:
                        return (T) new FontScalingTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (DialogLaunchAnimator) this.tvSysUIComponentImpl.provideDialogLaunchAnimatorProvider.get(), (SystemSettings) this.tvSysUIComponentImpl.systemSettingsImpl(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (DelayableExecutor) this.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get());
                    case 327:
                        IDreamManager iDreamManager = (IDreamManager) this.tvGlobalRootComponent.provideIDreamManagerProvider.get();
                        KeyguardStateController keyguardStateController = (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get();
                        Lazy lazy = DoubleCheck.lazy(this.tvSysUIComponentImpl.alternateBouncerInteractorProvider);
                        return (T) new DialogLaunchAnimator(new CentralSurfacesDependenciesModule$1(iDreamManager, keyguardStateController, lazy), (InteractionJankMonitor) this.tvGlobalRootComponent.provideInteractionJankMonitorProvider.get(), (AnimationFeatureFlags) this.tvSysUIComponentImpl.provideAnimationFeatureFlagsProvider.get());
                    case 328:
                        return (T) new AlternateBouncerInteractor((StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardBouncerRepository) this.tvSysUIComponentImpl.keyguardBouncerRepositoryImplProvider.get(), (BiometricSettingsRepository) this.tvSysUIComponentImpl.biometricSettingsRepositoryImplProvider.get(), (DeviceEntryFingerprintAuthRepository) this.tvSysUIComponentImpl.deviceEntryFingerprintAuthRepositoryImplProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get());
                    case 329:
                        return (T) new BiometricSettingsRepositoryImpl(this.tvGlobalRootComponent.context, (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (AuthController) this.tvSysUIComponentImpl.authControllerProvider.get(), (UserRepository) this.tvSysUIComponentImpl.userRepositoryImplProvider.get(), (DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (BiometricManager) this.tvGlobalRootComponent.providesBiometricManagerProvider.get(), (DevicePostureRepository) this.tvSysUIComponentImpl.devicePostureRepositoryImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 330:
                        return (T) new DevicePostureRepositoryImpl((DevicePostureController) this.tvSysUIComponentImpl.devicePostureControllerImplProvider.get());
                    case CustomDeviceManager.SOURCE_ADDRESS /* 331 */:
                        return (T) new DeviceEntryFingerprintAuthRepositoryImpl((AuthController) this.tvSysUIComponentImpl.authControllerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case CustomDeviceManager.DESTINATION_ADDRESS /* 332 */:
                        return (T) CentralSurfacesDependenciesModule_ProvideAnimationFeatureFlagsFactory.provideAnimationFeatureFlags((FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 333:
                        return (T) new ColorAdjustmentTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), this.tvGlobalRootComponent.mainResources(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (SystemSettings) this.tvSysUIComponentImpl.systemSettingsImpl());
                    case 334:
                        return (T) new ColorLensTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), this.tvGlobalRootComponent.mainResources(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl());
                    case 335:
                        return (T) new HighContrastFontTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), this.tvGlobalRootComponent.mainResources(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl());
                    case 336:
                        return (T) new WifiTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (NetworkController) this.tvSysUIComponentImpl.networkControllerImplProvider.get(), (AccessPointController) this.tvSysUIComponentImpl.provideAccessPointControllerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), this.tvSysUIComponentImpl.panelInteractor(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 337:
                        return (T) new NetworkControllerImpl(this.tvGlobalRootComponent.context, (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (SubscriptionManager) this.tvGlobalRootComponent.provideSubscriptionManagerProvider.get(), (CallbackHandler) this.tvSysUIComponentImpl.callbackHandlerProvider.get(), (DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (ConnectivityManager) this.tvGlobalRootComponent.provideConnectivityManagagerProvider.get(), (TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get(), (TelephonyListenerManager) this.tvSysUIComponentImpl.telephonyListenerManagerProvider.get(), (WifiManager) this.tvGlobalRootComponent.provideWifiManagerProvider.get(), (AccessPointControllerImpl) this.tvSysUIComponentImpl.provideAccessPointControllerImplProvider.get(), (StatusBarPipelineFlags) this.tvSysUIComponentImpl.statusBarPipelineFlagsProvider.get(), (DemoModeController) this.tvSysUIComponentImpl.provideDemoModeControllerProvider.get(), (CarrierConfigTracker) this.tvSysUIComponentImpl.carrierConfigTrackerProvider.get(), this.tvSysUIComponentImpl.wifiStatusTrackerFactory(), (MobileSignalControllerFactory) this.tvSysUIComponentImpl.mobileSignalControllerFactoryProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (InternetDialogFactory) this.tvSysUIComponentImpl.internetDialogFactoryProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (LogBuffer) this.tvSysUIComponentImpl.provideStatusBarNetworkControllerBufferProvider.get());
                    case 338:
                        return (T) CallbackHandler_Factory.newInstance((Looper) this.tvGlobalRootComponent.provideMainLooperProvider.get());
                    case 339:
                        return (T) new TelephonyListenerManager((TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), TelephonyCallback_Factory.newInstance());
                    case 340:
                        return (T) StatusBarPolicyModule_ProvideAccessPointControllerImplFactory.provideAccessPointControllerImpl((UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (AccessPointControllerImpl.WifiPickerTrackerFactory) this.tvSysUIComponentImpl.wifiPickerTrackerFactoryProvider.get());
                    case 341:
                        return (T) new AccessPointControllerImpl.WifiPickerTrackerFactory(this.tvGlobalRootComponent.context, (WifiManager) this.tvGlobalRootComponent.provideWifiManagerProvider.get(), (ConnectivityManager) this.tvGlobalRootComponent.provideConnectivityManagagerProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get());
                    case 342:
                        return (T) new MobileSignalControllerFactory(this.tvGlobalRootComponent.context, (CallbackHandler) this.tvSysUIComponentImpl.callbackHandlerProvider.get(), (CarrierConfigTracker) this.tvSysUIComponentImpl.carrierConfigTrackerProvider.get(), new MobileMappingsProxyImpl());
                    case 343:
                        return (T) new InternetDialogFactory((Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), this.tvSysUIComponentImpl.internetDialogController(), this.tvGlobalRootComponent.context, (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (DialogLaunchAnimator) this.tvSysUIComponentImpl.provideDialogLaunchAnimatorProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get());
                    case 344:
                        return (T) new ToastFactory((LayoutInflater) this.tvGlobalRootComponent.providerLayoutInflaterProvider.get(), (PluginManager) this.tvGlobalRootComponent.providesPluginManagerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 345:
                        return (T) new WifiStateWorker((BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (DelayableExecutor) this.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (WifiManager) this.tvGlobalRootComponent.provideWifiManagerProvider.get());
                    case 346:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(20, "StatusBarNetworkControllerLog", true);
                    case 347:
                        return (T) new SBluetoothTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (SBluetoothController) this.tvSysUIComponentImpl.sBluetoothControllerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), this.tvSysUIComponentImpl.panelInteractor(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 348:
                        return (T) new SBluetoothControllerImpl(this.tvGlobalRootComponent.context, (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (BluetoothLogger) this.tvSysUIComponentImpl.bluetoothLoggerProvider.get(), (BluetoothRepository) this.tvSysUIComponentImpl.bluetoothRepositoryImplProvider.get(), (Looper) this.tvGlobalRootComponent.provideMainLooperProvider.get(), (LocalBluetoothManager) this.tvSysUIComponentImpl.provideLocalBluetoothControllerProvider.get(), (BluetoothAdapter) this.tvGlobalRootComponent.provideBluetoothAdapterProvider.get(), (DesktopManager) this.tvSysUIComponentImpl.provideDesktopManagerProvider.get());
                    case 349:
                        return (T) new BluetoothLogger((LogBuffer) this.tvSysUIComponentImpl.providerBluetoothLogBufferProvider.get());
                    case 350:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "BluetoothLog", true);
                    case QuantumSecurityInfo.QUANTUM_KEY_STATUS.KEY_STATUS_SUCCESS /* 351 */:
                        return (T) new BluetoothRepositoryImpl((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (LocalBluetoothManager) this.tvSysUIComponentImpl.provideLocalBluetoothControllerProvider.get());
                    case QuantumSecurityInfo.QUANTUM_KEY_STATUS.KEY_STATUS_EXCEPTION /* 352 */:
                        return (T) new MobileDataTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (NetworkController) this.tvSysUIComponentImpl.networkControllerImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), this.tvSysUIComponentImpl.panelInteractor(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get(), (SubscreenUtil) this.tvSysUIComponentImpl.subscreenUtilProvider.get());
                    case QuantumSecurityInfo.QUANTUM_KEY_STATUS.KEY_STATUS_FAIL_TO_GET_KEY /* 353 */:
                        return (T) new SubscreenUtil((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get());
                    case 354:
                        return (T) new CastTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (CastController) this.tvSysUIComponentImpl.castControllerImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (NetworkController) this.tvSysUIComponentImpl.networkControllerImplProvider.get(), (HotspotController) this.tvSysUIComponentImpl.hotspotControllerImplProvider.get(), (DialogLaunchAnimator) this.tvSysUIComponentImpl.provideDialogLaunchAnimatorProvider.get());
                    case 355:
                        return (T) new CastControllerImpl(this.tvGlobalRootComponent.context, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 356:
                        return (T) new HotspotControllerImpl(this.tvGlobalRootComponent.context, (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 357:
                        return (T) new HotspotTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (HotspotController) this.tvSysUIComponentImpl.hotspotControllerImplProvider.get(), (DataSaverController) this.tvSysUIComponentImpl.provideDataSaverControllerProvider.get(), (KnoxStateMonitor) this.tvSysUIComponentImpl.providesKnoxStateMonitorProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), this.tvSysUIComponentImpl.panelInteractor());
                    case 358:
                        T t = (T) ((NetworkControllerImpl) ((NetworkController) this.tvSysUIComponentImpl.networkControllerImplProvider.get())).mDataSaverController;
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 359:
                        return (T) new AirplaneModeTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (NetworkController) this.tvSysUIComponentImpl.networkControllerImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), DoubleCheck.lazy(this.tvGlobalRootComponent.provideConnectivityManagagerProvider), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), this.tvSysUIComponentImpl.panelInteractor(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get());
                    case 360:
                        return (T) new DataSaverTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (DataSaverController) this.tvSysUIComponentImpl.provideDataSaverControllerProvider.get(), (DialogLaunchAnimator) this.tvSysUIComponentImpl.provideDialogLaunchAnimatorProvider.get());
                    case 361:
                        return (T) new NfcTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 362:
                        return (T) new DeviceControlTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), this.tvGlobalRootComponent.mainResources(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (CustomDeviceControlsController) this.tvSysUIComponentImpl.customDeviceControlsControllerImplProvider.get(), this.tvSysUIComponentImpl.panelInteractor(), (ControlsComponent) this.tvSysUIComponentImpl.controlsComponentProvider.get());
                    case 363:
                        return (T) new ControlsComponent(((Boolean) this.tvSysUIComponentImpl.providesControlsFeatureEnabledProvider.get()).booleanValue(), this.tvGlobalRootComponent.context, DoubleCheck.lazy(this.tvSysUIComponentImpl.controlsControllerImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.controlsControllerImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.customControlsUiControllerImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.customControlsUiControllerImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.controlsListingControllerImplProvider), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (ControlsSettingsRepository) this.tvSysUIComponentImpl.controlsSettingsRepositoryImplProvider.get(), Optional.empty());
                    case 364:
                        PackageManager packageManager = (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get();
                        ControlsModule.Companion.getClass();
                        return (T) Boolean.valueOf(packageManager.hasSystemFeature("android.software.controls"));
                    case 365:
                        return (T) new ControlsControllerImpl(this.tvGlobalRootComponent.context, (DelayableExecutor) this.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (ControlsUiController) this.tvSysUIComponentImpl.customControlsUiControllerImplProvider.get(), (CustomControlsUiController) this.tvSysUIComponentImpl.customControlsUiControllerImplProvider.get(), (SelectedComponentRepository) this.tvSysUIComponentImpl.selectedComponentRepositoryImplProvider.get(), (CustomSelectedComponentRepository) this.tvSysUIComponentImpl.customSelectedComponentRepositoryImplProvider.get(), (ControlsBindingController) this.tvSysUIComponentImpl.controlsBindingControllerImplProvider.get(), (CustomControlsBindingController) this.tvSysUIComponentImpl.controlsBindingControllerImplProvider.get(), (ControlsListingController) this.tvSysUIComponentImpl.controlsListingControllerImplProvider.get(), (UserFileManager) this.tvSysUIComponentImpl.userFileManagerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), this.tvSysUIComponentImpl.authorizedPanelsRepositoryImpl(), Optional.empty(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (BadgeProvider) this.tvSysUIComponentImpl.badgeProviderImplProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), this.tvSysUIComponentImpl.controlsUtil());
                    case 366:
                        return (T) new CustomControlsUiControllerImpl(DoubleCheck.lazy(this.tvSysUIComponentImpl.controlsControllerImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.controlsControllerImplProvider), this.tvGlobalRootComponent.context, (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (DelayableExecutor) this.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.controlsListingControllerImplProvider), this.tvGlobalRootComponent.mainSharedPreferences(), (ControlActionCoordinator) this.tvSysUIComponentImpl.controlActionCoordinatorImplProvider.get(), (CustomControlActionCoordinator) this.tvSysUIComponentImpl.controlActionCoordinatorImplProvider.get(), (ControlsMetricsLogger) this.tvSysUIComponentImpl.controlsMetricsLoggerImplProvider.get(), (LogWrapper) this.tvSysUIComponentImpl.provideControlsLogWrapperProvider.get(), this.tvSysUIComponentImpl.layoutUtil(), this.tvSysUIComponentImpl.controlsUtil(), (ControlsActivityStarter) this.tvSysUIComponentImpl.controlsActivityStarterImplProvider.get(), (AUIFacade) this.tvSysUIComponentImpl.aUIFacadeImplProvider.get(), (SALogger) this.tvSysUIComponentImpl.sALoggerProvider.get(), (BadgeSubject) this.tvSysUIComponentImpl.badgeProviderImplProvider.get(), (BadgeProvider) this.tvSysUIComponentImpl.badgeProviderImplProvider.get(), (ControlsRuneWrapper) this.tvSysUIComponentImpl.provideControlsRuneWrapperProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), this.tvSysUIComponentImpl.setTaskViewFactory, (ControlsSettingsRepository) this.tvSysUIComponentImpl.controlsSettingsRepositoryImplProvider.get(), this.tvSysUIComponentImpl.authorizedPanelsRepositoryImpl(), (SelectedComponentRepository) this.tvSysUIComponentImpl.selectedComponentRepositoryImplProvider.get(), (CustomSelectedComponentRepository) this.tvSysUIComponentImpl.customSelectedComponentRepositoryImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 367:
                        return (T) new ControlsListingControllerImpl(this.tvGlobalRootComponent.context, (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (ActivityTaskManagerProxy) this.tvSysUIComponentImpl.activityTaskManagerProxyProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (CustomSelectedComponentRepository) this.tvSysUIComponentImpl.customSelectedComponentRepositoryImplProvider.get());
                    case 368:
                        return (T) new ActivityTaskManagerProxy();
                    case 369:
                        return (T) new CustomSelectedComponentRepositoryImpl(this.tvGlobalRootComponent.mainSharedPreferences());
                    case 370:
                        return (T) new ControlActionCoordinatorImpl(this.tvGlobalRootComponent.context, (DelayableExecutor) this.tvSysUIComponentImpl.provideDelayableExecutorProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (BroadcastSender) this.tvSysUIComponentImpl.broadcastSenderProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), this.tvSysUIComponentImpl.setTaskViewFactory, (ControlsMetricsLogger) this.tvSysUIComponentImpl.controlsMetricsLoggerImplProvider.get(), (VibratorHelper) this.tvSysUIComponentImpl.vibratorHelperProvider.get(), (ControlsSettingsRepository) this.tvSysUIComponentImpl.controlsSettingsRepositoryImplProvider.get(), (ControlsSettingsDialogManager) this.tvSysUIComponentImpl.controlsSettingsDialogManagerImplProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (AUIFacade) this.tvSysUIComponentImpl.aUIFacadeImplProvider.get(), (SALogger) this.tvSysUIComponentImpl.sALoggerProvider.get(), (DesktopManagerWrapper) this.tvSysUIComponentImpl.desktopManagerWrapperImplProvider.get());
                    case 371:
                        Looper looper = (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get();
                        Long l = SysUIConcurrencyModule.BG_SLOW_DISPATCH_THRESHOLD;
                        return (T) new ExecutorImpl(looper);
                    case 372:
                        return (T) new ControlsMetricsLoggerImpl();
                    case 373:
                        return (T) new ControlsSettingsRepositoryImpl((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (UserRepository) this.tvSysUIComponentImpl.userRepositoryImplProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl());
                    case 374:
                        return (T) new ControlsSettingsDialogManagerImpl((SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (UserFileManager) this.tvSysUIComponentImpl.userFileManagerImplProvider.get(), (ControlsSettingsRepository) this.tvSysUIComponentImpl.controlsSettingsRepositoryImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get());
                    case 375:
                        return (T) new AUIFacadeImpl(this.tvGlobalRootComponent.context, (AudioManager) this.tvGlobalRootComponent.provideAudioManagerProvider.get());
                    case 376:
                        return (T) new SALogger((SystemUIAnalyticsWrapper) this.tvSysUIComponentImpl.systemUIAnalyticsWrapperProvider.get());
                    case 377:
                        return (T) new SystemUIAnalyticsWrapper();
                    case 378:
                        return (T) new DesktopManagerWrapperImpl((DesktopManager) this.tvSysUIComponentImpl.provideDesktopManagerProvider.get());
                    case 379:
                        return (T) new LogWrapper(ModuleType.CONTROLS, (SamsungServiceLogger) this.tvSysUIComponentImpl.provideControlsLoggerProvider.get());
                    case VolteConstants.ErrorCode.ALTERNATIVE_SERVICES /* 380 */:
                        return (T) new SamsungServiceLoggerImpl("ControlsLogger", 200, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (LogcatEchoTracker) this.tvSysUIComponentImpl.provideLogcatEchoTrackerProvider.get());
                    case VolteConstants.ErrorCode.ALTERNATIVE_SERVICES_EMERGENCY /* 381 */:
                        return (T) new BadgeProviderImpl(this.tvGlobalRootComponent.context, (DelayableExecutor) this.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get());
                    case VolteConstants.ErrorCode.ALTERNATIVE_SERVICES_EMERGENCY_CSFB /* 382 */:
                        return (T) new ControlsRuneWrapperImpl();
                    case 383:
                        return (T) new SelectedComponentRepositoryImpl((UserFileManager) this.tvSysUIComponentImpl.userFileManagerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 384:
                        return (T) new ControlsBindingControllerImpl(this.tvGlobalRootComponent.context, (DelayableExecutor) this.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.controlsControllerImplProvider), (PackageUpdateMonitor.Factory) this.tvSysUIComponentImpl.factoryProvider6.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), this.tvSysUIComponentImpl.controlsUtil());
                    case 385:
                        return (T) new PackageUpdateMonitor.Factory() { // from class: com.android.systemui.tv.DaggerTvGlobalRootComponent.TvSysUIComponentImpl.SwitchingProvider.4
                            @Override // com.android.systemui.controls.controller.PackageUpdateMonitor.Factory
                            public final PackageUpdateMonitor create(UserHandle userHandle, String str, Runnable runnable) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new PackageUpdateMonitor(userHandle, str, runnable, (Handler) switchingProvider.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (Context) switchingProvider.tvGlobalRootComponent.provideApplicationContextProvider.get());
                            }
                        };
                    case 386:
                        return (T) new GarbageMonitor.MemoryTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (GarbageMonitor) this.tvSysUIComponentImpl.garbageMonitorProvider.get(), this.tvSysUIComponentImpl.panelInteractor());
                    case 387:
                        return (T) new GarbageMonitor(this.tvGlobalRootComponent.context, (DelayableExecutor) this.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), this.tvSysUIComponentImpl.backgroundMessageRouter(), (LeakDetector) this.tvSysUIComponentImpl.providesLeakDetectorProvider.get(), (LeakReporter) this.tvSysUIComponentImpl.leakReporterProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 388:
                        return (T) new LeakReporter(this.tvGlobalRootComponent.context, (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (LeakDetector) this.tvSysUIComponentImpl.providesLeakDetectorProvider.get(), (String) this.tvSysUIComponentImpl.provideLeakReportEmailProvider.get());
                    case 389:
                        return "";
                    case 390:
                        return (T) new DndTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (ZenModeController) this.tvSysUIComponentImpl.zenModeControllerImplProvider.get(), this.tvGlobalRootComponent.mainSharedPreferences(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (DialogLaunchAnimator) this.tvSysUIComponentImpl.provideDialogLaunchAnimatorProvider.get(), this.tvSysUIComponentImpl.panelInteractor(), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl());
                    case 391:
                        return (T) new ZenModeControllerImpl(this.tvGlobalRootComponent.context, (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 392:
                        return (T) new SWorkModeTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (ManagedProfileController) this.tvSysUIComponentImpl.managedProfileControllerImplProvider.get());
                    case 393:
                        return (T) new ManagedProfileControllerImpl(this.tvGlobalRootComponent.context, (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get());
                    case 394:
                        return (T) new FlashlightTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (FlashlightController) this.tvSysUIComponentImpl.flashlightControllerImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get());
                    case 395:
                        return (T) new FlashlightControllerImpl(this.tvGlobalRootComponent.context, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (CameraManager) this.tvGlobalRootComponent.provideCameraManagerProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (BroadcastSender) this.tvSysUIComponentImpl.broadcastSenderProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get());
                    case 396:
                        return (T) new BlueLightFilterTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), this.tvGlobalRootComponent.mainResources(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), this.tvSysUIComponentImpl.panelInteractor());
                    case 397:
                        return (T) new LocationTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (LocationController) this.tvSysUIComponentImpl.locationControllerImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), this.tvSysUIComponentImpl.panelInteractor(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get());
                    case 398:
                        return (T) CameraToggleTile_Factory.newInstance((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (IndividualSensorPrivacyController) this.tvSysUIComponentImpl.provideIndividualSensorPrivacyControllerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), this.tvSysUIComponentImpl.panelInteractor());
                    case 399:
                        return (T) MicrophoneToggleTile_Factory.newInstance((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (IndividualSensorPrivacyController) this.tvSysUIComponentImpl.provideIndividualSensorPrivacyControllerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), this.tvSysUIComponentImpl.panelInteractor());
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get4() {
                switch (this.id) {
                    case 400:
                        return (T) new AlarmTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (NextAlarmController) this.tvSysUIComponentImpl.nextAlarmControllerImplProvider.get());
                    case 401:
                        return (T) new NextAlarmControllerImpl((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (AlarmManager) this.tvGlobalRootComponent.provideAlarmManagerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 402:
                        return (T) new UiModeNightTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (BatteryController) this.tvSysUIComponentImpl.provideBatteryControllerProvider.get(), (LocationController) this.tvSysUIComponentImpl.locationControllerImplProvider.get());
                    case 403:
                        return (T) new ScreenCaptureTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), this.tvSysUIComponentImpl.panelInteractor());
                    case 404:
                        return (T) new SyncTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), this.tvSysUIComponentImpl.panelInteractor());
                    case 405:
                        return (T) new QRCodeScannerTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (QRCodeScannerController) this.tvSysUIComponentImpl.qRCodeScannerControllerProvider.get());
                    case VolteConstants.ErrorCode.NOT_ACCEPTABLE /* 406 */:
                        return (T) new QRCodeScannerController(this.tvGlobalRootComponent.context, (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (DeviceConfigProxy) this.tvSysUIComponentImpl.deviceConfigProxyProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 407:
                        return (T) new ScreenRecordTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (RecordingController) this.tvSysUIComponentImpl.recordingControllerProvider.get(), (KeyguardDismissUtil) this.tvSysUIComponentImpl.keyguardDismissUtilProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (DialogLaunchAnimator) this.tvSysUIComponentImpl.provideDialogLaunchAnimatorProvider.get(), this.tvSysUIComponentImpl.panelInteractor());
                    case VolteConstants.ErrorCode.REQUEST_TIMEOUT /* 408 */:
                        return (T) new RecordingController((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), this.tvGlobalRootComponent.context, (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (UserContextProvider) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.screenCaptureDevicePolicyResolverProvider), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 409:
                        return (T) new ScreenCaptureDevicePolicyResolver((DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), this.tvSysUIComponentImpl.personalProfileUserHandle(), this.tvSysUIComponentImpl.workProfileUserHandle());
                    case 410:
                        this.tvSysUIComponentImpl.sharedLibraryModule.getClass();
                        T t = (T) ActivityManagerWrapper.sInstance;
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 411:
                        return (T) new KeyguardDismissUtil();
                    case 412:
                        return (T) new QuickAccessWalletTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (QuickAccessWalletController) this.tvSysUIComponentImpl.quickAccessWalletControllerProvider.get());
                    case 413:
                        return (T) new QuickAccessWalletController(this.tvGlobalRootComponent.context, (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (QuickAccessWalletClient) this.tvSysUIComponentImpl.provideQuickAccessWalletClientProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get());
                    case 414:
                        T t2 = (T) QuickAccessWalletClient.create(this.tvGlobalRootComponent.context, (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case VolteConstants.ErrorCode.UNSUPPORTED_MEDIA_TYPE /* 415 */:
                        return (T) new SoundModeTile((QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.tvSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get());
                    case VolteConstants.ErrorCode.UNSUPPORTED_URI_SCHEME /* 416 */:
                        return (T) new SecAutoTileManager(this.tvGlobalRootComponent.context, (AutoAddTracker.Builder) this.tvSysUIComponentImpl.builderProvider3.get(), (QSTileHost) this.tvSysUIComponentImpl.qSTileHostProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (ManagedProfileController) this.tvSysUIComponentImpl.managedProfileControllerImplProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 417:
                        return (T) new AutoAddTracker.Builder((SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (QSHost) this.tvSysUIComponentImpl.qSHostAdapterProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case 418:
                        return (T) new BootAnimationFinishedCacheImpl((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 419:
                        return (T) new SecPanelTouchProximityHelper(this.tvGlobalRootComponent.context, (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get());
                    case VolteConstants.ErrorCode.BAD_EXTENSION /* 420 */:
                        return (T) new SecHideInformationMirroringController((NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (StatusBarWindowController) this.tvSysUIComponentImpl.statusBarWindowControllerProvider.get(), (SecHideInformationMirroringModel) this.tvSysUIComponentImpl.secHideInformationMirroringModelProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get());
                    case 421:
                        return (T) new SecHideInformationMirroringModel();
                    case VolteConstants.ErrorCode.SESSION_INTERVAL_TOO_SMALL /* 422 */:
                        return (T) new SecPanelConfigurationBellTower(this.tvGlobalRootComponent.context, (SecQSPanelResourcePicker) this.tvSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (SecPanelExpansionStateNotifier) this.tvSysUIComponentImpl.secPanelExpansionStateNotifierProvider.get(), (CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get());
                    case VolteConstants.ErrorCode.INTERVAL_TOO_BRIEF /* 423 */:
                        return (T) new SecQSPanelResourcePicker((KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KnoxStateMonitor) this.tvSysUIComponentImpl.providesKnoxStateMonitorProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.shadeHeaderControllerProvider));
                    case 424:
                        return (T) new ShadeHeaderController((MotionLayout) this.tvSysUIComponentImpl.providesShadeHeaderViewProvider.get(), (StatusBarIconController) this.tvSysUIComponentImpl.statusBarIconControllerImplProvider.get(), (StatusBarIconController.TintedIconManager.Factory) this.tvSysUIComponentImpl.factoryProvider7.get(), this.tvSysUIComponentImpl.headerPrivacyIconsController(), (StatusBarContentInsetsProvider) this.tvSysUIComponentImpl.statusBarContentInsetsProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), this.tvSysUIComponentImpl.variableDateViewControllerFactory(), (BatteryMeterViewController) this.tvSysUIComponentImpl.providesBatteryMeterViewControllerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), this.tvSysUIComponentImpl.shadeCarrierGroupControllerBuilder(), (CombinedShadeHeadersConstraintManager) this.tvSysUIComponentImpl.providesCombinedShadeHeadersConstraintManagerProvider.get(), (DemoModeController) this.tvSysUIComponentImpl.provideDemoModeControllerProvider.get(), this.tvSysUIComponentImpl.qsBatteryModeController(), (NextAlarmController) this.tvSysUIComponentImpl.nextAlarmControllerImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (SecQSPanelResourcePicker) this.tvSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (StatusIconContainerController) this.tvSysUIComponentImpl.provideStatusIconContainerControllerProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (NetspeedViewController) this.tvSysUIComponentImpl.provideNetspeedViewControllerProvider.get(), this.tvSysUIComponentImpl.shadeHeaderColorPicker());
                    case 425:
                        return (T) ShadeModule_Companion_ProvidesShadeHeaderViewFactory.providesShadeHeaderView((NotificationShadeWindowView) this.tvSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get());
                    case 426:
                        return (T) new StatusBarIconController.TintedIconManager.Factory((StatusBarPipelineFlags) this.tvSysUIComponentImpl.statusBarPipelineFlagsProvider.get(), (WifiUiAdapter) this.tvSysUIComponentImpl.wifiUiAdapterProvider.get(), (MobileUiAdapter) this.tvSysUIComponentImpl.mobileUiAdapterProvider.get(), this.tvSysUIComponentImpl.bTTetherUiAdapter(), (MobileContextProvider) this.tvSysUIComponentImpl.mobileContextProvider.get());
                    case 427:
                        return (T) new WifiUiAdapter((StatusBarIconController) this.tvSysUIComponentImpl.statusBarIconControllerImplProvider.get(), (WifiViewModel) this.tvSysUIComponentImpl.wifiViewModelProvider.get(), (StatusBarPipelineFlags) this.tvSysUIComponentImpl.statusBarPipelineFlagsProvider.get());
                    case 428:
                        return (T) new WifiViewModel((AirplaneModeViewModel) this.tvSysUIComponentImpl.airplaneModeViewModelImplProvider.get(), (Supplier) this.tvSysUIComponentImpl.provideFirstMobileSubShowingNetworkTypeIconProvider.get(), (ConnectivityConstants) this.tvSysUIComponentImpl.connectivityConstantsProvider.get(), this.tvGlobalRootComponent.context, (TableLogBuffer) this.tvSysUIComponentImpl.provideWifiTableLogBufferProvider.get(), (WifiInteractor) this.tvSysUIComponentImpl.wifiInteractorImplProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (WifiConstants) this.tvSysUIComponentImpl.wifiConstantsProvider.get(), (DesktopManager) this.tvSysUIComponentImpl.provideDesktopManagerProvider.get(), this.tvGlobalRootComponent.semWifiManager());
                    case 429:
                        return (T) new AirplaneModeViewModelImpl((AirplaneModeInteractor) this.tvSysUIComponentImpl.airplaneModeInteractorProvider.get(), (TableLogBuffer) this.tvSysUIComponentImpl.provideAirplaneTableLogBufferProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case 430:
                        return (T) new AirplaneModeInteractor((AirplaneModeRepository) this.tvSysUIComponentImpl.airplaneModeRepositoryImplProvider.get(), (ConnectivityRepository) this.tvSysUIComponentImpl.connectivityRepositoryImplProvider.get());
                    case 431:
                        MobileIconsViewModel mobileIconsViewModel = (MobileIconsViewModel) this.tvSysUIComponentImpl.mobileIconsViewModelProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) new StatusBarPipelineModule$Companion$provideFirstMobileSubShowingNetworkTypeIconProvider$1(mobileIconsViewModel);
                    case 432:
                        return (T) new MobileIconsViewModel((MobileViewLogger) this.tvSysUIComponentImpl.mobileViewLoggerProvider.get(), (VerboseMobileViewLogger) this.tvSysUIComponentImpl.verboseMobileViewLoggerProvider.get(), (MobileIconsInteractor) this.tvSysUIComponentImpl.mobileIconsInteractorImplProvider.get(), (AirplaneModeInteractor) this.tvSysUIComponentImpl.airplaneModeInteractorProvider.get(), (ConnectivityConstants) this.tvSysUIComponentImpl.connectivityConstantsProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (StatusBarPipelineFlags) this.tvSysUIComponentImpl.statusBarPipelineFlagsProvider.get(), this.tvSysUIComponentImpl.mobileSignalIconResource(), (DesktopManager) this.tvSysUIComponentImpl.provideDesktopManagerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get());
                    case 433:
                        return (T) new MobileViewLogger((LogBuffer) this.tvSysUIComponentImpl.provideMobileViewLogBufferProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 434:
                        LogBufferFactory logBufferFactory = (LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) logBufferFactory.create(100, "MobileViewLog", true);
                    case 435:
                        return (T) new VerboseMobileViewLogger((LogBuffer) this.tvSysUIComponentImpl.provideVerboseMobileViewLogBufferProvider.get());
                    case 436:
                        LogBufferFactory logBufferFactory2 = (LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) logBufferFactory2.create(100, "VerboseMobileViewLog", true);
                    case 437:
                        return (T) new ConnectivityConstants(this.tvGlobalRootComponent.context, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get());
                    case 438:
                        return (T) new WifiInteractorImpl((ConnectivityRepository) this.tvSysUIComponentImpl.connectivityRepositoryImplProvider.get(), (WifiRepository) this.tvSysUIComponentImpl.wifiRepositorySwitcherProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (ImsRegStateUtil) this.tvSysUIComponentImpl.imsRegStateUtilProvider.get(), this.tvSysUIComponentImpl.wifiSignalIconResource(), (TableLogBuffer) this.tvSysUIComponentImpl.provideWifiTableLogBufferProvider.get());
                    case 439:
                        return (T) new WifiConstants(this.tvGlobalRootComponent.context, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 440:
                        return (T) new MobileUiAdapter((StatusBarIconController) this.tvSysUIComponentImpl.statusBarIconControllerImplProvider.get(), (MobileIconsViewModel) this.tvSysUIComponentImpl.mobileIconsViewModelProvider.get(), (MobileViewLogger) this.tvSysUIComponentImpl.mobileViewLoggerProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (StatusBarPipelineFlags) this.tvSysUIComponentImpl.statusBarPipelineFlagsProvider.get());
                    case CustomDeviceManager.MULTI_WINDOW_FIXED_STATE /* 441 */:
                        return (T) new MobileContextProvider((NetworkController) this.tvSysUIComponentImpl.networkControllerImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (DemoModeController) this.tvSysUIComponentImpl.provideDemoModeControllerProvider.get());
                    case CustomDeviceManager.MULTI_WINDOW_PERCENTAGE /* 442 */:
                        return (T) new PrivacyItemController((DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (DelayableExecutor) this.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (PrivacyConfig) this.tvSysUIComponentImpl.privacyConfigProvider.get(), this.tvSysUIComponentImpl.setOfPrivacyItemMonitor(), this.tvSysUIComponentImpl.privacyLogger(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 443:
                        return (T) new PrivacyConfig((DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (DeviceConfigProxy) this.tvSysUIComponentImpl.deviceConfigProxyProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 444:
                        return (T) new AppOpsPrivacyItemMonitor((AppOpsController) this.tvSysUIComponentImpl.appOpsControllerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (PrivacyConfig) this.tvSysUIComponentImpl.privacyConfigProvider.get(), (DelayableExecutor) this.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), this.tvSysUIComponentImpl.privacyLogger());
                    case 445:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "PrivacyLog", true);
                    case 446:
                        return (T) new MediaProjectionPrivacyItemMonitor(this.tvGlobalRootComponent.mediaProjectionManager(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), (PrivacyConfig) this.tvSysUIComponentImpl.privacyConfigProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), this.tvSysUIComponentImpl.privacyLogger());
                    case 447:
                        MotionLayout motionLayout = (MotionLayout) this.tvSysUIComponentImpl.providesShadeHeaderViewProvider.get();
                        ShadeModule.Companion.getClass();
                        return (T) ((OngoingPrivacyChip) motionLayout.findViewById(R.id.privacy_chip));
                    case 448:
                        return (T) new PrivacyDialogController((PermissionManager) this.tvGlobalRootComponent.providePermissionManagerProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), (PrivacyItemController) this.tvSysUIComponentImpl.privacyItemControllerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), this.tvSysUIComponentImpl.privacyLogger(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (AppOpsController) this.tvSysUIComponentImpl.appOpsControllerImplProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get());
                    case 449:
                        MotionLayout motionLayout2 = (MotionLayout) this.tvSysUIComponentImpl.providesShadeHeaderViewProvider.get();
                        ShadeModule.Companion.getClass();
                        return (T) ((StatusIconContainer) motionLayout2.findViewById(R.id.statusIcons));
                    case 450:
                        return (T) SysUIConcurrencyModule_ProvideTimeTickHandlerFactory.provideTimeTickHandler();
                    case 451:
                        return (T) ShadeModule_Companion_ProvidesBatteryMeterViewControllerFactory.providesBatteryMeterViewController((BatteryMeterView) this.tvSysUIComponentImpl.providesBatteryMeterViewProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (ContentResolver) this.tvGlobalRootComponent.provideContentResolverProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (BatteryController) this.tvSysUIComponentImpl.provideBatteryControllerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (SlimIndicatorViewMediator) this.tvSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get());
                    case 452:
                        MotionLayout motionLayout3 = (MotionLayout) this.tvSysUIComponentImpl.providesShadeHeaderViewProvider.get();
                        ShadeModule.Companion.getClass();
                        return (T) ((BatteryMeterView) motionLayout3.findViewById(R.id.batteryRemainingIcon));
                    case 453:
                        return (T) new SlimIndicatorViewMediatorImpl(this.tvGlobalRootComponent.context, (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 454:
                        return (T) new CarrierTextUtil(this.tvGlobalRootComponent.context, (CarrierInfraMediator) this.tvSysUIComponentImpl.fakeCarrierInfraMediatorImplProvider.get());
                    case 455:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "CarrierTextManagerLog", true);
                    case 456:
                        return (T) new WifiTextManager(this.tvGlobalRootComponent.context, (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (WifiInteractor) this.tvSysUIComponentImpl.wifiInteractorImplProvider.get());
                    case 457:
                        return (T) new ShadeCarrierGroupController.SubscriptionManagerSlotIndexResolver();
                    case 458:
                        ShadeModule.Companion.getClass();
                        T t3 = (T) CombinedShadeHeadersConstraintManagerImpl.INSTANCE;
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    case 459:
                        return (T) ShadeModule_Companion_ProvideStatusIconContainerControllerFactory.provideStatusIconContainerController((StatusIconContainer) this.tvSysUIComponentImpl.providesStatusIconContainerProvider.get(), this.tvGlobalRootComponent.context, (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (IndicatorGardenPresenter) this.tvSysUIComponentImpl.indicatorGardenPresenterProvider.get(), (IndicatorCutoutUtil) this.tvSysUIComponentImpl.indicatorCutoutUtilProvider.get());
                    case 460:
                        ShadeModule.Companion companion = ShadeModule.Companion;
                        MotionLayout motionLayout4 = (MotionLayout) this.tvSysUIComponentImpl.providesShadeHeaderViewProvider.get();
                        IndicatorScaleGardener indicatorScaleGardener = (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get();
                        IndicatorCutoutUtil indicatorCutoutUtil = (IndicatorCutoutUtil) this.tvSysUIComponentImpl.indicatorCutoutUtilProvider.get();
                        UserTracker userTracker = (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get();
                        companion.getClass();
                        return (T) ShadeModule.Companion.provideNetspeedViewController(motionLayout4, indicatorScaleGardener, indicatorCutoutUtil, userTracker);
                    case 461:
                        return (T) new SecPanelExpansionStateNotifier(this.tvGlobalRootComponent.context, (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (BootAnimationFinishedCache) this.tvSysUIComponentImpl.bootAnimationFinishedCacheImplProvider.get());
                    case 462:
                        DependencyProvider dependencyProvider = this.tvSysUIComponentImpl.dependencyProvider;
                        SecPanelLogWriter secPanelLogWriter = this.tvSysUIComponentImpl.secPanelLogWriter();
                        SysuiStatusBarStateController sysuiStatusBarStateController = (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get();
                        BootAnimationFinishedCache bootAnimationFinishedCache = (BootAnimationFinishedCache) this.tvSysUIComponentImpl.bootAnimationFinishedCacheImplProvider.get();
                        SecPanelExpansionStateNotifier secPanelExpansionStateNotifier = (SecPanelExpansionStateNotifier) this.tvSysUIComponentImpl.secPanelExpansionStateNotifierProvider.get();
                        dependencyProvider.getClass();
                        return (T) new SecPanelLoggerImpl(secPanelLogWriter, sysuiStatusBarStateController, bootAnimationFinishedCache, secPanelExpansionStateNotifier);
                    case 463:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(1500, "SecPanelLog", true);
                    case 464:
                        return (T) new ShadeControllerImpl((CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (StatusBarKeyguardViewManager) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (StatusBarWindowController) this.tvSysUIComponentImpl.statusBarWindowControllerProvider.get(), (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.assistManagerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.notificationGutsManagerProvider), (SecPanelLogger) this.tvSysUIComponentImpl.providesSecPanelLoggerProvider.get());
                    case 465:
                        return (T) new NotificationGutsManager(this.tvGlobalRootComponent.context, (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (AccessibilityManager) this.tvGlobalRootComponent.provideAccessibilityManagerProvider.get(), (HighPriorityProvider) this.tvSysUIComponentImpl.highPriorityProvider.get(), (INotificationManager) this.tvGlobalRootComponent.provideINotificationManagerProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (PeopleSpaceWidgetManager) this.tvSysUIComponentImpl.peopleSpaceWidgetManagerProvider.get(), (LauncherApps) this.tvGlobalRootComponent.provideLauncherAppsProvider.get(), (ShortcutManager) this.tvGlobalRootComponent.provideShortcutManagerProvider.get(), (ChannelEditorDialogController) this.tvSysUIComponentImpl.channelEditorDialogControllerProvider.get(), (UserContextProvider) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (AssistantFeedbackController) this.tvSysUIComponentImpl.assistantFeedbackControllerProvider.get(), (Optional) this.tvSysUIComponentImpl.provideBubblesManagerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (OnUserInteractionCallback) this.tvSysUIComponentImpl.onUserInteractionCallbackImplProvider.get(), (ShadeController) this.tvSysUIComponentImpl.shadeControllerImplProvider.get(), (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (HeadsUpManagerPhone) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get());
                    case 466:
                        return (T) new HighPriorityProvider((PeopleNotificationIdentifier) this.tvSysUIComponentImpl.peopleNotificationIdentifierImplProvider.get(), (GroupMembershipManager) this.tvSysUIComponentImpl.provideGroupMembershipManagerProvider.get());
                    case 467:
                        return (T) new PeopleNotificationIdentifierImpl((NotificationPersonExtractor) this.tvSysUIComponentImpl.notificationPersonExtractorPluginBoundaryProvider.get(), (GroupMembershipManager) this.tvSysUIComponentImpl.provideGroupMembershipManagerProvider.get());
                    case 468:
                        return (T) new NotificationPersonExtractorPluginBoundary((ExtensionController) this.tvSysUIComponentImpl.extensionControllerImplProvider.get());
                    case 469:
                        return (T) new ExtensionControllerImpl(this.tvGlobalRootComponent.context, (LeakDetector) this.tvSysUIComponentImpl.providesLeakDetectorProvider.get(), (PluginManager) this.tvGlobalRootComponent.providesPluginManagerProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get());
                    case 470:
                        return (T) new PeopleSpaceWidgetManager(this.tvGlobalRootComponent.context, (LauncherApps) this.tvGlobalRootComponent.provideLauncherAppsProvider.get(), (CommonNotifCollection) this.tvSysUIComponentImpl.notifPipelineProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), this.tvSysUIComponentImpl.setBubbles, (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (NotificationManager) this.tvGlobalRootComponent.provideNotificationManagerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case 471:
                        return (T) new ChannelEditorDialogController(this.tvGlobalRootComponent.context, (INotificationManager) this.tvGlobalRootComponent.provideINotificationManagerProvider.get(), new ChannelEditorDialog.Builder());
                    case 472:
                        return (T) new AssistantFeedbackController((Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), this.tvGlobalRootComponent.context, (DeviceConfigProxy) this.tvSysUIComponentImpl.deviceConfigProxyProvider.get());
                    case 473:
                        return (T) SystemUIModule_ProvideBubblesManagerFactory.provideBubblesManager(this.tvGlobalRootComponent.context, this.tvSysUIComponentImpl.setBubbles, (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (ShadeController) this.tvSysUIComponentImpl.shadeControllerImplProvider.get(), (IStatusBarService) this.tvGlobalRootComponent.provideIStatusBarServiceProvider.get(), (INotificationManager) this.tvGlobalRootComponent.provideINotificationManagerProvider.get(), (IDreamManager) this.tvGlobalRootComponent.provideIDreamManagerProvider.get(), (NotificationVisibilityProvider) this.tvSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), (VisualInterruptionDecisionProvider) this.tvSysUIComponentImpl.provideVisualInterruptionDecisionProvider.get(), (ZenModeController) this.tvSysUIComponentImpl.zenModeControllerImplProvider.get(), (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (CommonNotifCollection) this.tvSysUIComponentImpl.notifPipelineProvider.get(), (NotifPipeline) this.tvSysUIComponentImpl.notifPipelineProvider.get(), (SysUiState) this.tvSysUIComponentImpl.provideSysUiStateProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), this.tvSysUIComponentImpl.notifPipelineFlags(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 474:
                        return (T) SystemUIModule_ProvideVisualInterruptionDecisionProviderFactory.provideVisualInterruptionDecisionProvider((NotificationInterruptStateProvider) this.tvSysUIComponentImpl.notificationInterruptStateProviderImplProvider.get());
                    case 475:
                        return (T) new NotificationInterruptStateProviderImpl((ContentResolver) this.tvGlobalRootComponent.provideContentResolverProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), this.tvGlobalRootComponent.ambientDisplayConfiguration(), (BatteryController) this.tvSysUIComponentImpl.provideBatteryControllerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (HeadsUpManager) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), this.tvSysUIComponentImpl.notificationInterruptLogger(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), this.tvSysUIComponentImpl.notifPipelineFlags(), (KeyguardNotificationVisibilityProvider) this.tvSysUIComponentImpl.keyguardNotificationVisibilityProviderImplProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), this.tvGlobalRootComponent.context, (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (CommonNotifCollection) this.tvSysUIComponentImpl.notifPipelineProvider.get());
                    case 476:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "NotifInterruptLog", true);
                    case 477:
                        return (T) KeyguardNotificationVisibilityProviderImpl_Factory.newInstance((Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (HighPriorityProvider) this.tvSysUIComponentImpl.highPriorityProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl(), (INotificationManager) this.tvGlobalRootComponent.provideINotificationManagerProvider.get());
                    case 478:
                        return (T) new OnUserInteractionCallbackImpl((NotificationVisibilityProvider) this.tvSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), (NotifCollection) this.tvSysUIComponentImpl.notifCollectionProvider.get(), (HeadsUpManager) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (VisualStabilityCoordinator) this.tvSysUIComponentImpl.visualStabilityCoordinatorProvider.get());
                    case 479:
                        return (T) new VisualStabilityCoordinator((DelayableExecutor) this.tvSysUIComponentImpl.provideDelayableExecutorProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (HeadsUpManager) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (ShadeStateEvents) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (VisibilityLocationProvider) this.tvSysUIComponentImpl.visibilityLocationProviderDelegatorProvider.get(), (VisualStabilityProvider) this.tvSysUIComponentImpl.visualStabilityProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get());
                    case VolteConstants.ErrorCode.TEMPORARILY_UNAVAILABLE /* 480 */:
                        return (T) new VisibilityLocationProviderDelegator();
                    case 481:
                        return (T) CentralSurfacesDependenciesModule_ProvideActivityLaunchAnimatorFactory.provideActivityLaunchAnimator();
                    case 482:
                        return (T) new ActivityIntentHelper(this.tvGlobalRootComponent.context);
                    case 483:
                        return (T) new AODTouchModeManager(this.tvGlobalRootComponent.context, (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (KeyguardFoldController) this.tvSysUIComponentImpl.keyguardFoldControllerImplProvider.get(), (LogWrapper) this.tvSysUIComponentImpl.providesKeyguardLogWrapperProvider.get(), (LsRuneWrapper) this.tvSysUIComponentImpl.lsRuneWrapperProvider.get(), (DeviceTypeWrapper) this.tvSysUIComponentImpl.deviceTypeWrapperProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.keyguardViewMediatorHelperImplProvider), (DisplayManager) this.tvGlobalRootComponent.provideDisplayManagerProvider.get());
                    case VolteConstants.ErrorCode.ADDRESS_INCOMPLETE /* 484 */:
                        return (T) new LogWrapper(ModuleType.KEYGUARD, null);
                    case 485:
                        return (T) new LsRuneWrapper();
                    case VolteConstants.ErrorCode.BUSY_HERE /* 486 */:
                        return (T) new DeviceTypeWrapper();
                    case VolteConstants.ErrorCode.REQUEST_TERMINATED /* 487 */:
                        return (T) new SecQpBlurController(this.tvGlobalRootComponent.context, (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (Choreographer) this.tvGlobalRootComponent.providesChoreographerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardWallpaper) this.tvSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (ShadeControllerImpl) this.tvSysUIComponentImpl.shadeControllerImplProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.unlockedScreenOffAnimationControllerProvider), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get());
                    case VolteConstants.ErrorCode.NOT_ACCEPTABLE_HERE /* 488 */:
                        return (T) new KeyguardShortcutManager(this.tvGlobalRootComponent.context, (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), this.tvSysUIComponentImpl.setOfKeyguardQuickAffordanceConfig(), (UserSwitcherController) this.tvSysUIComponentImpl.userSwitcherControllerProvider.get());
                    case 489:
                        return (T) new CameraQuickAffordanceConfig((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.cameraGestureHelperProvider), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get());
                    case 490:
                        return (T) new CameraGestureHelper(this.tvGlobalRootComponent.context, (CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get(), (KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), (ActivityManager) this.tvGlobalRootComponent.provideActivityManagerProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (ActivityIntentHelper) this.tvSysUIComponentImpl.activityIntentHelperProvider.get(), (IActivityTaskManager) this.tvGlobalRootComponent.provideIActivityTaskManagerProvider.get(), this.tvSysUIComponentImpl.cameraIntentsWrapper(), (ContentResolver) this.tvGlobalRootComponent.provideContentResolverProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 491:
                        return (T) new DoNotDisturbQuickAffordanceConfig(this.tvGlobalRootComponent.context, (ZenModeController) this.tvSysUIComponentImpl.zenModeControllerImplProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get());
                    case 492:
                        return (T) new FlashlightQuickAffordanceConfig((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (FlashlightController) this.tvSysUIComponentImpl.flashlightControllerImplProvider.get());
                    case 493:
                        return (T) new HomeControlsKeyguardQuickAffordanceConfig((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (ControlsComponent) this.tvSysUIComponentImpl.controlsComponentProvider.get());
                    case 494:
                        return (T) new MuteQuickAffordanceConfig(this.tvGlobalRootComponent.context, (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (UserFileManager) this.tvSysUIComponentImpl.userFileManagerImplProvider.get(), (RingerModeTracker) this.tvSysUIComponentImpl.ringerModeTrackerImplProvider.get(), (AudioManager) this.tvGlobalRootComponent.provideAudioManagerProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.mainDispatcherProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get());
                    case 495:
                        return (T) new RingerModeTrackerImpl((AudioManager) this.tvGlobalRootComponent.provideAudioManagerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case 496:
                        return (T) new QuickAccessWalletKeyguardQuickAffordanceConfig((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (QuickAccessWalletController) this.tvSysUIComponentImpl.quickAccessWalletControllerProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get());
                    case 497:
                        return (T) new QrCodeScannerKeyguardQuickAffordanceConfig((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (QRCodeScannerController) this.tvSysUIComponentImpl.qRCodeScannerControllerProvider.get());
                    case 498:
                        return (T) new VideoCameraQuickAffordanceConfig((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), this.tvSysUIComponentImpl.cameraIntentsWrapper(), (ActivityIntentHelper) this.tvSysUIComponentImpl.activityIntentHelperProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get());
                    case 499:
                        return (T) new NoteTaskController(this.tvGlobalRootComponent.context, (RoleManager) this.tvGlobalRootComponent.provideRoleManagerProvider.get(), (ShortcutManager) this.tvGlobalRootComponent.provideShortcutManagerProvider.get(), this.tvSysUIComponentImpl.noteTaskInfoResolver(), this.tvSysUIComponentImpl.noteTaskEventLogger(), this.tvSysUIComponentImpl.setBubbles, (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (KeyguardManager) this.tvGlobalRootComponent.provideKeyguardManagerProvider.get(), (ActivityManager) this.tvGlobalRootComponent.provideActivityManagerProvider.get(), this.tvSysUIComponentImpl.noteTaskEnabledKeyBoolean(), (DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get5() {
                int i = 0;
                switch (this.id) {
                    case 500:
                        DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
                        return (T) new StylusManager(daggerTvGlobalRootComponent.context, (InputManager) daggerTvGlobalRootComponent.provideInputManagerProvider.get(), (BluetoothAdapter) this.tvGlobalRootComponent.provideBluetoothAdapterProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get());
                    case 501:
                        return (T) new KeyguardQuickAffordanceRepository((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (KeyguardQuickAffordanceLocalUserSelectionManager) this.tvSysUIComponentImpl.keyguardQuickAffordanceLocalUserSelectionManagerProvider.get(), (KeyguardQuickAffordanceRemoteUserSelectionManager) this.tvSysUIComponentImpl.keyguardQuickAffordanceRemoteUserSelectionManagerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (KeyguardQuickAffordanceLegacySettingSyncer) this.tvSysUIComponentImpl.keyguardQuickAffordanceLegacySettingSyncerProvider.get(), this.tvSysUIComponentImpl.setOfKeyguardQuickAffordanceConfig(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), new UserHandle(UserHandle.myUserId()));
                    case 502:
                        return (T) new KeyguardQuickAffordanceLocalUserSelectionManager((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (UserFileManager) this.tvSysUIComponentImpl.userFileManagerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 503:
                        return (T) new KeyguardQuickAffordanceRemoteUserSelectionManager((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), this.tvSysUIComponentImpl.keyguardQuickAffordanceProviderClientFactoryImpl(), new UserHandle(UserHandle.myUserId()));
                    case 504:
                        return (T) new KeyguardQuickAffordanceLegacySettingSyncer((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (KeyguardQuickAffordanceLocalUserSelectionManager) this.tvSysUIComponentImpl.keyguardQuickAffordanceLocalUserSelectionManagerProvider.get());
                    case 505:
                        return (T) new UserSwitcherController((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.userInteractorProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.guestUserInteractorProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.keyguardInteractorProvider), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 506:
                        return (T) new UserInteractor((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (UserRepository) this.tvSysUIComponentImpl.userRepositoryImplProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (HeadlessSystemUserMode) this.tvSysUIComponentImpl.headlessSystemUserModeImplProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (TelephonyInteractor) this.tvSysUIComponentImpl.telephonyInteractorProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (ActivityManager) this.tvGlobalRootComponent.provideActivityManagerProvider.get(), (RefreshUsersScheduler) this.tvSysUIComponentImpl.refreshUsersSchedulerProvider.get(), (GuestUserInteractor) this.tvSysUIComponentImpl.guestUserInteractorProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get());
                    case 507:
                        return (T) new HeadlessSystemUserModeImpl();
                    case 508:
                        return (T) new TelephonyInteractor((TelephonyRepository) this.tvSysUIComponentImpl.telephonyRepositoryImplProvider.get());
                    case 509:
                        return (T) new TelephonyRepositoryImpl((TelephonyListenerManager) this.tvSysUIComponentImpl.telephonyListenerManagerProvider.get());
                    case 510:
                        return (T) new RefreshUsersScheduler((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.mainDispatcherProvider.get(), (UserRepository) this.tvSysUIComponentImpl.userRepositoryImplProvider.get());
                    case 511:
                        return (T) new GuestUserInteractor((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.mainDispatcherProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (UserRepository) this.tvSysUIComponentImpl.userRepositoryImplProvider.get(), (DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get(), (DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (RefreshUsersScheduler) this.tvSysUIComponentImpl.refreshUsersSchedulerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), this.tvSysUIComponentImpl.guestResumeSessionReceiver(), this.tvSysUIComponentImpl.guestResetOrExitSessionReceiver());
                    case 512:
                        return (T) new GuestResumeSessionReceiver.ResetSessionDialog.Factory() { // from class: com.android.systemui.tv.DaggerTvGlobalRootComponent.TvSysUIComponentImpl.SwitchingProvider.5
                            @Override // com.android.systemui.GuestResumeSessionReceiver.ResetSessionDialog.Factory
                            public final GuestResumeSessionReceiver.ResetSessionDialog create(int i2) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new GuestResumeSessionReceiver.ResetSessionDialog(switchingProvider.tvGlobalRootComponent.context, (UserSwitcherController) switchingProvider.tvSysUIComponentImpl.userSwitcherControllerProvider.get(), (UiEventLogger) switchingProvider.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), i2);
                            }
                        };
                    case 513:
                        return (T) new GuestResetOrExitSessionReceiver.ResetSessionDialog.Factory() { // from class: com.android.systemui.tv.DaggerTvGlobalRootComponent.TvSysUIComponentImpl.SwitchingProvider.6
                            @Override // com.android.systemui.GuestResetOrExitSessionReceiver.ResetSessionDialog.Factory
                            public final GuestResetOrExitSessionReceiver.ResetSessionDialog create(int i2) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new GuestResetOrExitSessionReceiver.ResetSessionDialog(switchingProvider.tvGlobalRootComponent.context, (UserSwitcherController) switchingProvider.tvSysUIComponentImpl.userSwitcherControllerProvider.get(), (UiEventLogger) switchingProvider.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), i2);
                            }
                        };
                    case 514:
                        return (T) new GuestResetOrExitSessionReceiver.ExitSessionDialog.Factory() { // from class: com.android.systemui.tv.DaggerTvGlobalRootComponent.TvSysUIComponentImpl.SwitchingProvider.7
                            @Override // com.android.systemui.GuestResetOrExitSessionReceiver.ExitSessionDialog.Factory
                            public final GuestResetOrExitSessionReceiver.ExitSessionDialog create(int i2, boolean z) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new GuestResetOrExitSessionReceiver.ExitSessionDialog(switchingProvider.tvGlobalRootComponent.context, (UserSwitcherController) switchingProvider.tvSysUIComponentImpl.userSwitcherControllerProvider.get(), i2, z);
                            }
                        };
                    case 515:
                        return (T) new WallpaperEventNotifier(this.tvGlobalRootComponent.context, (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get());
                    case 516:
                        return (T) new FaceWidgetColorSchemeControllerWrapper();
                    case 517:
                        return (T) new FaceWidgetPluginLockManagerWrapper((PluginLockMediator) this.tvSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (PluginLockStarManager) this.tvSysUIComponentImpl.pluginLockStarManagerProvider.get());
                    case 518:
                        return (T) new FaceWidgetNotificationControllerWrapper();
                    case 519:
                        return (T) new CoverScreenManager(this.tvGlobalRootComponent.context, (CoverHost) this.tvSysUIComponentImpl.coverHostImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginAODManagerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginFaceWidgetManagerProvider), (PluginManager) this.tvGlobalRootComponent.providesPluginManagerProvider.get(), (DisplayManager) this.tvGlobalRootComponent.provideDisplayManagerProvider.get(), (DelayableExecutor) this.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 520:
                        return (T) new SamsungServiceLoggerImpl("AODLogger", 200, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (LogcatEchoTracker) this.tvGlobalRootComponent.noLogcatEchoTrackerProvider.get());
                    case 521:
                        Context context = this.tvGlobalRootComponent.context;
                        TvSysUIComponentImpl tvSysUIComponentImpl = this.tvSysUIComponentImpl;
                        return (T) NotificationsModule_ProvideNotificationsControllerFactory.provideNotificationsController(context, tvSysUIComponentImpl.notificationsControllerImplProvider, tvSysUIComponentImpl.notificationsControllerStubProvider);
                    case 522:
                        NotificationListener notificationListener = (NotificationListener) this.tvSysUIComponentImpl.notificationListenerProvider.get();
                        Lazy lazy = DoubleCheck.lazy(this.tvSysUIComponentImpl.notifPipelineProvider);
                        Lazy lazy2 = DoubleCheck.lazy(this.tvSysUIComponentImpl.notifPipelineProvider);
                        NotifLiveDataStore notifLiveDataStore = (NotifLiveDataStore) this.tvSysUIComponentImpl.notifLiveDataStoreImplProvider.get();
                        TargetSdkResolver targetSdkResolver = (TargetSdkResolver) this.tvSysUIComponentImpl.targetSdkResolverProvider.get();
                        Lazy lazy3 = DoubleCheck.lazy(this.tvSysUIComponentImpl.notifPipelineInitializerProvider);
                        NotifBindPipelineInitializer notifBindPipelineInitializer = this.tvSysUIComponentImpl.notifBindPipelineInitializer();
                        NotificationLogger notificationLogger = (NotificationLogger) this.tvSysUIComponentImpl.provideNotificationLoggerProvider.get();
                        NotificationRowBinderImpl notificationRowBinderImpl = (NotificationRowBinderImpl) this.tvSysUIComponentImpl.notificationRowBinderImplProvider.get();
                        NotificationMediaManager notificationMediaManager = (NotificationMediaManager) this.tvSysUIComponentImpl.provideNotificationMediaManagerProvider.get();
                        HeadsUpViewBinder headsUpViewBinder = (HeadsUpViewBinder) this.tvSysUIComponentImpl.headsUpViewBinderProvider.get();
                        NotificationClicker.Builder notificationClickerBuilder = this.tvSysUIComponentImpl.notificationClickerBuilder();
                        AnimatedImageNotificationManager animatedImageNotificationManager = (AnimatedImageNotificationManager) this.tvSysUIComponentImpl.animatedImageNotificationManagerProvider.get();
                        PeopleSpaceWidgetManager peopleSpaceWidgetManager = (PeopleSpaceWidgetManager) this.tvSysUIComponentImpl.peopleSpaceWidgetManagerProvider.get();
                        TvSysUIComponentImpl tvSysUIComponentImpl2 = this.tvSysUIComponentImpl;
                        return (T) new NotificationsControllerImpl(notificationListener, lazy, lazy2, notifLiveDataStore, targetSdkResolver, lazy3, notifBindPipelineInitializer, notificationLogger, notificationRowBinderImpl, notificationMediaManager, headsUpViewBinder, notificationClickerBuilder, animatedImageNotificationManager, peopleSpaceWidgetManager, tvSysUIComponentImpl2.setBubbles, (ForegroundServiceNotificationListener) tvSysUIComponentImpl2.foregroundServiceNotificationListenerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.notificationMemoryMonitorProvider), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 523:
                        return (T) new TargetSdkResolver(this.tvGlobalRootComponent.context);
                    case 524:
                        return (T) new NotifPipelineInitializer((NotifPipeline) this.tvSysUIComponentImpl.notifPipelineProvider.get(), this.tvSysUIComponentImpl.groupCoalescer(), (NotifCollection) this.tvSysUIComponentImpl.notifCollectionProvider.get(), (ShadeListBuilder) this.tvSysUIComponentImpl.shadeListBuilderProvider.get(), (RenderStageManager) this.tvSysUIComponentImpl.renderStageManagerProvider.get(), (NotifCoordinators) this.tvSysUIComponentImpl.notifCoordinatorsProvider.get(), (NotifInflaterImpl) this.tvSysUIComponentImpl.notifInflaterImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (ShadeViewManagerFactory) this.tvSysUIComponentImpl.shadeViewManagerFactoryProvider.get());
                    case 525:
                        CoordinatorsSubcomponentFactory coordinatorsSubcomponentFactory = new CoordinatorsSubcomponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i);
                        int i2 = CoordinatorsModule.$r8$clinit;
                        T t = (T) coordinatorsSubcomponentFactory.create().getNotifCoordinators();
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 526:
                        return (T) new NotifInflaterImpl((NotifInflationErrorManager) this.tvSysUIComponentImpl.notifInflationErrorManagerProvider.get());
                    case 527:
                        return (T) new NotifInflationErrorManager();
                    case 528:
                        return (T) new ShadeViewManagerFactory() { // from class: com.android.systemui.tv.DaggerTvGlobalRootComponent.TvSysUIComponentImpl.SwitchingProvider.8
                            @Override // com.android.systemui.statusbar.notification.collection.render.ShadeViewManagerFactory
                            public final ShadeViewManager create(NotificationListContainer notificationListContainer, NotifStackController notifStackController) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new ShadeViewManager(switchingProvider.tvGlobalRootComponent.context, notificationListContainer, notifStackController, (MediaContainerController) switchingProvider.tvSysUIComponentImpl.mediaContainerControllerProvider.get(), (NotificationSectionsFeatureManager) switchingProvider.tvSysUIComponentImpl.notificationSectionsFeatureManagerProvider.get(), (SectionHeaderVisibilityProvider) switchingProvider.tvSysUIComponentImpl.sectionHeaderVisibilityProvider.get(), switchingProvider.tvSysUIComponentImpl.nodeSpecBuilderLogger(), switchingProvider.tvSysUIComponentImpl.shadeViewDifferLogger(), (NotifViewBarn) switchingProvider.tvSysUIComponentImpl.notifViewBarnProvider.get());
                            }
                        };
                    case 529:
                        return (T) new MediaContainerController((LayoutInflater) this.tvGlobalRootComponent.providerLayoutInflaterProvider.get());
                    case 530:
                        return (T) new NotificationSectionsFeatureManager((DeviceConfigProxy) this.tvSysUIComponentImpl.deviceConfigProxyProvider.get(), this.tvGlobalRootComponent.context);
                    case 531:
                        return (T) new SectionHeaderVisibilityProvider(this.tvGlobalRootComponent.context);
                    case 532:
                        return (T) new NotifViewBarn();
                    case 533:
                        return (T) new NotifBindPipeline((CommonNotifCollection) this.tvSysUIComponentImpl.notifPipelineProvider.get(), this.tvSysUIComponentImpl.notifBindPipelineLogger(), (Looper) this.tvGlobalRootComponent.provideMainLooperProvider.get());
                    case 534:
                        return (T) RowContentBindStage_Factory.newInstance((NotificationRowContentBinder) this.tvSysUIComponentImpl.notificationContentInflaterProvider.get(), (NotifInflationErrorManager) this.tvSysUIComponentImpl.notifInflationErrorManagerProvider.get(), this.tvSysUIComponentImpl.rowContentBindStageLogger(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get());
                    case 535:
                        return (T) new NotificationContentInflater((NotifRemoteViewCache) this.tvSysUIComponentImpl.provideNotifRemoteViewCacheProvider.get(), (NotificationRemoteInputManager) this.tvSysUIComponentImpl.provideNotificationRemoteInputManagerProvider.get(), this.tvSysUIComponentImpl.conversationNotificationProcessor(), this.tvSysUIComponentImpl.mediaFeatureFlag(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), this.tvSysUIComponentImpl.smartReplyStateInflaterImpl());
                    case 536:
                        return (T) NotifRemoteViewCacheImpl_Factory.newInstance((CommonNotifCollection) this.tvSysUIComponentImpl.notifPipelineProvider.get());
                    case 537:
                        return (T) CentralSurfacesDependenciesModule_ProvideNotificationRemoteInputManagerFactory.provideNotificationRemoteInputManager(this.tvGlobalRootComponent.context, this.tvSysUIComponentImpl.notifPipelineFlags(), (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (SmartReplyController) this.tvSysUIComponentImpl.provideSmartReplyControllerProvider.get(), (NotificationVisibilityProvider) this.tvSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.optionalOfCentralSurfacesProvider), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (RemoteInputUriController) this.tvSysUIComponentImpl.remoteInputUriControllerProvider.get(), (RemoteInputControllerLogger) this.tvSysUIComponentImpl.remoteInputControllerLoggerProvider.get(), (NotificationClickNotifier) this.tvSysUIComponentImpl.notificationClickNotifierProvider.get(), this.tvSysUIComponentImpl.actionClickLogger(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 538:
                        return (T) CentralSurfacesDependenciesModule_ProvideSmartReplyControllerFactory.provideSmartReplyController((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (NotificationVisibilityProvider) this.tvSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), (IStatusBarService) this.tvGlobalRootComponent.provideIStatusBarServiceProvider.get(), (NotificationClickNotifier) this.tvSysUIComponentImpl.notificationClickNotifierProvider.get());
                    case 539:
                        return (T) new RemoteInputUriController((IStatusBarService) this.tvGlobalRootComponent.provideIStatusBarServiceProvider.get());
                    case 540:
                        return (T) new RemoteInputControllerLogger((LogBuffer) this.tvSysUIComponentImpl.provideNotificationRemoteInputLogBufferProvider.get());
                    case 541:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "NotifRemoteInputLog", false);
                    case 542:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "NotifInteractionLog", true);
                    case 543:
                        return (T) new ConversationNotificationManager((BindEventManager) this.tvSysUIComponentImpl.bindEventManagerImplProvider.get(), this.tvGlobalRootComponent.context, (CommonNotifCollection) this.tvSysUIComponentImpl.notifPipelineProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get());
                    case 544:
                        return (T) new BindEventManagerImpl();
                    case 545:
                        return (T) new SmartReplyConstants((Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), this.tvGlobalRootComponent.context, (DeviceConfigProxy) this.tvSysUIComponentImpl.deviceConfigProxyProvider.get());
                    case 546:
                        this.tvSysUIComponentImpl.sharedLibraryModule.getClass();
                        T t2 = (T) DevicePolicyManagerWrapper.sInstance;
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 547:
                        return (T) NotificationsModule_ProvideNotificationLoggerFactory.provideNotificationLogger((NotificationListener) this.tvSysUIComponentImpl.notificationListenerProvider.get(), (Executor) this.tvGlobalRootComponent.provideUiBackgroundExecutorProvider.get(), (NotifLiveDataStore) this.tvSysUIComponentImpl.notifLiveDataStoreImplProvider.get(), (NotificationVisibilityProvider) this.tvSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), (NotifPipeline) this.tvSysUIComponentImpl.notifPipelineProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), this.tvSysUIComponentImpl.expansionStateLogger(), (NotificationPanelLogger) this.tvSysUIComponentImpl.provideNotificationPanelLoggerProvider.get());
                    case 548:
                        return (T) NotificationsModule_ProvideNotificationPanelLoggerFactory.provideNotificationPanelLogger();
                    case 549:
                        return (T) new NotificationRowBinderImpl(this.tvGlobalRootComponent.context, this.tvGlobalRootComponent.notificationMessagingUtil(), (NotificationRemoteInputManager) this.tvSysUIComponentImpl.provideNotificationRemoteInputManagerProvider.get(), (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (NotifBindPipeline) this.tvSysUIComponentImpl.notifBindPipelineProvider.get(), (RowContentBindStage) this.tvSysUIComponentImpl.rowContentBindStageProvider.get(), this.tvSysUIComponentImpl.rowInflaterTaskProvider, new ExpandableNotificationRowComponentBuilder(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i), (IconManager) this.tvSysUIComponentImpl.iconManagerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 550:
                        return (T) new RowInflaterTask();
                    case 551:
                        return (T) new IconManager((CommonNotifCollection) this.tvSysUIComponentImpl.notifPipelineProvider.get(), (LauncherApps) this.tvGlobalRootComponent.provideLauncherAppsProvider.get(), this.tvSysUIComponentImpl.iconBuilder());
                    case 552:
                        return (T) HeadsUpViewBinder_Factory.newInstance(this.tvGlobalRootComponent.notificationMessagingUtil(), (RowContentBindStage) this.tvSysUIComponentImpl.rowContentBindStageProvider.get(), this.tvSysUIComponentImpl.headsUpViewBinderLogger());
                    case 553:
                        return (T) new AnimatedImageNotificationManager((CommonNotifCollection) this.tvSysUIComponentImpl.notifPipelineProvider.get(), (BindEventManager) this.tvSysUIComponentImpl.bindEventManagerImplProvider.get(), (HeadsUpManager) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 554:
                        return (T) new ForegroundServiceNotificationListener(this.tvGlobalRootComponent.context, (ForegroundServiceController) this.tvSysUIComponentImpl.foregroundServiceControllerProvider.get(), (NotifPipeline) this.tvSysUIComponentImpl.notifPipelineProvider.get());
                    case 555:
                        return (T) new ForegroundServiceController((AppOpsController) this.tvSysUIComponentImpl.appOpsControllerImplProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get());
                    case 556:
                        return (T) new NotificationMemoryMonitor((FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (NotificationMemoryDumper) this.tvSysUIComponentImpl.notificationMemoryDumperProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.notificationMemoryLoggerProvider));
                    case 557:
                        return (T) new NotificationMemoryDumper((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (NotifPipeline) this.tvSysUIComponentImpl.notifPipelineProvider.get());
                    case 558:
                        return (T) new NotificationMemoryLogger((NotifPipeline) this.tvSysUIComponentImpl.notifPipelineProvider.get(), (StatsManager) this.tvGlobalRootComponent.provideStatsManagerProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.mainDispatcherProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case 559:
                        return (T) new NotificationsControllerStub((NotificationListener) this.tvSysUIComponentImpl.notificationListenerProvider.get());
                    case 560:
                        return (T) new LockscreenNotificationIconsOnlyController(this.tvGlobalRootComponent.context, (LockscreenShadeTransitionController) this.tvSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (KeyguardWallpaper) this.tvSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), (PluginLockMediator) this.tvSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (PluginLockData) this.tvSysUIComponentImpl.pluginLockDataImplProvider.get(), (NotificationIconTransitionController) this.tvSysUIComponentImpl.notificationIconTransitionControllerProvider.get(), (PluginLockStarManager) this.tvSysUIComponentImpl.pluginLockStarManagerProvider.get(), (FaceWidgetNotificationControllerWrapper) this.tvSysUIComponentImpl.faceWidgetNotificationControllerWrapperProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get());
                    case 561:
                        return (T) new NotificationIconTransitionController(this.tvGlobalRootComponent.context, (LockscreenNotificationManager) this.tvSysUIComponentImpl.lockscreenNotificationManagerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (PluginLockData) this.tvSysUIComponentImpl.pluginLockDataImplProvider.get(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get());
                    case 562:
                        return (T) new SubScreenQuickPanelWindowController((SubscreenQsPanelController) this.tvSysUIComponentImpl.providerSubscreenQsPanelControllerProvider.get(), (SecPanelLogger) this.tvSysUIComponentImpl.providesSecPanelLoggerProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (RemoteInputQuickSettingsDisabler) this.tvSysUIComponentImpl.remoteInputQuickSettingsDisablerProvider.get(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get(), (DisplayManager) this.tvGlobalRootComponent.provideDisplayManagerProvider.get(), (SysUiState) this.tvSysUIComponentImpl.provideSysUiStateProvider.get(), (ScreenRecordingStateProvider) this.tvSysUIComponentImpl.screenRecordingStateProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), this.tvGlobalRootComponent.context, (FlingAnimationUtils.Builder) this.tvSysUIComponentImpl.builderProvider4.get(), (DeviceStateManager) this.tvGlobalRootComponent.provideDeviceStateManagerProvider.get(), (NavigationModeController) this.tvSysUIComponentImpl.navigationModeControllerProvider.get(), new SubScreenQuickPanelComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i), (SecQSPanelResourcePicker) this.tvSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (SubscreenUtil) this.tvSysUIComponentImpl.subscreenUtilProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get());
                    case 563:
                        return (T) DependencyProvider_ProviderSubscreenQsPanelControllerFactory.providerSubscreenQsPanelController(this.tvSysUIComponentImpl.dependencyProvider, this.tvGlobalRootComponent.context, (InjectionInflationController) this.tvSysUIComponentImpl.injectionInflationControllerProvider.get(), (QSTileHost) this.tvSysUIComponentImpl.qSTileHostProvider.get());
                    case 564:
                        return (T) new InjectionInflationController(new ViewInstanceCreatorFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i));
                    case 565:
                        return (T) new RemoteInputQuickSettingsDisabler(this.tvGlobalRootComponent.context, (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get());
                    case 566:
                        return (T) new ScreenRecordingStateProvider(this.tvGlobalRootComponent.context, (SecPanelLogger) this.tvSysUIComponentImpl.providesSecPanelLoggerProvider.get());
                    case 567:
                        return (T) new FlingAnimationUtils.Builder((DisplayMetrics) this.tvGlobalRootComponent.provideDisplayMetricsProvider.get());
                    case 568:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(VolteConstants.ErrorCode.BUSY_EVERYWHERE, "ShadeWindowLog", false);
                    case 569:
                        return (T) TvSystemUIModule_ProvideRecentsFactory.provideRecents(this.tvGlobalRootComponent.context, this.tvSysUIComponentImpl.recentsImplementation(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get());
                    case 570:
                        return (T) new EdgeBackGestureHandler.Factory((OverviewProxyService) this.tvSysUIComponentImpl.overviewProxyServiceProvider.get(), (SysUiState) this.tvSysUIComponentImpl.provideSysUiStateProvider.get(), (PluginManager) this.tvGlobalRootComponent.providesPluginManagerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (ProtoTracer) this.tvSysUIComponentImpl.protoTracerProvider.get(), (NavigationModeController) this.tvSysUIComponentImpl.navigationModeControllerProvider.get(), this.tvSysUIComponentImpl.backPanelControllerFactory(), (ViewConfiguration) this.tvGlobalRootComponent.provideViewConfigurationProvider.get(), (WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get(), (IWindowManager) this.tvGlobalRootComponent.provideIWindowManagerProvider.get(), this.tvSysUIComponentImpl.setPip, this.tvSysUIComponentImpl.setDesktopMode, (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), this.tvSysUIComponentImpl.navigationBarEdgePanelProvider, this.tvSysUIComponentImpl.providsBackGestureTfClassifierProvider, (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), this.tvSysUIComponentImpl.lightBarControllerProvider);
                    case 571:
                        return (T) new NavigationBarEdgePanel(this.tvGlobalRootComponent.context, (LatencyTracker) this.tvGlobalRootComponent.provideLatencyTrackerProvider.get(), (VibratorHelper) this.tvSysUIComponentImpl.vibratorHelperProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get());
                    case 572:
                        return (T) GestureModule_ProvidsBackGestureTfClassifierProviderFactory.providsBackGestureTfClassifierProvider();
                    case 573:
                        return (T) new TaskbarDelegate(this.tvGlobalRootComponent.context, (LightBarTransitionsController.Factory) this.tvSysUIComponentImpl.factoryProvider2.get(), (StatusBarKeyguardViewManager) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get());
                    case 574:
                        return (T) new AutoHideController(this.tvGlobalRootComponent.context, (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (IWindowManager) this.tvGlobalRootComponent.provideIWindowManagerProvider.get());
                    case 575:
                        this.tvSysUIComponentImpl.sharedLibraryModule.getClass();
                        T t3 = (T) TaskStackChangeListeners.INSTANCE;
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    case 576:
                        return (T) new FgsManagerControllerImpl(this.tvGlobalRootComponent.context, (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (IActivityManager) this.tvGlobalRootComponent.provideIActivityManagerProvider.get(), (JobScheduler) this.tvGlobalRootComponent.provideJobSchedulerProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (DeviceConfigProxy) this.tvSysUIComponentImpl.deviceConfigProxyProvider.get(), (DialogLaunchAnimator) this.tvSysUIComponentImpl.provideDialogLaunchAnimatorProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 577:
                        return (T) SamsungServicesModule_ProvideSearcleManagerFactory.provideSearcleManager(this.tvGlobalRootComponent.context);
                    case 578:
                        return (T) new AmbientState(this.tvGlobalRootComponent.context, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (StackScrollAlgorithm.SectionProvider) this.tvSysUIComponentImpl.notificationSectionsManagerProvider.get(), (StackScrollAlgorithm.BypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (StatusBarKeyguardViewManager) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (LargeScreenShadeInterpolator) this.tvSysUIComponentImpl.largeScreenShadeInterpolatorImplProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 579:
                        return (T) new NotificationSectionsManager((ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (KeyguardMediaController) this.tvSysUIComponentImpl.keyguardMediaControllerProvider.get(), (NotificationSectionsFeatureManager) this.tvSysUIComponentImpl.notificationSectionsFeatureManagerProvider.get(), (MediaContainerController) this.tvSysUIComponentImpl.mediaContainerControllerProvider.get(), (NotificationRoundnessManager) this.tvSysUIComponentImpl.notificationRoundnessManagerProvider.get(), this.tvSysUIComponentImpl.incomingHeaderSectionHeaderController(), this.tvSysUIComponentImpl.peopleHeaderSectionHeaderController(), this.tvSysUIComponentImpl.alertingHeaderSectionHeaderController(), this.tvSysUIComponentImpl.silentHeaderSectionHeaderController());
                    case VolteConstants.ErrorCode.PRECONDITION_FAILURE /* 580 */:
                        return (T) new KeyguardMediaController((KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), this.tvGlobalRootComponent.context, (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get());
                    case 581:
                        return (T) NotificationSectionHeadersModule_ProvidesIncomingHeaderSubcomponentFactory.providesIncomingHeaderSubcomponent(this.tvSysUIComponentImpl.sectionHeaderControllerSubcomponentBuilderProvider);
                    case 582:
                        return (T) new SectionHeaderControllerSubcomponentBuilder(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i);
                    case 583:
                        return (T) NotificationSectionHeadersModule_ProvidesPeopleHeaderSubcomponentFactory.providesPeopleHeaderSubcomponent(this.tvSysUIComponentImpl.sectionHeaderControllerSubcomponentBuilderProvider);
                    case 584:
                        return (T) NotificationSectionHeadersModule_ProvidesAlertingHeaderSubcomponentFactory.providesAlertingHeaderSubcomponent(this.tvSysUIComponentImpl.sectionHeaderControllerSubcomponentBuilderProvider);
                    case 585:
                        return (T) NotificationSectionHeadersModule_ProvidesSilentHeaderSubcomponentFactory.providesSilentHeaderSubcomponent(this.tvSysUIComponentImpl.sectionHeaderControllerSubcomponentBuilderProvider);
                    case 586:
                        return (T) new LockscreenShadeKeyguardTransitionController.Factory() { // from class: com.android.systemui.tv.DaggerTvGlobalRootComponent.TvSysUIComponentImpl.SwitchingProvider.9
                            @Override // com.android.systemui.statusbar.LockscreenShadeKeyguardTransitionController.Factory
                            public final LockscreenShadeKeyguardTransitionController create(ShadeViewController shadeViewController) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new LockscreenShadeKeyguardTransitionController(shadeViewController, switchingProvider.tvGlobalRootComponent.context, (ConfigurationController) switchingProvider.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (DumpManager) switchingProvider.tvGlobalRootComponent.dumpManagerProvider.get());
                            }
                        };
                    case 587:
                        return (T) new NotificationShadeDepthController((KeyguardFastBioUnlockController) this.tvSysUIComponentImpl.keyguardFastBioUnlockControllerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (BlurUtils) this.tvSysUIComponentImpl.blurUtilsProvider.get(), (BiometricUnlockController) this.tvSysUIComponentImpl.biometricUnlockControllerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (Choreographer) this.tvGlobalRootComponent.providesChoreographerProvider.get(), (WallpaperController) this.tvSysUIComponentImpl.wallpaperControllerProvider.get(), (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (DozeParameters) this.tvSysUIComponentImpl.dozeParametersProvider.get(), this.tvGlobalRootComponent.context, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get());
                    case 588:
                        return (T) new BlurUtils(this.tvGlobalRootComponent.mainResources(), (CrossWindowBlurListeners) this.tvGlobalRootComponent.provideCrossWindowBlurListenersProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 589:
                        return (T) new WallpaperController(this.tvGlobalRootComponent.wallpaperManager());
                    case 590:
                        return (T) new SplitShadeLockScreenOverScroller.Factory() { // from class: com.android.systemui.tv.DaggerTvGlobalRootComponent.TvSysUIComponentImpl.SwitchingProvider.10
                            @Override // com.android.systemui.statusbar.SplitShadeLockScreenOverScroller.Factory
                            public final SplitShadeLockScreenOverScroller create(Function0 function0, Function0 function02) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new SplitShadeLockScreenOverScroller((ConfigurationController) switchingProvider.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (DumpManager) switchingProvider.tvGlobalRootComponent.dumpManagerProvider.get(), switchingProvider.tvGlobalRootComponent.context, (ScrimController) switchingProvider.tvSysUIComponentImpl.scrimControllerProvider.get(), (SysuiStatusBarStateController) switchingProvider.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), function0, function02);
                            }
                        };
                    case 591:
                        return (T) new SingleShadeLockScreenOverScroller.Factory() { // from class: com.android.systemui.tv.DaggerTvGlobalRootComponent.TvSysUIComponentImpl.SwitchingProvider.11
                            @Override // com.android.systemui.statusbar.SingleShadeLockScreenOverScroller.Factory
                            public final SingleShadeLockScreenOverScroller create(NotificationStackScrollLayoutController notificationStackScrollLayoutController) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new SingleShadeLockScreenOverScroller((ConfigurationController) switchingProvider.tvSysUIComponentImpl.configurationControllerImplProvider.get(), switchingProvider.tvGlobalRootComponent.context, (SysuiStatusBarStateController) switchingProvider.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), notificationStackScrollLayoutController);
                            }
                        };
                    case 592:
                        return (T) new LockscreenShadeQsTransitionController.Factory() { // from class: com.android.systemui.tv.DaggerTvGlobalRootComponent.TvSysUIComponentImpl.SwitchingProvider.12
                            @Override // com.android.systemui.statusbar.LockscreenShadeQsTransitionController.Factory
                            public final LockscreenShadeQsTransitionController create(Function0 function0) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new LockscreenShadeQsTransitionController(switchingProvider.tvGlobalRootComponent.context, (ConfigurationController) switchingProvider.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (DumpManager) switchingProvider.tvGlobalRootComponent.dumpManagerProvider.get(), function0);
                            }
                        };
                    case 593:
                        return (T) new ShadeRepositoryImpl((ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get());
                    case 594:
                        return (T) new UdfpsHapticsSimulator((CommandRegistry) this.tvSysUIComponentImpl.commandRegistryProvider.get(), (VibratorHelper) this.tvSysUIComponentImpl.vibratorHelperProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 595:
                        return (T) new UdfpsShell((CommandRegistry) this.tvSysUIComponentImpl.commandRegistryProvider.get());
                    case 596:
                        return (T) new SystemUIDialogManager((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (KeyguardViewController) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get());
                    case 597:
                        ThreadFactoryImpl newInstance = ThreadFactoryImpl_Factory.newInstance();
                        BiometricsModule.Companion.getClass();
                        return (T) newInstance.buildExecutorOnNewThread("biometrics");
                    case 598:
                        return (T) new SinglePointerTouchProcessor((OverlapDetector) this.tvSysUIComponentImpl.providesOverlapDetectorProvider.get());
                    case 599:
                        return (T) UdfpsModule_Companion_ProvidesOverlapDetectorFactory.providesOverlapDetector((FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }

            /* JADX WARN: Multi-variable type inference failed */
            /* JADX WARN: Type inference failed for: r1v186, types: [android.hardware.SensorPrivacyManager$OnAllSensorPrivacyChangedListener, T, com.android.systemui.statusbar.policy.SensorPrivacyControllerImpl] */
            public final T get6() {
                int i = 0;
                switch (this.id) {
                    case VolteConstants.ErrorCode.BUSY_EVERYWHERE /* 600 */:
                        return (T) new SystemUIKeyguardFaceAuthInteractor((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.mainDispatcherProvider.get(), (DeviceEntryFaceAuthRepository) this.tvSysUIComponentImpl.deviceEntryFaceAuthRepositoryImplProvider.get(), (PrimaryBouncerInteractor) this.tvSysUIComponentImpl.primaryBouncerInteractorProvider.get(), (AlternateBouncerInteractor) this.tvSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (FaceAuthenticationLogger) this.tvSysUIComponentImpl.faceAuthenticationLoggerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 601:
                        return (T) new DeviceEntryFaceAuthRepositoryImpl(this.tvGlobalRootComponent.context, (FaceManager) this.tvGlobalRootComponent.provideFaceManagerProvider.get(), (UserRepository) this.tvSysUIComponentImpl.userRepositoryImplProvider.get(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.mainDispatcherProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (SessionTracker) this.tvSysUIComponentImpl.sessionTrackerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (FaceAuthenticationLogger) this.tvSysUIComponentImpl.faceAuthenticationLoggerProvider.get(), (BiometricSettingsRepository) this.tvSysUIComponentImpl.biometricSettingsRepositoryImplProvider.get(), (DeviceEntryFingerprintAuthRepository) this.tvSysUIComponentImpl.deviceEntryFingerprintAuthRepositoryImplProvider.get(), (TrustRepository) this.tvSysUIComponentImpl.trustRepositoryImplProvider.get(), (KeyguardRepository) this.tvSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get(), (AlternateBouncerInteractor) this.tvSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (TableLogBuffer) this.tvSysUIComponentImpl.provideFaceDetectTableLogProvider.get(), (TableLogBuffer) this.tvSysUIComponentImpl.provideFaceAuthTableLogProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 602:
                        return (T) new FaceAuthenticationLogger((LogBuffer) this.tvSysUIComponentImpl.provideFaceAuthLogProvider.get());
                    case VolteConstants.ErrorCode.DECLINE /* 603 */:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(300, "DeviceEntryFaceAuthRepositoryLog", true);
                    case VolteConstants.ErrorCode.DOES_NOT_EXIST_ANYWHERE /* 604 */:
                        TableLogBufferFactory tableLogBufferFactory = (TableLogBufferFactory) this.tvSysUIComponentImpl.tableLogBufferFactoryProvider.get();
                        KeyguardFaceAuthModule.Companion.getClass();
                        return (T) tableLogBufferFactory.create(100, "FaceDetectTableLog");
                    case 605:
                        TableLogBufferFactory tableLogBufferFactory2 = (TableLogBufferFactory) this.tvSysUIComponentImpl.tableLogBufferFactoryProvider.get();
                        KeyguardFaceAuthModule.Companion.getClass();
                        return (T) tableLogBufferFactory2.create(100, "FaceAuthTableLog");
                    case VolteConstants.ErrorCode.NOT_ACCEPTABLE2 /* 606 */:
                        return (T) new SideFpsController(this.tvGlobalRootComponent.context, (LayoutInflater) this.tvGlobalRootComponent.providerLayoutInflaterProvider.get(), (FingerprintManager) this.tvGlobalRootComponent.providesFingerprintManagerProvider.get(), (WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get(), (ActivityTaskManager) this.tvGlobalRootComponent.provideActivityTaskManagerProvider.get(), (DisplayManager) this.tvGlobalRootComponent.provideDisplayManagerProvider.get(), (DisplayStateInteractor) this.tvSysUIComponentImpl.providesDisplayStateInteractorProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (AlternateBouncerInteractor) this.tvSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 607:
                        return (T) new DisplayStateInteractorImpl((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (RearDisplayStateRepository) this.tvSysUIComponentImpl.rearDisplayStateRepositoryImplProvider.get());
                    case 608:
                        return (T) new RearDisplayStateRepositoryImpl((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (DeviceStateManager) this.tvGlobalRootComponent.provideDeviceStateManagerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get());
                    case 609:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(1000, "UdfpsLog", true);
                    case 610:
                        return (T) new LogContextInteractorImpl((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (FoldStateProvider) this.tvGlobalRootComponent.provideFoldStateProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get());
                    case 611:
                        return (T) new AuthBiometricFingerprintViewModel((DisplayStateInteractor) this.tvSysUIComponentImpl.providesDisplayStateInteractorProvider.get());
                    case 612:
                        return (T) new PromptCredentialInteractor((CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (PromptRepository) this.tvSysUIComponentImpl.promptRepositoryImplProvider.get(), (CredentialInteractor) this.tvSysUIComponentImpl.providesCredentialInteractorProvider.get());
                    case 613:
                        return (T) new PromptRepositoryImpl((AuthController) this.tvSysUIComponentImpl.authControllerProvider.get());
                    case 614:
                        return (T) new CredentialInteractorImpl((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get());
                    case 615:
                        return (T) new PromptSelectorInteractorImpl((PromptRepository) this.tvSysUIComponentImpl.promptRepositoryImplProvider.get(), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get());
                    case 616:
                        return (T) new CredentialViewModel((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (PromptCredentialInteractor) this.tvSysUIComponentImpl.promptCredentialInteractorProvider.get());
                    case 617:
                        return (T) new PromptViewModel((PromptSelectorInteractor) this.tvSysUIComponentImpl.promptSelectorInteractorImplProvider.get());
                    case 618:
                        return (T) KeyguardDisplayManager_Factory.newInstance((KeyguardFoldController) this.tvSysUIComponentImpl.keyguardFoldControllerImplProvider.get(), (KeyguardPresentationDisabler) this.tvSysUIComponentImpl.keyguardPresentationDisablerProvider.get(), this.tvGlobalRootComponent.context, DoubleCheck.lazy(this.tvSysUIComponentImpl.navigationBarControllerProvider), new KeyguardStatusViewComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvGlobalRootComponent.provideUiBackgroundExecutorProvider.get(), this.tvSysUIComponentImpl.deviceStateHelper(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get());
                    case 619:
                        return (T) new KeyguardPresentationDisabler((VibratorHelper) this.tvSysUIComponentImpl.vibratorHelperProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get());
                    case 620:
                        return (T) new ScreenOnCoordinator((Optional) this.tvSysUIComponentImpl.provideSysUIUnfoldComponentProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get());
                    case 621:
                        return (T) new DreamOverlayStateController((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), this.tvSysUIComponentImpl.namedBoolean4().booleanValue(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 622:
                        return (T) new DreamingToLockscreenTransitionViewModel((KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (FromDreamingTransitionInteractor) this.tvSysUIComponentImpl.fromDreamingTransitionInteractorProvider.get());
                    case 623:
                        return (T) new FromDreamingTransitionInteractor((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardTransitionRepository) this.tvSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get());
                    case 624:
                        return (T) new SystemUICommandActionHandler(this.tvGlobalRootComponent.context, this.tvSysUIComponentImpl.appControlActionInteractor(), this.tvSysUIComponentImpl.deviceControlActionInteractor(), this.tvSysUIComponentImpl.musicControlActionInteractor(), this.tvSysUIComponentImpl.notificationControlActionInteractor(), this.tvSysUIComponentImpl.screenControlActionInteractor(), this.tvSysUIComponentImpl.shareViaActionInteractor(), (SubscreenNotificationController) this.tvSysUIComponentImpl.subscreenNotificationControllerProvider.get());
                    case 625:
                        return (T) new AppController(this.tvGlobalRootComponent.context, this.tvSysUIComponentImpl.activityLauncher(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get(), (DesktopManager) this.tvSysUIComponentImpl.provideDesktopManagerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 626:
                        return (T) new DeviceController(this.tvGlobalRootComponent.context, (FlashlightController) this.tvSysUIComponentImpl.flashlightControllerImplProvider.get(), (RotationLockController) this.tvSysUIComponentImpl.rotationLockControllerImplProvider.get());
                    case 627:
                        return (T) new RotationLockControllerImpl((RotationPolicyWrapper) this.tvSysUIComponentImpl.bindRotationPolicyWrapperProvider.get(), (DeviceStateRotationLockSettingController) this.tvSysUIComponentImpl.deviceStateRotationLockSettingControllerProvider.get(), this.tvSysUIComponentImpl.namedStringArray());
                    case 628:
                        return (T) new RotationPolicyWrapperImpl(this.tvGlobalRootComponent.context, (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl());
                    case 629:
                        return (T) new DeviceStateRotationLockSettingController((RotationPolicyWrapper) this.tvSysUIComponentImpl.bindRotationPolicyWrapperProvider.get(), (DeviceStateManager) this.tvGlobalRootComponent.provideDeviceStateManagerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (DeviceStateRotationLockSettingsManager) this.tvSysUIComponentImpl.provideAutoRotateSettingsManagerProvider.get(), this.tvSysUIComponentImpl.deviceStateRotationLockSettingControllerLogger(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 630:
                        return (T) StatusBarPolicyModule_ProvideAutoRotateSettingsManagerFactory.provideAutoRotateSettingsManager(this.tvGlobalRootComponent.context);
                    case 631:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "DeviceStateAutoRotationLog", true);
                    case 632:
                        return (T) new NotificationController(this.tvGlobalRootComponent.context, (NotifPipeline) this.tvSysUIComponentImpl.notifPipelineProvider.get(), (NotifCollection) this.tvSysUIComponentImpl.notifCollectionProvider.get(), (DesktopManager) this.tvSysUIComponentImpl.provideDesktopManagerProvider.get(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get(), (KeyguardManager) this.tvGlobalRootComponent.provideKeyguardManagerProvider.get());
                    case 633:
                        return (T) new ScreenController(DoubleCheck.lazy(this.tvSysUIComponentImpl.centralSurfacesImplProvider), (DesktopManager) this.tvSysUIComponentImpl.provideDesktopManagerProvider.get(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 634:
                        return (T) new SubscreenNotificationController(this.tvGlobalRootComponent.context, (UserContextProvider) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (NotificationInterruptStateProvider) this.tvSysUIComponentImpl.notificationInterruptStateProviderImplProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.centralSurfacesImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginAODManagerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.subScreenManagerProvider), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (CommonNotifCollection) this.tvSysUIComponentImpl.notifPipelineProvider.get(), (NotificationVisibilityProvider) this.tvSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), (BindEventManager) this.tvSysUIComponentImpl.bindEventManagerImplProvider.get(), (NotificationController) this.tvSysUIComponentImpl.notificationControllerProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (ConversationNotificationManager) this.tvSysUIComponentImpl.conversationNotificationManagerProvider.get(), this.tvSysUIComponentImpl.setBubbles, (LogBuffer) this.tvSysUIComponentImpl.provideNotifInteractionLogBufferProvider.get(), (DebugModeFilterProvider) this.tvSysUIComponentImpl.debugModeFilterProvider.get(), (KeyguardNotificationVisibilityProvider) this.tvSysUIComponentImpl.keyguardNotificationVisibilityProviderImplProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ForegroundServiceController) this.tvSysUIComponentImpl.foregroundServiceControllerProvider.get(), this.tvSysUIComponentImpl.mediaFeatureFlag(), (NotifPipeline) this.tvSysUIComponentImpl.notifPipelineProvider.get());
                    case 635:
                        return (T) new DebugModeFilterProvider((CommandRegistry) this.tvSysUIComponentImpl.commandRegistryProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 636:
                        return (T) new StatusBarInitializer((StatusBarWindowController) this.tvSysUIComponentImpl.statusBarWindowControllerProvider.get(), this.tvSysUIComponentImpl.setOfOnStatusBarViewInitializedListener());
                    case 637:
                        return (T) new LetterboxAppearanceCalculator((LightBarController) this.tvSysUIComponentImpl.lightBarControllerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (LetterboxBackgroundProvider) this.tvSysUIComponentImpl.letterboxBackgroundProvider.get());
                    case 638:
                        return (T) new LetterboxBackgroundProvider((IWindowManager) this.tvGlobalRootComponent.provideIWindowManagerProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), this.tvGlobalRootComponent.wallpaperManager(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get());
                    case 639:
                        return (T) new StatusBarWindowStateController(this.tvGlobalRootComponent.displayIdInteger(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get());
                    case 640:
                        return (T) new StatusBarSignalPolicy(this.tvGlobalRootComponent.context, (StatusBarIconController) this.tvSysUIComponentImpl.statusBarIconControllerImplProvider.get(), (CarrierConfigTracker) this.tvSysUIComponentImpl.carrierConfigTrackerProvider.get(), (NetworkController) this.tvSysUIComponentImpl.networkControllerImplProvider.get(), (SecurityController) this.tvSysUIComponentImpl.securityControllerImplProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (DesktopManager) this.tvSysUIComponentImpl.provideDesktopManagerProvider.get(), (CoverScreenIconController) this.tvSysUIComponentImpl.coverScreenIconControllerProvider.get());
                    case 641:
                        return (T) new SecurityControllerImpl(this.tvGlobalRootComponent.context, (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 642:
                        return (T) new CoverScreenIconController((SubScreenManager) this.tvSysUIComponentImpl.subScreenManagerProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (CarrierInfraMediator) this.tvSysUIComponentImpl.fakeCarrierInfraMediatorImplProvider.get(), (SubRoomNetworkInfo) this.tvSysUIComponentImpl.subRoomNetworkInfoProvider.get(), this.tvGlobalRootComponent.context, (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (DelayableExecutor) this.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (MobileConnectionsRepository) this.tvSysUIComponentImpl.mobileRepositorySwitcherProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get());
                    case 643:
                        return (T) new SubRoomNetworkInfo();
                    case 644:
                        return (T) DynamicPrivacyController_Factory.newInstance((NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 645:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(500, "ShadeLog", false);
                    case 646:
                        return (T) new AccessibilityFloatingMenuController(this.tvGlobalRootComponent.context, (WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get(), (DisplayManager) this.tvGlobalRootComponent.provideDisplayManagerProvider.get(), (AccessibilityManager) this.tvGlobalRootComponent.provideAccessibilityManagerProvider.get(), (AccessibilityButtonTargetsObserver) this.tvSysUIComponentImpl.accessibilityButtonTargetsObserverProvider.get(), (AccessibilityButtonModeObserver) this.tvSysUIComponentImpl.accessibilityButtonModeObserverProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get());
                    case 647:
                        return (T) new LockscreenWallpaper(this.tvGlobalRootComponent.wallpaperManager(), (IWallpaperManager) this.tvGlobalRootComponent.provideIWallPaperManagerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (NotificationMediaManager) this.tvSysUIComponentImpl.provideNotificationMediaManagerProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 648:
                        return (T) new LogWrapper(ModuleType.POPUPUI, null);
                    case 649:
                        return (T) new VolumeDialogComponent(this.tvGlobalRootComponent.context, (KeyguardViewMediator) this.tvSysUIComponentImpl.newKeyguardViewMediatorProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (VolumeDialogControllerImpl) this.tvSysUIComponentImpl.volumeDialogControllerImplProvider.get(), (DemoModeController) this.tvSysUIComponentImpl.provideDemoModeControllerProvider.get(), (PluginDependencyProvider) this.tvGlobalRootComponent.pluginDependencyProvider.get(), (ExtensionController) this.tvSysUIComponentImpl.extensionControllerImplProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), this.tvSysUIComponentImpl.volumeDialog(), (SamsungVolumeDialogImpl) this.tvSysUIComponentImpl.samsungVolumeDialogImplProvider.get());
                    case 650:
                        return (T) new VolumeDialogControllerImpl(this.tvGlobalRootComponent.context, (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (RingerModeTracker) this.tvSysUIComponentImpl.ringerModeTrackerImplProvider.get(), ThreadFactoryImpl_Factory.newInstance(), (AudioManager) this.tvGlobalRootComponent.provideAudioManagerProvider.get(), (NotificationManager) this.tvGlobalRootComponent.provideNotificationManagerProvider.get(), (VibratorHelper) this.tvSysUIComponentImpl.vibratorHelperProvider.get(), (IAudioService) this.tvGlobalRootComponent.provideIAudioServiceProvider.get(), (AccessibilityManager) this.tvGlobalRootComponent.provideAccessibilityManagerProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (CaptioningManager) this.tvGlobalRootComponent.provideCaptioningManagerProvider.get(), (KeyguardManager) this.tvGlobalRootComponent.provideKeyguardManagerProvider.get(), (ActivityManager) this.tvGlobalRootComponent.provideActivityManagerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), new SALoggingWrapper(), this.tvSysUIComponentImpl.broadcastReceiverManager(), this.tvSysUIComponentImpl.displayManagerWrapper(), new com.android.systemui.volume.util.DesktopManagerWrapper(), (KnoxStateMonitor) this.tvSysUIComponentImpl.providesKnoxStateMonitorProvider.get(), this.tvSysUIComponentImpl.bluetoothAdapterWrapper(), this.tvSysUIComponentImpl.soundAssistantManagerWrapper(), this.tvSysUIComponentImpl.deviceStateManagerWrapper(), (LocalBluetoothManager) this.tvSysUIComponentImpl.provideLocalBluetoothControllerProvider.get(), (VolumeDependency) this.tvSysUIComponentImpl.volumeDependencyProvider.get());
                    case 651:
                        return (T) new LogWrapper(ModuleType.VOLUME, (SamsungServiceLogger) this.tvSysUIComponentImpl.provideVolumePanelLoggerProvider.get());
                    case 652:
                        return (T) new SamsungServiceLoggerImpl("VolumePanelLogger", 200, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (LogcatEchoTracker) this.tvSysUIComponentImpl.provideLogcatEchoTrackerProvider.get());
                    case 653:
                        return (T) new VolumeDependency(this.tvGlobalRootComponent.context, (SamsungServiceLogger) this.tvSysUIComponentImpl.provideVolumePanelLoggerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginAODManagerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.optionalOfCentralSurfacesProvider));
                    case 654:
                        return (T) new MediaOutputDialogFactory(this.tvGlobalRootComponent.context, this.tvGlobalRootComponent.mediaSessionManager(), (LocalBluetoothManager) this.tvSysUIComponentImpl.provideLocalBluetoothControllerProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (BroadcastSender) this.tvSysUIComponentImpl.broadcastSenderProvider.get(), (CommonNotifCollection) this.tvSysUIComponentImpl.notifPipelineProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (DialogLaunchAnimator) this.tvSysUIComponentImpl.provideDialogLaunchAnimatorProvider.get(), (Optional) this.tvSysUIComponentImpl.providesNearbyMediaDevicesManagerProvider.get(), (AudioManager) this.tvGlobalRootComponent.provideAudioManagerProvider.get(), (PowerExemptionManager) this.tvGlobalRootComponent.providePowerExemptionManagerProvider.get(), (KeyguardManager) this.tvGlobalRootComponent.provideKeyguardManagerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 655:
                        return (T) MediaModule_ProvidesNearbyMediaDevicesManagerFactory.providesNearbyMediaDevicesManager((MediaFlags) this.tvSysUIComponentImpl.mediaFlagsProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.nearbyMediaDevicesManagerProvider));
                    case 656:
                        return (T) new NearbyMediaDevicesManager((CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (NearbyMediaDevicesLogger) this.tvSysUIComponentImpl.nearbyMediaDevicesLoggerProvider.get());
                    case 657:
                        return (T) new NearbyMediaDevicesLogger((LogBuffer) this.tvSysUIComponentImpl.provideNearbyMediaDevicesLogBufferProvider.get());
                    case 658:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(20, "NearbyMediaDevicesLog", true);
                    case 659:
                        return (T) new VolumePanelFactory(this.tvGlobalRootComponent.context, (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (DialogLaunchAnimator) this.tvSysUIComponentImpl.provideDialogLaunchAnimatorProvider.get());
                    case 660:
                        return (T) new CsdWarningDialog.Factory() { // from class: com.android.systemui.tv.DaggerTvGlobalRootComponent.TvSysUIComponentImpl.SwitchingProvider.13
                            @Override // com.android.systemui.volume.CsdWarningDialog.Factory
                            public final CsdWarningDialog create(int i2, Runnable runnable) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = switchingProvider.tvGlobalRootComponent;
                                return new CsdWarningDialog(i2, daggerTvGlobalRootComponent.context, (AudioManager) daggerTvGlobalRootComponent.provideAudioManagerProvider.get(), (NotificationManager) switchingProvider.tvGlobalRootComponent.provideNotificationManagerProvider.get(), (DelayableExecutor) switchingProvider.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), runnable);
                            }
                        };
                    case 661:
                        return (T) new SamsungVolumeDialogImpl(this.tvGlobalRootComponent.context, (VolumeDependency) this.tvSysUIComponentImpl.volumeDependencyProvider.get());
                    case 662:
                        return (T) new InitController();
                    case 663:
                        return (T) new UserInfoControllerImpl(this.tvGlobalRootComponent.context, (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 664:
                        ?? r1 = (T) new SensorPrivacyControllerImpl((SensorPrivacyManager) this.tvGlobalRootComponent.provideSensorPrivacyManagerProvider.get());
                        r1.mSensorPrivacyEnabled = r1.mSensorPrivacyManager.isAllSensorPrivacyEnabled();
                        r1.mSensorPrivacyManager.addAllSensorPrivacyListener(r1);
                        return r1;
                    case 665:
                        Context context = this.tvGlobalRootComponent.context;
                        Looper looper = (Looper) this.tvGlobalRootComponent.provideMainLooperProvider.get();
                        WakeLock.Builder wakeLockBuilder = this.tvSysUIComponentImpl.wakeLockBuilder();
                        KeyguardStateController keyguardStateController = (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get();
                        StatusBarStateController statusBarStateController = (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get();
                        KeyguardUpdateMonitor keyguardUpdateMonitor = (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get();
                        DockManager dockManager = (DockManager) this.tvSysUIComponentImpl.dockManagerImplProvider.get();
                        BroadcastDispatcher broadcastDispatcher = (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get();
                        DevicePolicyManager devicePolicyManager = (DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get();
                        IBatteryStats iBatteryStats = (IBatteryStats) this.tvGlobalRootComponent.provideIBatteryStatsProvider.get();
                        UserManager userManager = (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get();
                        DelayableExecutor delayableExecutor = (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get();
                        DelayableExecutor delayableExecutor2 = (DelayableExecutor) this.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get();
                        FalsingManager falsingManager = (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get();
                        AuthController authController = (AuthController) this.tvSysUIComponentImpl.authControllerProvider.get();
                        LockPatternUtils lockPatternUtils = (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get();
                        ScreenLifecycle screenLifecycle = (ScreenLifecycle) this.tvGlobalRootComponent.screenLifecycleProvider.get();
                        return (T) SamsungServicesModule_ProvideKeyguardIndicationControllerFactory.provideKeyguardIndicationController(context, looper, wakeLockBuilder, keyguardStateController, statusBarStateController, keyguardUpdateMonitor, dockManager, broadcastDispatcher, devicePolicyManager, iBatteryStats, userManager, delayableExecutor, delayableExecutor2, falsingManager, authController, lockPatternUtils, screenLifecycle, (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (AccessibilityManager) this.tvGlobalRootComponent.provideAccessibilityManagerProvider.get(), (FaceHelpMessageDeferral) this.tvSysUIComponentImpl.faceHelpMessageDeferralProvider.get(), this.tvSysUIComponentImpl.keyguardLogger(), (AlternateBouncerInteractor) this.tvSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (AlarmManager) this.tvGlobalRootComponent.provideAlarmManagerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (SecRotationWatcher) this.tvSysUIComponentImpl.secRotationWatcherProvider.get(), (PluginLockMediator) this.tvSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (PluginLockData) this.tvSysUIComponentImpl.pluginLockDataImplProvider.get(), (PluginLockStarManager) this.tvSysUIComponentImpl.pluginLockStarManagerProvider.get(), (KeyguardEditModeController) this.tvSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get());
                    case 666:
                        return (T) new FaceHelpMessageDeferral(this.tvGlobalRootComponent.mainResources(), (FaceMessageDeferralLogger) this.tvSysUIComponentImpl.faceMessageDeferralLoggerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 667:
                        return (T) new FaceMessageDeferralLogger((LogBuffer) this.tvSysUIComponentImpl.provideBiometricLogBufferProvider.get());
                    case 668:
                        return (T) new SecRotationWatcher(this.tvGlobalRootComponent.context);
                    case 669:
                        return (T) new StatusBarTouchableRegionManager(this.tvGlobalRootComponent.context, (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (HeadsUpManagerPhone) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (UnlockedScreenOffAnimationController) this.tvSysUIComponentImpl.unlockedScreenOffAnimationControllerProvider.get());
                    case 670:
                        return (T) new StatusBarHideIconsForBouncerManager((CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (StatusBarWindowStateController) this.tvSysUIComponentImpl.statusBarWindowStateControllerProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 671:
                        return (T) new WiredChargingRippleController((CommandRegistry) this.tvSysUIComponentImpl.commandRegistryProvider.get(), (BatteryController) this.tvSysUIComponentImpl.provideBatteryControllerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), this.tvGlobalRootComponent.context, (WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get());
                    case 672:
                        return (T) new CameraLauncher((CameraGestureHelper) this.tvSysUIComponentImpl.cameraGestureHelperProvider.get(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get());
                    case 673:
                        return (T) new LightRevealScrimViewModel((LightRevealScrimInteractor) this.tvSysUIComponentImpl.lightRevealScrimInteractorProvider.get());
                    case 674:
                        return (T) new LightRevealScrimInteractor((KeyguardTransitionRepository) this.tvSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (LightRevealScrimRepository) this.tvSysUIComponentImpl.lightRevealScrimRepositoryImplProvider.get());
                    case 675:
                        return (T) new LightRevealScrimRepositoryImpl((KeyguardRepository) this.tvSysUIComponentImpl.keyguardRepositoryImplProvider.get(), this.tvGlobalRootComponent.context);
                    case 676:
                        return (T) new SecLightRevealScrimHelper(this.tvGlobalRootComponent.context, DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginAODManagerProvider), (ScreenOffAnimationController) this.tvSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (BiometricUnlockController) this.tvSysUIComponentImpl.biometricUnlockControllerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (ScreenLifecycle) this.tvGlobalRootComponent.screenLifecycleProvider.get(), (LightRevealScrim) this.tvSysUIComponentImpl.providesLightRevealScrimProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 677:
                        return (T) new PickupController((KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (SensorManager) this.tvGlobalRootComponent.providesSensorManagerProvider.get());
                    case 678:
                        return (T) new SamsungServiceLoggerImpl("KeyguardSecLogger", 2300, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (LogcatEchoTracker) this.tvGlobalRootComponent.noLogcatEchoTrackerProvider.get());
                    case 679:
                        return (T) new SamsungServiceLoggerImpl("SecurityLogger", 1000, (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (LogcatEchoTracker) this.tvGlobalRootComponent.noLogcatEchoTrackerProvider.get());
                    case 680:
                        return (T) new KeyguardFixedRotationMonitor(DoubleCheck.lazy(this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (IWindowManager) this.tvGlobalRootComponent.provideIWindowManagerProvider.get());
                    case 681:
                        return (T) new CarLifeManager((DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get());
                    case 682:
                        return (T) new UdfpsOverlayInteractor((AuthController) this.tvSysUIComponentImpl.authControllerProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case 683:
                        return (T) new WindowVisibilityController((Choreographer) this.tvGlobalRootComponent.providesChoreographerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider));
                    case 684:
                        return (T) new ActiveUnlockConfig((Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (ContentResolver) this.tvGlobalRootComponent.provideContentResolverProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 685:
                        return (T) new FaceWakeUpTriggersConfig(this.tvGlobalRootComponent.mainResources(), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 686:
                        return (T) new ContrastDialogActivity(this.tvGlobalRootComponent.context, (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (UiModeManager) this.tvGlobalRootComponent.provideUiModeManagerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl());
                    case 687:
                        return (T) new UsbDebuggingActivity((BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 688:
                        return (T) new UsbDebuggingSecondaryUserActivity((BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 689:
                        return (T) new UsbPermissionActivity(new UsbAudioWarningDialogMessage());
                    case 690:
                        return (T) new UsbConfirmActivity(new UsbAudioWarningDialogMessage());
                    case 691:
                        return (T) UsbAccessoryUriActivity_Factory.newInstance((DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get());
                    case 692:
                        return (T) new CreateUserActivity(this.tvSysUIComponentImpl.userCreator(), new CreateUserDialogController("com.android.systemui.fileprovider"), (IActivityManager) this.tvGlobalRootComponent.provideIActivityManagerProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get());
                    case 693:
                        return (T) new TvNotificationPanelActivity((TvNotificationHandler) this.tvSysUIComponentImpl.provideTvNotificationHandlerProvider.get());
                    case 694:
                        return (T) TvSystemUIModule_ProvideTvNotificationHandlerFactory.provideTvNotificationHandler((NotificationListener) this.tvSysUIComponentImpl.notificationListenerProvider.get());
                    case 695:
                        return (T) new PeopleSpaceActivity(this.tvSysUIComponentImpl.peopleViewModelFactory());
                    case 696:
                        return (T) new PeopleTileRepositoryImpl((PeopleSpaceWidgetManager) this.tvSysUIComponentImpl.peopleSpaceWidgetManagerProvider.get());
                    case 697:
                        return (T) new PeopleWidgetRepositoryImpl((PeopleSpaceWidgetManager) this.tvSysUIComponentImpl.peopleSpaceWidgetManagerProvider.get());
                    case 698:
                        return (T) new LongScreenshotActivity((UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), this.tvSysUIComponentImpl.imageExporter(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (LongScreenshotData) this.tvSysUIComponentImpl.longScreenshotDataProvider.get(), (ActionIntentExecutor) this.tvSysUIComponentImpl.actionIntentExecutorProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 699:
                        return (T) new LongScreenshotData();
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get7() {
                int i = 0;
                switch (this.id) {
                    case KnoxEnterpriseLicenseManager.ERROR_LICENSE_DEACTIVATED /* 700 */:
                        return (T) new ActionIntentExecutor((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.mainDispatcherProvider.get(), this.tvGlobalRootComponent.context, (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get());
                    case 701:
                        return (T) new AppClipsTrampolineActivity((DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), this.tvSysUIComponentImpl.setBubbles, (NoteTaskController) this.tvSysUIComponentImpl.noteTaskControllerProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get());
                    case 702:
                        return (T) new AppClipsActivity((AppClipsViewModel.Factory) this.tvSysUIComponentImpl.appClipsViewModelFactory(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get());
                    case KnoxEnterpriseLicenseManager.ERROR_LICENSE_ACTIVATION_NOT_FOUND /* 703 */:
                        return (T) AppClipsCrossProcessHelper_Factory.newInstance((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get());
                    case KnoxEnterpriseLicenseManager.ERROR_LICENSE_QUANTITY_EXHAUSTED_ON_AUTO_RELEASE /* 704 */:
                        return (T) new LaunchConversationActivity((NotificationVisibilityProvider) this.tvSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), (CommonNotifCollection) this.tvSysUIComponentImpl.notifPipelineProvider.get(), (Optional) this.tvSysUIComponentImpl.provideBubblesManagerProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case 705:
                        return (T) new SensorUseStartedActivity((IndividualSensorPrivacyController) this.tvSysUIComponentImpl.provideIndividualSensorPrivacyControllerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardDismissUtil) this.tvSysUIComponentImpl.keyguardDismissUtilProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get(), (SubscreenSensorUseUtil) this.tvSysUIComponentImpl.subscreenSensorUseUtilProvider.get());
                    case 706:
                        return (T) new SubscreenSensorUseUtil((Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (DisplayLifecycle) this.tvSysUIComponentImpl.displayLifecycleProvider.get());
                    case 707:
                        return (T) new TvUnblockSensorActivity((IndividualSensorPrivacyController) this.tvSysUIComponentImpl.provideIndividualSensorPrivacyControllerProvider.get(), (AppOpsManager) this.tvGlobalRootComponent.provideAppOpsManagerProvider.get(), (RoleManager) this.tvGlobalRootComponent.provideRoleManagerProvider.get());
                    case 708:
                        return (T) new HdmiCecSetMenuLanguageActivity((HdmiCecSetMenuLanguageHelper) this.tvSysUIComponentImpl.hdmiCecSetMenuLanguageHelperProvider.get());
                    case 709:
                        return (T) new HdmiCecSetMenuLanguageHelper((Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl());
                    case 710:
                        return (T) new TvSensorPrivacyChangedActivity((IndividualSensorPrivacyController) this.tvSysUIComponentImpl.provideIndividualSensorPrivacyControllerProvider.get(), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl());
                    case 711:
                        return (T) new CoverHomeActivity(DoubleCheck.lazy(this.tvSysUIComponentImpl.coverScreenManagerProvider));
                    case 712:
                        return (T) new SwitchToManagedProfileForCallActivity((TelecomManager) this.tvGlobalRootComponent.provideTelecomManagerProvider.get());
                    case 713:
                        return (T) new SubscreenNotificationReplyActivity((SubscreenNotificationController) this.tvSysUIComponentImpl.subscreenNotificationControllerProvider.get(), (NotifPipeline) this.tvSysUIComponentImpl.notifPipelineProvider.get());
                    case 714:
                        return (T) new SubscreenNotificationIntelligenceStartActivity((SubscreenNotificationController) this.tvSysUIComponentImpl.subscreenNotificationControllerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get());
                    case 715:
                        return (T) new SubHomeActivity(DoubleCheck.lazy(this.tvSysUIComponentImpl.subScreenManagerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.settingsHelperProvider));
                    case 716:
                        return (T) new SubScreenFallback((SubScreenManager) this.tvSysUIComponentImpl.subScreenManagerProvider.get());
                    case 717:
                        return (T) new ControlsEditingActivity((FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (ControlsControllerImpl) this.tvSysUIComponentImpl.controlsControllerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (CustomIconCache) this.tvSysUIComponentImpl.customIconCacheProvider.get());
                    case 718:
                        return (T) new CustomIconCache();
                    case 719:
                        return (T) new ControlsRequestDialog((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (ControlsController) this.tvSysUIComponentImpl.controlsControllerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (ControlsListingController) this.tvSysUIComponentImpl.controlsListingControllerImplProvider.get());
                    case 720:
                        return (T) new MediaProjectionAppSelectorActivity(new MediaProjectionAppSelectorComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i), this.tvSysUIComponentImpl.asyncActivityLauncher());
                    case 721:
                        return (T) new MediaProjectionPermissionActivity((FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.screenCaptureDevicePolicyResolverProvider));
                    case 722:
                        return (T) new LaunchNoteTaskActivity((NoteTaskController) this.tvSysUIComponentImpl.noteTaskControllerProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 723:
                        return (T) new LaunchNoteTaskManagedProfileProxyActivity((NoteTaskController) this.tvSysUIComponentImpl.noteTaskControllerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get());
                    case 724:
                        return (T) new LaunchNotesRoleSettingsTrampolineActivity((NoteTaskController) this.tvSysUIComponentImpl.noteTaskControllerProvider.get());
                    case 725:
                        return (T) new CreateNoteTaskShortcutActivity((RoleManager) this.tvGlobalRootComponent.provideRoleManagerProvider.get(), (ShortcutManager) this.tvGlobalRootComponent.provideShortcutManagerProvider.get());
                    case 726:
                        return (T) new WalletActivity((KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardDismissUtil) this.tvSysUIComponentImpl.keyguardDismissUtilProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (FalsingCollector) this.tvSysUIComponentImpl.falsingCollectorImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (StatusBarKeyguardViewManager) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get());
                    case 727:
                        return (T) new CustomControlsProviderSelectorActivity((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (ControlsListingController) this.tvSysUIComponentImpl.controlsListingControllerImplProvider.get(), (ControlsController) this.tvSysUIComponentImpl.controlsControllerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), this.tvSysUIComponentImpl.authorizedPanelsRepositoryImpl(), (CustomControlsController) this.tvSysUIComponentImpl.controlsControllerImplProvider.get(), (ControlsActivityStarter) this.tvSysUIComponentImpl.controlsActivityStarterImplProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), this.tvSysUIComponentImpl.controlsUtil(), this.tvSysUIComponentImpl.layoutUtil(), (SALogger) this.tvSysUIComponentImpl.sALoggerProvider.get(), (BadgeProvider) this.tvSysUIComponentImpl.badgeProviderImplProvider.get());
                    case 728:
                        return (T) new CustomControlsFavoritingActivity((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (ControlsController) this.tvSysUIComponentImpl.controlsControllerImplProvider.get(), (CustomControlsController) this.tvSysUIComponentImpl.controlsControllerImplProvider.get(), (CustomControlsController) this.tvSysUIComponentImpl.controlsControllerImplProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), this.tvSysUIComponentImpl.layoutUtil(), this.tvSysUIComponentImpl.controlsUtil(), (ControlsRuneWrapper) this.tvSysUIComponentImpl.provideControlsRuneWrapperProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (AUIFacade) this.tvSysUIComponentImpl.aUIFacadeImplProvider.get(), (SALogger) this.tvSysUIComponentImpl.sALoggerProvider.get());
                    case 729:
                        return (T) new CustomControlsActivity((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (ControlsController) this.tvSysUIComponentImpl.controlsControllerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (ControlsUiController) this.tvSysUIComponentImpl.customControlsUiControllerImplProvider.get(), (CustomControlsUiController) this.tvSysUIComponentImpl.customControlsUiControllerImplProvider.get(), this.tvSysUIComponentImpl.controlsUtil(), (ControlsFragmentFactory) this.tvSysUIComponentImpl.controlsFragmentFactoryProvider.get(), (BlurFacade) this.tvSysUIComponentImpl.blurFacadeImplProvider.get(), (AUIFacade) this.tvSysUIComponentImpl.aUIFacadeImplProvider.get());
                    case 730:
                        return (T) new ControlsFragmentFactory((ControlsActivityStarter) this.tvSysUIComponentImpl.controlsActivityStarterImplProvider.get(), this.tvSysUIComponentImpl.layoutUtil(), (SALogger) this.tvSysUIComponentImpl.sALoggerProvider.get(), (BadgeSubject) this.tvSysUIComponentImpl.badgeProviderImplProvider.get(), (ControlsListingController) this.tvSysUIComponentImpl.controlsListingControllerImplProvider.get(), (CustomControlsUiController) this.tvSysUIComponentImpl.customControlsUiControllerImplProvider.get());
                    case 731:
                        return (T) new BlurFacadeImpl((ControlsRuneWrapper) this.tvSysUIComponentImpl.provideControlsRuneWrapperProvider.get(), (KeyguardWallpaper) this.tvSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get());
                    case 732:
                        return (T) new ControlsReorderActivity((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (ControlsController) this.tvSysUIComponentImpl.controlsControllerImplProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), this.tvSysUIComponentImpl.layoutUtil(), (ControlsRuneWrapper) this.tvSysUIComponentImpl.provideControlsRuneWrapperProvider.get(), this.tvSysUIComponentImpl.controlsUtil(), (AUIFacade) this.tvSysUIComponentImpl.aUIFacadeImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 733:
                        return (T) new ControlsSettingActivity((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (ControlsController) this.tvSysUIComponentImpl.controlsControllerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (ControlsFragmentFactory) this.tvSysUIComponentImpl.controlsFragmentFactoryProvider.get(), this.tvSysUIComponentImpl.layoutUtil(), (SALogger) this.tvSysUIComponentImpl.sALoggerProvider.get());
                    case 734:
                        return (T) new SecQSSettingEditMainActivity((SecQSSettingEditResources) this.tvSysUIComponentImpl.secQSSettingEditResourcesProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get());
                    case 735:
                        return (T) new SecQSSettingEditResources((TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), this.tvGlobalRootComponent.context, (MultiSIMController) this.tvSysUIComponentImpl.multiSIMControllerProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (SecQSPanelResourcePicker) this.tvSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (QSTileHost) this.tvSysUIComponentImpl.qSTileHostProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (Executor) this.tvSysUIComponentImpl.provideExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideExecutorProvider.get());
                    case 736:
                        return (T) new MultiSIMController(this.tvGlobalRootComponent.context, (NetworkController) this.tvSysUIComponentImpl.networkControllerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (MultiSIMPreferredSlotView.SIMInfoIconManager.Factory) this.tvSysUIComponentImpl.factoryProvider17.get());
                    case 737:
                        return (T) new MultiSIMPreferredSlotView.SIMInfoIconManager.Factory((StatusBarPipelineFlags) this.tvSysUIComponentImpl.statusBarPipelineFlagsProvider.get(), (WifiUiAdapter) this.tvSysUIComponentImpl.wifiUiAdapterProvider.get(), (MobileUiAdapter) this.tvSysUIComponentImpl.mobileUiAdapterProvider.get(), (MobileContextProvider) this.tvSysUIComponentImpl.mobileContextProvider.get(), this.tvSysUIComponentImpl.bTTetherUiAdapter());
                    case 738:
                        Looper looper = (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get();
                        Long l = SysUIConcurrencyModule.BG_SLOW_DISPATCH_THRESHOLD;
                        return (T) new ExecutorImpl(looper);
                    case 739:
                        return (T) new SecQSSettingEditTilesActivity((SecQSSettingEditResources) this.tvSysUIComponentImpl.secQSSettingEditResourcesProvider.get());
                    case 740:
                        return (T) new SecQSSettingEditDirectlyActivity((SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (SecQSSettingEditResources) this.tvSysUIComponentImpl.secQSSettingEditResourcesProvider.get());
                    case 741:
                        TvSysUIComponentImpl tvSysUIComponentImpl = this.tvSysUIComponentImpl;
                        return (T) tvSysUIComponentImpl.injectDozeService(DozeService_Factory.newInstance(new DozeComponentFactory(this.tvGlobalRootComponent, tvSysUIComponentImpl, i), (PluginManager) this.tvGlobalRootComponent.providesPluginManagerProvider.get()));
                    case 742:
                        return (T) new ImageWallpaper((DelayableExecutor) this.tvSysUIComponentImpl.provideLongRunningDelayableExecutorProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (WallpaperLogger) this.tvSysUIComponentImpl.provideWallpaperLoggerProvider.get(), this.tvSysUIComponentImpl.systemWallpaperColors(), (KeyguardWallpaper) this.tvSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (CoverWallpaper) this.tvSysUIComponentImpl.coverWallpaperControllerProvider.get(), this.tvSysUIComponentImpl.setDisplayController);
                    case 743:
                        Looper looper2 = (Looper) this.tvSysUIComponentImpl.provideLongRunningLooperProvider.get();
                        Long l2 = SysUIConcurrencyModule.BG_SLOW_DISPATCH_THRESHOLD;
                        return (T) new ExecutorImpl(looper2);
                    case 744:
                        return (T) SysUIConcurrencyModule_ProvideLongRunningLooperFactory.provideLongRunningLooper();
                    case 745:
                        return (T) new KeyguardService((KeyguardViewMediator) this.tvSysUIComponentImpl.newKeyguardViewMediatorProvider.get(), (KeyguardLifecyclesDispatcher) this.tvSysUIComponentImpl.keyguardLifecyclesDispatcherProvider.get(), (ScreenOnCoordinator) this.tvSysUIComponentImpl.screenOnCoordinatorProvider.get(), this.tvSysUIComponentImpl.setTransitions, (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get());
                    case 746:
                        return (T) new KeyguardLifecyclesDispatcher((ScreenLifecycle) this.tvGlobalRootComponent.screenLifecycleProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get());
                    case 747:
                        return (T) new DreamOverlayService(this.tvGlobalRootComponent.context, new DreamOverlayLifecycleOwner(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get(), new cascd_ComplicationComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i), new casdcd_ComplicationComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i), new DreamOverlayComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i), (DreamOverlayStateController) this.tvSysUIComponentImpl.dreamOverlayStateControllerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), this.tvSysUIComponentImpl.touchInsetManager(), this.tvSysUIComponentImpl.namedComponentName2(), (DreamOverlayCallbackController) this.tvSysUIComponentImpl.dreamOverlayCallbackControllerProvider.get(), this.tvSysUIComponentImpl.namedString());
                    case 748:
                        return (T) new NotificationListenerWithPlugins((PluginManager) this.tvGlobalRootComponent.providesPluginManagerProvider.get());
                    case 749:
                        return (T) new SystemUIService((Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), this.tvSysUIComponentImpl.dumpHandler(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), this.tvSysUIComponentImpl.logBufferFreezer(), this.tvSysUIComponentImpl.batteryStateNotifier(), (BinderProxyDumpHelper) this.tvSysUIComponentImpl.provideBinderProxyDumpHelperProvider.get(), (MemoryMonitor) this.tvSysUIComponentImpl.memoryMonitorProvider.get());
                    case 750:
                        return (T) SamsungServicesModule_ProvideBinderProxyDumpHelperFactory.provideBinderProxyDumpHelper((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 751:
                        return (T) new MemoryMonitor((Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (BootCompleteCache) this.tvSysUIComponentImpl.bootCompleteCacheImplProvider.get(), (HeapDumpHelper) this.tvSysUIComponentImpl.heapDumpHelperProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (UncaughtExceptionPreHandlerManager) this.tvGlobalRootComponent.uncaughtExceptionPreHandlerManagerProvider.get(), (CommonNotifCollection) this.tvSysUIComponentImpl.notifPipelineProvider.get());
                    case 752:
                        return (T) new HeapDumpHelper(this.tvGlobalRootComponent.context, (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get());
                    case 753:
                        return (T) new SystemUIAuxiliaryDumpService(this.tvSysUIComponentImpl.dumpHandler());
                    case 754:
                        return (T) new RecordingService((RecordingController) this.tvSysUIComponentImpl.recordingControllerProvider.get(), (Executor) this.tvSysUIComponentImpl.provideLongRunningExecutorProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (NotificationManager) this.tvGlobalRootComponent.provideNotificationManagerProvider.get(), (UserContextProvider) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (KeyguardDismissUtil) this.tvSysUIComponentImpl.keyguardDismissUtilProvider.get());
                    case 755:
                        Looper looper3 = (Looper) this.tvSysUIComponentImpl.provideLongRunningLooperProvider.get();
                        Long l3 = SysUIConcurrencyModule.BG_SLOW_DISPATCH_THRESHOLD;
                        return (T) new ExecutorImpl(looper3);
                    case 756:
                        return (T) new SysUICoverService((CoverScreenManager) this.tvSysUIComponentImpl.coverScreenManagerProvider.get());
                    case 757:
                        return (T) new TakeScreenshotService(this.tvSysUIComponentImpl.screenshotController(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), this.tvSysUIComponentImpl.screenshotNotificationsController(), this.tvGlobalRootComponent.context, this.tvSysUIComponentImpl.screenshotErrorController(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (RequestProcessor) this.tvSysUIComponentImpl.requestProcessorProvider.get());
                    case 758:
                        return (T) new ScreenshotSmartActions(this.tvSysUIComponentImpl.providesScrnshtNotifSmartActionsProvider);
                    case 759:
                        return (T) ReferenceScreenshotModule_ProvidesScrnshtNotifSmartActionsProviderFactory.providesScrnshtNotifSmartActionsProvider();
                    case 760:
                        return (T) new ImageCaptureImpl((IWindowManager) this.tvGlobalRootComponent.provideIWindowManagerProvider.get(), (IActivityTaskManager) this.tvGlobalRootComponent.provideIActivityTaskManagerProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get());
                    case 761:
                        return (T) new SemImageCaptureImpl(this.tvGlobalRootComponent.context, (DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (IWindowManager) this.tvGlobalRootComponent.provideIWindowManagerProvider.get(), (IActivityTaskManager) this.tvGlobalRootComponent.provideIActivityTaskManagerProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get());
                    case 762:
                        return (T) new AssistContentRequester(this.tvGlobalRootComponent.context, (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case 763:
                        return (T) new RequestProcessor((DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (SemImageCaptureImpl) this.tvSysUIComponentImpl.semImageCaptureImplProvider.get(), (ImageCapture) this.tvSysUIComponentImpl.imageCaptureImplProvider.get(), (ScreenshotPolicy) this.tvSysUIComponentImpl.screenshotPolicyImplProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case 764:
                        return (T) new ScreenshotPolicyImpl(this.tvGlobalRootComponent.context, (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (IActivityTaskManager) this.tvGlobalRootComponent.provideIActivityTaskManagerProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get());
                    case 765:
                        return (T) new ScreenshotProxyService((ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.mainDispatcherProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get());
                    case 766:
                        return (T) new AppClipsScreenshotHelperService(this.tvSysUIComponentImpl.setBubbles);
                    case 767:
                        return (T) new AppClipsService((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), this.tvSysUIComponentImpl.setBubbles, (DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get());
                    case 768:
                        return (T) new NoteTaskControllerUpdateService((NoteTaskController) this.tvSysUIComponentImpl.noteTaskControllerProvider.get());
                    case 769:
                        return (T) new WalletContextualLocationsService((WalletContextualSuggestionsController) this.tvSysUIComponentImpl.walletContextualSuggestionsControllerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 770:
                        return (T) new WalletContextualSuggestionsController((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (QuickAccessWalletController) this.tvSysUIComponentImpl.quickAccessWalletControllerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 771:
                        return (T) new OverviewProxyRecentsImpl(DoubleCheck.lazy(this.tvSysUIComponentImpl.optionalOfCentralSurfacesProvider), (OverviewProxyService) this.tvSysUIComponentImpl.overviewProxyServiceProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get());
                    case 772:
                        return (T) new ActionProxyReceiver((ActivityManagerWrapper) this.tvSysUIComponentImpl.provideActivityManagerWrapperProvider.get(), (ScreenshotSmartActions) this.tvSysUIComponentImpl.screenshotSmartActionsProvider.get(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get());
                    case 773:
                        return (T) new DeleteScreenshotReceiver((ScreenshotSmartActions) this.tvSysUIComponentImpl.screenshotSmartActionsProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case 774:
                        return (T) SmartActionsReceiver_Factory.newInstance((ScreenshotSmartActions) this.tvSysUIComponentImpl.screenshotSmartActionsProvider.get());
                    case 775:
                        return (T) new MediaOutputDialogReceiver((MediaOutputDialogFactory) this.tvSysUIComponentImpl.mediaOutputDialogFactoryProvider.get(), this.tvSysUIComponentImpl.mediaOutputBroadcastDialogFactory());
                    case 776:
                        return (T) new VolumePanelDialogReceiver((VolumePanelFactory) this.tvSysUIComponentImpl.volumePanelFactoryProvider.get());
                    case 777:
                        return (T) new PeopleSpaceWidgetPinnedReceiver((PeopleSpaceWidgetManager) this.tvSysUIComponentImpl.peopleSpaceWidgetManagerProvider.get());
                    case 778:
                        return (T) PeopleSpaceWidgetProvider_Factory.newInstance((PeopleSpaceWidgetManager) this.tvSysUIComponentImpl.peopleSpaceWidgetManagerProvider.get());
                    case 779:
                        return (T) new GuestResetOrExitSessionReceiver((UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (GuestResetOrExitSessionReceiver.ResetSessionDialog.Factory) this.tvSysUIComponentImpl.factoryProvider9.get(), (GuestResetOrExitSessionReceiver.ExitSessionDialog.Factory) this.tvSysUIComponentImpl.factoryProvider10.get());
                    case 780:
                        return (T) new ControlsRequestReceiver((ControlsController) this.tvSysUIComponentImpl.controlsControllerImplProvider.get(), (CustomControlsController) this.tvSysUIComponentImpl.controlsControllerImplProvider.get(), GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler());
                    case 781:
                        return (T) new ControlsBackupRestoreReceiver((ControlsController) this.tvSysUIComponentImpl.controlsControllerImplProvider.get(), (CustomControlsController) this.tvSysUIComponentImpl.controlsControllerImplProvider.get(), (CustomControlsUiController) this.tvSysUIComponentImpl.customControlsUiControllerImplProvider.get(), this.tvSysUIComponentImpl.controlsFileLoader(), (EncryptDecryptWrapper) this.tvSysUIComponentImpl.encryptDecryptWrapperProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), this.tvSysUIComponentImpl.controlsUtil(), (ControlsRuneWrapper) this.tvSysUIComponentImpl.provideControlsRuneWrapperProvider.get(), new ControlsLogger());
                    case 782:
                        return (T) new EncryptDecryptWrapper();
                    case 783:
                        return (T) new UnfoldLatencyTracker((LatencyTracker) this.tvGlobalRootComponent.provideLatencyTrackerProvider.get(), (DeviceStateManager) this.tvGlobalRootComponent.provideDeviceStateManagerProvider.get(), (Optional) this.tvGlobalRootComponent.unfoldTransitionProgressProvider.get(), (Executor) this.tvGlobalRootComponent.provideUiBackgroundExecutorProvider.get(), this.tvGlobalRootComponent.context, (ContentResolver) this.tvGlobalRootComponent.provideContentResolverProvider.get(), (ScreenLifecycle) this.tvGlobalRootComponent.screenLifecycleProvider.get());
                    case 784:
                        return (T) this.tvSysUIComponentImpl.injectDependency(Dependency_Factory.newInstance());
                    case 785:
                        return (T) new BluetoothControllerImpl(this.tvGlobalRootComponent.context, (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (BluetoothLogger) this.tvSysUIComponentImpl.bluetoothLoggerProvider.get(), (BluetoothRepository) this.tvSysUIComponentImpl.bluetoothRepositoryImplProvider.get(), (Looper) this.tvGlobalRootComponent.provideMainLooperProvider.get(), (LocalBluetoothManager) this.tvSysUIComponentImpl.provideLocalBluetoothControllerProvider.get(), (BluetoothAdapter) this.tvGlobalRootComponent.provideBluetoothAdapterProvider.get());
                    case 786:
                        return (T) new SRotationLockControllerImpl((RotationPolicyWrapper) this.tvSysUIComponentImpl.bindRotationPolicyWrapperProvider.get(), (DeviceStateRotationLockSettingController) this.tvSysUIComponentImpl.deviceStateRotationLockSettingControllerProvider.get(), this.tvSysUIComponentImpl.namedStringArray());
                    case 787:
                        NightDisplayListenerModule nightDisplayListenerModule = this.tvSysUIComponentImpl.nightDisplayListenerModule;
                        Context context = this.tvGlobalRootComponent.context;
                        Handler handler = (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get();
                        nightDisplayListenerModule.getClass();
                        return (T) new NightDisplayListener(context, handler);
                    case 788:
                        return (T) new AccessibilityController(this.tvGlobalRootComponent.context);
                    case 789:
                        return (T) new TunablePadding.TunablePaddingService((TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get());
                    case 790:
                        return (T) new UiOffloadThread();
                    case 791:
                        return (T) new PowerNotificationWarnings(this.tvGlobalRootComponent.context, (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (BroadcastSender) this.tvSysUIComponentImpl.broadcastSenderProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.provideBatteryControllerProvider), (DialogLaunchAnimator) this.tvSysUIComponentImpl.provideDialogLaunchAnimatorProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 792:
                        return (T) new StatusBarRemoteInputCallback(this.tvGlobalRootComponent.context, (GroupExpansionManager) this.tvSysUIComponentImpl.groupExpansionManagerImplProvider.get(), (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (StatusBarKeyguardViewManager) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (ShadeController) this.tvSysUIComponentImpl.shadeControllerImplProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), this.tvSysUIComponentImpl.actionClickLogger(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get());
                    case 793:
                        return (T) new GroupExpansionManagerImpl((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (GroupMembershipManager) this.tvSysUIComponentImpl.provideGroupMembershipManagerProvider.get());
                    case 794:
                        return (T) new ClockManager(this.tvGlobalRootComponent.context, (LayoutInflater) this.tvGlobalRootComponent.providerLayoutInflaterProvider.get(), (PluginManager) this.tvGlobalRootComponent.providesPluginManagerProvider.get(), (SysuiColorExtractor) this.tvSysUIComponentImpl.sysuiColorExtractorProvider.get(), (DockManager) this.tvSysUIComponentImpl.dockManagerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get());
                    case 795:
                        FeatureFlags featureFlags = (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get();
                        SystemEventCoordinator systemEventCoordinator = (SystemEventCoordinator) this.tvSysUIComponentImpl.systemEventCoordinatorProvider.get();
                        SystemEventChipAnimationController systemEventChipAnimationController = this.tvSysUIComponentImpl.systemEventChipAnimationController();
                        StatusBarWindowController statusBarWindowController = (StatusBarWindowController) this.tvSysUIComponentImpl.statusBarWindowControllerProvider.get();
                        DumpManager dumpManager = (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get();
                        SystemClock systemClock = (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get();
                        CoroutineScope coroutineScope = (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get();
                        return (T) StatusBarEventsModule_Companion_ProvideSystemStatusAnimationSchedulerFactory.provideSystemStatusAnimationScheduler(featureFlags, systemEventCoordinator, systemEventChipAnimationController, statusBarWindowController, dumpManager, systemClock, coroutineScope, (DesktopManager) this.tvSysUIComponentImpl.provideDesktopManagerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (StatusBarWindowStateController) this.tvSysUIComponentImpl.statusBarWindowStateControllerProvider.get());
                    case 796:
                        return (T) new SystemEventCoordinator((SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (BatteryController) this.tvSysUIComponentImpl.provideBatteryControllerProvider.get(), (PrivacyItemController) this.tvSysUIComponentImpl.privacyItemControllerProvider.get(), this.tvGlobalRootComponent.context, (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 797:
                        return (T) new PrivacyDotViewController((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (StatusBarContentInsetsProvider) this.tvSysUIComponentImpl.statusBarContentInsetsProvider.get(), (SystemStatusAnimationScheduler) this.tvSysUIComponentImpl.provideSystemStatusAnimationSchedulerProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get(), this.tvSysUIComponentImpl.privacyLogger());
                    case 798:
                        return (T) new AnimationUtils();
                    case 799:
                        return (T) SamsungServicesModule_ProvideNavbarBgHandlerFactory.provideNavbarBgHandler();
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get8() {
                int i = 0;
                switch (this.id) {
                    case 800:
                        return (T) new GlobalActionsComponent((CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (ExtensionController) this.tvSysUIComponentImpl.extensionControllerImplProvider.get(), this.tvSysUIComponentImpl.globalActionsImplProvider, (StatusBarKeyguardViewManager) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get());
                    case 801:
                        return (T) new GlobalActionsImpl(this.tvGlobalRootComponent.context, (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.globalActionsDialogLiteProvider), (BlurUtils) this.tvSysUIComponentImpl.blurUtilsProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get());
                    case 802:
                        return (T) new GlobalActionsDialogLite(this.tvGlobalRootComponent.context, (GlobalActions.GlobalActionsManager) this.tvSysUIComponentImpl.globalActionsComponentProvider.get(), (AudioManager) this.tvGlobalRootComponent.provideAudioManagerProvider.get(), (IDreamManager) this.tvGlobalRootComponent.provideIDreamManagerProvider.get(), (DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (TelephonyListenerManager) this.tvSysUIComponentImpl.telephonyListenerManagerProvider.get(), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (VibratorHelper) this.tvSysUIComponentImpl.vibratorHelperProvider.get(), this.tvGlobalRootComponent.mainResources(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (TrustManager) this.tvGlobalRootComponent.provideTrustManagerProvider.get(), (IActivityManager) this.tvGlobalRootComponent.provideIActivityManagerProvider.get(), (TelecomManager) this.tvGlobalRootComponent.provideTelecomManagerProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (SysuiColorExtractor) this.tvSysUIComponentImpl.sysuiColorExtractorProvider.get(), (IStatusBarService) this.tvGlobalRootComponent.provideIStatusBarServiceProvider.get(), (LightBarController) this.tvSysUIComponentImpl.lightBarControllerProvider.get(), (NotificationShadeWindowController) this.tvSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (IWindowManager) this.tvGlobalRootComponent.provideIWindowManagerProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (RingerModeTracker) this.tvSysUIComponentImpl.ringerModeTrackerImplProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), (Optional) this.tvSysUIComponentImpl.optionalOfCentralSurfacesProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DialogLaunchAnimator) this.tvSysUIComponentImpl.provideDialogLaunchAnimatorProvider.get());
                    case VpnErrorValues.ERROR_STORING_PROXY_PASSWORD /* 803 */:
                        return (T) new SPluginDependencyProvider((SPluginManager) this.tvSysUIComponentImpl.provideSPluginManagerProvider.get());
                    case VpnErrorValues.ERROR_INVALID_PROXY_CONFIGURATION /* 804 */:
                        return (T) new FaceWidgetPluginControllerImpl((FaceWidgetNotificationController) this.tvSysUIComponentImpl.faceWidgetNotificationControllerWrapperProvider.get(), (PluginFaceWidgetManager) this.tvSysUIComponentImpl.pluginFaceWidgetManagerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case VpnErrorValues.ERROR_INVALID_IPV6_CONFIGURATION /* 805 */:
                        return (T) new QSClockBellTower(this.tvGlobalRootComponent.context, (QSClockBellAlternateCalendarUtil) this.tvSysUIComponentImpl.qSClockBellAlternateCalendarUtilProvider.get(), (SlimIndicatorViewMediator) this.tvSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (ScreenLifecycle) this.tvGlobalRootComponent.screenLifecycleProvider.get(), (BootAnimationFinishedCache) this.tvSysUIComponentImpl.bootAnimationFinishedCacheImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get());
                    case 806:
                        return (T) new QSClockBellAlternateCalendarUtil(this.tvGlobalRootComponent.context, GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get());
                    case 807:
                        return (T) new SecPanelBlockExpandingHelper((CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (NavigationBarController) this.tvSysUIComponentImpl.navigationBarControllerProvider.get(), (StatusBarWindowController) this.tvSysUIComponentImpl.statusBarWindowControllerProvider.get(), (KnoxStateMonitor) this.tvSysUIComponentImpl.providesKnoxStateMonitorProvider.get(), (KeyguardTouchAnimator) this.tvSysUIComponentImpl.keyguardTouchAnimatorProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 808:
                        return (T) new KeyguardTouchAnimator(this.tvGlobalRootComponent.context, (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardTouchDymLockInjector) this.tvSysUIComponentImpl.keyguardTouchDymLockInjectorProvider.get(), (KeyguardTouchLoggingInjector) this.tvSysUIComponentImpl.keyguardTouchLoggingInjectorProvider.get(), (KeyguardTouchSecurityInjector) this.tvSysUIComponentImpl.keyguardTouchSecurityInjectorProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardEditModeController) this.tvSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get(), (KeyguardWallpaper) this.tvSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), (SecRotationWatcher) this.tvSysUIComponentImpl.secRotationWatcherProvider.get());
                    case 809:
                        return (T) new KeyguardTouchDymLockInjector((PluginLockMediator) this.tvSysUIComponentImpl.pluginLockMediatorImplProvider.get());
                    case 810:
                        return (T) new KeyguardTouchLoggingInjector();
                    case 811:
                        return (T) new KeyguardTouchSecurityInjector((KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (FingerprintManager) this.tvGlobalRootComponent.providesFingerprintManagerProvider.get());
                    case 812:
                        DependencyProvider dependencyProvider = this.tvSysUIComponentImpl.dependencyProvider;
                        Context context = this.tvGlobalRootComponent.context;
                        BroadcastDispatcher broadcastDispatcher = (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get();
                        dependencyProvider.getClass();
                        return (T) new QsResetSettingsManager(context, broadcastDispatcher);
                    case 813:
                        return (T) new SystemUIIndexMediator(this.tvGlobalRootComponent.context);
                    case 814:
                        return (T) new NotificationColorPicker(this.tvGlobalRootComponent.context);
                    case 815:
                        return (T) new NotificationBackupRestoreManager();
                    case 816:
                        return (T) new QSBackupRestoreManager();
                    case 817:
                        return (T) new SimpleStatusBarIconController(this.tvGlobalRootComponent.context, (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 818:
                        return (T) new FullExpansionPanelNotiAlphaController((KeyguardTouchAnimator) this.tvSysUIComponentImpl.keyguardTouchAnimatorProvider.get(), (KeyguardEditModeController) this.tvSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get());
                    case 819:
                        return (T) new NotificationShelfManager((SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), this.tvGlobalRootComponent.context, (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 820:
                        return (T) new PanelScreenShotBufferLogger((LogBuffer) this.tvSysUIComponentImpl.providePanelScreenShotLogBufferProvider.get());
                    case 821:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(15, "PanelScreenShotLog", true);
                    case 822:
                        return (T) new NotiCinemaLogger();
                    case 823:
                        return (T) new ShelfToolTipManager(this.tvGlobalRootComponent.context, (NotificationShelfManager) this.tvSysUIComponentImpl.notificationShelfManagerProvider.get(), (AmbientState) this.tvSysUIComponentImpl.ambientStateProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (SecPanelExpansionStateNotifier) this.tvSysUIComponentImpl.secPanelExpansionStateNotifierProvider.get(), (BootAnimationFinishedCache) this.tvSysUIComponentImpl.bootAnimationFinishedCacheImplProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 824:
                        return (T) new SubscreenMusicWidgetController(this.tvGlobalRootComponent.context, (SecMediaHost) this.tvSysUIComponentImpl.secMediaHostProvider.get());
                    case 825:
                        return (T) new SecMediaHost(this.tvGlobalRootComponent.context, (MediaDataManager) this.tvSysUIComponentImpl.mediaDataManagerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), this.tvSysUIComponentImpl.secMediaControlPanelProvider, this.tvSysUIComponentImpl.secMediaPlayerDataProvider, (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (MediaBluetoothHelper) this.tvSysUIComponentImpl.mediaBluetoothHelperProvider.get(), (MediaLogger) this.tvSysUIComponentImpl.providesMediaLoggerProvider.get(), (SubScreenManager) this.tvSysUIComponentImpl.subScreenManagerProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get());
                    case 826:
                        return (T) new SecMediaControlPanel(this.tvGlobalRootComponent.context, (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), this.tvSysUIComponentImpl.secSeekBarViewModel(), (MediaOutputHelper) this.tvSysUIComponentImpl.mediaOutputHelperProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (SubScreenManager) this.tvSysUIComponentImpl.subScreenManagerProvider.get(), (FaceWidgetColorSchemeControllerWrapper) this.tvSysUIComponentImpl.faceWidgetColorSchemeControllerWrapperProvider.get(), (MediaLogger) this.tvSysUIComponentImpl.providesMediaLoggerProvider.get(), (SecQSPanelResourcePicker) this.tvSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (TunerService) this.tvSysUIComponentImpl.tunerServiceImplProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get());
                    case 827:
                        DelayableExecutor delayableExecutor = (DelayableExecutor) this.tvSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get();
                        Long l = SysUIConcurrencyModule.BG_SLOW_DISPATCH_THRESHOLD;
                        return (T) new RepeatableExecutorImpl(delayableExecutor);
                    case 828:
                        return (T) new MediaOutputHelper((SecMediaHost) this.tvSysUIComponentImpl.secMediaHostProvider.get());
                    case 829:
                        DependencyProvider dependencyProvider2 = this.tvSysUIComponentImpl.dependencyProvider;
                        MediaLogWriter mediaLogWriter = this.tvSysUIComponentImpl.mediaLogWriter();
                        dependencyProvider2.getClass();
                        return (T) new MediaLoggerImpl(mediaLogWriter);
                    case 830:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "MediaLog", true);
                    case 831:
                        return (T) new SecMediaPlayerData();
                    case 832:
                        return (T) new MediaBluetoothHelper(this.tvGlobalRootComponent.context);
                    case 833:
                        return (T) MediaModule_ProvidesMediaMuteAwaitConnectionCliFactory.providesMediaMuteAwaitConnectionCli((MediaFlags) this.tvSysUIComponentImpl.mediaFlagsProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.mediaMuteAwaitConnectionCliProvider));
                    case 834:
                        return (T) new MediaMuteAwaitConnectionCli((CommandRegistry) this.tvSysUIComponentImpl.commandRegistryProvider.get(), this.tvGlobalRootComponent.context);
                    case 835:
                        return (T) new BroadcastDispatcherStartable((BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 836:
                        return (T) new BouncerMessageAuditLogger((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (BouncerMessageRepository) this.tvSysUIComponentImpl.bouncerMessageRepositoryImplProvider.get(), (BouncerMessageInteractor) this.tvSysUIComponentImpl.bouncerMessageInteractorProvider.get());
                    case 837:
                        return (T) new BouncerMessageRepositoryImpl((TrustRepository) this.tvSysUIComponentImpl.trustRepositoryImplProvider.get(), (BiometricSettingsRepository) this.tvSysUIComponentImpl.biometricSettingsRepositoryImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (BouncerMessageFactory) this.tvSysUIComponentImpl.bouncerMessageFactoryProvider.get(), (UserRepository) this.tvSysUIComponentImpl.userRepositoryImplProvider.get(), (DeviceEntryFingerprintAuthRepository) this.tvSysUIComponentImpl.deviceEntryFingerprintAuthRepositoryImplProvider.get());
                    case 838:
                        return (T) new BouncerMessageFactory((KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardSecurityModel) this.tvSysUIComponentImpl.keyguardSecurityModelProvider.get());
                    case 839:
                        return (T) new BouncerMessageInteractor((BouncerMessageRepository) this.tvSysUIComponentImpl.bouncerMessageRepositoryImplProvider.get(), (BouncerMessageFactory) this.tvSysUIComponentImpl.bouncerMessageFactoryProvider.get(), (UserRepository) this.tvSysUIComponentImpl.userRepositoryImplProvider.get(), (CountDownTimerUtil) this.tvSysUIComponentImpl.countDownTimerUtilProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 840:
                        return (T) new CountDownTimerUtil();
                    case 841:
                        return (T) new KeyguardTransitionCoreStartable(this.tvSysUIComponentImpl.setOfTransitionInteractor(), (KeyguardTransitionAuditLogger) this.tvSysUIComponentImpl.keyguardTransitionAuditLoggerProvider.get());
                    case 842:
                        return (T) new FromPrimaryBouncerTransitionInteractor((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardTransitionRepository) this.tvSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardSecurityModel) this.tvSysUIComponentImpl.keyguardSecurityModelProvider.get());
                    case 843:
                        return (T) new FromLockscreenTransitionInteractor((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get(), (ShadeRepository) this.tvSysUIComponentImpl.shadeRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardTransitionRepository) this.tvSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get());
                    case 844:
                        return (T) new FromAodTransitionInteractor((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardTransitionRepository) this.tvSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get());
                    case 845:
                        return (T) new FromGoneTransitionInteractor((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardTransitionRepository) this.tvSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get());
                    case 846:
                        return (T) new FromOccludedTransitionInteractor((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardTransitionRepository) this.tvSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get());
                    case 847:
                        return (T) new FromDozingTransitionInteractor((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardTransitionRepository) this.tvSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get());
                    case 848:
                        return (T) new FromAlternateBouncerTransitionInteractor((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardTransitionRepository) this.tvSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get());
                    case 849:
                        return (T) new KeyguardTransitionAuditLogger((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get(), this.tvSysUIComponentImpl.keyguardLogger());
                    case 850:
                        return (T) new ResourceTrimmer((KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), new GlobalWindowManager(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 851:
                        return (T) new FeatureFlagsReleaseStartable((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 852:
                        return (T) new GarbageMonitor.Service(this.tvGlobalRootComponent.context, (GarbageMonitor) this.tvSysUIComponentImpl.garbageMonitorProvider.get());
                    case 853:
                        return (T) new MotionToolStartable(this.tvSysUIComponentImpl.ddmHandleMotionTool());
                    case 854:
                        return (T) new QSFragmentStartable((FragmentService) this.tvSysUIComponentImpl.fragmentServiceProvider.get(), this.tvSysUIComponentImpl.qSFragmentProvider);
                    case 855:
                        return (T) new QSFragment((RemoteInputQuickSettingsDisabler) this.tvSysUIComponentImpl.remoteInputQuickSettingsDisablerProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), new QSFragmentComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, i), this.tvSysUIComponentImpl.qSFragmentDisableFlagsLogger(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), this.tvSysUIComponentImpl.qSLogger(), (FooterActionsController) this.tvSysUIComponentImpl.footerActionsControllerProvider.get(), (FooterActionsViewModel$Factory) this.tvSysUIComponentImpl.factoryProvider18.get(), (FooterActionsViewBinder) this.tvSysUIComponentImpl.footerActionsViewBinderProvider.get(), (LargeScreenShadeInterpolator) this.tvSysUIComponentImpl.largeScreenShadeInterpolatorImplProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (SecQSDetailDisplayer) this.tvSysUIComponentImpl.secQSDetailDisplayerProvider.get(), (ShadeHeaderController) this.tvSysUIComponentImpl.shadeHeaderControllerProvider.get());
                    case 856:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(10, "QSFragmentDisableFlagsLog", false);
                    case 857:
                        return (T) new DisableFlagsLogger();
                    case 858:
                        return (T) new FooterActionsController((FgsManagerController) this.tvSysUIComponentImpl.fgsManagerControllerImplProvider.get());
                    case 859:
                        return (T) new FooterActionsViewModel$Factory((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (FooterActionsInteractor) this.tvSysUIComponentImpl.footerActionsInteractorImplProvider.get(), this.tvSysUIComponentImpl.globalActionsDialogLiteProvider, ((Boolean) this.tvSysUIComponentImpl.isPMLiteEnabledProvider.get()).booleanValue());
                    case 860:
                        return (T) new FooterActionsInteractorImpl((ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (MetricsLogger) this.tvGlobalRootComponent.provideMetricsLoggerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get(), (QSSecurityFooterUtils) this.tvSysUIComponentImpl.qSSecurityFooterUtilsProvider.get(), (FgsManagerController) this.tvSysUIComponentImpl.fgsManagerControllerImplProvider.get(), (UserInteractor) this.tvSysUIComponentImpl.userInteractorProvider.get(), (SecurityRepository) this.tvSysUIComponentImpl.securityRepositoryImplProvider.get(), (ForegroundServicesRepository) this.tvSysUIComponentImpl.foregroundServicesRepositoryImplProvider.get(), (UserSwitcherRepository) this.tvSysUIComponentImpl.userSwitcherRepositoryImplProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get());
                    case 861:
                        return (T) QSSecurityFooterUtils_Factory.newInstance((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (SecurityController) this.tvSysUIComponentImpl.securityControllerImplProvider.get(), (Looper) this.tvSysUIComponentImpl.provideBgLooperProvider.get(), (DialogLaunchAnimator) this.tvSysUIComponentImpl.provideDialogLaunchAnimatorProvider.get());
                    case 862:
                        return (T) new SecurityRepositoryImpl((SecurityController) this.tvSysUIComponentImpl.securityControllerImplProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get());
                    case 863:
                        return (T) new ForegroundServicesRepositoryImpl((FgsManagerController) this.tvSysUIComponentImpl.fgsManagerControllerImplProvider.get());
                    case 864:
                        return (T) new UserSwitcherRepositoryImpl((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (UserSwitcherController) this.tvSysUIComponentImpl.userSwitcherControllerProvider.get(), (UserInfoController) this.tvSysUIComponentImpl.userInfoControllerImplProvider.get(), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl());
                    case 865:
                        return (T) Boolean.valueOf(QSFlagsModule.isPMLiteEnabled((FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (GlobalSettings) this.tvSysUIComponentImpl.globalSettingsImpl()));
                    case 866:
                        return (T) new FooterActionsViewBinder();
                    case 867:
                        return (T) new SecQSDetailDisplayer();
                    case 868:
                        return (T) new CarrierConfigCoreStartable((CarrierConfigRepository) this.tvSysUIComponentImpl.carrierConfigRepositoryProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case 869:
                        return (T) new UserSwitcherDialogCoordinator(DoubleCheck.lazy(this.tvGlobalRootComponent.provideApplicationContextProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.applicationScopeProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.falsingManagerProxyProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.broadcastSenderProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.provideDialogLaunchAnimatorProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.userInteractorProvider), this.tvSysUIComponentImpl.adapterProvider, DoubleCheck.lazy(this.tvGlobalRootComponent.provideUiEventLoggerProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.activityStarterImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.falsingCollectorImplProvider), DoubleCheck.lazy(this.tvSysUIComponentImpl.userSwitcherViewModelProvider));
                    case 870:
                        return (T) new UserDetailView.Adapter(this.tvGlobalRootComponent.context, (UserSwitcherController) this.tvSysUIComponentImpl.userSwitcherControllerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get());
                    case 871:
                        return (T) new UserSwitcherViewModel((UserInteractor) this.tvSysUIComponentImpl.userInteractorProvider.get(), (GuestUserInteractor) this.tvSysUIComponentImpl.guestUserInteractorProvider.get());
                    case 872:
                        return (T) new KeyboardUI(this.tvGlobalRootComponent.context, this.tvSysUIComponentImpl.provideLocalBluetoothControllerProvider, (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl());
                    case 873:
                        return (T) new PowerUI(this.tvGlobalRootComponent.context, (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.optionalOfCentralSurfacesProvider), (PowerUI.WarningsUI) this.tvSysUIComponentImpl.powerNotificationWarningsProvider.get(), (EnhancedEstimates) this.tvSysUIComponentImpl.enhancedEstimatesImplProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.pluginAODManagerProvider));
                    case 874:
                        return (T) new RingtonePlayer(this.tvGlobalRootComponent.context);
                    case 875:
                        return (T) new ShortcutKeyDispatcher(this.tvGlobalRootComponent.context, this.tvSysUIComponentImpl.setSplitScreenController);
                    case 876:
                        return (T) new SliceBroadcastRelayHandler(this.tvGlobalRootComponent.context, (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 877:
                        return (T) new StorageNotification(this.tvGlobalRootComponent.context, (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (NotificationManager) this.tvGlobalRootComponent.provideNotificationManagerProvider.get(), (StorageManager) this.tvGlobalRootComponent.provideStorageManagerProvider.get());
                    case 878:
                        return (T) new ThemeOverlayController(this.tvGlobalRootComponent.context, (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (Handler) this.tvSysUIComponentImpl.provideBgHandlerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (ThemeOverlayApplier) this.tvSysUIComponentImpl.themeOverlayApplierProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), this.tvGlobalRootComponent.wallpaperManager(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), this.tvGlobalRootComponent.mainResources(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (UiModeManager) this.tvGlobalRootComponent.provideUiModeManagerProvider.get());
                    case 879:
                        return (T) new ThemeOverlayApplier((OverlayManager) this.tvGlobalRootComponent.provideOverlayManagerProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), this.tvSysUIComponentImpl.namedString2(), this.tvSysUIComponentImpl.namedString3(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
                    case 880:
                        return (T) new ToastUI(this.tvGlobalRootComponent.context, (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (ToastFactory) this.tvSysUIComponentImpl.toastFactoryProvider.get(), this.tvSysUIComponentImpl.toastLogger());
                    case 881:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "ToastLog", true);
                    case 882:
                        return (T) new TvNotificationPanel(this.tvGlobalRootComponent.context, (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get());
                    case 883:
                        return (T) new TvPrivacyChipsController(this.tvGlobalRootComponent.context, (PrivacyItemController) this.tvSysUIComponentImpl.privacyItemControllerProvider.get(), (IWindowManager) this.tvGlobalRootComponent.provideIWindowManagerProvider.get());
                    case 884:
                        return (T) new TvStatusBar(this.tvGlobalRootComponent.context, (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), DoubleCheck.lazy(this.tvSysUIComponentImpl.assistManagerProvider));
                    case 885:
                        return (T) new VolumeUI(this.tvGlobalRootComponent.context, (VolumeDialogComponent) this.tvSysUIComponentImpl.volumeDialogComponentProvider.get());
                    case 886:
                        return (T) new VpnStatusObserver(this.tvGlobalRootComponent.context, (SecurityController) this.tvSysUIComponentImpl.securityControllerImplProvider.get());
                    case 887:
                        return (T) new WindowMagnification(this.tvGlobalRootComponent.context, (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (ModeSwitchesController) this.tvSysUIComponentImpl.modeSwitchesControllerProvider.get(), (SysUiState) this.tvSysUIComponentImpl.provideSysUiStateProvider.get(), (OverviewProxyService) this.tvSysUIComponentImpl.overviewProxyServiceProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get(), (DisplayManager) this.tvGlobalRootComponent.provideDisplayManagerProvider.get(), this.tvSysUIComponentImpl.accessibilityLogger());
                    case 888:
                        return (T) new ModeSwitchesController(this.tvGlobalRootComponent.context, (DisplayManager) this.tvGlobalRootComponent.provideDisplayManagerProvider.get());
                    case 889:
                        return (T) new WMShell(this.tvGlobalRootComponent.context, this.tvSysUIComponentImpl.setShell, this.tvSysUIComponentImpl.setPip, this.tvSysUIComponentImpl.setSplitScreen, this.tvSysUIComponentImpl.setOneHanded, this.tvSysUIComponentImpl.setDesktopMode, this.tvSysUIComponentImpl.setRecentTasks, (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (ScreenLifecycle) this.tvGlobalRootComponent.screenLifecycleProvider.get(), (SysUiState) this.tvSysUIComponentImpl.provideSysUiStateProvider.get(), (ProtoTracer) this.tvSysUIComponentImpl.protoTracerProvider.get(), (WakefulnessLifecycle) this.tvSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (DisplayTracker) this.tvSysUIComponentImpl.provideDisplayTrackerProvider.get(), this.tvSysUIComponentImpl.noteTaskInitializer(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), this.tvSysUIComponentImpl.setEnterSplitGestureHandler);
                    case 890:
                        return (T) new PrototypeCoreStartable((TileSpecRepository) this.tvSysUIComponentImpl.tileSpecSettingsRepositoryProvider.get(), (AutoAddRepository) this.tvSysUIComponentImpl.autoAddSettingRepositoryProvider.get(), (UserRepository) this.tvSysUIComponentImpl.userRepositoryImplProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (CommandRegistry) this.tvSysUIComponentImpl.commandRegistryProvider.get());
                    case 891:
                        return (T) new AutoAddSettingRepository((SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get());
                    case 892:
                        return (T) new NotificationChannels(this.tvGlobalRootComponent.context);
                    case 893:
                        return (T) new HomeSoundEffectController(this.tvGlobalRootComponent.context, (AudioManager) this.tvGlobalRootComponent.provideAudioManagerProvider.get(), (TaskStackChangeListeners) this.tvSysUIComponentImpl.provideTaskStackChangeListenersProvider.get(), (ActivityManagerWrapper) this.tvSysUIComponentImpl.provideActivityManagerWrapperProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get());
                    case 894:
                        return (T) new InstantAppNotifier(this.tvGlobalRootComponent.context, (CommandQueue) this.tvSysUIComponentImpl.provideCommandQueueProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvGlobalRootComponent.provideUiBackgroundExecutorProvider.get(), (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get());
                    case 895:
                        return (T) new SafeUIStatusBarWindowController(this.tvGlobalRootComponent.context);
                    case 896:
                        T t = (T) ((ClockManager) this.tvSysUIComponentImpl.clockManagerProvider.get()).mPreviewClocks.mClockInfo;
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 897:
                        return (T) new PlankComponent(((Boolean) this.tvSysUIComponentImpl.providesPlankFeatureEnabledProvider.get()).booleanValue(), DoubleCheck.lazy(this.tvSysUIComponentImpl.protocolManagerImplProvider));
                    case 898:
                        PlankModule.Companion.getClass();
                        return (T) Boolean.valueOf(Rune.SYSUI_TEST_FOR_PLANK);
                    case 899:
                        return (T) new ProtocolManagerImpl((TestInputMonitor) this.tvSysUIComponentImpl.provideTestInputMonitorProvider.get(), (Protocol) this.tvSysUIComponentImpl.provideProtocolProvider.get(), (ApiLogger) this.tvSysUIComponentImpl.provideApiLoggerProvider.get(), (PlankDispatcherFactory) this.tvSysUIComponentImpl.providePlankDispatcherFactoryProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get9() {
                switch (this.id) {
                    case 900:
                        Context context = this.tvGlobalRootComponent.context;
                        PlankModule.Companion.getClass();
                        return (T) new TestInputMonitor(context);
                    case 901:
                        PlankModule.Companion.getClass();
                        return (T) new Protocol();
                    case VpnErrorValues.ERROR_USB_TETHERING_FAILED /* 902 */:
                        PlankModule.Companion.getClass();
                        T t = (T) ApiLogger.INSTANCE;
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 903:
                        PlankModule.Companion.getClass();
                        return (T) new PlankDispatcherFactory();
                    case 904:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(20, "UnseenNotifLog", false);
                    case 905:
                        return (T) new SeenNotificationsProviderImpl();
                    case 906:
                        return (T) new LaunchFullScreenIntentProvider();
                    case 907:
                        return (T) new NotifUiAdjustmentProvider((Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (SectionStyleProvider) this.tvSysUIComponentImpl.sectionStyleProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (HighPriorityProvider) this.tvSysUIComponentImpl.highPriorityProvider.get());
                    case 908:
                        return (T) new RemoteInputNotificationRebuilder(this.tvGlobalRootComponent.context);
                    case 909:
                        return (T) new ShadeEventCoordinator((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), this.tvSysUIComponentImpl.shadeEventCoordinatorLogger());
                    case 910:
                        return (T) new LockscreenSmartspaceController(this.tvGlobalRootComponent.context, (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (SmartspaceManager) this.tvGlobalRootComponent.provideSmartspaceManagerProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (SystemClock) this.tvSysUIComponentImpl.bindSystemClockProvider.get(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get(), (ContentResolver) this.tvGlobalRootComponent.provideContentResolverProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (DeviceProvisionedController) this.tvSysUIComponentImpl.providesDeviceProvisionedControllerProvider.get(), (KeyguardBypassController) this.tvSysUIComponentImpl.keyguardBypassControllerProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (Execution) this.tvGlobalRootComponent.provideExecutionProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
                    case 911:
                        return (T) Boolean.TRUE;
                    case 912:
                        return (T) new WearableManager(this.tvGlobalRootComponent.context, (SoundCraftSettings) this.tvSysUIComponentImpl.soundCraftSettingsProvider.get());
                    case 913:
                        return (T) new SoundCraftSettings(this.tvGlobalRootComponent.context);
                    case 914:
                        return (T) new RoutineManager(this.tvGlobalRootComponent.context);
                    case 915:
                        return (T) new BluetoothDeviceManager(this.tvGlobalRootComponent.context, (MediaBluetoothHelper) this.tvSysUIComponentImpl.mediaBluetoothHelperProvider.get());
                    case 916:
                        return (T) new ModelProvider(this.tvGlobalRootComponent.context, (SoundCraftSettings) this.tvSysUIComponentImpl.soundCraftSettingsProvider.get());
                    case 917:
                        return (T) new NoiseControlBoxViewModel(this.tvGlobalRootComponent.context, (ModelProvider) this.tvSysUIComponentImpl.modelProvider.get());
                    case 918:
                        return (T) new AudioEffectBoxViewModel(this.tvGlobalRootComponent.context, (ModelProvider) this.tvSysUIComponentImpl.modelProvider.get(), this.tvSysUIComponentImpl.audioPlaybackManager());
                    case 919:
                        return (T) new WearableLinkBoxViewModel(this.tvGlobalRootComponent.context, (ModelProvider) this.tvSysUIComponentImpl.modelProvider.get(), (BluetoothDeviceManager) this.tvSysUIComponentImpl.bluetoothDeviceManagerProvider.get(), (LocalBluetoothManager) this.tvSysUIComponentImpl.provideLocalBluetoothControllerProvider.get());
                    case 920:
                        return (T) new AudioEffectHeaderViewModel(this.tvGlobalRootComponent.context, (ModelProvider) this.tvSysUIComponentImpl.modelProvider.get());
                    case 921:
                        return (T) new SpatialAudioViewModel(this.tvGlobalRootComponent.context, (ModelProvider) this.tvSysUIComponentImpl.modelProvider.get(), (WearableManager) this.tvSysUIComponentImpl.wearableManagerProvider.get(), (RoutineManager) this.tvSysUIComponentImpl.routineManagerProvider.get());
                    case 922:
                        return (T) new EqualizerViewModel(this.tvGlobalRootComponent.context, (ModelProvider) this.tvSysUIComponentImpl.modelProvider.get(), (WearableManager) this.tvSysUIComponentImpl.wearableManagerProvider.get(), (RoutineManager) this.tvSysUIComponentImpl.routineManagerProvider.get());
                    case 923:
                        return (T) new VoiceBoostViewModel(this.tvGlobalRootComponent.context, (ModelProvider) this.tvSysUIComponentImpl.modelProvider.get(), (WearableManager) this.tvSysUIComponentImpl.wearableManagerProvider.get(), (RoutineManager) this.tvSysUIComponentImpl.routineManagerProvider.get());
                    case 924:
                        return (T) new VolumeNormalizationViewModel(this.tvGlobalRootComponent.context, (ModelProvider) this.tvSysUIComponentImpl.modelProvider.get(), (WearableManager) this.tvSysUIComponentImpl.wearableManagerProvider.get(), (RoutineManager) this.tvSysUIComponentImpl.routineManagerProvider.get());
                    case 925:
                        return (T) new ActiveNoiseCancelingViewModel(this.tvGlobalRootComponent.context, (ModelProvider) this.tvSysUIComponentImpl.modelProvider.get(), (BluetoothDeviceManager) this.tvSysUIComponentImpl.bluetoothDeviceManagerProvider.get());
                    case 926:
                        return (T) new AdaptiveViewModel(this.tvGlobalRootComponent.context, (ModelProvider) this.tvSysUIComponentImpl.modelProvider.get(), (BluetoothDeviceManager) this.tvSysUIComponentImpl.bluetoothDeviceManagerProvider.get());
                    case 927:
                        return (T) new AmbientSoundViewModel(this.tvGlobalRootComponent.context, (ModelProvider) this.tvSysUIComponentImpl.modelProvider.get(), (BluetoothDeviceManager) this.tvSysUIComponentImpl.bluetoothDeviceManagerProvider.get());
                    case 928:
                        return (T) new NoiseCancelingLevelViewModel(this.tvGlobalRootComponent.context, (ModelProvider) this.tvSysUIComponentImpl.modelProvider.get(), (WearableManager) this.tvSysUIComponentImpl.wearableManagerProvider.get());
                    case 929:
                        return (T) new NoiseControlEffectBoxViewModel(this.tvGlobalRootComponent.context, (ModelProvider) this.tvSysUIComponentImpl.modelProvider.get(), (BluetoothDeviceManager) this.tvSysUIComponentImpl.bluetoothDeviceManagerProvider.get());
                    case 930:
                        return (T) new NoiseControlOffViewModel(this.tvGlobalRootComponent.context, (ModelProvider) this.tvSysUIComponentImpl.modelProvider.get(), (BluetoothDeviceManager) this.tvSysUIComponentImpl.bluetoothDeviceManagerProvider.get());
                    case 931:
                        return (T) new NoiseCancelingSwitchBarViewModel(this.tvGlobalRootComponent.context, (ModelProvider) this.tvSysUIComponentImpl.modelProvider.get(), (BluetoothDeviceManager) this.tvSysUIComponentImpl.bluetoothDeviceManagerProvider.get());
                    case 932:
                        return (T) new RoutineTestViewModel(this.tvGlobalRootComponent.context, (RoutineManager) this.tvSysUIComponentImpl.routineManagerProvider.get(), (ModelProvider) this.tvSysUIComponentImpl.modelProvider.get(), this.tvSysUIComponentImpl.audioPlaybackManager());
                    case 933:
                        return (T) ClockRegistryModule_GetClockRegistryFactory.getClockRegistry((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (PluginManager) this.tvGlobalRootComponent.providesPluginManagerProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.mainDispatcherProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), this.tvGlobalRootComponent.mainResources(), (LayoutInflater) this.tvGlobalRootComponent.providerLayoutInflaterProvider.get(), (LogBuffer) this.tvSysUIComponentImpl.provideKeyguardClockLogProvider.get());
                    case 934:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "KeyguardClockLog", true);
                    case 935:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "KeyguardSmallClockLog", true);
                    case 936:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "KeyguardLargeClockLog", true);
                    case 937:
                        DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
                        return (T) new DcmMascotViewContainer(daggerTvGlobalRootComponent.context, (DelayableExecutor) daggerTvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (Executor) this.tvSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (StatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (NotificationLockscreenUserManager) this.tvSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (KeyguardUpdateMonitor) this.tvSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get());
                    case 938:
                        NotificationShadeWindowView notificationShadeWindowView = (NotificationShadeWindowView) this.tvSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
                        ShadeModule.Companion.getClass();
                        return (T) ((NotificationStackScrollLayout) notificationShadeWindowView.findViewById(R.id.notification_stack_scroller));
                    case 939:
                        return (T) new AccessibilityInteractor(this.tvSysUIComponentImpl.accessibilityRepository());
                    case 940:
                        SysuiStatusBarStateController sysuiStatusBarStateController = (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get();
                        LockscreenShadeTransitionController lockscreenShadeTransitionController = (LockscreenShadeTransitionController) this.tvSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get();
                        MediaDataManager mediaDataManager = (MediaDataManager) this.tvSysUIComponentImpl.mediaDataManagerProvider.get();
                        DaggerTvGlobalRootComponent daggerTvGlobalRootComponent2 = this.tvGlobalRootComponent;
                        Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
                        return (T) new NotificationStackSizeCalculator(sysuiStatusBarStateController, lockscreenShadeTransitionController, mediaDataManager, daggerTvGlobalRootComponent2.mainResources());
                    case 941:
                        return (T) new NotificationTargetsHelper((FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 942:
                        NotificationShadeWindowView notificationShadeWindowView2 = (NotificationShadeWindowView) this.tvSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
                        ShadeModule.Companion.getClass();
                        return (T) ((NotificationPanelView) notificationShadeWindowView2.findViewById(R.id.notification_panel));
                    case 943:
                        return (T) new TapAgainViewController((TapAgainView) this.tvSysUIComponentImpl.providesTapAgainViewProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), 1200L);
                    case 944:
                        NotificationPanelView notificationPanelView = (NotificationPanelView) this.tvSysUIComponentImpl.providesNotificationPanelViewProvider.get();
                        ShadeModule.Companion.getClass();
                        return (T) ((TapAgainView) notificationPanelView.findViewById(R.id.shade_falsing_tap_again));
                    case 945:
                        return (T) new QsFrameTranslateImpl((CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get());
                    case 946:
                        return (T) new ShadeTransitionController((ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (ShadeExpansionStateManager) this.tvSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), this.tvGlobalRootComponent.context, (ScrimShadeTransitionController) this.tvSysUIComponentImpl.scrimShadeTransitionControllerProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 947:
                        return (T) new ScrimShadeTransitionController((ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (ScrimController) this.tvSysUIComponentImpl.scrimControllerProvider.get(), this.tvGlobalRootComponent.mainResources(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (HeadsUpManager) this.tvSysUIComponentImpl.provideHeadsUpManagerPhoneProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get());
                    case 948:
                        KeyguardInteractor keyguardInteractor = (KeyguardInteractor) this.tvSysUIComponentImpl.keyguardInteractorProvider.get();
                        KeyguardQuickAffordanceRegistryImpl keyguardQuickAffordanceRegistryImpl = this.tvSysUIComponentImpl.keyguardQuickAffordanceRegistryImpl();
                        LockPatternUtils lockPatternUtils = (LockPatternUtils) this.tvGlobalRootComponent.provideLockPatternUtilsProvider.get();
                        KeyguardStateController keyguardStateController = (KeyguardStateController) this.tvSysUIComponentImpl.keyguardStateControllerImplProvider.get();
                        UserTracker userTracker = (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get();
                        ActivityStarter activityStarter = (ActivityStarter) this.tvSysUIComponentImpl.activityStarterImplProvider.get();
                        FeatureFlags featureFlags = (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get();
                        Lazy lazy = DoubleCheck.lazy(this.tvSysUIComponentImpl.keyguardQuickAffordanceRepositoryProvider);
                        DialogLaunchAnimator dialogLaunchAnimator = (DialogLaunchAnimator) this.tvSysUIComponentImpl.provideDialogLaunchAnimatorProvider.get();
                        this.tvSysUIComponentImpl.keyguardModule.getClass();
                        return (T) new KeyguardQuickAffordanceInteractor(keyguardInteractor, keyguardQuickAffordanceRegistryImpl, lockPatternUtils, keyguardStateController, userTracker, activityStarter, featureFlags, lazy, dialogLaunchAnimator, new KeyguardQuickAffordancesMetricsLoggerImpl(), (DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (DockManager) this.tvSysUIComponentImpl.dockManagerImplProvider.get(), (BiometricSettingsRepository) this.tvSysUIComponentImpl.biometricSettingsRepositoryImplProvider.get(), (CoroutineDispatcher) this.tvSysUIComponentImpl.bgDispatcherProvider.get(), (Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (KeyguardShortcutManager) this.tvSysUIComponentImpl.keyguardShortcutManagerProvider.get());
                    case 949:
                        return (T) new KeyguardBottomAreaInteractor((KeyguardRepository) this.tvSysUIComponentImpl.keyguardRepositoryImplProvider.get());
                    case 950:
                        return (T) new KeyguardLongPressViewModel((KeyguardLongPressInteractor) this.tvSysUIComponentImpl.keyguardLongPressInteractorProvider.get());
                    case 951:
                        return (T) new KeyguardLongPressInteractor((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardRepository) this.tvSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (BroadcastDispatcher) this.tvSysUIComponentImpl.broadcastDispatcherProvider.get(), (AccessibilityManagerWrapper) this.tvSysUIComponentImpl.accessibilityManagerWrapperProvider.get());
                    case 952:
                        return (T) new OccludedToLockscreenTransitionViewModel((KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get());
                    case 953:
                        return (T) new LockscreenToDreamingTransitionViewModel((KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get());
                    case 954:
                        return (T) new GoneToDreamingTransitionViewModel((KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get());
                    case 955:
                        return (T) new LockscreenToOccludedTransitionViewModel((KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get());
                    case 956:
                        return (T) new MultiShadeInteractor((CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (MultiShadeRepository) this.tvSysUIComponentImpl.multiShadeRepositoryProvider.get(), (MultiShadeInputProxy) this.tvGlobalRootComponent.multiShadeInputProxyProvider.get());
                    case 957:
                        return (T) new MultiShadeRepository((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (MultiShadeInputProxy) this.tvGlobalRootComponent.multiShadeInputProxyProvider.get());
                    case 958:
                        return (T) new QsStatusEventLog(this.tvGlobalRootComponent.context, (QSTileHost) this.tvSysUIComponentImpl.qSTileHostProvider.get());
                    case 959:
                        return (T) new NotificationInsetsImpl();
                    case 960:
                        return (T) new MultiShadeMotionEventInteractor((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get(), (MultiShadeInteractor) this.tvSysUIComponentImpl.multiShadeInteractorProvider.get(), (FeatureFlags) this.tvSysUIComponentImpl.featureFlagsReleaseProvider.get(), (KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (ShadeController) this.tvSysUIComponentImpl.shadeControllerImplProvider.get());
                    case 961:
                        return (T) new SystemBarAttributesListener((CentralSurfaces) this.tvSysUIComponentImpl.centralSurfacesImplProvider.get(), (LetterboxAppearanceCalculator) this.tvSysUIComponentImpl.letterboxAppearanceCalculatorProvider.get(), (SysuiStatusBarStateController) this.tvSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (LightBarController) this.tvSysUIComponentImpl.lightBarControllerProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (SystemStatusAnimationScheduler) this.tvSysUIComponentImpl.provideSystemStatusAnimationSchedulerProvider.get());
                    case 962:
                        return (T) new StatusBarLocationPublisher();
                    case 963:
                        return (T) new StatusBarIconController.DarkIconManager.Factory((StatusBarPipelineFlags) this.tvSysUIComponentImpl.statusBarPipelineFlagsProvider.get(), (WifiUiAdapter) this.tvSysUIComponentImpl.wifiUiAdapterProvider.get(), (MobileContextProvider) this.tvSysUIComponentImpl.mobileContextProvider.get(), (MobileUiAdapter) this.tvSysUIComponentImpl.mobileUiAdapterProvider.get(), this.tvSysUIComponentImpl.bTTetherUiAdapter(), (DarkIconDispatcher) this.tvSysUIComponentImpl.darkIconDispatcherImplProvider.get());
                    case 964:
                        return (T) new CollapsedStatusBarViewModelImpl((KeyguardTransitionInteractor) this.tvSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case 965:
                        return (T) new CollapsedStatusBarViewBinderImpl();
                    case 966:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "CollapsedSbFragmentLog", true);
                    case 967:
                        return (T) new ViewUtil();
                    case 968:
                        return (T) new IndicatorGardenViewTreeLogHelper();
                    case 969:
                        return (T) new KnoxStatusBarControlInteractor((KnoxStatusBarControlRepository) this.tvSysUIComponentImpl.knoxStatusBarControlRepositoryImplProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case 970:
                        return (T) new KnoxStatusBarControlRepositoryImpl((KnoxStateMonitor) this.tvSysUIComponentImpl.providesKnoxStateMonitorProvider.get(), (CoroutineScope) this.tvSysUIComponentImpl.applicationScopeProvider.get());
                    case 971:
                        return (T) new TwoPhoneModeIconController(this.tvGlobalRootComponent.context, (CarrierInfraMediator) this.tvSysUIComponentImpl.fakeCarrierInfraMediatorImplProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (SettingsHelper) this.tvSysUIComponentImpl.settingsHelperProvider.get(), (DarkIconDispatcher) this.tvSysUIComponentImpl.darkIconDispatcherImplProvider.get(), (SlimIndicatorViewMediator) this.tvSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (ConfigurationController) this.tvSysUIComponentImpl.configurationControllerImplProvider.get(), (IndicatorScaleGardener) this.tvSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (UserTracker) this.tvSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 972:
                        T t2 = (T) Optional.empty();
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 973:
                        return (T) new DreamOverlayStatusBarItemsProvider((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get());
                    case 974:
                        return (T) ((LogBufferFactory) this.tvSysUIComponentImpl.logBufferFactoryProvider.get()).create(IKnoxCustomManager.Stub.TRANSACTION_addDexURLShortcutExtend, "DreamLog", true);
                    case 975:
                        return (T) new BouncerlessScrimController((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (PowerManager) this.tvGlobalRootComponent.providePowerManagerProvider.get());
                    case 976:
                        TvSysUIComponentImpl tvSysUIComponentImpl = this.tvSysUIComponentImpl;
                        return (T) new UserSwitchDialogController(tvSysUIComponentImpl.adapterProvider, (ActivityStarter) tvSysUIComponentImpl.activityStarterImplProvider.get(), (FalsingManager) this.tvSysUIComponentImpl.falsingManagerProxyProvider.get(), (DialogLaunchAnimator) this.tvSysUIComponentImpl.provideDialogLaunchAnimatorProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ TvSysUIComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, DependencyProvider dependencyProvider, LeakModule leakModule, NightDisplayListenerModule nightDisplayListenerModule, SharedLibraryModule sharedLibraryModule, KeyguardModule keyguardModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional optional, Optional optional2, Optional optional3, Optional optional4, Optional optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional optional6, Optional optional7, Optional optional8, Optional optional9, Optional optional10, Optional optional11, Optional optional12, Optional optional13, int i) {
            this(daggerTvGlobalRootComponent, dependencyProvider, leakModule, nightDisplayListenerModule, sharedLibraryModule, keyguardModule, mediaProjectionDevicePolicyModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
        }

        public final AccessibilityLogger accessibilityLogger() {
            return new AccessibilityLogger((UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get());
        }

        public final AccessibilityRepository accessibilityRepository() {
            AccessibilityManager accessibilityManager = (AccessibilityManager) this.tvGlobalRootComponent.provideAccessibilityManagerProvider.get();
            AccessibilityRepositoryModule.INSTANCE.getClass();
            AccessibilityRepository.Companion.getClass();
            return new AccessibilityRepositoryImpl(accessibilityManager);
        }

        public final ActionClickLogger actionClickLogger() {
            return new ActionClickLogger((LogBuffer) this.provideNotifInteractionLogBufferProvider.get());
        }

        public final ActivityLauncher activityLauncher() {
            return new ActivityLauncher((DesktopManager) this.provideDesktopManagerProvider.get(), (DisplayLifecycle) this.displayLifecycleProvider.get(), (KeyguardManager) this.tvGlobalRootComponent.provideKeyguardManagerProvider.get());
        }

        public final NodeController alertingHeaderNodeController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesAlertingHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            NodeController nodeController = sectionHeaderControllerSubcomponent.getNodeController();
            Preconditions.checkNotNullFromProvides(nodeController);
            return nodeController;
        }

        public final SectionHeaderController alertingHeaderSectionHeaderController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesAlertingHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            SectionHeaderController headerController = sectionHeaderControllerSubcomponent.getHeaderController();
            Preconditions.checkNotNullFromProvides(headerController);
            return headerController;
        }

        public final Object appClipsViewModelFactory() {
            return new AppClipsViewModel.Factory((AppClipsCrossProcessHelper) this.appClipsCrossProcessHelperProvider.get(), imageExporter(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get());
        }

        public final AppControlActionInteractor appControlActionInteractor() {
            return new AppControlActionInteractor(this.tvGlobalRootComponent.context, (AppController) this.appControllerProvider.get(), new MWBixbyController());
        }

        public final AsyncActivityLauncher asyncActivityLauncher() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            return new AsyncActivityLauncher(daggerTvGlobalRootComponent.context, (IActivityTaskManager) daggerTvGlobalRootComponent.provideIActivityTaskManagerProvider.get(), (Executor) this.tvGlobalRootComponent.provideUiBackgroundExecutorProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get());
        }

        public final AudioPlaybackManager audioPlaybackManager() {
            return new AudioPlaybackManager(this.tvGlobalRootComponent.context);
        }

        public final AuthDialogPanelInteractionDetector authDialogPanelInteractionDetector() {
            return new AuthDialogPanelInteractionDetector((ShadeExpansionStateManager) this.shadeExpansionStateManagerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get());
        }

        public final AuthorizedPanelsRepositoryImpl authorizedPanelsRepositoryImpl() {
            return new AuthorizedPanelsRepositoryImpl(this.tvGlobalRootComponent.context, (UserFileManager) this.userFileManagerImplProvider.get(), (UserTracker) this.provideUserTrackerProvider.get(), (FeatureFlags) this.featureFlagsReleaseProvider.get());
        }

        public final BTTetherUiAdapter bTTetherUiAdapter() {
            return new BTTetherUiAdapter((StatusBarIconController) this.statusBarIconControllerImplProvider.get(), (ConnectivityRepository) this.connectivityRepositoryImplProvider.get());
        }

        public final BackPanelController.Factory backPanelControllerFactory() {
            return new BackPanelController.Factory((WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get(), (ViewConfiguration) this.tvGlobalRootComponent.provideViewConfigurationProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (VibratorHelper) this.vibratorHelperProvider.get(), (ConfigurationController) this.configurationControllerImplProvider.get(), (LatencyTracker) this.tvGlobalRootComponent.provideLatencyTrackerProvider.get());
        }

        public final MessageRouter backgroundMessageRouter() {
            DelayableExecutor delayableExecutor = (DelayableExecutor) this.provideBackgroundDelayableExecutorProvider.get();
            Long l = SysUIConcurrencyModule.BG_SLOW_DISPATCH_THRESHOLD;
            return new MessageRouterImpl(delayableExecutor);
        }

        public final BatteryStateNotifier batteryStateNotifier() {
            return new BatteryStateNotifier((BatteryController) this.provideBatteryControllerProvider.get(), (NotificationManager) this.tvGlobalRootComponent.provideNotificationManagerProvider.get(), (DelayableExecutor) this.provideDelayableExecutorProvider.get(), this.tvGlobalRootComponent.context);
        }

        public final BluetoothAdapterWrapper bluetoothAdapterWrapper() {
            return new BluetoothAdapterWrapper(this.tvGlobalRootComponent.context);
        }

        public final BouncerScrimController bouncerScrimController() {
            return new BouncerScrimController((StatusBarKeyguardViewManager) this.provideStatusBarKeyguardViewManagerProvider.get());
        }

        public final BrightnessSliderController.Factory brightnessSliderControllerFactory() {
            return new BrightnessSliderController.Factory((FalsingManager) this.falsingManagerProxyProvider.get());
        }

        public final BroadcastDispatcherLogger broadcastDispatcherLogger() {
            return new BroadcastDispatcherLogger((LogBuffer) this.provideBroadcastDispatcherLogBufferProvider.get());
        }

        public final BroadcastReceiverManager broadcastReceiverManager() {
            return new BroadcastReceiverManager(this.tvGlobalRootComponent.context, (LogWrapper) this.provideVolumeLogWrapperProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get());
        }

        public final ThresholdSensorImpl.BuilderFactory builderFactory() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return new ThresholdSensorImpl.BuilderFactory(daggerTvGlobalRootComponent.mainResources(), (AsyncSensorManager) this.asyncSensorManagerProvider.get(), (Execution) this.tvGlobalRootComponent.provideExecutionProvider.get());
        }

        public final CameraIntentsWrapper cameraIntentsWrapper() {
            return new CameraIntentsWrapper(this.tvGlobalRootComponent.context);
        }

        public final CarrierTextManager.Builder carrierTextManagerBuilder() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            return new CarrierTextManager.Builder(daggerTvGlobalRootComponent.context, daggerTvGlobalRootComponent.mainResources(), (WifiRepository) this.wifiRepositorySwitcherProvider.get(), (TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get(), (TelephonyListenerManager) this.telephonyListenerManagerProvider.get(), (CarrierTextUtil) this.carrierTextUtilProvider.get(), (WakefulnessLifecycle) this.wakefulnessLifecycleProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get(), (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get(), (SubscriptionsOrder) this.subscriptionsOrderProvider.get(), carrierTextManagerLogger(), (GlobalSettings) globalSettingsImpl(), (WifiTextManager) this.wifiTextManagerProvider.get());
        }

        public final CarrierTextManagerLogger carrierTextManagerLogger() {
            return new CarrierTextManagerLogger((LogBuffer) this.provideCarrierTextManagerLogProvider.get());
        }

        public final ConditionalRestarter conditionalRestarter() {
            SystemExitRestarter systemExitRestarter = systemExitRestarter();
            Set<ConditionalRestarter.Condition> ofCondition = setOfCondition();
            FlagsModule.Companion.getClass();
            return new ConditionalRestarter(systemExitRestarter, ofCondition, 30L, (CoroutineScope) this.applicationScopeProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get());
        }

        public final ControlsFileLoader controlsFileLoader() {
            return new ControlsFileLoader(new ControlsLogger());
        }

        public final ControlsUtil controlsUtil() {
            return new ControlsUtil((KeyguardStateController) this.keyguardStateControllerImplProvider.get());
        }

        public final ConversationNotificationProcessor conversationNotificationProcessor() {
            return new ConversationNotificationProcessor((LauncherApps) this.tvGlobalRootComponent.provideLauncherAppsProvider.get(), (ConversationNotificationManager) this.conversationNotificationManagerProvider.get());
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Dependency createDependency() {
            return (Dependency) this.dependencyProvider2.get();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final DumpManager createDumpManager() {
            return (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get();
        }

        public final InjectionInflationController.ViewInstanceCreator.Factory createViewInstanceCreatorFactory() {
            return new ViewInstanceCreatorFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 0);
        }

        public final CustomTileAddedRepository customTileAddedRepository() {
            QSTileHost qSTileHost = (QSTileHost) this.qSTileHostProvider.get();
            QSHostModule.Companion.getClass();
            Flags flags = Flags.INSTANCE;
            return qSTileHost;
        }

        public final CustomTileStatePersister customTileStatePersister() {
            return new CustomTileStatePersister(this.tvGlobalRootComponent.context);
        }

        public final DateFormatUtil dateFormatUtil() {
            return new DateFormatUtil(this.tvGlobalRootComponent.context, (UserTracker) this.provideUserTrackerProvider.get());
        }

        public final DdmHandleMotionTool ddmHandleMotionTool() {
            return MotionToolModule_Companion_ProvideDdmHandleMotionToolFactory.provideDdmHandleMotionTool(motionToolManager());
        }

        public final DelayedWakeLock.Builder delayedWakeLockBuilder() {
            return new DelayedWakeLock.Builder(this.tvGlobalRootComponent.context, wakeLockLogger());
        }

        public final DemoMobileConnectionsRepository demoMobileConnectionsRepository() {
            return new DemoMobileConnectionsRepository((DemoModeMobileConnectionDataSource) this.demoModeMobileConnectionDataSourceProvider.get(), (DemoModeWifiDataSource) this.demoModeWifiDataSourceProvider.get(), (CoroutineScope) this.applicationScopeProvider.get(), this.tvGlobalRootComponent.context, (TableLogBufferFactory) this.tableLogBufferFactoryProvider.get());
        }

        public final DemoWifiRepository demoWifiRepository() {
            return new DemoWifiRepository((DemoModeWifiDataSource) this.demoModeWifiDataSourceProvider.get(), (CoroutineScope) this.applicationScopeProvider.get());
        }

        public final DeviceBasedSatelliteViewModel deviceBasedSatelliteViewModel() {
            return new DeviceBasedSatelliteViewModel((DeviceBasedSatelliteInteractor) this.deviceBasedSatelliteInteractorProvider.get(), (CoroutineScope) this.applicationScopeProvider.get(), (AirplaneModeRepository) this.airplaneModeRepositoryImplProvider.get(), (LogBuffer) this.provideOemSatelliteInputLogProvider.get());
        }

        public final DeviceControlActionInteractor deviceControlActionInteractor() {
            return new DeviceControlActionInteractor(this.tvGlobalRootComponent.context, (DeviceController) this.deviceControllerProvider.get());
        }

        public final Object deviceStateHelper() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            return new KeyguardDisplayManager.DeviceStateHelper(daggerTvGlobalRootComponent.context, (DeviceStateManager) daggerTvGlobalRootComponent.provideDeviceStateManagerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get());
        }

        public final DeviceStateManagerWrapper deviceStateManagerWrapper() {
            return new DeviceStateManagerWrapper(this.tvGlobalRootComponent.context);
        }

        public final DeviceStateRotationLockSettingControllerLogger deviceStateRotationLockSettingControllerLogger() {
            return new DeviceStateRotationLockSettingControllerLogger((LogBuffer) this.provideDeviceStateAutoRotationLogBufferProvider.get(), this.tvGlobalRootComponent.context);
        }

        public final Object diagonalClassifier() {
            return new DiagonalClassifier((FalsingDataProvider) this.falsingDataProvider.get(), (DeviceConfigProxy) this.deviceConfigProxyProvider.get());
        }

        public final DisplayManagerWrapper displayManagerWrapper() {
            return new DisplayManagerWrapper(this.tvGlobalRootComponent.context, (LogWrapper) this.provideVolumeLogWrapperProvider.get());
        }

        public final Object distanceClassifier() {
            return new DistanceClassifier((FalsingDataProvider) this.falsingDataProvider.get(), (DeviceConfigProxy) this.deviceConfigProxyProvider.get());
        }

        public final DoubleTapClassifier doubleTapClassifier() {
            return new DoubleTapClassifier((FalsingDataProvider) this.falsingDataProvider.get(), singleTapClassifier(), namedFloat3(), 1200L);
        }

        public final DozeLogger dozeLogger() {
            return new DozeLogger((LogBuffer) this.provideDozeLogBufferProvider.get());
        }

        public final DummyMobileConnectionRepository.Factory dummyMobileConnectionRepositoryFactory() {
            return new DummyMobileConnectionRepository.Factory((BroadcastDispatcher) this.broadcastDispatcherProvider.get(), (CoroutineScope) this.applicationScopeProvider.get(), (MobileInputLogger) this.mobileInputLoggerProvider.get(), (CarrierInfraMediator) this.fakeCarrierInfraMediatorImplProvider.get(), (TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get());
        }

        public final DumpHandler dumpHandler() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            return new DumpHandler(daggerTvGlobalRootComponent.context, (DumpManager) daggerTvGlobalRootComponent.dumpManagerProvider.get(), (LogBufferEulogizer) this.logBufferEulogizerProvider.get(), getStartables(), (UncaughtExceptionPreHandlerManager) this.tvGlobalRootComponent.uncaughtExceptionPreHandlerManagerProvider.get());
        }

        public final DumpUtils dumpUtils() {
            return new DumpUtils(this.tvGlobalRootComponent.context);
        }

        public final NotificationLogger.ExpansionStateLogger expansionStateLogger() {
            return new NotificationLogger.ExpansionStateLogger((Executor) this.tvGlobalRootComponent.provideUiBackgroundExecutorProvider.get());
        }

        public final FullMobileConnectionRepository.Factory fullMobileConnectionRepositoryFactory() {
            return new FullMobileConnectionRepository.Factory((CoroutineScope) this.applicationScopeProvider.get(), (TableLogBufferFactory) this.tableLogBufferFactoryProvider.get(), mobileConnectionRepositoryImplFactory(), (CarrierMergedConnectionRepository.Factory) this.factoryProvider4.get(), dummyMobileConnectionRepositoryFactory());
        }

        public final GestureHintAnimator.Factory gestureHintAnimatorFactory() {
            return new GestureHintAnimator.Factory((LogWrapper) this.providesNavBarLoggerProvider.get());
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final ConfigurationController getConfigurationController() {
            return (ConfigurationController) this.configurationControllerImplProvider.get();
        }

        public final ContextComponentHelper getContextComponentHelper() {
            return (ContextComponentHelper) this.contextComponentResolverProvider.get();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Optional<FoldStateLogger> getFoldStateLogger() {
            return (Optional) this.tvGlobalRootComponent.providesFoldStateLoggerProvider.get();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Optional<FoldStateLoggingProvider> getFoldStateLoggingProvider() {
            return (Optional) this.tvGlobalRootComponent.providesFoldStateLoggingProvider.get();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final InitController getInitController() {
            return (InitController) this.initControllerProvider.get();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Optional<MediaMuteAwaitConnectionCli> getMediaMuteAwaitConnectionCli() {
            return (Optional) this.providesMediaMuteAwaitConnectionCliProvider.get();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Optional<NaturalRotationUnfoldProgressProvider> getNaturalRotationUnfoldProgressProvider() {
            return (Optional) this.tvGlobalRootComponent.provideNaturalRotationProgressProvider.get();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Optional<NearbyMediaDevicesManager> getNearbyMediaDevicesManager() {
            return (Optional) this.providesNearbyMediaDevicesManagerProvider.get();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Map<Class<?>, Provider> getPerUserStartables() {
            return Collections.singletonMap(NotificationChannels.class, this.notificationChannelsProvider);
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Map<Class<?>, Provider> getPostStartables() {
            return Collections.singletonMap(InstantAppNotifier.class, this.instantAppNotifierProvider);
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Map<Class<?>, Provider> getPreStartables() {
            return Collections.singletonMap(HomeSoundEffectController.class, this.homeSoundEffectControllerProvider);
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Map<Class<?>, Provider> getSafeUIStartables() {
            return Collections.singletonMap(SafeUIStatusBarWindowController.class, this.safeUIStatusBarWindowControllerProvider);
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Map<Class<?>, Provider> getStartables() {
            MapBuilder newMapBuilder = MapBuilder.newMapBuilder(34);
            newMapBuilder.contributions.put(KeyguardNotificationVisibilityProvider.class, this.keyguardNotificationVisibilityProviderImplProvider);
            newMapBuilder.contributions.put(BroadcastDispatcherStartable.class, this.broadcastDispatcherStartableProvider);
            newMapBuilder.contributions.put(BouncerMessageAuditLogger.class, this.bouncerMessageAuditLoggerProvider);
            newMapBuilder.contributions.put(SystemUIKeyguardFaceAuthInteractor.class, this.systemUIKeyguardFaceAuthInteractorProvider);
            newMapBuilder.contributions.put(KeyguardTransitionCoreStartable.class, this.keyguardTransitionCoreStartableProvider);
            newMapBuilder.contributions.put(ResourceTrimmer.class, this.resourceTrimmerProvider);
            newMapBuilder.contributions.put(FeatureFlagsReleaseStartable.class, this.featureFlagsReleaseStartableProvider);
            newMapBuilder.contributions.put(GarbageMonitor.class, this.serviceProvider);
            newMapBuilder.contributions.put(LetterboxBackgroundProvider.class, this.letterboxBackgroundProvider);
            newMapBuilder.contributions.put(MotionToolStartable.class, this.motionToolStartableProvider);
            newMapBuilder.contributions.put(QSFragmentStartable.class, this.qSFragmentStartableProvider);
            newMapBuilder.contributions.put(AuthRippleController.class, this.authRippleControllerProvider);
            newMapBuilder.contributions.put(MobileUiAdapter.class, this.mobileUiAdapterProvider);
            newMapBuilder.contributions.put(CarrierConfigCoreStartable.class, this.carrierConfigCoreStartableProvider);
            newMapBuilder.contributions.put(UserSwitcherDialogCoordinator.class, this.userSwitcherDialogCoordinatorProvider);
            newMapBuilder.contributions.put(GlobalActionsComponent.class, this.globalActionsComponentProvider);
            newMapBuilder.contributions.put(KeyboardUI.class, this.keyboardUIProvider);
            newMapBuilder.contributions.put(PowerUI.class, this.powerUIProvider);
            newMapBuilder.contributions.put(RingtonePlayer.class, this.ringtonePlayerProvider);
            newMapBuilder.contributions.put(ShortcutKeyDispatcher.class, this.shortcutKeyDispatcherProvider);
            newMapBuilder.contributions.put(SliceBroadcastRelayHandler.class, this.sliceBroadcastRelayHandlerProvider);
            newMapBuilder.contributions.put(StorageNotification.class, this.storageNotificationProvider);
            newMapBuilder.contributions.put(ThemeOverlayController.class, this.themeOverlayControllerProvider);
            newMapBuilder.contributions.put(ToastUI.class, this.toastUIProvider);
            newMapBuilder.contributions.put(TvNotificationHandler.class, this.provideTvNotificationHandlerProvider);
            newMapBuilder.contributions.put(TvNotificationPanel.class, this.tvNotificationPanelProvider);
            newMapBuilder.contributions.put(TvPrivacyChipsController.class, this.tvPrivacyChipsControllerProvider);
            newMapBuilder.contributions.put(TvStatusBar.class, this.tvStatusBarProvider);
            newMapBuilder.contributions.put(VolumeUI.class, this.volumeUIProvider);
            newMapBuilder.contributions.put(VpnStatusObserver.class, this.vpnStatusObserverProvider);
            newMapBuilder.contributions.put(WindowMagnification.class, this.windowMagnificationProvider);
            newMapBuilder.contributions.put(WMShell.class, this.wMShellProvider);
            newMapBuilder.contributions.put(UserFileManagerImpl.class, this.userFileManagerImplProvider);
            newMapBuilder.contributions.put(PrototypeCoreStartable.class, this.prototypeCoreStartableProvider);
            return newMapBuilder.build();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Optional<SysUIUnfoldComponent> getSysUIUnfoldComponent() {
            return (Optional) this.provideSysUIUnfoldComponentProvider.get();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final UnfoldLatencyTracker getUnfoldLatencyTracker() {
            return (UnfoldLatencyTracker) this.unfoldLatencyTrackerProvider.get();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Optional<UnfoldTransitionProgressForwarder> getUnfoldTransitionProgressForwarder() {
            return (Optional) this.tvGlobalRootComponent.provideProgressForwarderProvider.get();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Optional<UnfoldTransitionProgressProvider> getUnfoldTransitionProgressProvider() {
            return (Optional) this.tvGlobalRootComponent.unfoldTransitionProgressProvider.get();
        }

        public final Object globalSettingsImpl() {
            return new GlobalSettingsImpl((ContentResolver) this.tvGlobalRootComponent.provideContentResolverProvider.get(), (UserTracker) this.provideUserTrackerProvider.get());
        }

        public final GroupCoalescer groupCoalescer() {
            return new GroupCoalescer((DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), groupCoalescerLogger());
        }

        public final GroupCoalescerLogger groupCoalescerLogger() {
            return new GroupCoalescerLogger((LogBuffer) this.provideNotificationsLogBufferProvider.get());
        }

        public final GuestResetOrExitSessionReceiver guestResetOrExitSessionReceiver() {
            return new GuestResetOrExitSessionReceiver((UserTracker) this.provideUserTrackerProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get(), (GuestResetOrExitSessionReceiver.ResetSessionDialog.Factory) this.factoryProvider9.get(), (GuestResetOrExitSessionReceiver.ExitSessionDialog.Factory) this.factoryProvider10.get());
        }

        public final GuestResumeSessionReceiver guestResumeSessionReceiver() {
            return new GuestResumeSessionReceiver((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (UserTracker) this.provideUserTrackerProvider.get(), (SecureSettings) secureSettingsImpl(), guestSessionNotification(), (GuestResumeSessionReceiver.ResetSessionDialog.Factory) this.factoryProvider8.get());
        }

        public final GuestSessionNotification guestSessionNotification() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            return new GuestSessionNotification(daggerTvGlobalRootComponent.context, (NotificationManager) daggerTvGlobalRootComponent.provideNotificationManagerProvider.get());
        }

        public final HeaderPrivacyIconsController headerPrivacyIconsController() {
            return new HeaderPrivacyIconsController((PrivacyItemController) this.privacyItemControllerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (OngoingPrivacyChip) this.providesOngoingPrivacyChipProvider.get(), (PrivacyDialogController) this.privacyDialogControllerProvider.get(), privacyLogger(), (StatusIconContainer) this.providesStatusIconContainerProvider.get(), (PermissionManager) this.tvGlobalRootComponent.providePermissionManagerProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (ActivityStarter) this.activityStarterImplProvider.get(), (AppOpsController) this.appOpsControllerImplProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get(), (SafetyCenterManager) this.tvGlobalRootComponent.provideSafetyCenterManagerProvider.get(), (DeviceProvisionedController) this.providesDeviceProvisionedControllerProvider.get());
        }

        public final HeadsUpManagerLogger headsUpManagerLogger() {
            return new HeadsUpManagerLogger((LogBuffer) this.provideNotificationHeadsUpLogBufferProvider.get());
        }

        public final HeadsUpViewBinderLogger headsUpViewBinderLogger() {
            return new HeadsUpViewBinderLogger((LogBuffer) this.provideNotificationHeadsUpLogBufferProvider.get());
        }

        public final IconBuilder iconBuilder() {
            return new IconBuilder(this.tvGlobalRootComponent.context);
        }

        public final ImageExporter imageExporter() {
            return new ImageExporter((ContentResolver) this.tvGlobalRootComponent.provideContentResolverProvider.get(), (FeatureFlags) this.featureFlagsReleaseProvider.get());
        }

        public final Object imageTileSet() {
            return new ImageTileSet(new Handler());
        }

        public final NodeController incomingHeaderNodeController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesIncomingHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            NodeController nodeController = sectionHeaderControllerSubcomponent.getNodeController();
            Preconditions.checkNotNullFromProvides(nodeController);
            return nodeController;
        }

        public final SectionHeaderController incomingHeaderSectionHeaderController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesIncomingHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            SectionHeaderController headerController = sectionHeaderControllerSubcomponent.getHeaderController();
            Preconditions.checkNotNullFromProvides(headerController);
            return headerController;
        }

        public final IndicatorGardenAlgorithmCenterCutout indicatorGardenAlgorithmCenterCutout() {
            return new IndicatorGardenAlgorithmCenterCutout(this.tvGlobalRootComponent.context, (IndicatorGardenInputProperties) this.indicatorGardenInputPropertiesProvider.get());
        }

        public final IndicatorGardenAlgorithmNoCutout indicatorGardenAlgorithmNoCutout() {
            return new IndicatorGardenAlgorithmNoCutout(this.tvGlobalRootComponent.context, (IndicatorGardenInputProperties) this.indicatorGardenInputPropertiesProvider.get());
        }

        public final IndicatorGardenAlgorithmSidelingCenterCutout indicatorGardenAlgorithmSidelingCenterCutout() {
            return new IndicatorGardenAlgorithmSidelingCenterCutout(this.tvGlobalRootComponent.context, (IndicatorGardenInputProperties) this.indicatorGardenInputPropertiesProvider.get(), (IndicatorCutoutUtil) this.indicatorCutoutUtilProvider.get());
        }

        public final IndicatorLogger indicatorLogger() {
            return new IndicatorLogger((LogBuffer) this.provideIndicatorLogBufferProvider.get());
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final /* bridge */ /* synthetic */ void init() {
            super.init();
        }

        public final void initialize(DependencyProvider dependencyProvider, LeakModule leakModule, NightDisplayListenerModule nightDisplayListenerModule, SharedLibraryModule sharedLibraryModule, KeyguardModule keyguardModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.bootCompleteCacheImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 0));
            this.configurationControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 1));
            this.provideBgLooperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 7));
            this.provideBgHandlerProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 6);
            this.provideUserTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 5));
            this.provideBroadcastRunningLooperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 9));
            this.provideBroadcastRunningExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 10));
            this.provideLogcatEchoTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 13));
            this.logBufferFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 12));
            this.provideBroadcastDispatcherLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 11));
            this.broadcastDispatcherProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 8));
            this.provideDemoModeControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 4));
            this.providesLeakDetectorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 15));
            this.tunerServiceImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 14));
            this.tunerActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 3);
            this.foregroundServicesDialogProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 16);
            this.workLockActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 17);
            this.provideDisplayTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 19));
            this.deviceConfigProxyProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 21));
            this.enhancedEstimatesImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 25));
            this.provideBatteryControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 24));
            this.dockManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 26));
            this.falsingDataProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 23));
            SwitchingProvider switchingProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 28);
            this.systemClockImplProvider = switchingProvider;
            this.bindSystemClockProvider = DoubleCheck.provider(switchingProvider);
            this.historyTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 27));
            this.provideBinderCallMonitorLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 33));
            this.binderCallMonitorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 32));
            this.settingsHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 34));
            this.shadeExpansionStateManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 36));
            this.mainDispatcherProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 39));
            this.applicationScopeProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 38));
            this.bgDispatcherProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 40));
            this.looperSlowLogControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 37));
            this.statusBarStateControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 35));
            this.provideKeyguardUnlockAnimationExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 44));
            this.wakefulnessLifecycleProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 47));
            this.systemPropertiesHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 51));
            this.provideBackgroundExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 53));
            this.bindsReaderProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 52));
            this.featureFlagsReleaseProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 50));
            this.provideNotificationsLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 54));
            this.filesProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 56));
            this.logBufferEulogizerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 55));
            this.notificationDismissibilityProviderImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 57));
            this.notifCollectionProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 49));
            this.notifPipelineChoreographerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 59));
            this.notificationClickNotifierProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 61));
            this.notificationInteractionTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 60));
            this.shadeListBuilderProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 58));
            this.renderStageManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 62));
            this.notifPipelineProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 48));
            this.keyguardSysDumpTriggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 46));
            this.mdmOverlayContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 63));
            this.keyguardFoldControllerConfigImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 66));
            this.keyguardFoldControllerDependencyImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 67));
            this.protoTracerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 72));
            this.commandRegistryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 73));
            this.provideCommandQueueProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 71));
            this.provideLSShadeTransitionControllerBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 76));
            this.lockscreenGestureLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 77));
            this.notifLiveDataStoreImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 81));
            this.notificationVisibilityProviderImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 80));
            this.deviceProvisionedControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 86));
            this.providesDeviceProvisionedControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 85));
            this.providesLayoutProviderContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 88));
            this.providesBandAidPackFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 89));
            this.provideNavBarServiceLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 92));
            this.providesNavBarLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 91));
            this.interactorFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 90));
            this.storeLogUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 93));
            this.provideSysUiStateProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 94));
            this.providesNavBarStoreProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 87));
            this.navigationModeControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 84));
            this.accessibilityButtonModeObserverProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 96));
            this.accessibilityButtonTargetsObserverProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 97));
            this.keyguardTransitionRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 103));
            this.keyguardTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 102));
            this.keyguardVisibilityMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 101));
            this.engineeringModeManagerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 104));
            this.lockscreenNotificationManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 106));
            this.provideKeyguardClockPositionAlgorithmProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 108));
            this.faceWidgetContainerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 109));
            this.faceWidgetKeyguardStatusCallbackWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 110));
            this.faceWidgetKeyguardUpdateMonitorWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 111));
            this.faceWidgetDisplayLifeCycleWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 112));
            this.faceWidgetWakefulnessLifecycleWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 113));
            this.providesKnoxStateMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 115));
            this.faceWidgetKnoxStateMonitorWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 114));
            this.faceWidgetLockPatternUtilsWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 116));
            this.provideSPluginManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 121));
            this.alwaysOnDisplayPolicyProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 123));
            this.provideSysUIUnfoldComponentProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 125));
            this.providesStatusBarWindowViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 130));
            this.indicatorGardenInputPropertiesProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 135));
            this.indicatorCutoutUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 134));
            this.indicatorGardenAlgorithmFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 133));
            this.indicatorGardenPresenterProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 132));
            this.indicatorScaleGardenerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 136));
            this.statusBarContentInsetsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 131));
        }

        public final void initialize10(DependencyProvider dependencyProvider, LeakModule leakModule, NightDisplayListenerModule nightDisplayListenerModule, SharedLibraryModule sharedLibraryModule, KeyguardModule keyguardModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.instantAppNotifierProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 894));
            this.safeUIStatusBarWindowControllerProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 895);
            this.provideClockInfoListProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 896);
            this.providesPlankFeatureEnabledProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 898));
            this.provideTestInputMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 900));
            this.provideProtocolProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 901));
            this.provideApiLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VpnErrorValues.ERROR_USB_TETHERING_FAILED));
            this.providePlankDispatcherFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 903));
            this.protocolManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 899));
            this.plankComponentProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 897));
            this.provideUnseenNotificationLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 904));
            this.seenNotificationsProviderImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 905));
            this.launchFullScreenIntentProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 906));
            this.notifUiAdjustmentProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 907));
            this.remoteInputNotificationRebuilderProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 908));
            this.shadeEventCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 909));
            this.lockscreenSmartspaceControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 910));
            this.provideAllowNotificationLongPressProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 911));
            this.soundCraftSettingsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 913));
            this.wearableManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 912));
            this.routineManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 914));
            this.bluetoothDeviceManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 915));
            this.modelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 916));
            this.noiseControlBoxViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 917));
            this.audioEffectBoxViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 918));
            this.wearableLinkBoxViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 919));
            this.audioEffectHeaderViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 920));
            this.spatialAudioViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 921));
            this.equalizerViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 922));
            this.voiceBoostViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 923));
            this.volumeNormalizationViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 924));
            this.activeNoiseCancelingViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 925));
            this.adaptiveViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 926));
            this.ambientSoundViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 927));
            this.noiseCancelingLevelViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 928));
            this.noiseControlEffectBoxViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 929));
            this.noiseControlOffViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 930));
            this.noiseCancelingSwitchBarViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 931));
            this.routineTestViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 932));
            this.provideKeyguardClockLogProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 934));
            this.getClockRegistryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 933));
            this.provideKeyguardSmallClockLogProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 935));
            this.provideKeyguardLargeClockLogProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 936));
            this.dcmMascotViewContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 937));
            this.providesNotificationStackScrollLayoutProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 938));
            this.accessibilityInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 939));
            this.notificationStackSizeCalculatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 940));
            this.notificationTargetsHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 941));
            this.providesNotificationPanelViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 942));
            this.providesTapAgainViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 944));
            this.tapAgainViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 943));
            this.qsFrameTranslateImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 945));
            this.scrimShadeTransitionControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 947));
            this.shadeTransitionControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 946));
            this.keyguardQuickAffordanceInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 948));
            this.keyguardBottomAreaInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 949));
            this.keyguardLongPressInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 951));
            this.keyguardLongPressViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 950));
            this.occludedToLockscreenTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 952));
            this.lockscreenToDreamingTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 953));
            this.goneToDreamingTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 954));
            this.lockscreenToOccludedTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 955));
            this.multiShadeRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 957));
            this.multiShadeInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 956));
            this.qsStatusEventLogProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 958));
            this.notificationInsetsImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 959));
            this.multiShadeMotionEventInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 960));
            this.systemBarAttributesListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 961));
            this.statusBarLocationPublisherProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 962));
            this.factoryProvider19 = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 963));
            this.collapsedStatusBarViewModelImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 964));
            this.collapsedStatusBarViewBinderImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 965));
            this.provideCollapsedSbFragmentLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 966));
            this.viewUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 967));
            this.indicatorGardenViewTreeLogHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 968));
            this.knoxStatusBarControlRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 970));
            this.knoxStatusBarControlInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 969));
            this.twoPhoneModeIconControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 971));
            this.providesDreamOverlayNotificationCountProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 972));
            this.dreamOverlayStatusBarItemsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 973));
            this.provideDreamLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 974));
            this.bouncerlessScrimControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 975));
            this.userSwitchDialogControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 976));
        }

        public final void initialize2(DependencyProvider dependencyProvider, LeakModule leakModule, NightDisplayListenerModule nightDisplayListenerModule, SharedLibraryModule sharedLibraryModule, KeyguardModule keyguardModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.factoryProvider = SingleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 138));
            this.fragmentServiceProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 137));
            this.keyguardSecurityModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 140));
            this.provideDesktopSystemUiBinderProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 141));
            this.provideIndicatorLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 142));
            this.optionalOfCentralSurfacesProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 146);
            this.provideAssistUtilsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 148));
            this.phoneStateMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 149));
            this.assistLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 151));
            this.defaultUiControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 150));
            this.assistManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 147));
            this.provideDozeLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 154));
            this.dozeLogProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 153));
            this.provideNotificationHeadsUpLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 156));
            this.provideGroupMembershipManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 157));
            this.visualStabilityProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 158));
            this.accessibilityManagerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 159));
            this.provideHeadsUpManagerPhoneProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 155));
            this.factoryProvider2 = SingleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 163));
            this.samsungStatusBarGrayIconHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 164));
            this.darkIconDispatcherImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 162));
            this.lightBarControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 161));
            this.provideWakeLockLogProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 165));
            this.providesNotificationShadeWindowViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 170));
            this.providesSecLockIconViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 169));
            this.vibratorHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 171));
            this.provideKeyguardLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 173));
            this.providesLightRevealScrimProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 174));
            this.providesAuthRippleViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 175));
            this.authRippleControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 172));
            this.dozeTransitionListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 178));
            this.dreamOverlayCallbackControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 179));
            this.keyguardRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 177));
            this.tableLogBufferFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 182));
            this.provideBouncerLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 181));
            this.keyguardBouncerRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 180));
            this.keyguardInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 176));
            this.bouncerViewImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 184));
            this.primaryBouncerCallbackInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 185));
            this.asyncSensorManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 188));
            this.devicePostureControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 189));
            this.postureDependentProximitySensorProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 187);
            this.proximitySensorImplProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 190);
            this.falsingCollectorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 186));
            this.dismissCallbackRegistryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 191));
            this.userRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 193));
            this.provideKeyguardUpdateMonitorLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 195));
            this.trustRepositoryLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 194));
            this.trustRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 192));
            this.primaryBouncerInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 183));
            this.providesViewMediatorCallbackProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 196);
            this.pluginLockDataImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 197));
            this.pluginLockStarManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 198));
            this.provideWallpaperLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 201));
            this.pluginLockUtilsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 202));
            this.provideBackgroundDelayableExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 204));
            this.subScreenManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 203));
            this.wallpaperChangeNotifierProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 205));
            this.coverWallpaperControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 200));
            this.provideKeyguardEditModeControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 199));
            this.secLockIconViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 168));
            this.dozeScrimControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 206));
            this.provideBiometricLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 208));
            this.biometricUnlockLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 207));
            this.mediaArtworkProcessorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 210));
            this.providesMediaTimeoutListenerLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_removeAutoCallNumber));
            this.mediaTimeoutLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_addAutoCallNumber));
            this.mediaFlagsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getAutoCallNumberDelay));
            this.mediaTimeoutListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getWifiState));
            this.provideMediaBrowserBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setAutoCallPickupState));
            this.resumeMediaBrowserLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getAutoCallNumberList));
            this.mediaResumeListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getAutoCallNumberAnswerMode));
            this.provideLocalBluetoothControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getAutoCallPickupState));
            this.provideMediaMuteAwaitLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 222));
            this.mediaMuteAwaitLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 221));
            this.mediaMuteAwaitConnectionManagerFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 220));
            this.broadcastSenderProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getLockScreenShortcut));
            this.mediaUiEventLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setUsbConnectionType));
            this.mediaDataManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getWifiHotspotEnabledState));
            this.sysuiColorExtractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getUsbConnectionType));
            this.provideNotificationMediaManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getVibrationIntensity));
            this.biometricUnlockControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 167));
            this.keyguardSurfaceControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getUsbConnectionTypeInternal));
            this.keyguardSecLegacyUnlockAnimationControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 166));
            this.primaryBouncerToGoneTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setForceAutoShutDownState));
            this.largeScreenShadeInterpolatorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getForceAutoShutDownState));
            this.indicatorCoverManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_removeShortcut));
            this.pluginLockInstancePolicyProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_removeWidget));
            this.pluginLockDelegateAppProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_deleteHomeScreenPage));
            this.pluginLockDelegateSysUiProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setAppsButtonState));
            this.pluginLockManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_addWidget));
            this.coverHostImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 230));
            this.secLsScrimControlHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setBrightness));
            this.scrimControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 160));
            this.provideNotificationLockScreenLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_removeFavoriteApp));
            this.notificationWakeUpCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setFavoriteApp));
            this.notificationRoundnessManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getFavoriteAppsMaxCount));
            this.pulseExpansionHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getAppsButtonState));
            this.notificationListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setZeroPageState));
            this.sectionStyleProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getZeroPageState));
        }

        public final void initialize3(DependencyProvider dependencyProvider, LeakModule leakModule, NightDisplayListenerModule nightDisplayListenerModule, SharedLibraryModule sharedLibraryModule, KeyguardModule keyguardModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.ongoingCallLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getHardKeyIntentMode));
            this.provideSwipeUpLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_addDexShortcut));
            this.swipeUpGestureLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getHomeScreenMode));
            this.swipeStatusBarAwayGestureHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setHomeScreenMode));
            this.ongoingCallFlagsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_removeDexShortcut));
            this.provideOngoingCallControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setHardKeyIntentMode));
            this.notificationIconAreaControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getFavoriteApp));
            this.dozeInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_addDexURLShortcut));
            this.configurationRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_removeDexURLShortcut));
            this.burnInInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_addDexURLShortcutExtend));
            this.provideQSTileListLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 258));
            this.retailModeSettingsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 259));
            this.tileSpecSettingsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 257));
            this.installedTilesComponentRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 260));
            this.userFileManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 262));
            this.customTileAddedSharedPrefsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 261));
            this.provideStatusBarIconListProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 266));
            this.statusBarPipelineFlagsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 267));
            this.provideOemSatelliteInputLogProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 272));
            this.deviceBasedSatelliteRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 271));
            this.connectivitySlotsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_clearForcedDisplaySizeDensity));
            this.provideSharedConnectivityTableLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setForceSingleView));
            this.connectivityInputLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_startSmartView));
            this.connectivityRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setForcedDisplaySizeDensity));
            this.provideMobileInputLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setBootingAnimationSub));
            this.mobileInputLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getForceSingleView));
            this.provideMobileSummaryLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setShuttingDownAnimationSub));
            this.provideAirplaneTableLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_registerSystemUiCallback));
            this.airplaneModeRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getLoadingLogoPath));
            this.disabledWifiRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_stayInDexForegroundMode));
            this.provideWifiInputLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getBsoh));
            this.wifiInputLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setAsoc));
            this.provideWifiTableLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getBsohUnbiased));
            this.factoryProvider3 = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getAsoc));
            this.provideRealWifiRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_stopProKioskMode));
            this.demoModeWifiDataSourceProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_startTcpDump));
            this.wifiRepositorySwitcherProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_startProKioskMode));
            this.carrierConfigRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_stopTcpDump));
            this.systemPropertiesWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getApplicationRestrictionsInternal));
            this.commonUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setApplicationRestrictionsInternal));
            this.mobileSignalUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setKeyedAppStatesReport));
            this.carrierInfoUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_migrateApplicationRestrictions));
            this.mobileDataUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 300));
            this.mobileRoamingUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 301));
            this.carrierInfraMediatorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_readFile));
            this.fakeCarrierInfraMediatorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getTcpDump));
            this.simCardInfoUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 302));
            this.imsRegStateUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 303));
            this.factoryProvider4 = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 304));
            this.mobileConnectionsRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getHardKeyIntentBroadcast));
            this.demoModeMobileConnectionDataSourceProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 305));
            this.mobileRepositorySwitcherProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setHardKeyIntentBroadcastInternal));
            this.carrierConfigTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VpnErrorValues.ERROR_STOPPING_CONNECTION_BEFORE_REMOVING));
            this.userSetupRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VpnErrorValues.ERROR_VPN_RECREATE_PROFILE_FAIL));
            this.subscriptionsOrderProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 308));
            this.mobileIconsInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setHardKeyIntentBroadcastExternal));
            this.deviceBasedSatelliteInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 270));
            this.deviceBasedSatelliteBindableIconProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 269));
            this.bindableIconsRegistryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 268));
            this.statusBarIconControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 265));
            this.panelInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 309));
            this.tileServicesProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 264));
            this.factoryProvider5 = SingleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 263));
            this.currentTilesInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 256));
            this.builderProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 310));
            this.qSHostAdapterProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 255));
            this.qsEventLoggerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 312));
            this.provideQuickSettingsLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 313));
            this.provideQSConfigLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 314));
            this.builderProvider2 = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 311);
            this.colorInversionTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 315);
            this.provideIndividualSensorPrivacyControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 319));
            this.appOpsControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 318));
            this.locationControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 317));
            this.nightDisplayTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 316);
            this.isReduceBrightColorsAvailableProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 321));
            this.reduceBrightColorsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 322));
            this.reduceBrightColorsTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 320);
            this.oneHandedModeTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 323);
            this.colorCorrectionTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 324);
            this.dreamTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 325);
            this.devicePostureRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 330));
            this.biometricSettingsRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 329));
            this.deviceEntryFingerprintAuthRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, CustomDeviceManager.SOURCE_ADDRESS));
            this.alternateBouncerInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 328));
            this.provideAnimationFeatureFlagsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, CustomDeviceManager.DESTINATION_ADDRESS));
            this.provideDialogLaunchAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 327));
            this.fontScalingTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 326);
            this.colorAdjustmentTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 333);
            this.colorLensTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 334);
            this.highContrastFontTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 335);
            this.callbackHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 338));
            this.telephonyListenerManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 339));
            this.wifiPickerTrackerFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 341));
            this.provideAccessPointControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 340));
            this.mobileSignalControllerFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 342));
            this.toastFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 344));
            this.wifiStateWorkerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 345));
            this.internetDialogFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 343));
            this.provideStatusBarNetworkControllerBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 346));
        }

        public final void initialize4(DependencyProvider dependencyProvider, LeakModule leakModule, NightDisplayListenerModule nightDisplayListenerModule, SharedLibraryModule sharedLibraryModule, KeyguardModule keyguardModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.networkControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 337));
            this.wifiTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 336);
            this.providerBluetoothLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 350));
            this.bluetoothLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 349));
            this.bluetoothRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, QuantumSecurityInfo.QUANTUM_KEY_STATUS.KEY_STATUS_SUCCESS));
            this.sBluetoothControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 348));
            this.sBluetoothTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 347);
            this.subscreenUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, QuantumSecurityInfo.QUANTUM_KEY_STATUS.KEY_STATUS_FAIL_TO_GET_KEY));
            this.mobileDataTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, QuantumSecurityInfo.QUANTUM_KEY_STATUS.KEY_STATUS_EXCEPTION);
            this.castControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 355));
            this.hotspotControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 356));
            this.castTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 354);
            this.provideDataSaverControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 358));
            this.hotspotTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 357);
            this.airplaneModeTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 359);
            this.dataSaverTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 360);
            this.nfcTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 361);
            this.providesControlsFeatureEnabledProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 364));
            this.activityTaskManagerProxyProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 368));
            this.customSelectedComponentRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 369));
            this.controlsListingControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 367));
            this.provideDelayableExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 371));
            this.controlsMetricsLoggerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 372));
            this.controlsSettingsRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 373));
            this.controlsSettingsDialogManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 374));
            this.aUIFacadeImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 375));
            this.systemUIAnalyticsWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 377));
            this.sALoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 376));
            this.desktopManagerWrapperImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 378));
            this.controlActionCoordinatorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 370));
            this.provideControlsLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.ALTERNATIVE_SERVICES));
            this.provideControlsLogWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 379));
            this.badgeProviderImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.ALTERNATIVE_SERVICES_EMERGENCY));
            SwitchingProvider switchingProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.ALTERNATIVE_SERVICES_EMERGENCY_CSFB);
            this.controlsRuneWrapperImplProvider = switchingProvider;
            this.provideControlsRuneWrapperProvider = DoubleCheck.provider(switchingProvider);
            this.selectedComponentRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 383));
            this.customControlsUiControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 366));
            this.factoryProvider6 = SingleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 385));
            this.controlsBindingControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 384));
            this.controlsControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 365));
            this.controlsComponentProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 363));
            this.deviceControlTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 362);
            this.provideLeakReportEmailProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 389));
            this.leakReporterProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 388));
            this.garbageMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 387));
            this.memoryTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 386);
            this.zenModeControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 391));
            this.dndTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 390);
            this.managedProfileControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 393));
            this.sWorkModeTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 392);
            this.flashlightControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 395));
            this.flashlightTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 394);
            this.blueLightFilterTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 396);
            this.locationTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 397);
            this.cameraToggleTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 398);
            this.microphoneToggleTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 399);
            this.nextAlarmControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 401));
            this.alarmTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 400);
            this.uiModeNightTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 402);
            this.screenCaptureTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 403);
            this.syncTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 404);
            this.qRCodeScannerControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.NOT_ACCEPTABLE));
            this.qRCodeScannerTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 405);
            this.provideActivityManagerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 410));
            this.screenCaptureDevicePolicyResolverProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 409);
            this.recordingControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.REQUEST_TIMEOUT));
            this.keyguardDismissUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 411));
            this.screenRecordTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 407);
            this.provideQuickAccessWalletClientProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 414));
            this.quickAccessWalletControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 413));
            this.quickAccessWalletTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 412);
            this.soundModeTileProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.UNSUPPORTED_MEDIA_TYPE);
            this.qSFactoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 254));
            this.builderProvider3 = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 417));
            this.secAutoTileManagerProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.UNSUPPORTED_URI_SCHEME);
            this.bootAnimationFinishedCacheImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 418));
            this.qSTileHostProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getDexForegroundModePackageList));
            this.secPanelTouchProximityHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 419));
            this.secHideInformationMirroringModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 421));
            this.secHideInformationMirroringControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.BAD_EXTENSION));
            this.providesShadeHeaderViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 425));
            this.airplaneModeInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 430));
            this.airplaneModeViewModelImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 429));
            this.provideMobileViewLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 434));
            this.mobileViewLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 433));
            this.provideVerboseMobileViewLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 436));
            this.verboseMobileViewLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 435));
            this.connectivityConstantsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 437));
            this.mobileIconsViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 432));
            this.provideFirstMobileSubShowingNetworkTypeIconProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 431));
            this.wifiInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 438));
            this.wifiConstantsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 439));
            this.wifiViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 428));
            this.wifiUiAdapterProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 427));
            this.mobileUiAdapterProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 440));
            this.mobileContextProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, CustomDeviceManager.MULTI_WINDOW_FIXED_STATE));
            this.factoryProvider7 = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 426));
            this.privacyConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 443));
            this.providePrivacyLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 445));
            this.appOpsPrivacyItemMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 444));
        }

        public final void initialize5(DependencyProvider dependencyProvider, LeakModule leakModule, NightDisplayListenerModule nightDisplayListenerModule, SharedLibraryModule sharedLibraryModule, KeyguardModule keyguardModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.mediaProjectionPrivacyItemMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 446));
            this.privacyItemControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, CustomDeviceManager.MULTI_WINDOW_PERCENTAGE));
            this.providesOngoingPrivacyChipProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 447));
            this.privacyDialogControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 448));
            this.providesStatusIconContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 449));
            this.provideTimeTickHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 450));
            this.providesBatteryMeterViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 452));
            this.slimIndicatorViewMediatorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 453));
            this.providesBatteryMeterViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 451));
            this.carrierTextUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 454));
            this.provideCarrierTextManagerLogProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 455));
            this.wifiTextManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 456));
            this.subscriptionManagerSlotIndexResolverProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 457));
            this.providesCombinedShadeHeadersConstraintManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 458));
            this.provideStatusIconContainerControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 459));
            this.provideNetspeedViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 460));
            this.shadeHeaderControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 424));
            this.secQSPanelResourcePickerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.INTERVAL_TOO_BRIEF));
            this.secPanelExpansionStateNotifierProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 461));
            this.secPanelConfigurationBellTowerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.SESSION_INTERVAL_TOO_SMALL));
            this.providePanelLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 463));
            this.providesSecPanelLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 462));
            this.extensionControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 469));
            this.notificationPersonExtractorPluginBoundaryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 468));
            this.peopleNotificationIdentifierImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 467));
            this.highPriorityProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 466));
            this.peopleSpaceWidgetManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 470));
            this.channelEditorDialogControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 471));
            this.assistantFeedbackControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 472));
            this.provideNotificationInterruptLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 476));
            this.keyguardNotificationVisibilityProviderImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 477));
            this.notificationInterruptStateProviderImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 475));
            this.provideVisualInterruptionDecisionProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 474));
            this.provideBubblesManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 473));
            this.visibilityLocationProviderDelegatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.TEMPORARILY_UNAVAILABLE));
            this.visualStabilityCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 479));
            this.onUserInteractionCallbackImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 478));
            this.notificationGutsManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 465));
            this.shadeControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 464));
            this.secPanelPolicyProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setDexForegroundModePackageList));
            this.dozeServiceHostProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 152));
            this.provideActivityLaunchAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 481));
            this.activityIntentHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 482));
            this.activityStarterImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 145));
            this.controlsActivityStarterImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 144));
            this.customDeviceControlsControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 143));
            this.provideDesktopManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 139));
            this.statusBarWindowControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 129));
            this.aODAmbientWallpaperHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 128));
            this.providesKeyguardLogWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.ADDRESS_INCOMPLETE));
            this.lsRuneWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 485));
            this.deviceTypeWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.BUSY_HERE));
            this.aODTouchModeManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 483));
            this.secUnlockedScreenOffAnimationHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 127));
            this.secQpBlurControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.REQUEST_TERMINATED));
            this.unlockedScreenOffAnimationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 126));
            this.screenOffAnimationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 124));
            this.dozeParametersProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 122));
            this.cameraGestureHelperProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 490);
            this.cameraQuickAffordanceConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 489));
            this.doNotDisturbQuickAffordanceConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 491));
            this.flashlightQuickAffordanceConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 492));
            this.homeControlsKeyguardQuickAffordanceConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 493));
            this.ringerModeTrackerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 495));
            this.muteQuickAffordanceConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 494));
            this.quickAccessWalletKeyguardQuickAffordanceConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 496));
            this.qrCodeScannerKeyguardQuickAffordanceConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 497));
            this.videoCameraQuickAffordanceConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 498));
            this.noteTaskControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 499));
            this.stylusManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 500));
            this.keyguardQuickAffordanceLocalUserSelectionManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 502));
            this.keyguardQuickAffordanceRemoteUserSelectionManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 503));
            this.keyguardQuickAffordanceLegacySettingSyncerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 504));
            this.keyguardQuickAffordanceRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 501));
            this.headlessSystemUserModeImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 507));
            this.telephonyRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 509));
            this.telephonyInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 508));
            this.refreshUsersSchedulerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 510));
            this.factoryProvider8 = SingleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 512));
            this.factoryProvider9 = SingleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 513));
            this.factoryProvider10 = SingleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 514));
            this.guestUserInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 511));
            this.userInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 506));
            this.userSwitcherControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 505));
            this.keyguardShortcutManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.NOT_ACCEPTABLE_HERE));
            this.pluginLockMediatorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 120));
            this.pluginWallpaperManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 119));
            this.wallpaperEventNotifierProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 515));
            this.keyguardWallpaperControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 118));
            this.faceWidgetWallpaperUtilsWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 117));
            this.faceWidgetColorSchemeControllerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 516));
            this.faceWidgetPluginLockManagerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 517));
            this.faceWidgetNotificationControllerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 518));
            this.pluginFaceWidgetManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 107));
            this.coverScreenManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 519));
            this.provideAODLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 520));
            this.targetSdkResolverProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 523));
            this.notifCoordinatorsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 525));
            this.notifInflationErrorManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 527));
            this.notifInflaterImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 526));
        }

        public final void initialize6(DependencyProvider dependencyProvider, LeakModule leakModule, NightDisplayListenerModule nightDisplayListenerModule, SharedLibraryModule sharedLibraryModule, KeyguardModule keyguardModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.mediaContainerControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 529));
            this.notificationSectionsFeatureManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 530));
            this.sectionHeaderVisibilityProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 531));
            this.notifViewBarnProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 532));
            this.shadeViewManagerFactoryProvider = SingleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 528));
            this.notifPipelineInitializerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 524));
            this.notifBindPipelineProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 533));
            SwitchingProvider switchingProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 536);
            this.notifRemoteViewCacheImplProvider = switchingProvider;
            this.provideNotifRemoteViewCacheProvider = DoubleCheck.provider(switchingProvider);
            this.provideSmartReplyControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 538));
            this.remoteInputUriControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 539));
            this.provideNotificationRemoteInputLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 541));
            this.remoteInputControllerLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 540));
            this.provideNotifInteractionLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 542));
            this.provideNotificationRemoteInputManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 537));
            this.bindEventManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 544));
            this.conversationNotificationManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 543));
            this.smartReplyConstantsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 545));
            this.provideDevicePolicyManagerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 546));
            this.notificationContentInflaterProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 535));
            this.rowContentBindStageProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 534));
            this.provideNotificationPanelLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 548));
            this.provideNotificationLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 547));
            this.rowInflaterTaskProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 550);
            this.iconManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 551));
            this.notificationRowBinderImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 549));
            this.headsUpViewBinderProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 552));
            this.animatedImageNotificationManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 553));
            this.foregroundServiceControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 555));
            this.foregroundServiceNotificationListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 554));
            this.notificationMemoryDumperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 557));
            this.notificationMemoryLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 558));
            this.notificationMemoryMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 556));
            this.notificationsControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 522));
            this.notificationsControllerStubProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 559);
            this.provideNotificationsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 521));
            this.notificationIconTransitionControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 561));
            this.lockscreenNotificationIconsOnlyControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 560));
            this.injectionInflationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 564));
            this.providerSubscreenQsPanelControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 563));
            this.remoteInputQuickSettingsDisablerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 565));
            this.screenRecordingStateProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 566));
            this.builderProvider4 = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 567);
            this.subScreenQuickPanelWindowControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 562));
            this.pluginAODManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 105));
            this.secNotificationShadeWindowControllerHelperImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 100));
            this.provideShadeWindowLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 568));
            this.notificationShadeWindowControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 99));
            this.provideRecentsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 569));
            this.systemActionsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 98));
            this.navigationBarEdgePanelProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 571);
            this.providsBackGestureTfClassifierProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 572);
            this.factoryProvider11 = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 570);
            this.navBarHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 95));
            this.taskbarDelegateProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 573));
            this.autoHideControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 574));
            this.provideTaskStackChangeListenersProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 575));
            this.navigationBarControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 83));
            this.fgsManagerControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 576));
            this.provideSearcleManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 577));
            this.overviewProxyServiceProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 82));
            this.notificationLockscreenUserManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 79));
            this.keyguardBypassControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 78));
            this.keyguardMediaControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.PRECONDITION_FAILURE));
            this.sectionHeaderControllerSubcomponentBuilderProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 582);
            this.providesIncomingHeaderSubcomponentProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 581));
            this.providesPeopleHeaderSubcomponentProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 583));
            this.providesAlertingHeaderSubcomponentProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 584));
            this.providesSilentHeaderSubcomponentProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 585));
            this.notificationSectionsManagerProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 579);
            this.ambientStateProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 578));
            this.factoryProvider12 = SingleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 586));
            this.blurUtilsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 588));
            this.wallpaperControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 589));
            this.notificationShadeDepthControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 587));
            this.factoryProvider13 = SingleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 590));
            this.factoryProvider14 = SingleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 591));
            this.factoryProvider15 = SingleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 592));
            this.shadeRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 593));
            this.lockscreenShadeTransitionControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 75));
            this.udfpsHapticsSimulatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 594));
            this.udfpsShellProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 595));
            this.systemUIDialogManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 596));
            this.providesPluginExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 597));
            this.providesOverlapDetectorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 599));
            this.singlePointerTouchProcessorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 598));
            this.provideFaceAuthLogProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.DECLINE));
            this.faceAuthenticationLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 602));
            this.provideFaceDetectTableLogProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.DOES_NOT_EXIST_ANYWHERE));
            this.provideFaceAuthTableLogProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 605));
            this.deviceEntryFaceAuthRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 601));
            this.systemUIKeyguardFaceAuthInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.BUSY_EVERYWHERE));
            this.udfpsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 74));
            this.rearDisplayStateRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 608));
            SwitchingProvider switchingProvider2 = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 607);
            this.displayStateInteractorImplProvider = switchingProvider2;
            this.providesDisplayStateInteractorProvider = DoubleCheck.provider(switchingProvider2);
            this.sideFpsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VolteConstants.ErrorCode.NOT_ACCEPTABLE2));
            this.provideUdfpsLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 609));
            this.logContextInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 610));
            this.authBiometricFingerprintViewModelProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 611);
        }

        public final void initialize7(DependencyProvider dependencyProvider, LeakModule leakModule, NightDisplayListenerModule nightDisplayListenerModule, SharedLibraryModule sharedLibraryModule, KeyguardModule keyguardModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.promptRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 613));
            SwitchingProvider switchingProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 614);
            this.credentialInteractorImplProvider = switchingProvider;
            this.providesCredentialInteractorProvider = DoubleCheck.provider(switchingProvider);
            this.promptCredentialInteractorProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 612);
            this.promptSelectorInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 615));
            this.credentialViewModelProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 616);
            this.promptViewModelProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 617);
            this.authControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 70));
            this.sessionTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 69));
            this.keyguardPresentationDisablerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 619));
            this.keyguardDisplayManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 618));
            this.screenOnCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 620));
            this.dreamOverlayStateControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 621));
            this.fromDreamingTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 623));
            this.dreamingToLockscreenTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 622));
            this.newKeyguardViewMediatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 68));
            this.keyguardFoldControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 65));
            this.displayLifecycleProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 64));
            this.appControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 625));
            SwitchingProvider switchingProvider2 = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 628);
            this.rotationPolicyWrapperImplProvider = switchingProvider2;
            this.bindRotationPolicyWrapperProvider = DoubleCheck.provider(switchingProvider2);
            this.provideAutoRotateSettingsManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 630));
            this.provideDeviceStateAutoRotationLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 631));
            this.deviceStateRotationLockSettingControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 629));
            this.rotationLockControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 627));
            this.deviceControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 626));
            this.notificationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 632));
            this.screenControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 633));
            this.debugModeFilterProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 635));
            this.subscreenNotificationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 634));
            this.systemUICommandActionHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 624));
            this.letterboxBackgroundProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 638));
            this.letterboxAppearanceCalculatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 637));
            this.statusBarInitializerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 636));
            this.statusBarWindowStateControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 639));
            this.securityControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 641));
            this.subRoomNetworkInfoProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 643));
            this.coverScreenIconControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 642));
            this.statusBarSignalPolicyProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 640));
            this.dynamicPrivacyControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 644));
            this.provideShadeLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 645));
            this.accessibilityFloatingMenuControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 646));
            this.lockscreenWallpaperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 647));
            this.providesPopupUILogWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 648));
            this.provideVolumePanelLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 652));
            this.provideVolumeLogWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 651));
            this.volumeDependencyProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 653));
            this.volumeDialogControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 650));
            this.provideNearbyMediaDevicesLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 658));
            this.nearbyMediaDevicesLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 657));
            this.nearbyMediaDevicesManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 656));
            this.providesNearbyMediaDevicesManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 655));
            this.mediaOutputDialogFactoryProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 654);
            this.volumePanelFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 659));
            this.factoryProvider16 = SingleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 660));
            this.samsungVolumeDialogImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 661));
            this.volumeDialogComponentProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 649));
            this.initControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 662));
            this.userInfoControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 663));
            this.provideSensorPrivacyControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 664));
            this.faceMessageDeferralLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 667));
            this.faceHelpMessageDeferralProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 666));
            this.secRotationWatcherProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 668));
            this.provideKeyguardIndicationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 665));
            this.statusBarTouchableRegionManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 669));
            this.statusBarHideIconsForBouncerManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 670));
            this.wiredChargingRippleControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 671));
            this.cameraLauncherProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 672));
            this.lightRevealScrimRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 675));
            this.lightRevealScrimInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 674));
            this.lightRevealScrimViewModelProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 673);
            this.secLightRevealScrimHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 676));
            this.centralSurfacesImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 45));
            this.pickupControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 677));
            this.provideKeyguardLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 678));
            this.provideSecurityLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 679));
            this.keyguardFixedRotationMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 680));
            this.carLifeManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 681));
            this.keyguardViewMediatorHelperImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 43));
            this.udfpsOverlayInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 682));
            this.provideStatusBarKeyguardViewManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 42));
            this.surfaceVisibilityControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 41));
            this.windowVisibilityControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 683));
            this.keyguardFastBioUnlockControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 31));
            this.activeUnlockConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 684));
            this.faceWakeUpTriggersConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 685));
            this.keyguardSecUpdateMonitorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 30));
            this.keyguardStateControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 29));
            this.brightLineFalsingManagerProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 22);
            this.falsingManagerProxyProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 20));
            this.brightnessDialogProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 18);
            this.contrastDialogActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 686);
            this.usbDebuggingActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 687);
            this.usbDebuggingSecondaryUserActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 688);
            this.usbPermissionActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 689);
            this.usbConfirmActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 690);
            this.usbAccessoryUriActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 691);
            this.createUserActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 692);
            this.provideTvNotificationHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 694));
            this.tvNotificationPanelActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 693);
        }

        public final void initialize8(DependencyProvider dependencyProvider, LeakModule leakModule, NightDisplayListenerModule nightDisplayListenerModule, SharedLibraryModule sharedLibraryModule, KeyguardModule keyguardModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.peopleTileRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 696));
            this.peopleWidgetRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 697));
            this.peopleSpaceActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 695);
            this.longScreenshotDataProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 699));
            this.actionIntentExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, KnoxEnterpriseLicenseManager.ERROR_LICENSE_DEACTIVATED));
            this.longScreenshotActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 698);
            this.appClipsTrampolineActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 701);
            this.appClipsCrossProcessHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, KnoxEnterpriseLicenseManager.ERROR_LICENSE_ACTIVATION_NOT_FOUND));
            this.appClipsActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 702);
            this.launchConversationActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, KnoxEnterpriseLicenseManager.ERROR_LICENSE_QUANTITY_EXHAUSTED_ON_AUTO_RELEASE);
            this.subscreenSensorUseUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 706));
            this.sensorUseStartedActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 705);
            this.tvUnblockSensorActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 707);
            this.hdmiCecSetMenuLanguageHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 709));
            this.hdmiCecSetMenuLanguageActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 708);
            this.tvSensorPrivacyChangedActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 710);
            this.coverHomeActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 711);
            this.switchToManagedProfileForCallActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 712);
            this.subscreenNotificationReplyActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 713);
            this.subscreenNotificationIntelligenceStartActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 714);
            this.subHomeActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 715);
            this.subScreenFallbackProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 716);
            this.customIconCacheProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 718));
            this.controlsEditingActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 717);
            this.controlsRequestDialogProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 719);
            this.mediaProjectionAppSelectorActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 720);
            this.mediaProjectionPermissionActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 721);
            this.launchNoteTaskActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 722);
            this.launchNoteTaskManagedProfileProxyActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 723);
            this.launchNotesRoleSettingsTrampolineActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 724);
            this.createNoteTaskShortcutActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 725);
            this.walletActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 726);
            this.customControlsProviderSelectorActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 727);
            this.customControlsFavoritingActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 728);
            this.controlsFragmentFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 730));
            this.blurFacadeImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 731));
            this.customControlsActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 729);
            this.controlsReorderActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 732);
            this.controlsSettingActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 733);
            this.factoryProvider17 = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 737));
            this.multiSIMControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 736));
            this.provideExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 738));
            this.secQSSettingEditResourcesProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 735));
            this.secQSSettingEditMainActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 734);
            this.secQSSettingEditTilesActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 739);
            this.secQSSettingEditDirectlyActivityProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 740);
            this.dozeServiceProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 741);
            this.provideLongRunningLooperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 744));
            this.provideLongRunningDelayableExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 743));
            this.imageWallpaperProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 742);
            this.keyguardLifecyclesDispatcherProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 746));
            this.keyguardServiceProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 745);
            this.dreamOverlayServiceProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 747);
            this.notificationListenerWithPluginsProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 748);
            this.provideBinderProxyDumpHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 750));
            this.heapDumpHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 752));
            this.memoryMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 751));
            this.systemUIServiceProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 749);
            this.systemUIAuxiliaryDumpServiceProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 753);
            this.provideLongRunningExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 755));
            this.recordingServiceProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 754);
            this.sysUICoverServiceProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 756);
            this.providesScrnshtNotifSmartActionsProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 759);
            this.screenshotSmartActionsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 758));
            this.imageCaptureImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 760));
            this.semImageCaptureImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 761));
            this.assistContentRequesterProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 762));
            this.screenshotPolicyImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 764));
            this.requestProcessorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 763));
            this.takeScreenshotServiceProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 757);
            this.screenshotProxyServiceProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 765);
            this.appClipsScreenshotHelperServiceProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 766);
            this.appClipsServiceProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 767);
            this.noteTaskControllerUpdateServiceProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 768);
            this.walletContextualSuggestionsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 770));
            this.walletContextualLocationsServiceProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 769);
            this.overviewProxyRecentsImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 771));
            this.actionProxyReceiverProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 772);
            this.deleteScreenshotReceiverProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 773);
            this.smartActionsReceiverProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 774);
            this.mediaOutputDialogReceiverProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 775);
            this.volumePanelDialogReceiverProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 776);
            this.peopleSpaceWidgetPinnedReceiverProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 777);
            this.peopleSpaceWidgetProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 778);
            this.guestResetOrExitSessionReceiverProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 779);
            this.controlsRequestReceiverProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 780);
            this.encryptDecryptWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 782));
            this.controlsBackupRestoreReceiverProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 781);
            this.contextComponentResolverProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 2));
            this.unfoldLatencyTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 783));
            this.bluetoothControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 785));
            this.sRotationLockControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 786));
            this.provideNightDisplayListenerProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 787);
            this.accessibilityControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 788));
            this.tunablePaddingServiceProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 789));
            this.uiOffloadThreadProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 790));
            this.powerNotificationWarningsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 791));
            this.groupExpansionManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 793));
            this.statusBarRemoteInputCallbackProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 792));
            this.clockManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 794));
        }

        public final void initialize9(DependencyProvider dependencyProvider, LeakModule leakModule, NightDisplayListenerModule nightDisplayListenerModule, SharedLibraryModule sharedLibraryModule, KeyguardModule keyguardModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.systemEventCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 796));
            this.provideSystemStatusAnimationSchedulerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 795));
            this.privacyDotViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 797));
            this.animationUtilsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 798));
            this.provideNavbarBgHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 799));
            this.globalActionsDialogLiteProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 802);
            this.globalActionsImplProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 801);
            this.globalActionsComponentProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 800));
            this.sPluginDependencyProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VpnErrorValues.ERROR_STORING_PROXY_PASSWORD));
            this.faceWidgetPluginControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VpnErrorValues.ERROR_INVALID_PROXY_CONFIGURATION));
            this.qSClockBellAlternateCalendarUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 806));
            this.qSClockBellTowerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, VpnErrorValues.ERROR_INVALID_IPV6_CONFIGURATION));
            this.keyguardTouchDymLockInjectorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 809));
            this.keyguardTouchLoggingInjectorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 810));
            this.keyguardTouchSecurityInjectorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 811));
            this.keyguardTouchAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 808));
            this.secPanelBlockExpandingHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 807));
            this.providerQsResetSettingsManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 812));
            this.systemUIIndexMediatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 813));
            this.notificationColorPickerProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 814);
            this.notificationBackupRestoreManagerProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 815);
            this.qSBackupRestoreManagerProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 816);
            this.simpleStatusBarIconControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 817));
            this.fullExpansionPanelNotiAlphaControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 818));
            this.notificationShelfManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 819));
            this.providePanelScreenShotLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 821));
            this.panelScreenShotBufferLoggerProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 820);
            this.notiCinemaLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 822));
            this.shelfToolTipManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 823));
            this.provideBackgroundRepeatableExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 827));
            this.mediaOutputHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 828));
            this.provideMediaLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 830));
            this.providesMediaLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 829));
            this.secMediaControlPanelProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 826);
            this.secMediaPlayerDataProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 831);
            this.mediaBluetoothHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 832));
            this.secMediaHostProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 825));
            this.subscreenMusicWidgetControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 824));
            this.dependencyProvider2 = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 784));
            this.mediaMuteAwaitConnectionCliProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 834));
            this.providesMediaMuteAwaitConnectionCliProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 833));
            this.broadcastDispatcherStartableProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 835);
            this.bouncerMessageFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 838));
            this.bouncerMessageRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 837));
            this.countDownTimerUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 840));
            this.bouncerMessageInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 839));
            this.bouncerMessageAuditLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 836));
            this.fromPrimaryBouncerTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 842));
            this.fromLockscreenTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 843));
            this.fromAodTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 844));
            this.fromGoneTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 845));
            this.fromOccludedTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 846));
            this.fromDozingTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 847));
            this.fromAlternateBouncerTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 848));
            this.keyguardTransitionAuditLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 849));
            this.keyguardTransitionCoreStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 841));
            this.resourceTrimmerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 850));
            this.featureFlagsReleaseStartableProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 851);
            this.serviceProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 852));
            this.motionToolStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 853));
            this.provideQSFragmentDisableLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 856));
            this.disableFlagsLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 857));
            this.footerActionsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 858));
            this.qSSecurityFooterUtilsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 861));
            this.securityRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 862));
            this.foregroundServicesRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 863));
            this.userSwitcherRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 864));
            this.footerActionsInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 860));
            this.isPMLiteEnabledProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 865));
            this.factoryProvider18 = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 859));
            this.footerActionsViewBinderProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 866));
            this.secQSDetailDisplayerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 867));
            this.qSFragmentProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 855);
            this.qSFragmentStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 854));
            this.carrierConfigCoreStartableProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 868);
            this.adapterProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 870);
            this.userSwitcherViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 871));
            this.userSwitcherDialogCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 869));
            this.keyboardUIProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 872));
            this.powerUIProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 873));
            this.ringtonePlayerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 874));
            this.shortcutKeyDispatcherProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 875));
            this.sliceBroadcastRelayHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 876));
            this.storageNotificationProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 877));
            this.themeOverlayApplierProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 879));
            this.themeOverlayControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 878));
            this.provideToastLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 881));
            this.toastUIProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 880));
            this.tvNotificationPanelProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 882));
            this.tvPrivacyChipsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 883));
            this.tvStatusBarProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 884));
            this.volumeUIProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 885));
            this.vpnStatusObserverProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 886));
            this.modeSwitchesControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 888));
            this.windowMagnificationProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 887));
            this.wMShellProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 889));
            this.autoAddSettingRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 891));
            this.prototypeCoreStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 890));
            this.notificationChannelsProvider = new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 892);
            this.homeSoundEffectControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, 893));
        }

        @Override // com.android.systemui.tv.TvSysUIComponent, com.android.systemui.dagger.SysUIComponent
        public void inject(SystemUIAppComponentFactoryBase systemUIAppComponentFactoryBase) {
            injectSystemUIAppComponentFactoryBase(systemUIAppComponentFactoryBase);
        }

        public final AODIntentService injectAODIntentService(AODIntentService aODIntentService) {
            aODIntentService.mPluginAODManagerLazy = DoubleCheck.lazy(this.pluginAODManagerProvider);
            aODIntentService.mHandler = (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get();
            return aODIntentService;
        }

        public final BinderCallMonitorImpl injectBinderCallMonitorImpl(BinderCallMonitorImpl binderCallMonitorImpl) {
            binderCallMonitorImpl.mLogger = (SamsungServiceLogger) this.provideBinderCallMonitorLoggerProvider.get();
            return binderCallMonitorImpl;
        }

        public final CentralSurfacesImpl injectCentralSurfacesImpl(CentralSurfacesImpl centralSurfacesImpl) {
            centralSurfacesImpl.mSecLightRevealScrimHelper = (SecLightRevealScrimHelper) this.secLightRevealScrimHelperProvider.get();
            centralSurfacesImpl.mAODAmbientWallpaperHelper = (AODAmbientWallpaperHelper) this.aODAmbientWallpaperHelperProvider.get();
            DoubleCheck.lazy(this.pluginAODManagerProvider);
            return centralSurfacesImpl;
        }

        public final ClockOptionsProvider injectClockOptionsProvider(ClockOptionsProvider clockOptionsProvider) {
            clockOptionsProvider.mClockInfosProvider = this.provideClockInfoListProvider;
            return clockOptionsProvider;
        }

        public final Dependency injectDependency(Dependency dependency) {
            dependency.mDumpManager = (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get();
            dependency.mActivityStarter = DoubleCheck.lazy(this.activityStarterImplProvider);
            dependency.mBroadcastDispatcher = DoubleCheck.lazy(this.broadcastDispatcherProvider);
            dependency.mAsyncSensorManager = DoubleCheck.lazy(this.asyncSensorManagerProvider);
            dependency.mBluetoothController = DoubleCheck.lazy(this.bluetoothControllerImplProvider);
            dependency.mLocationController = DoubleCheck.lazy(this.locationControllerImplProvider);
            dependency.mRotationLockController = DoubleCheck.lazy(this.rotationLockControllerImplProvider);
            dependency.mNetworkController = DoubleCheck.lazy(this.networkControllerImplProvider);
            dependency.mSBluetoothController = DoubleCheck.lazy(this.sBluetoothControllerImplProvider);
            dependency.mSRotationLockController = DoubleCheck.lazy(this.sRotationLockControllerImplProvider);
            dependency.mZenModeController = DoubleCheck.lazy(this.zenModeControllerImplProvider);
            DoubleCheck.lazy(this.hdmiCecSetMenuLanguageHelperProvider);
            dependency.mHotspotController = DoubleCheck.lazy(this.hotspotControllerImplProvider);
            dependency.mCastController = DoubleCheck.lazy(this.castControllerImplProvider);
            dependency.mFlashlightController = DoubleCheck.lazy(this.flashlightControllerImplProvider);
            dependency.mUserSwitcherController = DoubleCheck.lazy(this.userSwitcherControllerProvider);
            dependency.mUserInfoController = DoubleCheck.lazy(this.userInfoControllerImplProvider);
            dependency.mKeyguardMonitor = DoubleCheck.lazy(this.keyguardStateControllerImplProvider);
            dependency.mKeyguardUpdateMonitor = DoubleCheck.lazy(this.keyguardSecUpdateMonitorImplProvider);
            dependency.mNightDisplayListener = DoubleCheck.lazy(this.provideNightDisplayListenerProvider);
            dependency.mReduceBrightColorsController = DoubleCheck.lazy(this.reduceBrightColorsControllerProvider);
            dependency.mManagedProfileController = DoubleCheck.lazy(this.managedProfileControllerImplProvider);
            dependency.mNextAlarmController = DoubleCheck.lazy(this.nextAlarmControllerImplProvider);
            dependency.mDataSaverController = DoubleCheck.lazy(this.provideDataSaverControllerProvider);
            dependency.mAccessibilityController = DoubleCheck.lazy(this.accessibilityControllerProvider);
            dependency.mDeviceProvisionedController = DoubleCheck.lazy(this.providesDeviceProvisionedControllerProvider);
            dependency.mPluginManager = DoubleCheck.lazy(this.tvGlobalRootComponent.providesPluginManagerProvider);
            dependency.mAssistManager = DoubleCheck.lazy(this.assistManagerProvider);
            dependency.mSecurityController = DoubleCheck.lazy(this.securityControllerImplProvider);
            dependency.mLeakDetector = DoubleCheck.lazy(this.providesLeakDetectorProvider);
            dependency.mLeakReporter = DoubleCheck.lazy(this.leakReporterProvider);
            dependency.mGarbageMonitor = DoubleCheck.lazy(this.garbageMonitorProvider);
            dependency.mTunerService = DoubleCheck.lazy(this.tunerServiceImplProvider);
            dependency.mNotificationShadeWindowController = DoubleCheck.lazy(this.notificationShadeWindowControllerImplProvider);
            dependency.mTempStatusBarWindowController = DoubleCheck.lazy(this.statusBarWindowControllerProvider);
            dependency.mDarkIconDispatcher = DoubleCheck.lazy(this.darkIconDispatcherImplProvider);
            dependency.mConfigurationController = DoubleCheck.lazy(this.configurationControllerImplProvider);
            dependency.mStatusBarIconController = DoubleCheck.lazy(this.statusBarIconControllerImplProvider);
            dependency.mScreenLifecycle = DoubleCheck.lazy(this.tvGlobalRootComponent.screenLifecycleProvider);
            dependency.mWakefulnessLifecycle = DoubleCheck.lazy(this.wakefulnessLifecycleProvider);
            dependency.mFragmentService = DoubleCheck.lazy(this.fragmentServiceProvider);
            dependency.mExtensionController = DoubleCheck.lazy(this.extensionControllerImplProvider);
            dependency.mPluginDependencyProvider = DoubleCheck.lazy(this.tvGlobalRootComponent.pluginDependencyProvider);
            dependency.mLocalBluetoothManager = DoubleCheck.lazy(this.provideLocalBluetoothControllerProvider);
            dependency.mVolumeDialogController = DoubleCheck.lazy(this.volumeDialogControllerImplProvider);
            dependency.mMetricsLogger = DoubleCheck.lazy(this.tvGlobalRootComponent.provideMetricsLoggerProvider);
            dependency.mAccessibilityManagerWrapper = DoubleCheck.lazy(this.accessibilityManagerWrapperProvider);
            dependency.mSysuiColorExtractor = DoubleCheck.lazy(this.sysuiColorExtractorProvider);
            dependency.mTunablePaddingService = DoubleCheck.lazy(this.tunablePaddingServiceProvider);
            dependency.mForegroundServiceController = DoubleCheck.lazy(this.foregroundServiceControllerProvider);
            dependency.mUiOffloadThread = DoubleCheck.lazy(this.uiOffloadThreadProvider);
            dependency.mWarningsUI = DoubleCheck.lazy(this.powerNotificationWarningsProvider);
            dependency.mLightBarController = DoubleCheck.lazy(this.lightBarControllerProvider);
            dependency.mIWindowManager = DoubleCheck.lazy(this.tvGlobalRootComponent.provideIWindowManagerProvider);
            dependency.mOverviewProxyService = DoubleCheck.lazy(this.overviewProxyServiceProvider);
            dependency.mNavBarModeController = DoubleCheck.lazy(this.navigationModeControllerProvider);
            dependency.mAccessibilityButtonModeObserver = DoubleCheck.lazy(this.accessibilityButtonModeObserverProvider);
            dependency.mAccessibilityButtonListController = DoubleCheck.lazy(this.accessibilityButtonTargetsObserverProvider);
            dependency.mEnhancedEstimates = DoubleCheck.lazy(this.enhancedEstimatesImplProvider);
            dependency.mVibratorHelper = DoubleCheck.lazy(this.vibratorHelperProvider);
            dependency.mIStatusBarService = DoubleCheck.lazy(this.tvGlobalRootComponent.provideIStatusBarServiceProvider);
            dependency.mDisplayMetrics = DoubleCheck.lazy(this.tvGlobalRootComponent.provideDisplayMetricsProvider);
            dependency.mLockscreenGestureLogger = DoubleCheck.lazy(this.lockscreenGestureLoggerProvider);
            dependency.mShadeController = DoubleCheck.lazy(this.shadeControllerImplProvider);
            dependency.mNotificationRemoteInputManagerCallback = DoubleCheck.lazy(this.statusBarRemoteInputCallbackProvider);
            dependency.mAppOpsController = DoubleCheck.lazy(this.appOpsControllerImplProvider);
            dependency.mNavigationBarController = DoubleCheck.lazy(this.navigationBarControllerProvider);
            dependency.mAccessibilityFloatingMenuController = DoubleCheck.lazy(this.accessibilityFloatingMenuControllerProvider);
            dependency.mStatusBarStateController = DoubleCheck.lazy(this.statusBarStateControllerImplProvider);
            dependency.mNotificationLockscreenUserManager = DoubleCheck.lazy(this.notificationLockscreenUserManagerImplProvider);
            dependency.mNotificationGutsManager = DoubleCheck.lazy(this.notificationGutsManagerProvider);
            dependency.mNotificationMediaManager = DoubleCheck.lazy(this.provideNotificationMediaManagerProvider);
            dependency.mNotificationRemoteInputManager = DoubleCheck.lazy(this.provideNotificationRemoteInputManagerProvider);
            dependency.mSmartReplyConstants = DoubleCheck.lazy(this.smartReplyConstantsProvider);
            dependency.mNotificationListener = DoubleCheck.lazy(this.notificationListenerProvider);
            dependency.mNotificationLogger = DoubleCheck.lazy(this.provideNotificationLoggerProvider);
            dependency.mKeyguardDismissUtil = DoubleCheck.lazy(this.keyguardDismissUtilProvider);
            dependency.mSmartReplyController = DoubleCheck.lazy(this.provideSmartReplyControllerProvider);
            dependency.mRemoteInputQuickSettingsDisabler = DoubleCheck.lazy(this.remoteInputQuickSettingsDisablerProvider);
            dependency.mSensorPrivacyManager = DoubleCheck.lazy(this.tvGlobalRootComponent.provideSensorPrivacyManagerProvider);
            dependency.mAutoHideController = DoubleCheck.lazy(this.autoHideControllerProvider);
            dependency.mPrivacyItemController = DoubleCheck.lazy(this.privacyItemControllerProvider);
            dependency.mBgLooper = DoubleCheck.lazy(this.provideBgLooperProvider);
            dependency.mBgHandler = DoubleCheck.lazy(this.provideBgHandlerProvider);
            dependency.mMainLooper = DoubleCheck.lazy(this.tvGlobalRootComponent.provideMainLooperProvider);
            dependency.mMainHandler = DoubleCheck.lazy(this.tvGlobalRootComponent.provideMainHandlerProvider);
            dependency.mTimeTickHandler = DoubleCheck.lazy(this.provideTimeTickHandlerProvider);
            dependency.mLeakReportEmail = DoubleCheck.lazy(this.provideLeakReportEmailProvider);
            dependency.mMainExecutor = DoubleCheck.lazy(this.tvGlobalRootComponent.provideMainExecutorProvider);
            dependency.mBackgroundExecutor = DoubleCheck.lazy(this.provideBackgroundExecutorProvider);
            dependency.mClockManager = DoubleCheck.lazy(this.clockManagerProvider);
            dependency.mActivityManagerWrapper = DoubleCheck.lazy(this.provideActivityManagerWrapperProvider);
            dependency.mDevicePolicyManagerWrapper = DoubleCheck.lazy(this.provideDevicePolicyManagerWrapperProvider);
            dependency.mPackageManagerWrapper = DoubleCheck.lazy(this.tvGlobalRootComponent.providePackageManagerWrapperProvider);
            dependency.mSensorPrivacyController = DoubleCheck.lazy(this.provideSensorPrivacyControllerProvider);
            dependency.mDockManager = DoubleCheck.lazy(this.dockManagerImplProvider);
            dependency.mINotificationManager = DoubleCheck.lazy(this.tvGlobalRootComponent.provideINotificationManagerProvider);
            dependency.mSysUiStateFlagsContainer = DoubleCheck.lazy(this.provideSysUiStateProvider);
            dependency.mAlarmManager = DoubleCheck.lazy(this.tvGlobalRootComponent.provideAlarmManagerProvider);
            dependency.mKeyguardSecurityModel = DoubleCheck.lazy(this.keyguardSecurityModelProvider);
            dependency.mDozeParameters = DoubleCheck.lazy(this.dozeParametersProvider);
            dependency.mWallpaperManager = DoubleCheck.lazy(this.tvGlobalRootComponent.provideIWallPaperManagerProvider);
            dependency.mCommandQueue = DoubleCheck.lazy(this.provideCommandQueueProvider);
            dependency.mRecordingController = DoubleCheck.lazy(this.recordingControllerProvider);
            dependency.mProtoTracer = DoubleCheck.lazy(this.protoTracerProvider);
            dependency.mMediaOutputDialogFactory = DoubleCheck.lazy(this.mediaOutputDialogFactoryProvider);
            dependency.mDeviceConfigProxy = DoubleCheck.lazy(this.deviceConfigProxyProvider);
            dependency.mTelephonyListenerManager = DoubleCheck.lazy(this.telephonyListenerManagerProvider);
            dependency.mSystemStatusAnimationSchedulerLazy = DoubleCheck.lazy(this.provideSystemStatusAnimationSchedulerProvider);
            dependency.mPrivacyDotViewControllerLazy = DoubleCheck.lazy(this.privacyDotViewControllerProvider);
            dependency.mEdgeBackGestureHandlerFactoryLazy = DoubleCheck.lazy(this.factoryProvider11);
            dependency.mUiEventLogger = DoubleCheck.lazy(this.tvGlobalRootComponent.provideUiEventLoggerProvider);
            dependency.mContentInsetsProviderLazy = DoubleCheck.lazy(this.statusBarContentInsetsProvider);
            dependency.mInternetDialogFactory = DoubleCheck.lazy(this.internetDialogFactoryProvider);
            dependency.mFeatureFlagsLazy = DoubleCheck.lazy(this.featureFlagsReleaseProvider);
            dependency.mNotificationSectionsManagerLazy = DoubleCheck.lazy(this.notificationSectionsManagerProvider);
            dependency.mScreenOffAnimationController = DoubleCheck.lazy(this.screenOffAnimationControllerProvider);
            dependency.mAmbientStateLazy = DoubleCheck.lazy(this.ambientStateProvider);
            dependency.mGroupMembershipManagerLazy = DoubleCheck.lazy(this.provideGroupMembershipManagerProvider);
            dependency.mGroupExpansionManagerLazy = DoubleCheck.lazy(this.groupExpansionManagerImplProvider);
            dependency.mSystemUIDialogManagerLazy = DoubleCheck.lazy(this.systemUIDialogManagerProvider);
            dependency.mDialogLaunchAnimatorLazy = DoubleCheck.lazy(this.provideDialogLaunchAnimatorProvider);
            dependency.mUserTrackerLazy = DoubleCheck.lazy(this.provideUserTrackerProvider);
            dependency.mUserInteractorLazy = DoubleCheck.lazy(this.userInteractorProvider);
            dependency.mAnimationUtils = DoubleCheck.lazy(this.animationUtilsProvider);
            dependency.mNavBarBgHandler = DoubleCheck.lazy(this.provideNavbarBgHandlerProvider);
            dependency.mNavBarStore = DoubleCheck.lazy(this.providesNavBarStoreProvider);
            dependency.mTaskbarDelegate = DoubleCheck.lazy(this.taskbarDelegateProvider);
            dependency.mLooperSlowLogController = DoubleCheck.lazy(this.looperSlowLogControllerImplProvider);
            dependency.mKeyguardVisibilityMonitor = DoubleCheck.lazy(this.keyguardVisibilityMonitorProvider);
            dependency.mSecRotationWatcher = DoubleCheck.lazy(this.secRotationWatcherProvider);
            dependency.mFastUnlockController = DoubleCheck.lazy(this.keyguardFastBioUnlockControllerProvider);
            dependency.mCentralSurfaces = DoubleCheck.lazy(this.centralSurfacesImplProvider);
            dependency.mFoldController = DoubleCheck.lazy(this.keyguardFoldControllerImplProvider);
            dependency.mUnlockedScreenOffAnimationHelper = DoubleCheck.lazy(this.secUnlockedScreenOffAnimationHelperProvider);
            dependency.mSettingsHelper = DoubleCheck.lazy(this.settingsHelperProvider);
            dependency.mPluginLockManager = DoubleCheck.lazy(this.pluginLockManagerImplProvider);
            dependency.mPluginWallpaperManager = DoubleCheck.lazy(this.pluginWallpaperManagerImplProvider);
            dependency.mPluginLockStarManager = DoubleCheck.lazy(this.pluginLockStarManagerProvider);
            dependency.mDisplayLifecycle = DoubleCheck.lazy(this.displayLifecycleProvider);
            dependency.mSubscreenUtil = DoubleCheck.lazy(this.subscreenUtilProvider);
            dependency.mCoverUtilWrapper = DoubleCheck.lazy(this.tvGlobalRootComponent.coverUtilWrapperProvider);
            dependency.mGlobalActionsComponent = DoubleCheck.lazy(this.globalActionsComponentProvider);
            dependency.mSPluginManager = DoubleCheck.lazy(this.provideSPluginManagerProvider);
            dependency.mSPluginDependencyProvider = DoubleCheck.lazy(this.sPluginDependencyProvider);
            dependency.mKeyguardShortcutManager = DoubleCheck.lazy(this.keyguardShortcutManagerProvider);
            dependency.mWallpaperEventNotifier = DoubleCheck.lazy(this.wallpaperEventNotifierProvider);
            dependency.mWallpaperChangeNotifier = DoubleCheck.lazy(this.wallpaperChangeNotifierProvider);
            dependency.mSubScreenManager = DoubleCheck.lazy(this.subScreenManagerProvider);
            dependency.mCoverScreenManager = DoubleCheck.lazy(this.coverScreenManagerProvider);
            dependency.mFaceWidgetController = DoubleCheck.lazy(this.faceWidgetPluginControllerImplProvider);
            dependency.mPluginFaceWidgetManager = DoubleCheck.lazy(this.pluginFaceWidgetManagerProvider);
            dependency.mExternalClockProvider = DoubleCheck.lazy(this.tvGlobalRootComponent.externalClockProvider);
            dependency.mQSClockBellTower = DoubleCheck.lazy(this.qSClockBellTowerProvider);
            dependency.mPanelBlockExpandingHelper = DoubleCheck.lazy(this.secPanelBlockExpandingHelperProvider);
            dependency.mResetSettingsManager = DoubleCheck.lazy(this.providerQsResetSettingsManagerProvider);
            dependency.mSystemUIIndexMediator = DoubleCheck.lazy(this.systemUIIndexMediatorProvider);
            dependency.mNotificationColorPicker = DoubleCheck.lazy(this.notificationColorPickerProvider);
            dependency.mSecQSPanelResourcePicker = DoubleCheck.lazy(this.secQSPanelResourcePickerProvider);
            dependency.mNotificationBackupRestoreManager = DoubleCheck.lazy(this.notificationBackupRestoreManagerProvider);
            dependency.mQSBackupRestoreManager = DoubleCheck.lazy(this.qSBackupRestoreManagerProvider);
            dependency.mKnoxStateMonitor = DoubleCheck.lazy(this.providesKnoxStateMonitorProvider);
            dependency.mNotifLiveDataStore = DoubleCheck.lazy(this.notifLiveDataStoreImplProvider);
            dependency.mHeadsUpManager = DoubleCheck.lazy(this.provideHeadsUpManagerPhoneProvider);
            dependency.mMultiSIMControllerLazy = DoubleCheck.lazy(this.multiSIMControllerProvider);
            dependency.mSecPanelExpansionStateNotifier = DoubleCheck.lazy(this.secPanelExpansionStateNotifierProvider);
            dependency.mNotificationIconTransitionManager = DoubleCheck.lazy(this.notificationIconTransitionControllerProvider);
            dependency.mSecPanelLogger = DoubleCheck.lazy(this.providesSecPanelLoggerProvider);
            dependency.mSecPanelPolicy = DoubleCheck.lazy(this.secPanelPolicyProvider);
            dependency.mDesktopManager = DoubleCheck.lazy(this.provideDesktopManagerProvider);
            dependency.mSimpleStatusBarIconController = DoubleCheck.lazy(this.simpleStatusBarIconControllerProvider);
            dependency.mOnUserInteractionCallback = DoubleCheck.lazy(this.onUserInteractionCallbackImplProvider);
            dependency.mChannelEditorDialogController = DoubleCheck.lazy(this.channelEditorDialogControllerProvider);
            dependency.mHighPriorityProvider = DoubleCheck.lazy(this.highPriorityProvider);
            dependency.mAssistantFeedbackController = DoubleCheck.lazy(this.assistantFeedbackControllerProvider);
            dependency.mPeopleSpaceWidgetManager = DoubleCheck.lazy(this.peopleSpaceWidgetManagerProvider);
            dependency.mUserContextProvider = DoubleCheck.lazy(this.provideUserTrackerProvider);
            dependency.mBubblesManagerOptional = DoubleCheck.lazy(this.provideBubblesManagerProvider);
            dependency.mLauncherApps = DoubleCheck.lazy(this.tvGlobalRootComponent.provideLauncherAppsProvider);
            dependency.mSubscreenNotificationController = DoubleCheck.lazy(this.subscreenNotificationControllerProvider);
            dependency.mNotifCollection = DoubleCheck.lazy(this.notifCollectionProvider);
            dependency.mFullExpansionPanelNotiAlphaController = DoubleCheck.lazy(this.fullExpansionPanelNotiAlphaControllerProvider);
            dependency.mNotificationShelfManager = DoubleCheck.lazy(this.notificationShelfManagerProvider);
            dependency.mPanelScreenShotBufferLogger = DoubleCheck.lazy(this.panelScreenShotBufferLoggerProvider);
            dependency.mNotiCinemaLogger = DoubleCheck.lazy(this.notiCinemaLoggerProvider);
            dependency.mSubscreenQsPanelController = DoubleCheck.lazy(this.providerSubscreenQsPanelControllerProvider);
            dependency.mShelfToolTipManager = DoubleCheck.lazy(this.shelfToolTipManagerProvider);
            dependency.mSubscreenMusicWidgetController = DoubleCheck.lazy(this.subscreenMusicWidgetControllerProvider);
            dependency.mNotificationsController = DoubleCheck.lazy(this.provideNotificationsControllerProvider);
            dependency.mShadeHeaderController = DoubleCheck.lazy(this.shadeHeaderControllerProvider);
            dependency.mSearcleManager = DoubleCheck.lazy(this.provideSearcleManagerProvider);
            return dependency;
        }

        public final DozeService injectDozeService(DozeService dozeService) {
            dozeService.mKeyguardUpdateMonitor = (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get();
            dozeService.mPluginAODManagerLazy = DoubleCheck.lazy(this.pluginAODManagerProvider);
            dozeService.mFaceWidgetManagerLazy = DoubleCheck.lazy(this.pluginFaceWidgetManagerProvider);
            dozeService.mDozeServiceHost = (DozeServiceHost) this.dozeServiceHostProvider.get();
            dozeService.mAODAmbientWallpaperHelper = (AODAmbientWallpaperHelper) this.aODAmbientWallpaperHelperProvider.get();
            dozeService.mWakefulnessLifecycle = (WakefulnessLifecycle) this.wakefulnessLifecycleProvider.get();
            return dozeService;
        }

        public final DozeServiceHost injectDozeServiceHost(DozeServiceHost dozeServiceHost) {
            dozeServiceHost.mLooperSlowLogController = (LooperSlowLogController) this.looperSlowLogControllerImplProvider.get();
            dozeServiceHost.mPluginAODManagerLazy = DoubleCheck.lazy(this.pluginAODManagerProvider);
            dozeServiceHost.mSecPanelPolicyLazy = DoubleCheck.lazy(this.secPanelPolicyProvider);
            return dozeServiceHost;
        }

        public final KeyguardSecAffordanceView injectKeyguardSecAffordanceView(KeyguardSecAffordanceView keyguardSecAffordanceView) {
            keyguardSecAffordanceView.mVibrationUtil = (VibrationUtil) this.tvGlobalRootComponent.vibrationUtilProvider.get();
            return keyguardSecAffordanceView;
        }

        public final KeyguardSecurityModel injectKeyguardSecurityModel(KeyguardSecurityModel keyguardSecurityModel) {
            keyguardSecurityModel.mKeyguardStateController = (KeyguardStateController) this.keyguardStateControllerImplProvider.get();
            return keyguardSecurityModel;
        }

        public final KeyguardSliceProvider injectKeyguardSliceProvider(KeyguardSliceProvider keyguardSliceProvider) {
            keyguardSliceProvider.mDozeParameters = (DozeParameters) this.dozeParametersProvider.get();
            keyguardSliceProvider.mZenModeController = (ZenModeController) this.zenModeControllerImplProvider.get();
            keyguardSliceProvider.mNextAlarmController = (NextAlarmController) this.nextAlarmControllerImplProvider.get();
            keyguardSliceProvider.mAlarmManager = (AlarmManager) this.tvGlobalRootComponent.provideAlarmManagerProvider.get();
            keyguardSliceProvider.mContentResolver = (ContentResolver) this.tvGlobalRootComponent.provideContentResolverProvider.get();
            keyguardSliceProvider.mMediaManager = (NotificationMediaManager) this.provideNotificationMediaManagerProvider.get();
            keyguardSliceProvider.mStatusBarStateController = (StatusBarStateController) this.statusBarStateControllerImplProvider.get();
            keyguardSliceProvider.mKeyguardBypassController = (KeyguardBypassController) this.keyguardBypassControllerProvider.get();
            keyguardSliceProvider.mKeyguardUpdateMonitor = (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get();
            keyguardSliceProvider.mUserTracker = (UserTracker) this.provideUserTrackerProvider.get();
            keyguardSliceProvider.mWakeLockLogger = wakeLockLogger();
            return keyguardSliceProvider;
        }

        public final NotificationLockscreenUserManagerImpl injectNotificationLockscreenUserManagerImpl(NotificationLockscreenUserManagerImpl notificationLockscreenUserManagerImpl) {
            notificationLockscreenUserManagerImpl.mPluginAODManagerLazy = DoubleCheck.lazy(this.pluginAODManagerProvider);
            return notificationLockscreenUserManagerImpl;
        }

        public final PeopleProvider injectPeopleProvider(PeopleProvider peopleProvider) {
            peopleProvider.mPeopleSpaceWidgetManager = (PeopleSpaceWidgetManager) this.peopleSpaceWidgetManagerProvider.get();
            return peopleProvider;
        }

        public final PluginAODManager injectPluginAODManager(PluginAODManager pluginAODManager) {
            pluginAODManager.mEmm = (EngineeringModeManagerWrapper) this.engineeringModeManagerWrapperProvider.get();
            return pluginAODManager;
        }

        public final ScrimController injectScrimController(ScrimController scrimController) {
            scrimController.mSecLsScrimControlHelper = (SecLsScrimControlHelper) this.secLsScrimControlHelperProvider.get();
            scrimController.mAODAmbientWallpaperHelper = (AODAmbientWallpaperHelper) this.aODAmbientWallpaperHelperProvider.get();
            return scrimController;
        }

        public final StatusBarStateControllerImpl injectStatusBarStateControllerImpl(StatusBarStateControllerImpl statusBarStateControllerImpl) {
            statusBarStateControllerImpl.mLooperSlowLogController = (LooperSlowLogController) this.looperSlowLogControllerImplProvider.get();
            return statusBarStateControllerImpl;
        }

        public final StatusBarWindowController injectStatusBarWindowController(StatusBarWindowController statusBarWindowController) {
            statusBarWindowController.getClass();
            return statusBarWindowController;
        }

        public final SystemUIAppComponentFactoryBase injectSystemUIAppComponentFactoryBase(SystemUIAppComponentFactoryBase systemUIAppComponentFactoryBase) {
            systemUIAppComponentFactoryBase.componentHelper = (ContextComponentHelper) this.contextComponentResolverProvider.get();
            return systemUIAppComponentFactoryBase;
        }

        public final TestProtocolProvider injectTestProtocolProvider(TestProtocolProvider testProtocolProvider) {
            testProtocolProvider.plankComponent = (PlankComponent) this.plankComponentProvider.get();
            return testProtocolProvider;
        }

        public final InternetDialogController internetDialogController() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            return new InternetDialogController(daggerTvGlobalRootComponent.context, (UiEventLogger) daggerTvGlobalRootComponent.provideUiEventLoggerProvider.get(), (ActivityStarter) this.activityStarterImplProvider.get(), (AccessPointController) this.provideAccessPointControllerImplProvider.get(), (SubscriptionManager) this.tvGlobalRootComponent.provideSubscriptionManagerProvider.get(), (TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get(), (WifiManager) this.tvGlobalRootComponent.provideWifiManagerProvider.get(), (ConnectivityManager) this.tvGlobalRootComponent.provideConnectivityManagagerProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get(), (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get(), (GlobalSettings) globalSettingsImpl(), (KeyguardStateController) this.keyguardStateControllerImplProvider.get(), (WindowManager) this.tvGlobalRootComponent.provideWindowManagerProvider.get(), (ToastFactory) this.toastFactoryProvider.get(), (Handler) this.provideBgHandlerProvider.get(), (CarrierConfigTracker) this.carrierConfigTrackerProvider.get(), (LocationController) this.locationControllerImplProvider.get(), (DialogLaunchAnimator) this.provideDialogLaunchAnimatorProvider.get(), (WifiStateWorker) this.wifiStateWorkerProvider.get(), (SettingsHelper) this.settingsHelperProvider.get(), (FeatureFlags) this.featureFlagsReleaseProvider.get());
        }

        public final KeyguardBouncerViewModel keyguardBouncerViewModel() {
            return new KeyguardBouncerViewModel((BouncerView) this.bouncerViewImplProvider.get(), (PrimaryBouncerInteractor) this.primaryBouncerInteractorProvider.get());
        }

        public final KeyguardLogger keyguardLogger() {
            return new KeyguardLogger((LogBuffer) this.provideKeyguardLogBufferProvider.get());
        }

        public final KeyguardMessageAreaController.Factory keyguardMessageAreaControllerFactory() {
            return new KeyguardMessageAreaController.Factory((KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get(), (ConfigurationController) this.configurationControllerImplProvider.get());
        }

        public final KeyguardQuickAffordanceProviderClientFactoryImpl keyguardQuickAffordanceProviderClientFactoryImpl() {
            return new KeyguardQuickAffordanceProviderClientFactoryImpl((UserTracker) this.provideUserTrackerProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get());
        }

        public final KeyguardQuickAffordanceRegistryImpl keyguardQuickAffordanceRegistryImpl() {
            return new KeyguardQuickAffordanceRegistryImpl((HomeControlsKeyguardQuickAffordanceConfig) this.homeControlsKeyguardQuickAffordanceConfigProvider.get(), (QuickAccessWalletKeyguardQuickAffordanceConfig) this.quickAccessWalletKeyguardQuickAffordanceConfigProvider.get(), (QrCodeScannerKeyguardQuickAffordanceConfig) this.qrCodeScannerKeyguardQuickAffordanceConfigProvider.get());
        }

        public final KeyguardUpdateMonitorLogger keyguardUpdateMonitorLogger() {
            return new KeyguardUpdateMonitorLogger((LogBuffer) this.provideKeyguardUpdateMonitorLogBufferProvider.get());
        }

        public final KeyguardWallpaperEventHandler keyguardWallpaperEventHandler() {
            return new KeyguardWallpaperEventHandler(this.tvGlobalRootComponent.context, (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get(), (WakefulnessLifecycle) this.wakefulnessLifecycleProvider.get(), (SettingsHelper) this.settingsHelperProvider.get());
        }

        public final LSShadeTransitionLogger lSShadeTransitionLogger() {
            return new LSShadeTransitionLogger((LogBuffer) this.provideLSShadeTransitionControllerBufferProvider.get(), (LockscreenGestureLogger) this.lockscreenGestureLoggerProvider.get(), (DisplayMetrics) this.tvGlobalRootComponent.provideDisplayMetricsProvider.get());
        }

        public final LatinNetworkNameProviderImpl latinNetworkNameProviderImpl() {
            return new LatinNetworkNameProviderImpl(this.tvGlobalRootComponent.context, (BroadcastDispatcher) this.broadcastDispatcherProvider.get(), (CarrierInfraMediator) this.fakeCarrierInfraMediatorImplProvider.get(), (TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get(), (LocationController) this.locationControllerImplProvider.get(), (SubscriptionManager) this.tvGlobalRootComponent.provideSubscriptionManagerProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (ImsRegStateUtil) this.imsRegStateUtilProvider.get(), (SubscriptionsOrder) this.subscriptionsOrderProvider.get());
        }

        public final LayoutUtil layoutUtil() {
            return new LayoutUtil(this.tvGlobalRootComponent.context);
        }

        public final LocalMediaManagerFactory localMediaManagerFactory() {
            return new LocalMediaManagerFactory(this.tvGlobalRootComponent.context, (LocalBluetoothManager) this.provideLocalBluetoothControllerProvider.get());
        }

        public final LockscreenNotificationManagerLogger lockscreenNotificationManagerLogger() {
            return new LockscreenNotificationManagerLogger((LogBuffer) this.provideNotificationsLogBufferProvider.get());
        }

        public final LockscreenShadeScrimTransitionController lockscreenShadeScrimTransitionController() {
            return new LockscreenShadeScrimTransitionController((ScrimController) this.scrimControllerProvider.get(), this.tvGlobalRootComponent.context, (ConfigurationController) this.configurationControllerImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
        }

        public final LogBufferFreezer logBufferFreezer() {
            return new LogBufferFreezer((DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get());
        }

        public final LongTapClassifier longTapClassifier() {
            return new LongTapClassifier((FalsingDataProvider) this.falsingDataProvider.get(), namedFloat2());
        }

        public final MessageRouter mainMessageRouter() {
            DelayableExecutor delayableExecutor = (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get();
            Long l = SysUIConcurrencyModule.BG_SLOW_DISPATCH_THRESHOLD;
            return new MessageRouterImpl(delayableExecutor);
        }

        public final Map<Class<?>, Provider> mapOfClassOfAndProviderOfActivity() {
            MapBuilder newMapBuilder = MapBuilder.newMapBuilder(44);
            newMapBuilder.contributions.put(TunerActivity.class, this.tunerActivityProvider);
            newMapBuilder.contributions.put(ForegroundServicesDialog.class, this.foregroundServicesDialogProvider);
            newMapBuilder.contributions.put(WorkLockActivity.class, this.workLockActivityProvider);
            newMapBuilder.contributions.put(BrightnessDialog.class, this.brightnessDialogProvider);
            newMapBuilder.contributions.put(ContrastDialogActivity.class, this.contrastDialogActivityProvider);
            newMapBuilder.contributions.put(UsbDebuggingActivity.class, this.usbDebuggingActivityProvider);
            newMapBuilder.contributions.put(UsbDebuggingSecondaryUserActivity.class, this.usbDebuggingSecondaryUserActivityProvider);
            newMapBuilder.contributions.put(UsbPermissionActivity.class, this.usbPermissionActivityProvider);
            newMapBuilder.contributions.put(UsbConfirmActivity.class, this.usbConfirmActivityProvider);
            newMapBuilder.contributions.put(UsbAccessoryUriActivity.class, this.usbAccessoryUriActivityProvider);
            newMapBuilder.contributions.put(CreateUserActivity.class, this.createUserActivityProvider);
            newMapBuilder.contributions.put(TvNotificationPanelActivity.class, this.tvNotificationPanelActivityProvider);
            newMapBuilder.contributions.put(PeopleSpaceActivity.class, this.peopleSpaceActivityProvider);
            newMapBuilder.contributions.put(LongScreenshotActivity.class, this.longScreenshotActivityProvider);
            newMapBuilder.contributions.put(AppClipsTrampolineActivity.class, this.appClipsTrampolineActivityProvider);
            newMapBuilder.contributions.put(AppClipsActivity.class, this.appClipsActivityProvider);
            newMapBuilder.contributions.put(LaunchConversationActivity.class, this.launchConversationActivityProvider);
            newMapBuilder.contributions.put(SensorUseStartedActivity.class, this.sensorUseStartedActivityProvider);
            newMapBuilder.contributions.put(TvUnblockSensorActivity.class, this.tvUnblockSensorActivityProvider);
            newMapBuilder.contributions.put(HdmiCecSetMenuLanguageActivity.class, this.hdmiCecSetMenuLanguageActivityProvider);
            newMapBuilder.contributions.put(TvSensorPrivacyChangedActivity.class, this.tvSensorPrivacyChangedActivityProvider);
            newMapBuilder.contributions.put(CoverHomeActivity.class, this.coverHomeActivityProvider);
            newMapBuilder.contributions.put(SwitchToManagedProfileForCallActivity.class, this.switchToManagedProfileForCallActivityProvider);
            newMapBuilder.contributions.put(SubscreenNotificationReplyActivity.class, this.subscreenNotificationReplyActivityProvider);
            newMapBuilder.contributions.put(SubscreenNotificationIntelligenceStartActivity.class, this.subscreenNotificationIntelligenceStartActivityProvider);
            newMapBuilder.contributions.put(SubHomeActivity.class, this.subHomeActivityProvider);
            newMapBuilder.contributions.put(SubScreenFallback.class, this.subScreenFallbackProvider);
            newMapBuilder.contributions.put(ControlsEditingActivity.class, this.controlsEditingActivityProvider);
            newMapBuilder.contributions.put(ControlsRequestDialog.class, this.controlsRequestDialogProvider);
            newMapBuilder.contributions.put(MediaProjectionAppSelectorActivity.class, this.mediaProjectionAppSelectorActivityProvider);
            newMapBuilder.contributions.put(MediaProjectionPermissionActivity.class, this.mediaProjectionPermissionActivityProvider);
            newMapBuilder.contributions.put(LaunchNoteTaskActivity.class, this.launchNoteTaskActivityProvider);
            newMapBuilder.contributions.put(LaunchNoteTaskManagedProfileProxyActivity.class, this.launchNoteTaskManagedProfileProxyActivityProvider);
            newMapBuilder.contributions.put(LaunchNotesRoleSettingsTrampolineActivity.class, this.launchNotesRoleSettingsTrampolineActivityProvider);
            newMapBuilder.contributions.put(CreateNoteTaskShortcutActivity.class, this.createNoteTaskShortcutActivityProvider);
            newMapBuilder.contributions.put(WalletActivity.class, this.walletActivityProvider);
            newMapBuilder.contributions.put(CustomControlsProviderSelectorActivity.class, this.customControlsProviderSelectorActivityProvider);
            newMapBuilder.contributions.put(CustomControlsFavoritingActivity.class, this.customControlsFavoritingActivityProvider);
            newMapBuilder.contributions.put(CustomControlsActivity.class, this.customControlsActivityProvider);
            newMapBuilder.contributions.put(ControlsReorderActivity.class, this.controlsReorderActivityProvider);
            newMapBuilder.contributions.put(ControlsSettingActivity.class, this.controlsSettingActivityProvider);
            newMapBuilder.contributions.put(SecQSSettingEditMainActivity.class, this.secQSSettingEditMainActivityProvider);
            newMapBuilder.contributions.put(SecQSSettingEditTilesActivity.class, this.secQSSettingEditTilesActivityProvider);
            newMapBuilder.contributions.put(SecQSSettingEditDirectlyActivity.class, this.secQSSettingEditDirectlyActivityProvider);
            return newMapBuilder.build();
        }

        public final Map<Class<?>, Provider> mapOfClassOfAndProviderOfBroadcastReceiver() {
            MapBuilder newMapBuilder = MapBuilder.newMapBuilder(10);
            newMapBuilder.contributions.put(ActionProxyReceiver.class, this.actionProxyReceiverProvider);
            newMapBuilder.contributions.put(DeleteScreenshotReceiver.class, this.deleteScreenshotReceiverProvider);
            newMapBuilder.contributions.put(SmartActionsReceiver.class, this.smartActionsReceiverProvider);
            newMapBuilder.contributions.put(MediaOutputDialogReceiver.class, this.mediaOutputDialogReceiverProvider);
            newMapBuilder.contributions.put(VolumePanelDialogReceiver.class, this.volumePanelDialogReceiverProvider);
            newMapBuilder.contributions.put(PeopleSpaceWidgetPinnedReceiver.class, this.peopleSpaceWidgetPinnedReceiverProvider);
            newMapBuilder.contributions.put(PeopleSpaceWidgetProvider.class, this.peopleSpaceWidgetProvider);
            newMapBuilder.contributions.put(GuestResetOrExitSessionReceiver.class, this.guestResetOrExitSessionReceiverProvider);
            newMapBuilder.contributions.put(ControlsRequestReceiver.class, this.controlsRequestReceiverProvider);
            newMapBuilder.contributions.put(ControlsBackupRestoreReceiver.class, this.controlsBackupRestoreReceiverProvider);
            return newMapBuilder.build();
        }

        public final Map<Class<?>, Provider> mapOfClassOfAndProviderOfRecentsImplementation() {
            return Collections.singletonMap(OverviewProxyRecentsImpl.class, this.overviewProxyRecentsImplProvider);
        }

        public final Map<Class<?>, Provider> mapOfClassOfAndProviderOfService() {
            MapBuilder newMapBuilder = MapBuilder.newMapBuilder(15);
            newMapBuilder.contributions.put(DozeService.class, this.dozeServiceProvider);
            newMapBuilder.contributions.put(ImageWallpaper.class, this.imageWallpaperProvider);
            newMapBuilder.contributions.put(KeyguardService.class, this.keyguardServiceProvider);
            newMapBuilder.contributions.put(DreamOverlayService.class, this.dreamOverlayServiceProvider);
            newMapBuilder.contributions.put(NotificationListenerWithPlugins.class, this.notificationListenerWithPluginsProvider);
            newMapBuilder.contributions.put(SystemUIService.class, this.systemUIServiceProvider);
            newMapBuilder.contributions.put(SystemUIAuxiliaryDumpService.class, this.systemUIAuxiliaryDumpServiceProvider);
            newMapBuilder.contributions.put(RecordingService.class, this.recordingServiceProvider);
            newMapBuilder.contributions.put(SysUICoverService.class, this.sysUICoverServiceProvider);
            newMapBuilder.contributions.put(TakeScreenshotService.class, this.takeScreenshotServiceProvider);
            newMapBuilder.contributions.put(ScreenshotProxyService.class, this.screenshotProxyServiceProvider);
            newMapBuilder.contributions.put(AppClipsScreenshotHelperService.class, this.appClipsScreenshotHelperServiceProvider);
            newMapBuilder.contributions.put(AppClipsService.class, this.appClipsServiceProvider);
            newMapBuilder.contributions.put(NoteTaskControllerUpdateService.class, this.noteTaskControllerUpdateServiceProvider);
            newMapBuilder.contributions.put(WalletContextualLocationsService.class, this.walletContextualLocationsServiceProvider);
            return newMapBuilder.build();
        }

        public final Map<String, Provider> mapOfStringAndProviderOfQSTileImplOf() {
            MapBuilder newMapBuilder = MapBuilder.newMapBuilder(35);
            newMapBuilder.contributions.put("ColorInversion", this.colorInversionTileProvider);
            newMapBuilder.contributions.put("night", this.nightDisplayTileProvider);
            newMapBuilder.contributions.put("ReduceBrightColors", this.reduceBrightColorsTileProvider);
            newMapBuilder.contributions.put("onehanded", this.oneHandedModeTileProvider);
            newMapBuilder.contributions.put("ColorCorrection", this.colorCorrectionTileProvider);
            newMapBuilder.contributions.put(BcSmartspaceDataPlugin.UI_SURFACE_DREAM, this.dreamTileProvider);
            newMapBuilder.contributions.put("font_scaling", this.fontScalingTileProvider);
            newMapBuilder.contributions.put("ColorAdjustment", this.colorAdjustmentTileProvider);
            newMapBuilder.contributions.put("ColorLens", this.colorLensTileProvider);
            newMapBuilder.contributions.put("HighContrastFont", this.highContrastFontTileProvider);
            newMapBuilder.contributions.put("Wifi", this.wifiTileProvider);
            newMapBuilder.contributions.put("Bluetooth", this.sBluetoothTileProvider);
            newMapBuilder.contributions.put("MobileData", this.mobileDataTileProvider);
            newMapBuilder.contributions.put("cast", this.castTileProvider);
            newMapBuilder.contributions.put("Hotspot", this.hotspotTileProvider);
            newMapBuilder.contributions.put("AirplaneMode", this.airplaneModeTileProvider);
            newMapBuilder.contributions.put("saver", this.dataSaverTileProvider);
            newMapBuilder.contributions.put("nfc", this.nfcTileProvider);
            newMapBuilder.contributions.put("DeviceControl", this.deviceControlTileProvider);
            newMapBuilder.contributions.put("dbg:mem", this.memoryTileProvider);
            newMapBuilder.contributions.put("Dnd", this.dndTileProvider);
            newMapBuilder.contributions.put("WorkMode", this.sWorkModeTileProvider);
            newMapBuilder.contributions.put("Flashlight", this.flashlightTileProvider);
            newMapBuilder.contributions.put("BlueLightFilter", this.blueLightFilterTileProvider);
            newMapBuilder.contributions.put("Location", this.locationTileProvider);
            newMapBuilder.contributions.put("CameraToggle", this.cameraToggleTileProvider);
            newMapBuilder.contributions.put("MicrophoneToggle", this.microphoneToggleTileProvider);
            newMapBuilder.contributions.put("alarm", this.alarmTileProvider);
            newMapBuilder.contributions.put("UiModeNight", this.uiModeNightTileProvider);
            newMapBuilder.contributions.put("ScreenCapture", this.screenCaptureTileProvider);
            newMapBuilder.contributions.put("Sync", this.syncTileProvider);
            newMapBuilder.contributions.put("qr_code_scanner", this.qRCodeScannerTileProvider);
            newMapBuilder.contributions.put("screenrecord", this.screenRecordTileProvider);
            newMapBuilder.contributions.put("wallet", this.quickAccessWalletTileProvider);
            newMapBuilder.contributions.put("SoundMode", this.soundModeTileProvider);
            return newMapBuilder.build();
        }

        public final MediaBrowserFactory mediaBrowserFactory() {
            return new MediaBrowserFactory(this.tvGlobalRootComponent.context);
        }

        public final MediaControllerFactory mediaControllerFactory() {
            return new MediaControllerFactory(this.tvGlobalRootComponent.context);
        }

        public final MediaDataFilter mediaDataFilter() {
            return new MediaDataFilter(this.tvGlobalRootComponent.context, (UserTracker) this.provideUserTrackerProvider.get(), (BroadcastSender) this.broadcastSenderProvider.get(), (NotificationLockscreenUserManager) this.notificationLockscreenUserManagerImplProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (MediaUiEventLogger) this.mediaUiEventLoggerProvider.get(), (MediaFlags) this.mediaFlagsProvider.get());
        }

        public final MediaDeviceManager mediaDeviceManager() {
            return new MediaDeviceManager(this.tvGlobalRootComponent.context, mediaControllerFactory(), localMediaManagerFactory(), this.tvGlobalRootComponent.mediaRouter2Manager(), (MediaMuteAwaitConnectionManagerFactory) this.mediaMuteAwaitConnectionManagerFactoryProvider.get(), (ConfigurationController) this.configurationControllerImplProvider.get(), (LocalBluetoothManager) this.provideLocalBluetoothControllerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get());
        }

        public final MediaFeatureFlag mediaFeatureFlag() {
            return new MediaFeatureFlag(this.tvGlobalRootComponent.context);
        }

        public final MediaLogWriter mediaLogWriter() {
            return new MediaLogWriter((LogBuffer) this.provideMediaLogBufferProvider.get());
        }

        public final MediaOutputBroadcastDialogFactory mediaOutputBroadcastDialogFactory() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            return new MediaOutputBroadcastDialogFactory(daggerTvGlobalRootComponent.context, daggerTvGlobalRootComponent.mediaSessionManager(), (LocalBluetoothManager) this.provideLocalBluetoothControllerProvider.get(), (ActivityStarter) this.activityStarterImplProvider.get(), (BroadcastSender) this.broadcastSenderProvider.get(), (CommonNotifCollection) this.notifPipelineProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (DialogLaunchAnimator) this.provideDialogLaunchAnimatorProvider.get(), (Optional) this.providesNearbyMediaDevicesManagerProvider.get(), (AudioManager) this.tvGlobalRootComponent.provideAudioManagerProvider.get(), (PowerExemptionManager) this.tvGlobalRootComponent.providePowerExemptionManagerProvider.get(), (KeyguardManager) this.tvGlobalRootComponent.provideKeyguardManagerProvider.get(), (FeatureFlags) this.featureFlagsReleaseProvider.get(), (UserTracker) this.provideUserTrackerProvider.get());
        }

        public final MediaSessionBasedFilter mediaSessionBasedFilter() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            return new MediaSessionBasedFilter(daggerTvGlobalRootComponent.context, daggerTvGlobalRootComponent.mediaSessionManager(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get());
        }

        public final MessageContainerController messageContainerController() {
            return new MessageContainerController(workProfileMessageController(), screenshotDetectionController(), (FeatureFlags) this.featureFlagsReleaseProvider.get());
        }

        public final MobileConnectionRepositoryImpl.Factory mobileConnectionRepositoryImplFactory() {
            return new MobileConnectionRepositoryImpl.Factory((BroadcastDispatcher) this.broadcastDispatcherProvider.get(), (TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get(), (MobileInputLogger) this.mobileInputLoggerProvider.get(), (CarrierConfigRepository) this.carrierConfigRepositoryProvider.get(), new MobileMappingsProxyImpl(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), (CoroutineScope) this.applicationScopeProvider.get(), (CarrierInfraMediator) this.fakeCarrierInfraMediatorImplProvider.get(), (SimCardInfoUtil) this.simCardInfoUtilProvider.get(), (GlobalSettings) globalSettingsImpl(), (ImsRegStateUtil) this.imsRegStateUtilProvider.get(), this.tvGlobalRootComponent.context);
        }

        public final MobileDataIconResource mobileDataIconResource() {
            return new MobileDataIconResource((CarrierInfraMediator) this.fakeCarrierInfraMediatorImplProvider.get(), new MobileMappingsProxyImpl(), (TelephonyManager) this.tvGlobalRootComponent.provideTelephonyManagerProvider.get());
        }

        public final MobileDisabledDataIconResource mobileDisabledDataIconResource() {
            return new MobileDisabledDataIconResource((CarrierInfraMediator) this.fakeCarrierInfraMediatorImplProvider.get(), (SettingsHelper) this.settingsHelperProvider.get());
        }

        public final MobileRoamingIconResource mobileRoamingIconResource() {
            return new MobileRoamingIconResource((CarrierInfraMediator) this.fakeCarrierInfraMediatorImplProvider.get());
        }

        public final MobileSignalIconResource mobileSignalIconResource() {
            return new MobileSignalIconResource((CarrierInfraMediator) this.fakeCarrierInfraMediatorImplProvider.get());
        }

        public final MotionToolManager motionToolManager() {
            MotionToolModule.Companion.getClass();
            return MotionToolModule_Companion_ProvideMotionToolManagerFactory.provideMotionToolManager(WindowManagerGlobal.getInstance());
        }

        public final MusicControlActionInteractor musicControlActionInteractor() {
            return new MusicControlActionInteractor(this.tvGlobalRootComponent.context);
        }

        public final boolean namedBoolean() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return FalsingModule.providesIsFoldableDevice(daggerTvGlobalRootComponent.mainResources());
        }

        public final boolean namedBoolean2() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return DreamModule.providesDreamSupported(daggerTvGlobalRootComponent.mainResources());
        }

        public final boolean namedBoolean3() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return DreamModule.providesDreamOnlyEnabledForDockUser(daggerTvGlobalRootComponent.mainResources());
        }

        public final Boolean namedBoolean4() {
            return DreamModule_ProvidesDreamOverlayEnabledFactory.providesDreamOverlayEnabled((PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get(), namedComponentName());
        }

        public final ComponentName namedComponentName() {
            return new ComponentName(this.tvGlobalRootComponent.context, (Class<?>) DreamOverlayService.class);
        }

        public final ComponentName namedComponentName2() {
            LowLightDreamModule lowLightDreamModule = LowLightDreamModule.INSTANCE;
            Context context = this.tvGlobalRootComponent.context;
            lowLightDreamModule.getClass();
            return LowLightDreamModule.providesLowLightDreamComponent(context);
        }

        public final float namedFloat() {
            return ((ViewConfiguration) this.tvGlobalRootComponent.provideViewConfigurationProvider.get()).getScaledTouchSlop();
        }

        public final float namedFloat2() {
            return FalsingModule.providesLongTapTouchSlop((ViewConfiguration) this.tvGlobalRootComponent.provideViewConfigurationProvider.get());
        }

        public final float namedFloat3() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return FalsingModule.providesDoubleTapTouchSlop(daggerTvGlobalRootComponent.mainResources());
        }

        public final com.android.systemui.dreams.touch.scrim.ScrimController namedScrimController() {
            BouncerScrimController bouncerScrimController = bouncerScrimController();
            Preconditions.checkNotNullFromProvides(bouncerScrimController);
            return bouncerScrimController;
        }

        public final com.android.systemui.dreams.touch.scrim.ScrimController namedScrimController2() {
            BouncerlessScrimController bouncerlessScrimController = (BouncerlessScrimController) this.bouncerlessScrimControllerProvider.get();
            Preconditions.checkNotNullFromProvides(bouncerlessScrimController);
            return bouncerlessScrimController;
        }

        public final Set<FalsingClassifier> namedSetOfFalsingClassifier() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(1);
            newSetBuilder.addAll(providesBrightLineGestureClassifiers());
            return newSetBuilder.build();
        }

        public final String namedString() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            String string = daggerTvGlobalRootComponent.mainResources().getString(R.string.app_label);
            Preconditions.checkNotNullFromProvides(string);
            return string;
        }

        public final String namedString2() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            String string = daggerTvGlobalRootComponent.mainResources().getString(R.string.launcher_overlayable_package);
            Preconditions.checkNotNullFromProvides(string);
            return string;
        }

        public final String namedString3() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            String string = daggerTvGlobalRootComponent.mainResources().getString(R.string.themepicker_overlayable_package);
            Preconditions.checkNotNullFromProvides(string);
            return string;
        }

        public final String[] namedStringArray() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            String[] stringArray = daggerTvGlobalRootComponent.mainResources().getStringArray(17236273);
            Preconditions.checkNotNullFromProvides(stringArray);
            return stringArray;
        }

        public final NavBarRemoteViewManager navBarRemoteViewManager() {
            return new NavBarRemoteViewManager(this.tvGlobalRootComponent.context, (SettingsHelper) this.settingsHelperProvider.get());
        }

        public final NightDisplayListenerModule.Builder nightDisplayListenerModuleBuilder() {
            return new NightDisplayListenerModule.Builder(this.tvGlobalRootComponent.context, (Handler) this.provideBgHandlerProvider.get());
        }

        public final NodeSpecBuilderLogger nodeSpecBuilderLogger() {
            return new NodeSpecBuilderLogger(notifPipelineFlags(), (LogBuffer) this.provideNotificationsLogBufferProvider.get());
        }

        public final boolean noteTaskEnabledKeyBoolean() {
            NoteTaskModule.Companion companion = NoteTaskModule.Companion;
            FeatureFlags featureFlags = (FeatureFlags) this.featureFlagsReleaseProvider.get();
            RoleManager roleManager = (RoleManager) this.tvGlobalRootComponent.provideRoleManagerProvider.get();
            companion.getClass();
            boolean isRoleAvailable = roleManager.isRoleAvailable("android.app.role.NOTES");
            boolean isEnabled = ((FeatureFlagsRelease) featureFlags).isEnabled(Flags.NOTE_TASKS);
            if (isRoleAvailable && isEnabled) {
                return true;
            }
            return false;
        }

        public final NoteTaskEventLogger noteTaskEventLogger() {
            return new NoteTaskEventLogger((UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get());
        }

        public final NoteTaskInfoResolver noteTaskInfoResolver() {
            return new NoteTaskInfoResolver((RoleManager) this.tvGlobalRootComponent.provideRoleManagerProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get());
        }

        public final NoteTaskInitializer noteTaskInitializer() {
            return new NoteTaskInitializer((NoteTaskController) this.noteTaskControllerProvider.get(), (RoleManager) this.tvGlobalRootComponent.provideRoleManagerProvider.get(), (CommandQueue) this.provideCommandQueueProvider.get(), this.setBubbles, (UserTracker) this.provideUserTrackerProvider.get(), (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get(), noteTaskEnabledKeyBoolean());
        }

        public final NoteTaskQuickAffordanceConfig noteTaskQuickAffordanceConfig() {
            return new NoteTaskQuickAffordanceConfig(this.tvGlobalRootComponent.context, (NoteTaskController) this.noteTaskControllerProvider.get(), noteTaskInfoResolver(), (StylusManager) this.stylusManagerProvider.get(), (RoleManager) this.tvGlobalRootComponent.provideRoleManagerProvider.get(), (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), DoubleCheck.lazy(this.keyguardQuickAffordanceRepositoryProvider), noteTaskEnabledKeyBoolean(), (Executor) this.provideBackgroundExecutorProvider.get());
        }

        public final NotifBindPipelineInitializer notifBindPipelineInitializer() {
            return new NotifBindPipelineInitializer((NotifBindPipeline) this.notifBindPipelineProvider.get(), (RowContentBindStage) this.rowContentBindStageProvider.get());
        }

        public final NotifBindPipelineLogger notifBindPipelineLogger() {
            return new NotifBindPipelineLogger((LogBuffer) this.provideNotificationsLogBufferProvider.get());
        }

        public final NotifCollectionLogger notifCollectionLogger() {
            return new NotifCollectionLogger((LogBuffer) this.provideNotificationsLogBufferProvider.get());
        }

        public final NotifPipelineFlags notifPipelineFlags() {
            Context context = this.tvGlobalRootComponent.context;
            FeatureFlags featureFlags = (FeatureFlags) this.featureFlagsReleaseProvider.get();
            SystemPropertiesFlagsModule.INSTANCE.getClass();
            return new NotifPipelineFlags(context, featureFlags, SystemUiSystemPropertiesFlags.getResolver());
        }

        public final NotificationClicker.Builder notificationClickerBuilder() {
            return new NotificationClicker.Builder(notificationClickerLogger());
        }

        public final NotificationClickerLogger notificationClickerLogger() {
            return new NotificationClickerLogger((LogBuffer) this.provideNotifInteractionLogBufferProvider.get());
        }

        public final NotificationControlActionInteractor notificationControlActionInteractor() {
            return new NotificationControlActionInteractor(this.tvGlobalRootComponent.context, (NotificationController) this.notificationControllerProvider.get());
        }

        public final NotificationInterruptLogger notificationInterruptLogger() {
            return new NotificationInterruptLogger((LogBuffer) this.provideNotificationInterruptLogBufferProvider.get());
        }

        public final NotificationWakeUpCoordinatorLogger notificationWakeUpCoordinatorLogger() {
            return new NotificationWakeUpCoordinatorLogger((LogBuffer) this.provideNotificationLockScreenLogBufferProvider.get());
        }

        public final PackageManagerAdapter packageManagerAdapter() {
            return new PackageManagerAdapter(this.tvGlobalRootComponent.context);
        }

        public final PanelInteractor panelInteractor() {
            QSTileHost qSTileHost = (QSTileHost) this.qSTileHostProvider.get();
            QSHostModule.Companion.getClass();
            Flags flags = Flags.INSTANCE;
            return qSTileHost;
        }

        public final PendingRemovalStore pendingRemovalStore() {
            return new PendingRemovalStore(broadcastDispatcherLogger());
        }

        public final NodeController peopleHeaderNodeController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesPeopleHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            NodeController nodeController = sectionHeaderControllerSubcomponent.getNodeController();
            Preconditions.checkNotNullFromProvides(nodeController);
            return nodeController;
        }

        public final SectionHeaderController peopleHeaderSectionHeaderController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesPeopleHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            SectionHeaderController headerController = sectionHeaderControllerSubcomponent.getHeaderController();
            Preconditions.checkNotNullFromProvides(headerController);
            return headerController;
        }

        public final PeopleViewModel.Factory peopleViewModelFactory() {
            return new PeopleViewModel.Factory((Context) this.tvGlobalRootComponent.provideApplicationContextProvider.get(), (PeopleTileRepository) this.peopleTileRepositoryImplProvider.get(), (PeopleWidgetRepository) this.peopleWidgetRepositoryImplProvider.get());
        }

        public final UserHandle personalProfileUserHandle() {
            MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule = this.mediaProjectionDevicePolicyModule;
            ActivityManagerWrapper activityManagerWrapper = (ActivityManagerWrapper) this.provideActivityManagerWrapperProvider.get();
            mediaProjectionDevicePolicyModule.getClass();
            activityManagerWrapper.getClass();
            return UserHandle.of(ActivityManagerWrapper.getCurrentUserId());
        }

        public final PhoneStatusBarPolicy phoneStatusBarPolicy() {
            return new PhoneStatusBarPolicy((StatusBarIconController) this.statusBarIconControllerImplProvider.get(), (CommandQueue) this.provideCommandQueueProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.tvGlobalRootComponent.provideUiBackgroundExecutorProvider.get(), (Looper) this.tvGlobalRootComponent.provideMainLooperProvider.get(), this.tvGlobalRootComponent.mainResources(), (CastController) this.castControllerImplProvider.get(), (HotspotController) this.hotspotControllerImplProvider.get(), (SBluetoothController) this.sBluetoothControllerImplProvider.get(), (NextAlarmController) this.nextAlarmControllerImplProvider.get(), (UserInfoController) this.userInfoControllerImplProvider.get(), (RotationLockController) this.rotationLockControllerImplProvider.get(), (DataSaverController) this.provideDataSaverControllerProvider.get(), (ZenModeController) this.zenModeControllerImplProvider.get(), (DeviceProvisionedController) this.providesDeviceProvisionedControllerProvider.get(), (KeyguardStateController) this.keyguardStateControllerImplProvider.get(), (LocationController) this.locationControllerImplProvider.get(), (SensorPrivacyController) this.provideSensorPrivacyControllerProvider.get(), (AlarmManager) this.tvGlobalRootComponent.provideAlarmManagerProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (UserTracker) this.provideUserTrackerProvider.get(), (DevicePolicyManager) this.tvGlobalRootComponent.provideDevicePolicyManagerProvider.get(), (RecordingController) this.recordingControllerProvider.get(), (TelecomManager) this.tvGlobalRootComponent.provideTelecomManagerProvider.get(), this.tvGlobalRootComponent.displayIdInteger(), this.tvGlobalRootComponent.mainSharedPreferences(), dateFormatUtil(), (RingerModeTracker) this.ringerModeTrackerImplProvider.get(), (PrivacyItemController) this.privacyItemControllerProvider.get(), privacyLogger(), (ConfigurationController) this.configurationControllerImplProvider.get(), (BatteryController) this.provideBatteryControllerProvider.get(), (KnoxStateMonitor) this.providesKnoxStateMonitorProvider.get(), (ActivityManager) this.tvGlobalRootComponent.provideActivityManagerProvider.get(), (SettingsHelper) this.settingsHelperProvider.get());
        }

        public final PluggedInCondition pluggedInCondition() {
            return new PluggedInCondition((BatteryController) this.provideBatteryControllerProvider.get());
        }

        public final Object pointerCountClassifier() {
            return new PointerCountClassifier((FalsingDataProvider) this.falsingDataProvider.get());
        }

        public final ThresholdSensor primaryProxSensorThresholdSensor() {
            return SensorModule_ProvidePrimaryProximitySensorFactory.providePrimaryProximitySensor((SensorManager) this.tvGlobalRootComponent.providesSensorManagerProvider.get(), thresholdSensorImplBuilder());
        }

        public final ThresholdSensor[] primaryProxSensorThresholdSensorArray() {
            ThresholdSensorImpl.BuilderFactory builderFactory = builderFactory();
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return SensorModule_ProvidePostureToProximitySensorMappingFactory.providePostureToProximitySensorMapping(builderFactory, daggerTvGlobalRootComponent.mainResources());
        }

        public final PrivacyLogger privacyLogger() {
            return new PrivacyLogger((LogBuffer) this.providePrivacyLogBufferProvider.get());
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final BootAnimationFinishedCacheImpl provideBootAnimationFinishedImpl() {
            return (BootAnimationFinishedCacheImpl) this.bootAnimationFinishedCacheImplProvider.get();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final BootAnimationFinishedTrigger provideBootAnimationFinishedTrigger() {
            return (BootAnimationFinishedTrigger) this.bootAnimationFinishedCacheImplProvider.get();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final BootCompleteCacheImpl provideBootCacheImpl() {
            return (BootCompleteCacheImpl) this.bootCompleteCacheImplProvider.get();
        }

        public final Set<FalsingClassifier> providesBrightLineGestureClassifiers() {
            return FalsingModule_ProvidesBrightLineGestureClassifiersFactory.providesBrightLineGestureClassifiers(distanceClassifier(), proximityClassifier(), pointerCountClassifier(), typeClassifier(), diagonalClassifier(), zigZagClassifier());
        }

        public final ProximityCheck proximityCheck() {
            return new ProximityCheck(proximitySensor(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get());
        }

        public final Object proximityClassifier() {
            return new ProximityClassifier((DistanceClassifier) distanceClassifier(), (FalsingDataProvider) this.falsingDataProvider.get(), (DeviceConfigProxy) this.deviceConfigProxyProvider.get());
        }

        public final ProximitySensor proximitySensor() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return SensorModule_ProvideProximitySensorFactory.provideProximitySensor(daggerTvGlobalRootComponent.mainResources(), DoubleCheck.lazy(this.postureDependentProximitySensorProvider), DoubleCheck.lazy(this.proximitySensorImplProvider));
        }

        public final QSFragmentDisableFlagsLogger qSFragmentDisableFlagsLogger() {
            return new QSFragmentDisableFlagsLogger((LogBuffer) this.provideQSFragmentDisableLogBufferProvider.get(), (DisableFlagsLogger) this.disableFlagsLoggerProvider.get());
        }

        public final QSLogger qSLogger() {
            return new QSLogger((LogBuffer) this.provideQuickSettingsLogBufferProvider.get(), (LogBuffer) this.provideQSConfigLogBufferProvider.get());
        }

        public final QSPipelineLogger qSPipelineLogger() {
            return new QSPipelineLogger((LogBuffer) this.provideQSTileListLogBufferProvider.get());
        }

        public final QsBatteryModeController qsBatteryModeController() {
            return new QsBatteryModeController(this.tvGlobalRootComponent.context, (StatusBarContentInsetsProvider) this.statusBarContentInsetsProvider.get());
        }

        public final Set<KeyguardQuickAffordanceConfig> quickAffordanceConfigs() {
            return KeyguardDataQuickAffordanceModule_Companion_QuickAffordanceConfigsFactory.quickAffordanceConfigs((CameraQuickAffordanceConfig) this.cameraQuickAffordanceConfigProvider.get(), (DoNotDisturbQuickAffordanceConfig) this.doNotDisturbQuickAffordanceConfigProvider.get(), (FlashlightQuickAffordanceConfig) this.flashlightQuickAffordanceConfigProvider.get(), (HomeControlsKeyguardQuickAffordanceConfig) this.homeControlsKeyguardQuickAffordanceConfigProvider.get(), (MuteQuickAffordanceConfig) this.muteQuickAffordanceConfigProvider.get(), (QuickAccessWalletKeyguardQuickAffordanceConfig) this.quickAccessWalletKeyguardQuickAffordanceConfigProvider.get(), (QrCodeScannerKeyguardQuickAffordanceConfig) this.qrCodeScannerKeyguardQuickAffordanceConfigProvider.get(), (VideoCameraQuickAffordanceConfig) this.videoCameraQuickAffordanceConfigProvider.get());
        }

        public final RecentsImplementation recentsImplementation() {
            return RecentsModule_ProvideRecentsImplFactory.provideRecentsImpl(this.tvGlobalRootComponent.context, (ContextComponentHelper) this.contextComponentResolverProvider.get());
        }

        public final ResumeMediaBrowserFactory resumeMediaBrowserFactory() {
            return new ResumeMediaBrowserFactory(this.tvGlobalRootComponent.context, mediaBrowserFactory(), (ResumeMediaBrowserLogger) this.resumeMediaBrowserLoggerProvider.get());
        }

        public final RowContentBindStageLogger rowContentBindStageLogger() {
            return new RowContentBindStageLogger((LogBuffer) this.provideNotificationsLogBufferProvider.get());
        }

        public final SamsungScreenPinningRequest samsungScreenPinningRequest() {
            return new SamsungScreenPinningRequest(this.tvGlobalRootComponent.context, (LogWrapper) this.providesPopupUILogWrapperProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get());
        }

        public final ScreenControlActionInteractor screenControlActionInteractor() {
            return new ScreenControlActionInteractor(this.tvGlobalRootComponent.context, (ScreenController) this.screenControllerProvider.get());
        }

        public final ScreenIdleCondition screenIdleCondition() {
            return new ScreenIdleCondition((WakefulnessLifecycle) this.wakefulnessLifecycleProvider.get());
        }

        public final ScreenPinningRequest screenPinningRequest() {
            return new ScreenPinningRequest(this.tvGlobalRootComponent.context, DoubleCheck.lazy(this.optionalOfCentralSurfacesProvider), (NavigationModeController) this.navigationModeControllerProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get(), (UserTracker) this.provideUserTrackerProvider.get());
        }

        public final ScreenshotController screenshotController() {
            return ScreenshotController_Factory.newInstance(this.tvGlobalRootComponent.context, (FeatureFlags) this.featureFlagsReleaseProvider.get(), (ScreenshotSmartActions) this.screenshotSmartActionsProvider.get(), screenshotNotificationsController(), scrollCaptureClient(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), imageExporter(), (ImageCapture) this.imageCaptureImplProvider.get(), (SemImageCaptureImpl) this.semImageCaptureImplProvider.get(), screenshotDetectionController(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), scrollCaptureController(), (LongScreenshotData) this.longScreenshotDataProvider.get(), (ActivityManager) this.tvGlobalRootComponent.provideActivityManagerProvider.get(), timeoutHandler(), (BroadcastSender) this.broadcastSenderProvider.get(), (ScreenshotNotificationSmartActionsProvider) this.providesScrnshtNotifSmartActionsProvider.get(), (ActionIntentExecutor) this.actionIntentExecutorProvider.get(), (UserManager) this.tvGlobalRootComponent.provideUserManagerProvider.get(), (AssistContentRequester) this.assistContentRequesterProvider.get(), messageContainerController(), (DisplayTracker) this.provideDisplayTrackerProvider.get());
        }

        public final ScreenshotDetectionController screenshotDetectionController() {
            return new ScreenshotDetectionController((IWindowManager) this.tvGlobalRootComponent.provideIWindowManagerProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get());
        }

        public final ScreenshotErrorController screenshotErrorController() {
            return new ScreenshotErrorController(this.tvGlobalRootComponent.context);
        }

        public final ScreenshotNotificationsController screenshotNotificationsController() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            return new ScreenshotNotificationsController(daggerTvGlobalRootComponent.context, (WindowManager) daggerTvGlobalRootComponent.provideWindowManagerProvider.get());
        }

        public final ScrollCaptureClient scrollCaptureClient() {
            return new ScrollCaptureClient((IWindowManager) this.tvGlobalRootComponent.provideIWindowManagerProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get(), this.tvGlobalRootComponent.context);
        }

        public final ScrollCaptureController scrollCaptureController() {
            return new ScrollCaptureController(this.tvGlobalRootComponent.context, (Executor) this.provideBackgroundExecutorProvider.get(), scrollCaptureClient(), (ImageTileSet) imageTileSet(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get());
        }

        public final SecPanelLogWriter secPanelLogWriter() {
            return new SecPanelLogWriter((LogBuffer) this.providePanelLogBufferProvider.get());
        }

        public final SecSeekBarViewModel secSeekBarViewModel() {
            return new SecSeekBarViewModel((RepeatableExecutor) this.provideBackgroundRepeatableExecutorProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get());
        }

        public final ThresholdSensor secondaryProxSensorThresholdSensor() {
            return SensorModule_ProvideSecondaryProximitySensorFactory.provideSecondaryProximitySensor(thresholdSensorImplBuilder());
        }

        public final ThresholdSensor[] secondaryProxSensorThresholdSensorArray() {
            ThresholdSensorImpl.BuilderFactory builderFactory = builderFactory();
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return SensorModule_ProvidePostureToSecondaryProximitySensorMappingFactory.providePostureToSecondaryProximitySensorMapping(builderFactory, daggerTvGlobalRootComponent.mainResources());
        }

        public final Object secureSettingsImpl() {
            return new SecureSettingsImpl((ContentResolver) this.tvGlobalRootComponent.provideContentResolverProvider.get(), (UserTracker) this.provideUserTrackerProvider.get());
        }

        public final Set<ConditionalRestarter.Condition> setOfCondition() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(2);
            newSetBuilder.add(screenIdleCondition());
            newSetBuilder.add(pluggedInCondition());
            return newSetBuilder.build();
        }

        public final Set<KeyguardQuickAffordanceConfig> setOfKeyguardQuickAffordanceConfig() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(2);
            newSetBuilder.addAll(quickAffordanceConfigs());
            newSetBuilder.add(noteTaskQuickAffordanceConfig());
            return newSetBuilder.build();
        }

        public final Set<LetterboxAppearanceCalculator> setOfOnStatusBarViewInitializedListener() {
            return Collections.singleton((LetterboxAppearanceCalculator) this.letterboxAppearanceCalculatorProvider.get());
        }

        public final Set<PrivacyItemMonitor> setOfPrivacyItemMonitor() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(2);
            newSetBuilder.add((PrivacyItemMonitor) this.appOpsPrivacyItemMonitorProvider.get());
            newSetBuilder.add((PrivacyItemMonitor) this.mediaProjectionPrivacyItemMonitorProvider.get());
            return newSetBuilder.build();
        }

        public final Set<TransitionInteractor> setOfTransitionInteractor() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(8);
            newSetBuilder.add((TransitionInteractor) this.fromPrimaryBouncerTransitionInteractorProvider.get());
            newSetBuilder.add((TransitionInteractor) this.fromLockscreenTransitionInteractorProvider.get());
            newSetBuilder.add((TransitionInteractor) this.fromAodTransitionInteractorProvider.get());
            newSetBuilder.add((TransitionInteractor) this.fromGoneTransitionInteractorProvider.get());
            newSetBuilder.add((TransitionInteractor) this.fromDreamingTransitionInteractorProvider.get());
            newSetBuilder.add((TransitionInteractor) this.fromOccludedTransitionInteractorProvider.get());
            newSetBuilder.add((TransitionInteractor) this.fromDozingTransitionInteractorProvider.get());
            newSetBuilder.add((TransitionInteractor) this.fromAlternateBouncerTransitionInteractorProvider.get());
            return newSetBuilder.build();
        }

        public final ShadeCarrierGroupController.Builder shadeCarrierGroupControllerBuilder() {
            return new ShadeCarrierGroupController.Builder((ActivityStarter) this.activityStarterImplProvider.get(), (Handler) this.provideBgHandlerProvider.get(), (Looper) this.tvGlobalRootComponent.provideMainLooperProvider.get(), (NetworkController) this.networkControllerImplProvider.get(), carrierTextManagerBuilder(), this.tvGlobalRootComponent.context, (CarrierConfigTracker) this.carrierConfigTrackerProvider.get(), (ShadeCarrierGroupController.SlotIndexResolver) this.subscriptionManagerSlotIndexResolverProvider.get(), latinNetworkNameProviderImpl(), (SlimIndicatorViewMediator) this.slimIndicatorViewMediatorImplProvider.get());
        }

        public final ShadeEventCoordinatorLogger shadeEventCoordinatorLogger() {
            return new ShadeEventCoordinatorLogger((LogBuffer) this.provideNotificationsLogBufferProvider.get());
        }

        public final ShadeHeaderColorPicker shadeHeaderColorPicker() {
            return new ShadeHeaderColorPicker(this.tvGlobalRootComponent.context);
        }

        public final ShadeListBuilderLogger shadeListBuilderLogger() {
            return new ShadeListBuilderLogger(notifPipelineFlags(), (LogBuffer) this.provideNotificationsLogBufferProvider.get());
        }

        public final ShadeLogger shadeLogger() {
            return new ShadeLogger((LogBuffer) this.provideShadeLogBufferProvider.get());
        }

        public final ShadeViewDifferLogger shadeViewDifferLogger() {
            return new ShadeViewDifferLogger((LogBuffer) this.provideNotificationsLogBufferProvider.get());
        }

        public final ShadeWindowLogger shadeWindowLogger() {
            return new ShadeWindowLogger((LogBuffer) this.provideShadeWindowLogBufferProvider.get());
        }

        public final ShareViaActionInteractor shareViaActionInteractor() {
            return new ShareViaActionInteractor(this.tvGlobalRootComponent.context);
        }

        public final NodeController silentHeaderNodeController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesSilentHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            NodeController nodeController = sectionHeaderControllerSubcomponent.getNodeController();
            Preconditions.checkNotNullFromProvides(nodeController);
            return nodeController;
        }

        public final SectionHeaderController silentHeaderSectionHeaderController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesSilentHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            SectionHeaderController headerController = sectionHeaderControllerSubcomponent.getHeaderController();
            Preconditions.checkNotNullFromProvides(headerController);
            return headerController;
        }

        public final SingleTapClassifier singleTapClassifier() {
            return new SingleTapClassifier((FalsingDataProvider) this.falsingDataProvider.get(), namedFloat());
        }

        public final SmartActionInflaterImpl smartActionInflaterImpl() {
            return new SmartActionInflaterImpl((SmartReplyConstants) this.smartReplyConstantsProvider.get(), (ActivityStarter) this.activityStarterImplProvider.get(), (SmartReplyController) this.provideSmartReplyControllerProvider.get(), (HeadsUpManager) this.provideHeadsUpManagerPhoneProvider.get());
        }

        public final SmartReplyInflaterImpl smartReplyInflaterImpl() {
            return new SmartReplyInflaterImpl((SmartReplyConstants) this.smartReplyConstantsProvider.get(), (KeyguardDismissUtil) this.keyguardDismissUtilProvider.get(), (NotificationRemoteInputManager) this.provideNotificationRemoteInputManagerProvider.get(), (SmartReplyController) this.provideSmartReplyControllerProvider.get(), this.tvGlobalRootComponent.context);
        }

        public final SmartReplyStateInflaterImpl smartReplyStateInflaterImpl() {
            return new SmartReplyStateInflaterImpl((SmartReplyConstants) this.smartReplyConstantsProvider.get(), (ActivityManagerWrapper) this.provideActivityManagerWrapperProvider.get(), (PackageManagerWrapper) this.tvGlobalRootComponent.providePackageManagerWrapperProvider.get(), (DevicePolicyManagerWrapper) this.provideDevicePolicyManagerWrapperProvider.get(), smartReplyInflaterImpl(), smartActionInflaterImpl());
        }

        public final SoundAssistantManagerWrapper soundAssistantManagerWrapper() {
            return new SoundAssistantManagerWrapper(this.tvGlobalRootComponent.context);
        }

        public final SystemEventChipAnimationController systemEventChipAnimationController() {
            return new SystemEventChipAnimationController(this.tvGlobalRootComponent.context, (StatusBarWindowController) this.statusBarWindowControllerProvider.get(), (StatusBarContentInsetsProvider) this.statusBarContentInsetsProvider.get(), (FeatureFlags) this.featureFlagsReleaseProvider.get(), privacyLogger(), (IndicatorGardenPresenter) this.indicatorGardenPresenterProvider.get(), (IndicatorScaleGardener) this.indicatorScaleGardenerProvider.get());
        }

        public final SystemExitRestarter systemExitRestarter() {
            return new SystemExitRestarter((IStatusBarService) this.tvGlobalRootComponent.provideIStatusBarServiceProvider.get());
        }

        public final Object systemSettingsImpl() {
            return new SystemSettingsImpl((ContentResolver) this.tvGlobalRootComponent.provideContentResolverProvider.get(), (UserTracker) this.provideUserTrackerProvider.get());
        }

        public final SystemWallpaperColors systemWallpaperColors() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return new SystemWallpaperColors(daggerTvGlobalRootComponent.wallpaperManager());
        }

        public final ThresholdSensorImpl.Builder thresholdSensorImplBuilder() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return new ThresholdSensorImpl.Builder(daggerTvGlobalRootComponent.mainResources(), (AsyncSensorManager) this.asyncSensorManagerProvider.get(), (Execution) this.tvGlobalRootComponent.provideExecutionProvider.get());
        }

        public final TimeoutHandler timeoutHandler() {
            return new TimeoutHandler(this.tvGlobalRootComponent.context);
        }

        public final ToastLogger toastLogger() {
            return new ToastLogger((LogBuffer) this.provideToastLogBufferProvider.get());
        }

        public final TouchInsetManager touchInsetManager() {
            return new TouchInsetManager((Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get());
        }

        public final TypeClassifier typeClassifier() {
            return new TypeClassifier((FalsingDataProvider) this.falsingDataProvider.get());
        }

        public final UdfpsLogger udfpsLogger() {
            return new UdfpsLogger((LogBuffer) this.provideUdfpsLogBufferProvider.get());
        }

        public final UserCreator userCreator() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            return new UserCreator(daggerTvGlobalRootComponent.context, (UserManager) daggerTvGlobalRootComponent.provideUserManagerProvider.get(), (Executor) this.tvGlobalRootComponent.provideMainExecutorProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get());
        }

        public final VariableDateViewController.Factory variableDateViewControllerFactory() {
            return new VariableDateViewController.Factory((SystemClock) this.bindSystemClockProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get(), (Handler) this.provideTimeTickHandlerProvider.get());
        }

        public final VolumeDialog volumeDialog() {
            return VolumeModule_ProvideVolumeDialogFactory.provideVolumeDialog(this.tvGlobalRootComponent.context, (VolumeDialogController) this.volumeDialogControllerImplProvider.get(), (AccessibilityManagerWrapper) this.accessibilityManagerWrapperProvider.get(), (DeviceProvisionedController) this.providesDeviceProvisionedControllerProvider.get(), (ConfigurationController) this.configurationControllerImplProvider.get(), (MediaOutputDialogFactory) this.mediaOutputDialogFactoryProvider.get(), (VolumePanelFactory) this.volumePanelFactoryProvider.get(), (ActivityStarter) this.activityStarterImplProvider.get(), (InteractionJankMonitor) this.tvGlobalRootComponent.provideInteractionJankMonitorProvider.get(), (CsdWarningDialog.Factory) this.factoryProvider16.get(), (DevicePostureController) this.devicePostureControllerImplProvider.get(), (DumpManager) this.tvGlobalRootComponent.dumpManagerProvider.get());
        }

        public final WakeLock.Builder wakeLockBuilder() {
            return new WakeLock.Builder(this.tvGlobalRootComponent.context, wakeLockLogger());
        }

        public final WakeLockLogger wakeLockLogger() {
            return new WakeLockLogger((LogBuffer) this.provideWakeLockLogProvider.get());
        }

        public final WallpaperImageInjectCreator wallpaperImageInjectCreator() {
            return new WallpaperImageInjectCreator(this.tvGlobalRootComponent.context, (SettingsHelper) this.settingsHelperProvider.get(), (PluginWallpaperManager) this.pluginWallpaperManagerImplProvider.get(), (CoverWallpaper) this.coverWallpaperControllerProvider.get(), (KeyguardWallpaper) this.keyguardWallpaperControllerProvider.get());
        }

        public final WifiSignalIconResource wifiSignalIconResource() {
            return new WifiSignalIconResource((CarrierInfraMediator) this.fakeCarrierInfraMediatorImplProvider.get(), (WifiManager) this.tvGlobalRootComponent.provideWifiManagerProvider.get());
        }

        public final WifiStatusTrackerFactory wifiStatusTrackerFactory() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            return new WifiStatusTrackerFactory(daggerTvGlobalRootComponent.context, (WifiManager) daggerTvGlobalRootComponent.provideWifiManagerProvider.get(), (NetworkScoreManager) this.tvGlobalRootComponent.provideNetworkScoreManagerProvider.get(), (ConnectivityManager) this.tvGlobalRootComponent.provideConnectivityManagagerProvider.get(), (Handler) this.tvGlobalRootComponent.provideMainHandlerProvider.get());
        }

        public final WorkProfileMessageController workProfileMessageController() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            return new WorkProfileMessageController(daggerTvGlobalRootComponent.context, (UserManager) daggerTvGlobalRootComponent.provideUserManagerProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get());
        }

        public final UserHandle workProfileUserHandle() {
            MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule = this.mediaProjectionDevicePolicyModule;
            UserTracker userTracker = (UserTracker) this.provideUserTrackerProvider.get();
            mediaProjectionDevicePolicyModule.getClass();
            return MediaProjectionDevicePolicyModule.workProfileUserHandle(userTracker);
        }

        public final Object zigZagClassifier() {
            return new ZigZagClassifier((FalsingDataProvider) this.falsingDataProvider.get(), (DeviceConfigProxy) this.deviceConfigProxyProvider.get());
        }

        private TvSysUIComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, DependencyProvider dependencyProvider, LeakModule leakModule, NightDisplayListenerModule nightDisplayListenerModule, SharedLibraryModule sharedLibraryModule, KeyguardModule keyguardModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.tvSysUIComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.leakModule = leakModule;
            this.setShell = shellInterface;
            this.dependencyProvider = dependencyProvider;
            this.sysUIUnfoldModule = sysUIUnfoldModule;
            this.keyguardModule = keyguardModule;
            this.setBubbles = optional4;
            this.setTaskViewFactory = optional5;
            this.mediaProjectionDevicePolicyModule = mediaProjectionDevicePolicyModule;
            this.sharedLibraryModule = sharedLibraryModule;
            this.setPip = optional;
            this.setDesktopMode = optional10;
            this.setBackAnimation = optional9;
            this.setKeyguardTransitions = keyguardTransitions;
            this.setStartingSurface = optional6;
            this.setDisplayController = optional13;
            this.setTransitions = shellTransitions;
            this.nightDisplayListenerModule = nightDisplayListenerModule;
            this.setSplitScreenController = optional12;
            this.setSplitScreen = optional2;
            this.setOneHanded = optional3;
            this.setRecentTasks = optional8;
            this.setEnterSplitGestureHandler = optional11;
            this.setDisplayAreaHelper = optional7;
            initialize(dependencyProvider, leakModule, nightDisplayListenerModule, sharedLibraryModule, keyguardModule, mediaProjectionDevicePolicyModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize2(dependencyProvider, leakModule, nightDisplayListenerModule, sharedLibraryModule, keyguardModule, mediaProjectionDevicePolicyModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize3(dependencyProvider, leakModule, nightDisplayListenerModule, sharedLibraryModule, keyguardModule, mediaProjectionDevicePolicyModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize4(dependencyProvider, leakModule, nightDisplayListenerModule, sharedLibraryModule, keyguardModule, mediaProjectionDevicePolicyModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize5(dependencyProvider, leakModule, nightDisplayListenerModule, sharedLibraryModule, keyguardModule, mediaProjectionDevicePolicyModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize6(dependencyProvider, leakModule, nightDisplayListenerModule, sharedLibraryModule, keyguardModule, mediaProjectionDevicePolicyModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize7(dependencyProvider, leakModule, nightDisplayListenerModule, sharedLibraryModule, keyguardModule, mediaProjectionDevicePolicyModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize8(dependencyProvider, leakModule, nightDisplayListenerModule, sharedLibraryModule, keyguardModule, mediaProjectionDevicePolicyModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize9(dependencyProvider, leakModule, nightDisplayListenerModule, sharedLibraryModule, keyguardModule, mediaProjectionDevicePolicyModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize10(dependencyProvider, leakModule, nightDisplayListenerModule, sharedLibraryModule, keyguardModule, mediaProjectionDevicePolicyModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
        }

        @Override // com.android.systemui.tv.TvSysUIComponent
        public void inject(KeyguardSliceProvider keyguardSliceProvider) {
            injectKeyguardSliceProvider(keyguardSliceProvider);
        }

        @Override // com.android.systemui.tv.TvSysUIComponent
        public void inject(PeopleProvider peopleProvider) {
            injectPeopleProvider(peopleProvider);
        }

        @Override // com.android.systemui.tv.TvSysUIComponent, com.android.systemui.dagger.SysUIComponent
        public void inject(KeyguardSecAffordanceView keyguardSecAffordanceView) {
            injectKeyguardSecAffordanceView(keyguardSecAffordanceView);
        }

        @Override // com.android.systemui.tv.TvSysUIComponent, com.android.systemui.dagger.SysUIComponent
        public void inject(TestProtocolProvider testProtocolProvider) {
            injectTestProtocolProvider(testProtocolProvider);
        }

        @Override // com.android.systemui.tv.TvSysUIComponent, com.android.systemui.dagger.SysUIComponent
        public void inject(AODIntentService aODIntentService) {
            injectAODIntentService(aODIntentService);
        }

        @Override // com.android.systemui.tv.TvSysUIComponent
        public void inject(ClockOptionsProvider clockOptionsProvider) {
            clockOptionsProvider.mClockInfosProvider = this.provideClockInfoListProvider;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class TvWMComponentBuilder implements TvWMComponent.Builder {
        public HandlerThread setShellMainThread;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;

        public /* synthetic */ TvWMComponentBuilder(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, int i) {
            this(daggerTvGlobalRootComponent);
        }

        @Override // com.android.systemui.dagger.WMComponent.Builder
        public final WMComponent.Builder setShellMainThread(HandlerThread handlerThread) {
            this.setShellMainThread = handlerThread;
            return this;
        }

        private TvWMComponentBuilder(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
        }

        @Override // com.android.systemui.dagger.WMComponent.Builder
        public final TvWMComponent build() {
            return new TvWMComponentImpl(this.tvGlobalRootComponent, this.setShellMainThread, 0);
        }

        @Override // com.android.systemui.dagger.WMComponent.Builder
        public final TvWMComponentBuilder setShellMainThread(HandlerThread handlerThread) {
            this.setShellMainThread = handlerThread;
            return this;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class TvWMComponentImpl implements TvWMComponent {
        public Provider compatUIConfigurationProvider;
        public Provider compatUIShellCommandHandlerProvider;
        public Provider dockStateReaderProvider;
        public Provider dynamicOverrideOptionalOfUnfoldAnimationControllerProvider;
        public Provider dynamicOverrideOptionalOfUnfoldTransitionHandlerProvider;
        public Provider pipDisplayLayoutStateProvider;
        public Provider provideActivityEmbeddingControllerProvider;
        public Provider provideBackAnimationBackgroundProvider;
        public Provider provideBackAnimationControllerProvider;
        public Provider provideBackAnimationProvider;
        public Provider provideBubblesProvider;
        public Provider provideCompatUIControllerProvider;
        public Provider provideDesktopModeControllerProvider;
        public Provider provideDesktopModeProvider;
        public Provider provideDesktopTaskRepositoryProvider;
        public Provider provideDisplayAreaHelperProvider;
        public Provider provideDisplayControllerOptionalProvider;
        public Provider provideDisplayControllerProvider;
        public Provider provideDisplayImeControllerProvider;
        public Provider provideDisplayInsetsControllerProvider;
        public Provider provideDragAndDropControllerProvider;
        public Provider provideEnterSplitGestureHandlerProvider;
        public Provider provideFreeformComponentsProvider;
        public Provider provideFullscreenTaskListenerProvider;
        public Provider provideHideDisplayCutoutControllerProvider;
        public Provider provideIconProvider;
        public Provider provideIndependentShellComponentsToCreateProvider;
        public Provider provideKeyguardTransitionHandlerProvider;
        public Provider provideKeyguardTransitionsProvider;
        public Provider provideOneHandedProvider;
        public Provider providePipAnimationControllerProvider;
        public Provider providePipAppOpsListenerProvider;
        public Provider providePipMediaControllerProvider;
        public Provider providePipParamsChangedForwarderProvider;
        public Provider providePipProvider;
        public Provider providePipSizeSpecHelperProvider;
        public Provider providePipSnapAlgorithmProvider;
        public Provider providePipSurfaceTransactionHelperProvider;
        public Provider providePipTaskOrganizerProvider;
        public Provider providePipTransitionStateProvider;
        public Provider providePipUiEventLoggerProvider;
        public Provider provideProtoLogControllerProvider;
        public Provider provideRecentTasksControllerProvider;
        public Provider provideRecentTasksProvider;
        public Provider provideRemoteTransitionsProvider;
        public Provider provideRootDisplayAreaOrganizerProvider;
        public Provider provideRootTaskDisplayAreaOrganizerProvider;
        public Provider provideSharedBackgroundHandlerProvider;
        public Provider provideShellAnimationExecutorProvider;
        public Provider provideShellCommandHandlerProvider;
        public Provider provideShellControllerProvider;
        public Provider provideShellInitProvider;
        public Provider provideShellMainExecutorProvider;
        public Provider provideShellMainHandlerProvider;
        public Provider provideShellSysuiCallbacksProvider;
        public Provider provideShellTaskOrganizerProvider;
        public Provider provideSplashScreenExecutorProvider;
        public Provider provideSplitScreenControllerProvider;
        public Provider provideSplitScreenProvider;
        public Provider provideStartingSurfaceProvider;
        public Provider provideStartingWindowControllerProvider;
        public Provider provideStartingWindowTypeAlgorithmProvider;
        public Provider provideStartingWindowTypeAlgorithmProvider2;
        public Provider provideSyncTransactionQueueProvider;
        public Provider provideSysUIMainExecutorProvider;
        public Provider provideSystemWindowsProvider;
        public Provider provideTaskViewFactoryControllerProvider;
        public Provider provideTaskViewFactoryProvider;
        public Provider provideTaskViewTransitionsProvider;
        public Provider provideTransactionPoolProvider;
        public Provider provideTransitionsProvider;
        public Provider provideTvPipBoundsAlgorithmProvider;
        public Provider provideTvPipBoundsControllerProvider;
        public Provider provideTvPipBoundsStateProvider;
        public Provider provideTvPipNotificationControllerProvider;
        public Provider provideTvPipTransitionProvider;
        public Provider provideUnfoldControllerProvider;
        public Provider provideUnfoldTransitionHandlerProvider;
        public Provider provideWindowManagerShellWrapperProvider;
        public Provider providerTaskStackListenerImplProvider;
        public Provider providesDesktopTasksControllerProvider;
        public Provider providesOneHandedControllerProvider;
        public Provider providesSplitScreenControllerProvider;
        public Provider providesTvPipMenuControllerProvider;
        public final HandlerThread setShellMainThread;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvWMComponentImpl tvWMComponentImpl;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvWMComponentImpl tvWMComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvWMComponentImpl tvWMComponentImpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvWMComponentImpl = tvWMComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        this.tvWMComponentImpl.provideIndependentShellComponentsToCreateProvider.get();
                        T t = (T) ((ShellController) this.tvWMComponentImpl.provideShellControllerProvider.get()).mImpl;
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 1:
                        Optional.empty();
                        Optional.empty();
                        Optional.empty();
                        Optional.empty();
                        return (T) new Object();
                    case 2:
                        DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
                        return (T) new DisplayController(daggerTvGlobalRootComponent.context, (IWindowManager) daggerTvGlobalRootComponent.provideIWindowManagerProvider.get(), (ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get(), (ShellController) this.tvWMComponentImpl.provideShellControllerProvider.get());
                    case 3:
                        return (T) new ShellInit((ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get());
                    case 4:
                        return (T) WMShellConcurrencyModule_ProvideShellMainExecutorFactory.provideShellMainExecutor(this.tvGlobalRootComponent.context, (Handler) this.tvWMComponentImpl.provideShellMainHandlerProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideSysUIMainExecutorProvider.get());
                    case 5:
                        return (T) WMShellConcurrencyModule_ProvideShellMainHandlerFactory.provideShellMainHandler(this.tvGlobalRootComponent.context, this.tvWMComponentImpl.setShellMainThread, WMShellConcurrencyModule_ProvideMainHandlerFactory.provideMainHandler$1());
                    case 6:
                        return (T) new HandlerExecutor(WMShellConcurrencyModule_ProvideMainHandlerFactory.provideMainHandler$1());
                    case 7:
                        return (T) new ShellController(this.tvGlobalRootComponent.context, (ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (ShellCommandHandler) this.tvWMComponentImpl.provideShellCommandHandlerProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get());
                    case 8:
                        return (T) new ShellCommandHandler();
                    case 9:
                        return (T) new DisplayImeController((IWindowManager) this.tvGlobalRootComponent.provideIWindowManagerProvider.get(), (ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (DisplayController) this.tvWMComponentImpl.provideDisplayControllerProvider.get(), (DisplayInsetsController) this.tvWMComponentImpl.provideDisplayInsetsControllerProvider.get(), (TransactionPool) this.tvWMComponentImpl.provideTransactionPoolProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get(), DoubleCheck.lazy(this.tvWMComponentImpl.provideTransitionsProvider));
                    case 10:
                        return (T) new DisplayInsetsController((IWindowManager) this.tvGlobalRootComponent.provideIWindowManagerProvider.get(), (ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (DisplayController) this.tvWMComponentImpl.provideDisplayControllerProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get());
                    case 11:
                        return (T) new TransactionPool();
                    case 12:
                        return (T) WMShellBaseModule_ProvideTransitionsFactory.provideTransitions(this.tvGlobalRootComponent.context, (ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (ShellController) this.tvWMComponentImpl.provideShellControllerProvider.get(), (ShellTaskOrganizer) this.tvWMComponentImpl.provideShellTaskOrganizerProvider.get(), (TransactionPool) this.tvWMComponentImpl.provideTransactionPoolProvider.get(), (DisplayController) this.tvWMComponentImpl.provideDisplayControllerProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get(), (Handler) this.tvWMComponentImpl.provideShellMainHandlerProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellAnimationExecutorProvider.get(), (ShellCommandHandler) this.tvWMComponentImpl.provideShellCommandHandlerProvider.get(), (RootTaskDisplayAreaOrganizer) this.tvWMComponentImpl.provideRootTaskDisplayAreaOrganizerProvider.get());
                    case 13:
                        return (T) WMShellBaseModule_ProvideShellTaskOrganizerFactory.provideShellTaskOrganizer((ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (ShellCommandHandler) this.tvWMComponentImpl.provideShellCommandHandlerProvider.get(), (CompatUIController) this.tvWMComponentImpl.provideCompatUIControllerProvider.get(), (Optional) this.tvWMComponentImpl.provideUnfoldControllerProvider.get(), (Optional) this.tvWMComponentImpl.provideRecentTasksControllerProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get(), (TaskStackListenerImpl) this.tvWMComponentImpl.providerTaskStackListenerImplProvider.get(), this.tvGlobalRootComponent.context);
                    case 14:
                        return (T) WMShellBaseModule_ProvideCompatUIControllerFactory.provideCompatUIController(this.tvGlobalRootComponent.context, (ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (ShellController) this.tvWMComponentImpl.provideShellControllerProvider.get(), (DisplayController) this.tvWMComponentImpl.provideDisplayControllerProvider.get(), (DisplayInsetsController) this.tvWMComponentImpl.provideDisplayInsetsControllerProvider.get(), (DisplayImeController) this.tvWMComponentImpl.provideDisplayImeControllerProvider.get(), (SyncTransactionQueue) this.tvWMComponentImpl.provideSyncTransactionQueueProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get(), DoubleCheck.lazy(this.tvWMComponentImpl.provideTransitionsProvider), (DockStateReader) this.tvWMComponentImpl.dockStateReaderProvider.get(), (CompatUIConfiguration) this.tvWMComponentImpl.compatUIConfigurationProvider.get(), (CompatUIShellCommandHandler) this.tvWMComponentImpl.compatUIShellCommandHandlerProvider.get());
                    case 15:
                        return (T) new SyncTransactionQueue((TransactionPool) this.tvWMComponentImpl.provideTransactionPoolProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get());
                    case 16:
                        return (T) new DockStateReader(this.tvGlobalRootComponent.context);
                    case 17:
                        return (T) new CompatUIConfiguration(this.tvGlobalRootComponent.context, (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get());
                    case 18:
                        return (T) new CompatUIShellCommandHandler((ShellCommandHandler) this.tvWMComponentImpl.provideShellCommandHandlerProvider.get(), (CompatUIConfiguration) this.tvWMComponentImpl.compatUIConfigurationProvider.get());
                    case 19:
                        return (T) WMShellBaseModule_ProvideUnfoldControllerFactory.provideUnfoldController(DoubleCheck.lazy(this.tvWMComponentImpl.dynamicOverrideOptionalOfUnfoldAnimationControllerProvider), Optional.of((ShellUnfoldProgressProvider) this.tvGlobalRootComponent.provideShellProgressProvider.get()));
                    case 20:
                        return (T) WMShellBaseModule_ProvideRecentTasksControllerFactory.provideRecentTasksController(this.tvGlobalRootComponent.context, (ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (ShellController) this.tvWMComponentImpl.provideShellControllerProvider.get(), (ShellCommandHandler) this.tvWMComponentImpl.provideShellCommandHandlerProvider.get(), (TaskStackListenerImpl) this.tvWMComponentImpl.providerTaskStackListenerImplProvider.get(), (ActivityTaskManager) this.tvGlobalRootComponent.provideActivityTaskManagerProvider.get(), (Optional) this.tvWMComponentImpl.provideDesktopTaskRepositoryProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get());
                    case 21:
                        return (T) new TaskStackListenerImpl((Handler) this.tvWMComponentImpl.provideShellMainHandlerProvider.get());
                    case 22:
                        return (T) WMShellBaseModule_ProvideDesktopTaskRepositoryFactory.provideDesktopTaskRepository(Optional.empty());
                    case 23:
                        return (T) WMShellConcurrencyModule_ProvideShellAnimationExecutorFactory.provideShellAnimationExecutor();
                    case 24:
                        return (T) new RootTaskDisplayAreaOrganizer((ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get(), this.tvGlobalRootComponent.context);
                    case 25:
                        return (T) WMShellBaseModule_ProvideDragAndDropControllerFactory.provideDragAndDropController(this.tvGlobalRootComponent.context, (ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (ShellController) this.tvWMComponentImpl.provideShellControllerProvider.get(), (ShellCommandHandler) this.tvWMComponentImpl.provideShellCommandHandlerProvider.get(), (DisplayController) this.tvWMComponentImpl.provideDisplayControllerProvider.get(), (UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (IconProvider) this.tvWMComponentImpl.provideIconProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get());
                    case 26:
                        return (T) new IconProvider(this.tvGlobalRootComponent.context);
                    case 27:
                        return (T) WMShellBaseModule_ProvidesSplitScreenControllerFactory.providesSplitScreenController(this.tvGlobalRootComponent.context, Optional.of((SplitScreenController) this.tvWMComponentImpl.provideSplitScreenControllerProvider.get()));
                    case 28:
                        return (T) TvWMShellModule_ProvideSplitScreenControllerFactory.provideSplitScreenController(this.tvGlobalRootComponent.context, (ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (ShellCommandHandler) this.tvWMComponentImpl.provideShellCommandHandlerProvider.get(), (ShellController) this.tvWMComponentImpl.provideShellControllerProvider.get(), (ShellTaskOrganizer) this.tvWMComponentImpl.provideShellTaskOrganizerProvider.get(), (SyncTransactionQueue) this.tvWMComponentImpl.provideSyncTransactionQueueProvider.get(), (RootTaskDisplayAreaOrganizer) this.tvWMComponentImpl.provideRootTaskDisplayAreaOrganizerProvider.get(), (DisplayController) this.tvWMComponentImpl.provideDisplayControllerProvider.get(), (DisplayImeController) this.tvWMComponentImpl.provideDisplayImeControllerProvider.get(), (DisplayInsetsController) this.tvWMComponentImpl.provideDisplayInsetsControllerProvider.get(), (Optional) this.tvWMComponentImpl.provideDragAndDropControllerProvider.get(), (Transitions) this.tvWMComponentImpl.provideTransitionsProvider.get(), (TransactionPool) this.tvWMComponentImpl.provideTransactionPoolProvider.get(), (IconProvider) this.tvWMComponentImpl.provideIconProvider.get(), (Optional) this.tvWMComponentImpl.provideRecentTasksControllerProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get(), new Handler(), (SystemWindows) this.tvWMComponentImpl.provideSystemWindowsProvider.get());
                    case 29:
                        return (T) new SystemWindows((DisplayController) this.tvWMComponentImpl.provideDisplayControllerProvider.get(), (IWindowManager) this.tvGlobalRootComponent.provideIWindowManagerProvider.get());
                    case 30:
                        T t2 = (T) Optional.of(TvPipController.create(this.tvGlobalRootComponent.context, (ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (ShellController) this.tvWMComponentImpl.provideShellControllerProvider.get(), (TvPipBoundsState) this.tvWMComponentImpl.provideTvPipBoundsStateProvider.get(), (PipDisplayLayoutState) this.tvWMComponentImpl.pipDisplayLayoutStateProvider.get(), (TvPipBoundsAlgorithm) this.tvWMComponentImpl.provideTvPipBoundsAlgorithmProvider.get(), (TvPipBoundsController) this.tvWMComponentImpl.provideTvPipBoundsControllerProvider.get(), (PipAppOpsListener) this.tvWMComponentImpl.providePipAppOpsListenerProvider.get(), (PipTaskOrganizer) this.tvWMComponentImpl.providePipTaskOrganizerProvider.get(), (PipTransitionController) this.tvWMComponentImpl.provideTvPipTransitionProvider.get(), (TvPipMenuController) this.tvWMComponentImpl.providesTvPipMenuControllerProvider.get(), (PipMediaController) this.tvWMComponentImpl.providePipMediaControllerProvider.get(), (TvPipNotificationController) this.tvWMComponentImpl.provideTvPipNotificationControllerProvider.get(), (TaskStackListenerImpl) this.tvWMComponentImpl.providerTaskStackListenerImplProvider.get(), (PipParamsChangedForwarder) this.tvWMComponentImpl.providePipParamsChangedForwarderProvider.get(), (DisplayController) this.tvWMComponentImpl.provideDisplayControllerProvider.get(), (WindowManagerShellWrapper) this.tvWMComponentImpl.provideWindowManagerShellWrapperProvider.get(), (Handler) this.tvWMComponentImpl.provideShellMainHandlerProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get()));
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 31:
                        return (T) new TvPipBoundsState(this.tvGlobalRootComponent.context, (PipSizeSpecHandler) this.tvWMComponentImpl.providePipSizeSpecHelperProvider.get(), (PipDisplayLayoutState) this.tvWMComponentImpl.pipDisplayLayoutStateProvider.get());
                    case 32:
                        return (T) new PipSizeSpecHandler(this.tvGlobalRootComponent.context, (PipDisplayLayoutState) this.tvWMComponentImpl.pipDisplayLayoutStateProvider.get());
                    case 33:
                        return (T) new PipDisplayLayoutState(this.tvGlobalRootComponent.context);
                    case 34:
                        return (T) new TvPipBoundsAlgorithm(this.tvGlobalRootComponent.context, (TvPipBoundsState) this.tvWMComponentImpl.provideTvPipBoundsStateProvider.get(), (PipSnapAlgorithm) this.tvWMComponentImpl.providePipSnapAlgorithmProvider.get(), (PipSizeSpecHandler) this.tvWMComponentImpl.providePipSizeSpecHelperProvider.get());
                    case 35:
                        return (T) new PipSnapAlgorithm();
                    case 36:
                        return (T) new TvPipBoundsController(this.tvGlobalRootComponent.context, new TvPipModule$$ExternalSyntheticLambda0(), (Handler) this.tvWMComponentImpl.provideShellMainHandlerProvider.get(), (TvPipBoundsState) this.tvWMComponentImpl.provideTvPipBoundsStateProvider.get(), (TvPipBoundsAlgorithm) this.tvWMComponentImpl.provideTvPipBoundsAlgorithmProvider.get());
                    case 37:
                        Context context = this.tvGlobalRootComponent.context;
                        final PipTaskOrganizer pipTaskOrganizer = (PipTaskOrganizer) this.tvWMComponentImpl.providePipTaskOrganizerProvider.get();
                        ShellExecutor shellExecutor = (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get();
                        Objects.requireNonNull(pipTaskOrganizer);
                        return (T) new PipAppOpsListener(context, new PipAppOpsListener.Callback() { // from class: com.android.wm.shell.dagger.TvPipModule$$ExternalSyntheticLambda1
                            @Override // com.android.wm.shell.pip.PipAppOpsListener.Callback
                            public final void dismissPip() {
                                PipTaskOrganizer.this.removePip();
                            }
                        }, shellExecutor);
                    case 38:
                        return (T) TvPipModule_ProvidePipTaskOrganizerFactory.providePipTaskOrganizer(this.tvGlobalRootComponent.context, (TvPipMenuController) this.tvWMComponentImpl.providesTvPipMenuControllerProvider.get(), (SyncTransactionQueue) this.tvWMComponentImpl.provideSyncTransactionQueueProvider.get(), (TvPipBoundsState) this.tvWMComponentImpl.provideTvPipBoundsStateProvider.get(), (PipDisplayLayoutState) this.tvWMComponentImpl.pipDisplayLayoutStateProvider.get(), (PipTransitionState) this.tvWMComponentImpl.providePipTransitionStateProvider.get(), (TvPipBoundsAlgorithm) this.tvWMComponentImpl.provideTvPipBoundsAlgorithmProvider.get(), (PipAnimationController) this.tvWMComponentImpl.providePipAnimationControllerProvider.get(), (PipTransitionController) this.tvWMComponentImpl.provideTvPipTransitionProvider.get(), (PipParamsChangedForwarder) this.tvWMComponentImpl.providePipParamsChangedForwarderProvider.get(), (PipSurfaceTransactionHelper) this.tvWMComponentImpl.providePipSurfaceTransactionHelperProvider.get(), (Optional) this.tvWMComponentImpl.providesSplitScreenControllerProvider.get(), (DisplayController) this.tvWMComponentImpl.provideDisplayControllerProvider.get(), (PipUiEventLogger) this.tvWMComponentImpl.providePipUiEventLoggerProvider.get(), (ShellTaskOrganizer) this.tvWMComponentImpl.provideShellTaskOrganizerProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get());
                    case 39:
                        return (T) new TvPipMenuController(this.tvGlobalRootComponent.context, (TvPipBoundsState) this.tvWMComponentImpl.provideTvPipBoundsStateProvider.get(), (SystemWindows) this.tvWMComponentImpl.provideSystemWindowsProvider.get(), (Handler) this.tvWMComponentImpl.provideShellMainHandlerProvider.get());
                    case 40:
                        return (T) new PipTransitionState();
                    case 41:
                        return (T) new PipAnimationController((PipSurfaceTransactionHelper) this.tvWMComponentImpl.providePipSurfaceTransactionHelperProvider.get());
                    case 42:
                        return (T) new PipSurfaceTransactionHelper(this.tvGlobalRootComponent.context);
                    case 43:
                        return (T) TvPipModule_ProvideTvPipTransitionFactory.provideTvPipTransition(this.tvGlobalRootComponent.context, (ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (ShellTaskOrganizer) this.tvWMComponentImpl.provideShellTaskOrganizerProvider.get(), (Transitions) this.tvWMComponentImpl.provideTransitionsProvider.get(), (TvPipBoundsState) this.tvWMComponentImpl.provideTvPipBoundsStateProvider.get(), (PipDisplayLayoutState) this.tvWMComponentImpl.pipDisplayLayoutStateProvider.get(), (PipTransitionState) this.tvWMComponentImpl.providePipTransitionStateProvider.get(), (TvPipMenuController) this.tvWMComponentImpl.providesTvPipMenuControllerProvider.get(), (TvPipBoundsAlgorithm) this.tvWMComponentImpl.provideTvPipBoundsAlgorithmProvider.get(), (PipAnimationController) this.tvWMComponentImpl.providePipAnimationControllerProvider.get(), (PipSurfaceTransactionHelper) this.tvWMComponentImpl.providePipSurfaceTransactionHelperProvider.get());
                    case 44:
                        return (T) new PipParamsChangedForwarder();
                    case 45:
                        return (T) new PipUiEventLogger((UiEventLogger) this.tvGlobalRootComponent.provideUiEventLoggerProvider.get(), (PackageManager) this.tvGlobalRootComponent.providePackageManagerProvider.get());
                    case 46:
                        return (T) new PipMediaController(this.tvGlobalRootComponent.context, (Handler) this.tvWMComponentImpl.provideShellMainHandlerProvider.get());
                    case 47:
                        return (T) new TvPipNotificationController(this.tvGlobalRootComponent.context, (PipMediaController) this.tvWMComponentImpl.providePipMediaControllerProvider.get(), (PipParamsChangedForwarder) this.tvWMComponentImpl.providePipParamsChangedForwarderProvider.get());
                    case 48:
                        return (T) new WindowManagerShellWrapper((ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get());
                    case 49:
                        return (T) WMShellBaseModule_ProvideFullscreenTaskListenerFactory.provideFullscreenTaskListener(Optional.empty(), (ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (ShellTaskOrganizer) this.tvWMComponentImpl.provideShellTaskOrganizerProvider.get(), (SyncTransactionQueue) this.tvWMComponentImpl.provideSyncTransactionQueueProvider.get(), (Optional) this.tvWMComponentImpl.provideRecentTasksControllerProvider.get(), Optional.empty(), Optional.empty(), (Optional) this.tvWMComponentImpl.providesSplitScreenControllerProvider.get(), this.tvGlobalRootComponent.context);
                    case 50:
                        return (T) WMShellBaseModule_ProvideUnfoldTransitionHandlerFactory.provideUnfoldTransitionHandler(DoubleCheck.lazy(this.tvWMComponentImpl.dynamicOverrideOptionalOfUnfoldTransitionHandlerProvider), Optional.of((ShellUnfoldProgressProvider) this.tvGlobalRootComponent.provideShellProgressProvider.get()));
                    case 51:
                        return (T) WMShellBaseModule_ProvideFreeformComponentsFactory.provideFreeformComponents(this.tvGlobalRootComponent.context, Optional.empty());
                    case 52:
                        return (T) WMShellBaseModule_ProvidesOneHandedControllerFactory.providesOneHandedController(Optional.empty());
                    case 53:
                        return (T) WMShellBaseModule_ProvideHideDisplayCutoutControllerFactory.provideHideDisplayCutoutController(this.tvGlobalRootComponent.context, (ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (ShellCommandHandler) this.tvWMComponentImpl.provideShellCommandHandlerProvider.get(), (ShellController) this.tvWMComponentImpl.provideShellControllerProvider.get(), (DisplayController) this.tvWMComponentImpl.provideDisplayControllerProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get());
                    case 54:
                        T t3 = (T) Optional.ofNullable(ActivityEmbeddingController.create(this.tvGlobalRootComponent.context, (ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (Transitions) this.tvWMComponentImpl.provideTransitionsProvider.get()));
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    case 55:
                        return (T) WMShellBaseModule_ProvideStartingWindowControllerFactory.provideStartingWindowController(this.tvGlobalRootComponent.context, (ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (ShellController) this.tvWMComponentImpl.provideShellControllerProvider.get(), (ShellTaskOrganizer) this.tvWMComponentImpl.provideShellTaskOrganizerProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideSplashScreenExecutorProvider.get(), (StartingWindowTypeAlgorithm) this.tvWMComponentImpl.provideStartingWindowTypeAlgorithmProvider2.get(), (IconProvider) this.tvWMComponentImpl.provideIconProvider.get(), (TransactionPool) this.tvWMComponentImpl.provideTransactionPoolProvider.get());
                    case 56:
                        return (T) WMShellConcurrencyModule_ProvideSplashScreenExecutorFactory.provideSplashScreenExecutor();
                    case 57:
                        return (T) WMShellBaseModule_ProvideStartingWindowTypeAlgorithmFactory.provideStartingWindowTypeAlgorithm(Optional.of((StartingWindowTypeAlgorithm) this.tvWMComponentImpl.provideStartingWindowTypeAlgorithmProvider.get()));
                    case 58:
                        return (T) new TvStartingWindowTypeAlgorithm();
                    case 59:
                        return (T) WMShellBaseModule_ProvideEnterSplitGestureHandlerFactory.provideEnterSplitGestureHandler(this.tvGlobalRootComponent.context, (ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (Handler) this.tvWMComponentImpl.provideShellMainHandlerProvider.get(), (DisplayController) this.tvWMComponentImpl.provideDisplayControllerProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get(), (IWindowManager) this.tvGlobalRootComponent.provideIWindowManagerProvider.get(), (Optional) this.tvWMComponentImpl.providesSplitScreenControllerProvider.get());
                    case 60:
                        return (T) new ProtoLogController((ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (ShellCommandHandler) this.tvWMComponentImpl.provideShellCommandHandlerProvider.get());
                    case 61:
                        return (T) WMShellBaseModule_ProvideOneHandedFactory.provideOneHanded((Optional) this.tvWMComponentImpl.providesOneHandedControllerProvider.get());
                    case 62:
                        return (T) WMShellBaseModule_ProvideSplitScreenFactory.provideSplitScreen((Optional) this.tvWMComponentImpl.providesSplitScreenControllerProvider.get());
                    case 63:
                        return (T) WMShellBaseModule_ProvideBubblesFactory.provideBubbles(Optional.empty());
                    case 64:
                        T t4 = (T) Optional.of(((TaskViewFactoryController) this.tvWMComponentImpl.provideTaskViewFactoryControllerProvider.get()).mImpl);
                        Preconditions.checkNotNullFromProvides(t4);
                        return t4;
                    case 65:
                        return (T) new TaskViewFactoryController((ShellTaskOrganizer) this.tvWMComponentImpl.provideShellTaskOrganizerProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get(), (SyncTransactionQueue) this.tvWMComponentImpl.provideSyncTransactionQueueProvider.get(), (TaskViewTransitions) this.tvWMComponentImpl.provideTaskViewTransitionsProvider.get());
                    case 66:
                        return (T) new TaskViewTransitions((Transitions) this.tvWMComponentImpl.provideTransitionsProvider.get());
                    case 67:
                        T t5 = (T) ((Transitions) this.tvWMComponentImpl.provideTransitionsProvider.get()).mImpl;
                        Preconditions.checkNotNullFromProvides(t5);
                        return t5;
                    case 68:
                        KeyguardTransitionHandler keyguardTransitionHandler = (KeyguardTransitionHandler) this.tvWMComponentImpl.provideKeyguardTransitionHandlerProvider.get();
                        keyguardTransitionHandler.getClass();
                        return (T) new KeyguardTransitionHandler.KeyguardTransitionsImpl(keyguardTransitionHandler, 0);
                    case 69:
                        return (T) new KeyguardTransitionHandler((ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (Transitions) this.tvWMComponentImpl.provideTransitionsProvider.get(), (Handler) this.tvWMComponentImpl.provideShellMainHandlerProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get());
                    case 70:
                        T t6 = (T) Optional.of(((StartingWindowController) this.tvWMComponentImpl.provideStartingWindowControllerProvider.get()).mImpl);
                        Preconditions.checkNotNullFromProvides(t6);
                        return t6;
                    case 71:
                        T t7 = (T) Optional.of(new DisplayAreaHelperController((ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get(), (RootDisplayAreaOrganizer) this.tvWMComponentImpl.provideRootDisplayAreaOrganizerProvider.get()));
                        Preconditions.checkNotNullFromProvides(t7);
                        return t7;
                    case 72:
                        return (T) new RootDisplayAreaOrganizer((ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get());
                    case 73:
                        return (T) WMShellBaseModule_ProvideRecentTasksFactory.provideRecentTasks((Optional) this.tvWMComponentImpl.provideRecentTasksControllerProvider.get());
                    case 74:
                        return (T) WMShellBaseModule_ProvideBackAnimationFactory.provideBackAnimation((Optional) this.tvWMComponentImpl.provideBackAnimationControllerProvider.get());
                    case 75:
                        return (T) WMShellBaseModule_ProvideBackAnimationControllerFactory.provideBackAnimationController((ShellInit) this.tvWMComponentImpl.provideShellInitProvider.get(), (ShellController) this.tvWMComponentImpl.provideShellControllerProvider.get(), (ShellExecutor) this.tvWMComponentImpl.provideShellMainExecutorProvider.get(), (Handler) this.tvWMComponentImpl.provideSharedBackgroundHandlerProvider.get(), this.tvGlobalRootComponent.context, (BackAnimationBackground) this.tvWMComponentImpl.provideBackAnimationBackgroundProvider.get());
                    case 76:
                        return (T) WMShellConcurrencyModule_ProvideSharedBackgroundHandlerFactory.provideSharedBackgroundHandler();
                    case 77:
                        return (T) new BackAnimationBackground((RootTaskDisplayAreaOrganizer) this.tvWMComponentImpl.provideRootTaskDisplayAreaOrganizerProvider.get());
                    case 78:
                        return (T) WMShellBaseModule_ProvideDesktopModeFactory.provideDesktopMode((Optional) this.tvWMComponentImpl.provideDesktopModeControllerProvider.get(), (Optional) this.tvWMComponentImpl.providesDesktopTasksControllerProvider.get());
                    case 79:
                        return (T) WMShellBaseModule_ProvideDesktopModeControllerFactory.provideDesktopModeController(Optional.empty());
                    case 80:
                        return (T) WMShellBaseModule_ProvidesDesktopTasksControllerFactory.providesDesktopTasksController(Optional.empty());
                    case 81:
                        T t8 = (T) Optional.of((DisplayController) this.tvWMComponentImpl.provideDisplayControllerProvider.get());
                        Preconditions.checkNotNullFromProvides(t8);
                        return t8;
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ TvWMComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, HandlerThread handlerThread, int i) {
            this(daggerTvGlobalRootComponent, handlerThread);
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<BackAnimationController.BackAnimationImpl> getBackAnimation() {
            return (Optional) this.provideBackAnimationProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<Bubbles> getBubbles() {
            return (Optional) this.provideBubblesProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<DesktopMode> getDesktopMode() {
            return (Optional) this.provideDesktopModeProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<Object> getDisplayAreaHelper() {
            return (Optional) this.provideDisplayAreaHelperProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<DisplayController> getDisplayController() {
            return (Optional) this.provideDisplayControllerOptionalProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<EnterSplitGestureHandler> getEnterSplitGestureHandler() {
            return (Optional) this.provideEnterSplitGestureHandlerProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final KeyguardTransitions getKeyguardTransitions() {
            return (KeyguardTransitions) this.provideKeyguardTransitionsProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<OneHanded> getOneHanded() {
            return (Optional) this.provideOneHandedProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<Pip> getPip() {
            return (Optional) this.providePipProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<RecentTasks> getRecentTasks() {
            return (Optional) this.provideRecentTasksProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final ShellInterface getShell() {
            return (ShellInterface) this.provideShellSysuiCallbacksProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<SplitScreen> getSplitScreen() {
            return (Optional) this.provideSplitScreenProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<SplitScreenController> getSplitScreenController() {
            return (Optional) this.providesSplitScreenControllerProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<StartingWindowController.StartingSurfaceImpl> getStartingSurface() {
            return (Optional) this.provideStartingSurfaceProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<TaskViewFactoryController.TaskViewFactoryImpl> getTaskViewFactory() {
            return (Optional) this.provideTaskViewFactoryProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final ShellTransitions getTransitions() {
            return (ShellTransitions) this.provideRemoteTransitionsProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final /* bridge */ /* synthetic */ void init() {
            super.init();
        }

        public final void initialize(HandlerThread handlerThread) {
            this.provideShellMainHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 5));
            this.provideSysUIMainExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 6));
            this.provideShellMainExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 4));
            this.provideShellInitProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 3));
            this.provideShellCommandHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 8));
            this.provideShellControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 7));
            this.provideDisplayControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 2));
            this.provideDisplayInsetsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 10));
            this.provideTransactionPoolProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 11));
            this.provideSyncTransactionQueueProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 15));
            this.dockStateReaderProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 16));
            this.compatUIConfigurationProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 17));
            this.compatUIShellCommandHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 18));
            this.provideCompatUIControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 14));
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            this.dynamicOverrideOptionalOfUnfoldAnimationControllerProvider = provider;
            this.provideUnfoldControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 19));
            this.providerTaskStackListenerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 21));
            this.provideDesktopTaskRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 22));
            this.provideRecentTasksControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 20));
            this.provideShellTaskOrganizerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 13));
            this.provideShellAnimationExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 23));
            this.provideRootTaskDisplayAreaOrganizerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 24));
            this.provideTransitionsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 12));
            this.provideDisplayImeControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 9));
            this.provideIconProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 26));
            this.provideDragAndDropControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 25));
            this.provideSystemWindowsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 29));
            this.provideSplitScreenControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 28));
            this.providesSplitScreenControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 27));
            this.pipDisplayLayoutStateProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 33));
            this.providePipSizeSpecHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 32));
            this.provideTvPipBoundsStateProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 31));
            this.providePipSnapAlgorithmProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 35));
            this.provideTvPipBoundsAlgorithmProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 34));
            this.provideTvPipBoundsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 36));
            this.providesTvPipMenuControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 39));
            this.providePipTransitionStateProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 40));
            this.providePipSurfaceTransactionHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 42));
            this.providePipAnimationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 41));
            this.provideTvPipTransitionProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 43));
            this.providePipParamsChangedForwarderProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 44));
            this.providePipUiEventLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 45));
            this.providePipTaskOrganizerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 38));
            this.providePipAppOpsListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 37));
            this.providePipMediaControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 46));
            this.provideTvPipNotificationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 47));
            this.provideWindowManagerShellWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 48));
            this.providePipProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 30));
            this.provideFullscreenTaskListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 49));
            this.dynamicOverrideOptionalOfUnfoldTransitionHandlerProvider = provider;
            this.provideUnfoldTransitionHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 50));
            this.provideFreeformComponentsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 51));
            this.providesOneHandedControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 52));
            this.provideHideDisplayCutoutControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 53));
            this.provideActivityEmbeddingControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 54));
            this.provideSplashScreenExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 56));
            this.provideStartingWindowTypeAlgorithmProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 58));
            this.provideStartingWindowTypeAlgorithmProvider2 = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 57));
            this.provideStartingWindowControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 55));
            this.provideEnterSplitGestureHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 59));
            this.provideProtoLogControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 60));
            this.provideIndependentShellComponentsToCreateProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 1));
            this.provideShellSysuiCallbacksProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 0));
            this.provideOneHandedProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 61));
            this.provideSplitScreenProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 62));
            this.provideBubblesProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 63));
            this.provideTaskViewTransitionsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 66));
            this.provideTaskViewFactoryControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 65));
            this.provideTaskViewFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 64));
            this.provideRemoteTransitionsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 67));
            this.provideKeyguardTransitionHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 69));
            this.provideKeyguardTransitionsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 68));
            this.provideStartingSurfaceProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 70));
            this.provideRootDisplayAreaOrganizerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 72));
            this.provideDisplayAreaHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 71));
            this.provideRecentTasksProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 73));
            this.provideSharedBackgroundHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 76));
            this.provideBackAnimationBackgroundProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 77));
            this.provideBackAnimationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 75));
            this.provideBackAnimationProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 74));
            this.provideDesktopModeControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 79));
            this.providesDesktopTasksControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 80));
            this.provideDesktopModeProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 78));
            this.provideDisplayControllerOptionalProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvWMComponentImpl, 81));
        }

        private TvWMComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, HandlerThread handlerThread) {
            this.tvWMComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.setShellMainThread = handlerThread;
            initialize(handlerThread);
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class ViewInstanceCreatorFactory implements InjectionInflationController.ViewInstanceCreator.Factory {
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ ViewInstanceCreatorFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.systemui.qs.InjectionInflationController.ViewInstanceCreator.Factory
        public final InjectionInflationController.ViewInstanceCreator build(Context context, AttributeSet attributeSet) {
            context.getClass();
            attributeSet.getClass();
            return new ViewInstanceCreatorImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, context, attributeSet, 0);
        }

        private ViewInstanceCreatorFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class ViewInstanceCreatorImpl implements InjectionInflationController.ViewInstanceCreator {
        public final AttributeSet attributeSet;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;
        public final ViewInstanceCreatorImpl viewInstanceCreatorImpl;

        public /* synthetic */ ViewInstanceCreatorImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, Context context, AttributeSet attributeSet, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, context, attributeSet);
        }

        public final SubroomQuickSettingsBaseView createSubroomQuickSettingsBaseView() {
            return new SubroomQuickSettingsBaseView(this.tvGlobalRootComponent.context, this.attributeSet);
        }

        private ViewInstanceCreatorImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, Context context, AttributeSet attributeSet) {
            this.viewInstanceCreatorImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.attributeSet = attributeSet;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class cascd_ComplicationComponentFactory implements ComplicationComponent.Factory {
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ cascd_ComplicationComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.systemui.complication.dagger.ComplicationComponent.Factory
        public final ComplicationComponent create(LifecycleOwner lifecycleOwner, Complication.Host host, ViewModelStore viewModelStore, TouchInsetManager touchInsetManager) {
            lifecycleOwner.getClass();
            host.getClass();
            viewModelStore.getClass();
            touchInsetManager.getClass();
            return new cascd_ComplicationComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, lifecycleOwner, host, viewModelStore, touchInsetManager, 0);
        }

        private cascd_ComplicationComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class cascd_ComplicationComponentImpl implements ComplicationComponent {
        public final cascd_ComplicationComponentImpl cascd_ComplicationComponentImpl;
        public Provider complicationLayoutEngineProvider;
        public final Complication.Host host;
        public final LifecycleOwner lifecycleOwner;
        public Provider providesComplicationHostViewProvider;
        public final TouchInsetManager touchInsetManager;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;
        public final ViewModelStore viewModelStore;

        /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
        /* loaded from: classes2.dex */
        public static final class SwitchingProvider<T> implements Provider {
            public final cascd_ComplicationComponentImpl cascd_ComplicationComponentImpl;
            public final int id;
            public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
            public final TvSysUIComponentImpl tvSysUIComponentImpl;

            public SwitchingProvider(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, cascd_ComplicationComponentImpl cascd_complicationcomponentimpl, int i) {
                this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
                this.tvSysUIComponentImpl = tvSysUIComponentImpl;
                this.cascd_ComplicationComponentImpl = cascd_complicationcomponentimpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                int i = this.id;
                if (i != 0) {
                    if (i == 1) {
                        return (T) new ComplicationLayoutEngine((ConstraintLayout) this.cascd_ComplicationComponentImpl.providesComplicationHostViewProvider.get(), this.cascd_ComplicationComponentImpl.namedInteger(), this.cascd_ComplicationComponentImpl.namedInteger2(), this.cascd_ComplicationComponentImpl.namedInteger3(), this.cascd_ComplicationComponentImpl.namedInteger4(), this.cascd_ComplicationComponentImpl.namedInteger5(), this.cascd_ComplicationComponentImpl.touchInsetSession(), this.cascd_ComplicationComponentImpl.namedInteger6(), this.cascd_ComplicationComponentImpl.namedInteger7());
                    }
                    throw new AssertionError(this.id);
                }
                return (T) ComplicationHostViewModule_ProvidesComplicationHostViewFactory.providesComplicationHostView((LayoutInflater) this.tvGlobalRootComponent.providerLayoutInflaterProvider.get());
            }
        }

        public /* synthetic */ cascd_ComplicationComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, LifecycleOwner lifecycleOwner, Complication.Host host, ViewModelStore viewModelStore, TouchInsetManager touchInsetManager, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, lifecycleOwner, host, viewModelStore, touchInsetManager);
        }

        public final ComplicationCollectionLiveData complicationCollectionLiveData() {
            return new ComplicationCollectionLiveData((DreamOverlayStateController) this.tvSysUIComponentImpl.dreamOverlayStateControllerProvider.get());
        }

        public final ComplicationCollectionViewModel complicationCollectionViewModel() {
            return new ComplicationCollectionViewModel(complicationCollectionLiveData(), complicationViewModelTransformer());
        }

        public final ComplicationViewModelTransformer complicationViewModelTransformer() {
            return new ComplicationViewModelTransformer(new ComplicationViewModelComponentFactory(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.cascd_ComplicationComponentImpl, 0));
        }

        @Override // com.android.systemui.complication.dagger.ComplicationComponent
        public final ComplicationHostViewController getComplicationHostViewController() {
            return new ComplicationHostViewController((ConstraintLayout) this.providesComplicationHostViewProvider.get(), (ComplicationLayoutEngine) this.complicationLayoutEngineProvider.get(), (DreamOverlayStateController) this.tvSysUIComponentImpl.dreamOverlayStateControllerProvider.get(), this.lifecycleOwner, namedComplicationCollectionViewModel(), (SecureSettings) this.tvSysUIComponentImpl.secureSettingsImpl());
        }

        @Override // com.android.systemui.complication.dagger.ComplicationComponent
        public final ComplicationLayoutEngine getVisibilityController() {
            return (ComplicationLayoutEngine) this.complicationLayoutEngineProvider.get();
        }

        public final void initialize(LifecycleOwner lifecycleOwner, Complication.Host host, ViewModelStore viewModelStore, TouchInsetManager touchInsetManager) {
            this.providesComplicationHostViewProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.cascd_ComplicationComponentImpl, 0));
            this.complicationLayoutEngineProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, this.cascd_ComplicationComponentImpl, 1));
        }

        public final ComplicationCollectionViewModel namedComplicationCollectionViewModel() {
            return ComplicationModule_ProvidesComplicationCollectionViewModelFactory.providesComplicationCollectionViewModel(this.viewModelStore, complicationCollectionViewModel());
        }

        public final int namedInteger() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return daggerTvGlobalRootComponent.mainResources().getDimensionPixelSize(R.dimen.dream_overlay_complication_margin);
        }

        public final int namedInteger2() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return daggerTvGlobalRootComponent.mainResources().getDimensionPixelSize(R.dimen.dream_overlay_container_padding_start);
        }

        public final int namedInteger3() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return daggerTvGlobalRootComponent.mainResources().getDimensionPixelSize(R.dimen.dream_overlay_container_padding_top);
        }

        public final int namedInteger4() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return daggerTvGlobalRootComponent.mainResources().getDimensionPixelSize(R.dimen.dream_overlay_container_padding_end);
        }

        public final int namedInteger5() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return daggerTvGlobalRootComponent.mainResources().getDimensionPixelSize(R.dimen.dream_overlay_container_padding_bottom);
        }

        public final int namedInteger6() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return daggerTvGlobalRootComponent.mainResources().getInteger(R.integer.complicationFadeInMs);
        }

        public final int namedInteger7() {
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            return daggerTvGlobalRootComponent.mainResources().getInteger(R.integer.complicationFadeOutMs);
        }

        public final TouchInsetManager.TouchInsetSession touchInsetSession() {
            return this.touchInsetManager.createSession();
        }

        private cascd_ComplicationComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, LifecycleOwner lifecycleOwner, Complication.Host host, ViewModelStore viewModelStore, TouchInsetManager touchInsetManager) {
            this.cascd_ComplicationComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.touchInsetManager = touchInsetManager;
            this.lifecycleOwner = lifecycleOwner;
            this.viewModelStore = viewModelStore;
            this.host = host;
            initialize(lifecycleOwner, host, viewModelStore, touchInsetManager);
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class casdcd_ComplicationComponentFactory implements ComplicationComponent.Factory {
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;

        public /* synthetic */ casdcd_ComplicationComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl);
        }

        @Override // com.android.systemui.dreams.complication.dagger.ComplicationComponent.Factory
        public final com.android.systemui.dreams.complication.dagger.ComplicationComponent create(Complication.VisibilityController visibilityController, TouchInsetManager touchInsetManager) {
            visibilityController.getClass();
            touchInsetManager.getClass();
            return new casdcd_ComplicationComponentImpl(this.tvGlobalRootComponent, this.tvSysUIComponentImpl, visibilityController, touchInsetManager, 0);
        }

        private casdcd_ComplicationComponentFactory(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl) {
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
        }
    }

    /* compiled from: qb/87000731 7862a37e62df4d72b2921859baacdc80ea0c935793521606c8e11db53cc87e4f */
    /* loaded from: classes2.dex */
    public static final class casdcd_ComplicationComponentImpl implements com.android.systemui.dreams.complication.dagger.ComplicationComponent {
        public final casdcd_ComplicationComponentImpl casdcd_ComplicationComponentImpl;
        public final TouchInsetManager touchInsetManager;
        public final DaggerTvGlobalRootComponent tvGlobalRootComponent;
        public final TvSysUIComponentImpl tvSysUIComponentImpl;
        public final Complication.VisibilityController visibilityController;

        public /* synthetic */ casdcd_ComplicationComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, Complication.VisibilityController visibilityController, TouchInsetManager touchInsetManager, int i) {
            this(daggerTvGlobalRootComponent, tvSysUIComponentImpl, visibilityController, touchInsetManager);
        }

        @Override // com.android.systemui.dreams.complication.dagger.ComplicationComponent
        public final HideComplicationTouchHandler getHideComplicationTouchHandler() {
            return new HideComplicationTouchHandler(this.visibilityController, namedInteger(), namedInteger2(), this.touchInsetManager, (StatusBarKeyguardViewManager) this.tvSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (DelayableExecutor) this.tvGlobalRootComponent.provideMainDelayableExecutorProvider.get(), (DreamOverlayStateController) this.tvSysUIComponentImpl.dreamOverlayStateControllerProvider.get());
        }

        public final int namedInteger() {
            ComplicationModule complicationModule = ComplicationModule.INSTANCE;
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            Resources mainResources = daggerTvGlobalRootComponent.mainResources();
            complicationModule.getClass();
            return mainResources.getInteger(R.integer.complicationRestoreMs);
        }

        public final int namedInteger2() {
            ComplicationModule complicationModule = ComplicationModule.INSTANCE;
            DaggerTvGlobalRootComponent daggerTvGlobalRootComponent = this.tvGlobalRootComponent;
            Provider provider = DaggerTvGlobalRootComponent.ABSENT_JDK_OPTIONAL_PROVIDER;
            Resources mainResources = daggerTvGlobalRootComponent.mainResources();
            complicationModule.getClass();
            return mainResources.getInteger(R.integer.complicationFadeOutDelayMs);
        }

        private casdcd_ComplicationComponentImpl(DaggerTvGlobalRootComponent daggerTvGlobalRootComponent, TvSysUIComponentImpl tvSysUIComponentImpl, Complication.VisibilityController visibilityController, TouchInsetManager touchInsetManager) {
            this.casdcd_ComplicationComponentImpl = this;
            this.tvGlobalRootComponent = daggerTvGlobalRootComponent;
            this.tvSysUIComponentImpl = tvSysUIComponentImpl;
            this.visibilityController = visibilityController;
            this.touchInsetManager = touchInsetManager;
        }
    }

    public /* synthetic */ DaggerTvGlobalRootComponent(GlobalModule globalModule, AndroidInternalsModule androidInternalsModule, FrameworkServicesModule frameworkServicesModule, UnfoldTransitionModule unfoldTransitionModule, UnfoldSharedModule unfoldSharedModule, UnfoldSharedInternalModule unfoldSharedInternalModule, Context context, Boolean bool, int i) {
        this(globalModule, androidInternalsModule, frameworkServicesModule, unfoldTransitionModule, unfoldSharedModule, unfoldSharedInternalModule, context, bool);
    }

    public static <T> Provider absentJdkOptionalProvider() {
        return ABSENT_JDK_OPTIONAL_PROVIDER;
    }

    public static TvGlobalRootComponent.Builder builder() {
        return new Builder(0);
    }

    public final ATraceLoggerTransitionProgressListener aTraceLoggerTransitionProgressListener() {
        this.unfoldTransitionModule.getClass();
        return new ATraceLoggerTransitionProgressListener("systemui");
    }

    public final AmbientDisplayConfiguration ambientDisplayConfiguration() {
        FrameworkServicesModule frameworkServicesModule = this.frameworkServicesModule;
        Context context = this.context;
        frameworkServicesModule.getClass();
        return new AmbientDisplayConfiguration(context);
    }

    public final DeviceFoldStateProvider deviceFoldStateProvider() {
        return new DeviceFoldStateProvider((UnfoldTransitionConfig) this.resourceUnfoldTransitionConfigProvider.get(), hingeAngleProvider(), screenStatusProvider(), (FoldProvider) this.deviceStateManagerFoldProvider.get(), (CurrentActivityTypeProvider) this.activityManagerActivityTypeProvider.get(), (UnfoldKeyguardVisibilityProvider) this.unfoldKeyguardVisibilityProvider.get(), rotationChangeProvider(), this.context, (Executor) this.provideMainExecutorProvider.get(), (Handler) this.provideMainHandlerProvider.get());
    }

    public final int displayIdInteger() {
        return this.context.getDisplayId();
    }

    @Override // com.android.systemui.dagger.GlobalRootComponent
    public final InitializationChecker getInitializationChecker() {
        return new InitializationChecker(this.instrumentationTest.booleanValue());
    }

    public final HingeAngleProvider hingeAngleProvider() {
        return UnfoldSharedInternalModule_HingeAngleProviderFactory.hingeAngleProvider(this.unfoldSharedInternalModule, (UnfoldTransitionConfig) this.resourceUnfoldTransitionConfigProvider.get(), this.hingeSensorAngleProvider);
    }

    public final void initialize(GlobalModule globalModule, AndroidInternalsModule androidInternalsModule, FrameworkServicesModule frameworkServicesModule, UnfoldTransitionModule unfoldTransitionModule, UnfoldSharedModule unfoldSharedModule, UnfoldSharedInternalModule unfoldSharedInternalModule, Context context, Boolean bool) {
        this.provideIWindowManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 0));
        this.resourceUnfoldTransitionConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 2));
        this.provideContentResolverProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 5));
        this.factoryProvider = SingleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 4));
        this.providesSensorManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 9));
        this.provideUiBackgroundExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 10));
        this.hingeSensorAngleProvider = new SwitchingProvider(this.tvGlobalRootComponent, 8);
        this.dumpManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 13));
        this.screenLifecycleProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 12));
        this.lifecycleScreenStatusProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 11));
        this.provideDeviceStateManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 15));
        this.deviceStateManagerFoldProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 14));
        this.provideActivityManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 17));
        this.activityManagerActivityTypeProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 16));
        this.unfoldKeyguardVisibilityManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 19));
        this.unfoldKeyguardVisibilityProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 18));
        this.provideDisplayManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 20));
        this.provideMainLooperProvider = new SwitchingProvider(this.tvGlobalRootComponent, 22);
        this.provideMainHandlerProvider = new SwitchingProvider(this.tvGlobalRootComponent, 21);
        this.provideMainExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 23));
        this.provideFoldStateProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 7));
        this.physicsBasedUnfoldTransitionProgressProvider = new SwitchingProvider(this.tvGlobalRootComponent, 6);
        this.fixedTimingTransitionProgressProvider = new SwitchingProvider(this.tvGlobalRootComponent, 24);
        this.unfoldTransitionProgressProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 3));
        this.provideUnfoldOnlyProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 25));
        this.provideShellProgressProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 1));
        this.provideActivityTaskManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 26));
        this.provideUiEventLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 27));
        this.providePackageManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 28));
        this.provideUserManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 29));
        this.provideIActivityManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 30));
        this.provideMetricsLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 31));
        this.providesPluginExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 34));
        this.provideNotificationManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 35));
        this.pluginEnablerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 36));
        this.providesPluginInstanceFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 37));
        this.providePluginInstanceManagerFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 33));
        this.uncaughtExceptionPreHandlerManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 38));
        this.providesPluginManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 32));
        this.provideDisplayMetricsProvider = new SwitchingProvider(this.tvGlobalRootComponent, 39);
        this.providePowerManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 40));
        this.provideApplicationContextProvider = new SwitchingProvider(this.tvGlobalRootComponent, 42);
        this.providesFoldStateListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 41));
        this.provideViewConfigurationProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 43));
        this.provideIBatteryStatsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 44));
        this.noLogcatEchoTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 45));
        this.provideInteractionJankMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 46));
        this.providesChoreographerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 47));
        this.provideMainDelayableExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 48));
        this.provideIWallPaperManagerProvider = new SwitchingProvider(this.tvGlobalRootComponent, 49);
        this.provideIStatusBarServiceProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 50));
        this.provideIsTestHarnessProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 51));
        SwitchingProvider switchingProvider = new SwitchingProvider(this.tvGlobalRootComponent, 52);
        this.executionImplProvider = switchingProvider;
        this.provideExecutionProvider = DoubleCheck.provider(switchingProvider);
        this.provideWindowManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 53));
        this.providesFingerprintManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 54));
        this.provideFaceManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 55));
        this.providerLayoutInflaterProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 56));
        this.provideAccessibilityManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 57));
        this.provideDevicePolicyManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 58));
        this.buildInfoProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 59));
        this.provideLockPatternUtilsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 60));
        this.provideNaturalRotationProgressProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 61));
        this.provideStatusBarScopedTransitionProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 62));
        this.provideAlarmManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 63));
        this.provideVibratorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 64));
        this.provideTrustManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 65));
        this.provideKeyguardManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 66));
        this.provideSmartspaceManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 67));
        this.provideLatencyTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 68));
        this.vibrationUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 69));
        this.coverUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 70));
        this.externalClockProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 71));
        this.provideSatelliteManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 72));
        this.provideConnectivityManagagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 73));
        this.provideSubscriptionManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 74));
        this.provideTelephonyManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 75));
        this.provideWifiManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 76));
        this.provideCarrierConfigManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 77));
        this.provideAudioManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 78));
        this.provideSensorPrivacyManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 79));
        this.provideColorDisplayManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 80));
        this.provideIDreamManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 81));
        this.providesBiometricManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 82));
        this.provideNetworkScoreManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 83));
        this.provideBluetoothManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 85));
        this.provideBluetoothAdapterProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 84));
        this.provideCameraManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 86));
        this.providePermissionManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 87));
        this.provideSafetyCenterManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 88));
        this.provideINotificationManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 89));
        this.provideLauncherAppsProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 90));
        this.provideShortcutManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 91));
        this.provideIActivityTaskManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 92));
        this.provideRoleManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 93));
        this.provideInputManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 94));
        this.providePackageManagerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 95));
        this.provideStatsManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 96));
        this.unfoldTransitionProgressForwarderProvider = new SwitchingProvider(this.tvGlobalRootComponent, 98);
        this.provideProgressForwarderProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 97));
    }

    public final void initialize2(GlobalModule globalModule, AndroidInternalsModule androidInternalsModule, FrameworkServicesModule frameworkServicesModule, UnfoldTransitionModule unfoldTransitionModule, UnfoldSharedModule unfoldSharedModule, UnfoldSharedInternalModule unfoldSharedInternalModule, Context context, Boolean bool) {
        this.provideJobSchedulerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 99));
        this.provideCrossWindowBlurListenersProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 100));
        this.provideIAudioServiceProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 101));
        this.provideCaptioningManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 102));
        this.pluginDependencyProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 103));
        this.providePowerExemptionManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 104));
        this.provideTelecomManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 105));
        this.provideUiModeManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 106));
        this.provideAppOpsManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 107));
        this.providesFoldStateLoggingProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 108));
        this.providesFoldStateLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 109));
        this.coverUtilWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 110));
        this.provideStorageManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 111));
        this.provideOverlayManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 112));
        this.unfoldKeyguardVisibilityManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 113));
        this.provideIPackageManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 114));
        this.provideOptionalTelecomManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 115));
        this.provideInputMethodManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 116));
        this.multiShadeInputProxyProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 117));
        this.provideOptionalVibratorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 118));
        this.provideAsyncLayoutInflaterProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 119));
        this.lowLightTransitionCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.tvGlobalRootComponent, 120));
    }

    public final Resources mainResources() {
        Resources resources = this.context.getResources();
        Preconditions.checkNotNullFromProvides(resources);
        return resources;
    }

    public final SharedPreferences mainSharedPreferences() {
        return FrameworkServicesModule_ProvideSharePreferencesFactory.provideSharePreferences(this.frameworkServicesModule, this.context);
    }

    public final MediaProjectionManager mediaProjectionManager() {
        MediaProjectionManager mediaProjectionManager = (MediaProjectionManager) this.context.getSystemService(MediaProjectionManager.class);
        Preconditions.checkNotNullFromProvides(mediaProjectionManager);
        return mediaProjectionManager;
    }

    public final MediaRouter2Manager mediaRouter2Manager() {
        MediaRouter2Manager mediaRouter2Manager = MediaRouter2Manager.getInstance(this.context);
        Preconditions.checkNotNullFromProvides(mediaRouter2Manager);
        return mediaRouter2Manager;
    }

    public final MediaSessionManager mediaSessionManager() {
        MediaSessionManager mediaSessionManager = (MediaSessionManager) this.context.getSystemService(MediaSessionManager.class);
        Preconditions.checkNotNullFromProvides(mediaSessionManager);
        return mediaSessionManager;
    }

    public final List<String> namedListOfString() {
        return PluginsModule_ProvidesPrivilegedPluginsFactory.providesPrivilegedPlugins(this.context);
    }

    public final NotificationMessagingUtil notificationMessagingUtil() {
        AndroidInternalsModule androidInternalsModule = this.androidInternalsModule;
        Context context = this.context;
        androidInternalsModule.getClass();
        return new NotificationMessagingUtil(context, (Object) null);
    }

    public final PluginPrefs pluginPrefs() {
        return PluginsModule_ProvidesPluginPrefsFactory.providesPluginPrefs(this.context);
    }

    public final RotationChangeProvider rotationChangeProvider() {
        return new RotationChangeProvider((DisplayManager) this.provideDisplayManagerProvider.get(), this.context, (Handler) this.provideMainHandlerProvider.get());
    }

    public final ScreenStatusProvider screenStatusProvider() {
        UnfoldTransitionModule unfoldTransitionModule = this.unfoldTransitionModule;
        LifecycleScreenStatusProvider lifecycleScreenStatusProvider = (LifecycleScreenStatusProvider) this.lifecycleScreenStatusProvider.get();
        unfoldTransitionModule.getClass();
        return lifecycleScreenStatusProvider;
    }

    public final SemWifiManager semWifiManager() {
        SemWifiManager semWifiManager = (SemWifiManager) this.context.getSystemService(WiFiManagerExt.SEM_WIFI_SERVICE);
        Preconditions.checkNotNullFromProvides(semWifiManager);
        return semWifiManager;
    }

    public final WallpaperManager wallpaperManager() {
        WallpaperManager wallpaperManager = (WallpaperManager) this.context.getSystemService(WallpaperManager.class);
        Preconditions.checkNotNullFromProvides(wallpaperManager);
        return wallpaperManager;
    }

    private DaggerTvGlobalRootComponent(GlobalModule globalModule, AndroidInternalsModule androidInternalsModule, FrameworkServicesModule frameworkServicesModule, UnfoldTransitionModule unfoldTransitionModule, UnfoldSharedModule unfoldSharedModule, UnfoldSharedInternalModule unfoldSharedInternalModule, Context context, Boolean bool) {
        this.tvGlobalRootComponent = this;
        this.instrumentationTest = bool;
        this.context = context;
        this.unfoldTransitionModule = unfoldTransitionModule;
        this.unfoldSharedInternalModule = unfoldSharedInternalModule;
        this.unfoldSharedModule = unfoldSharedModule;
        this.androidInternalsModule = androidInternalsModule;
        this.globalModule = globalModule;
        this.frameworkServicesModule = frameworkServicesModule;
        initialize(globalModule, androidInternalsModule, frameworkServicesModule, unfoldTransitionModule, unfoldSharedModule, unfoldSharedInternalModule, context, bool);
        initialize2(globalModule, androidInternalsModule, frameworkServicesModule, unfoldTransitionModule, unfoldSharedModule, unfoldSharedInternalModule, context, bool);
    }

    @Override // com.android.systemui.dagger.GlobalRootComponent
    public final TvSysUIComponent.Builder getSysUIComponent() {
        return new TvSysUIComponentBuilder(this.tvGlobalRootComponent, 0);
    }

    @Override // com.android.systemui.dagger.GlobalRootComponent
    public final TvWMComponent.Builder getWMComponentBuilder() {
        return new TvWMComponentBuilder(this.tvGlobalRootComponent, 0);
    }
}
